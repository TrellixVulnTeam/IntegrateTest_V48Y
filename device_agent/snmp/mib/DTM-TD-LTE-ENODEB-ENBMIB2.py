#
# PySNMP MIB module DTM-TD-LTE-ENODEB-ENBMIB (http://snmplabs.com/pysmi)
# ASN.1 source file://\Python27\Scripts\55\enb2018-06-29.mib
# Produced by pysmi-0.3.1 at Thu Jul 19 23:07:25 2018
# On host ? platform ? version ? by user ?
# Using Python version 2.7.15 (v2.7.15:ca079a3ea3, Apr 30 2018, 16:22:17) [MSC v.1500 32 bit (Intel)]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Bits, TimeTicks, Counter64, Unsigned32, enterprises, ModuleIdentity, Gauge32, iso, ObjectIdentity, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Bits", "TimeTicks", "Counter64", "Unsigned32", "enterprises", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "IpAddress", "Counter32")
MacAddress, VariablePointer, TextualConvention, DateAndTime, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "VariablePointer", "TextualConvention", "DateAndTime", "RowStatus", "DisplayString")
dtm = ModuleIdentity((1, 3, 6, 1, 4, 1, 5105))
if mibBuilder.loadTexts: dtm.setLastUpdated('0212240000Z')
if mibBuilder.loadTexts: dtm.setOrganization('Datang Mobile Technology CO., LTD')
class InetAddressType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + SingleValueConstraint(0, 1, 2)
    namedValues = NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2))

class InetAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 16)

class Unsigned32Array(TextualConvention, OctetString):
    status = 'current'
    displayHint = '{Unsigned32,Unsigned32,...,Unsigned32}'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 256)

class Integer32Array(TextualConvention, OctetString):
    status = 'current'
    displayHint = '{Integer32,Integer32,...,Integer32}'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 256)

class MncMccType(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1d1d1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

lte = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100))
lteCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1))
faultManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1))
alarmGeneralManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1))
alarmCauseTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alarmCauseTable.setStatus('current')
alarmCauseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "alarmCauseNo"))
if mibBuilder.loadTexts: alarmCauseEntry.setStatus('current')
alarmCauseNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: alarmCauseNo.setStatus('current')
alarmCauseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCauseRowStatus.setStatus('current')
alarmCauseSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 6)).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warn", 4), ("clear", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmCauseSeverity.setStatus('current')
alarmCauseIsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("valid", 0), ("invalid", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmCauseIsValid.setStatus('current')
alarmCauseType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("communication", 1), ("qos", 2), ("processing", 3), ("equipment", 4), ("environment", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCauseType.setStatus('current')
alarmCauseClearStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("adac", 1), ("admc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCauseClearStyle.setStatus('current')
alarmCauseToAlarmBox = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmCauseToAlarmBox.setStatus('current')
alarmCauseItfNProtocolCauseNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCauseItfNProtocolCauseNo.setStatus('current')
alarmCauseIsStateful = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("stateful", 0), ("stateless", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCauseIsStateful.setStatus('current')
alarmCausePrimaryAlarmCauseNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2500), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCausePrimaryAlarmCauseNo.setStatus('current')
alarmCauseStatefulClearDeditheringInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmCauseStatefulClearDeditheringInterval.setStatus('current')
alarmCauseStatefulCreateDeditheringInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmCauseStatefulCreateDeditheringInterval.setStatus('current')
alarmCauseStatefulDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmCauseStatefulDelayTime.setStatus('current')
alarmCauseCompressionInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmCauseCompressionInterval.setStatus('current')
alarmCauseCompressionRepetitions = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmCauseCompressionRepetitions.setStatus('current')
alarmCauseAutoProcessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("closed", 0), ("objectAutoReset", 1), ("neAutoReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmCauseAutoProcessPolicy.setStatus('current')
alarmCauseProcessFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("closed", 0), ("denyAccess", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmCauseProcessFlag.setStatus('current')
efdTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 2), )
if mibBuilder.loadTexts: efdTable.setStatus('current')
efdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "efdIndex"))
if mibBuilder.loadTexts: efdEntry.setStatus('current')
efdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)))
if mibBuilder.loadTexts: efdIndex.setStatus('current')
efdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: efdRowStatus.setStatus('current')
efdAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unlocked", 0), ("locked", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: efdAdministrativeState.setStatus('current')
efdStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: efdStartTime.setStatus('current')
efdEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: efdEndTime.setStatus('current')
efdAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 2, 1, 6), Bits().clone(namedValues=NamedValues(("communication", 0), ("qos", 1), ("processing", 2), ("equipment", 3), ("environment", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: efdAlarmType.setStatus('current')
efdAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 2, 1, 7), Bits().clone(namedValues=NamedValues(("critical", 0), ("major", 1), ("minor", 2), ("warn", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: efdAlarmSeverity.setStatus('current')
efdAlarmSourceObject = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 2, 1, 8), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: efdAlarmSourceObject.setStatus('current')
efdAlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: efdAlarmNo.setStatus('current')
alarmNotificationNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2))
alarmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 1))
alarmNotify = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiNEVer"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiRequestID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiCauseNo"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiSubCauseNo"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiSeverity"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiReportType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiTime"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiItfNCauseNo"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiProblemSourceObject"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiReportSourceObject"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiThreshHold"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiCurrentValue"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiAddition"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiMaintenanceStatus"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmAssociatedRequestId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmNotiRepeatTimes"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alarmAffectNetworkMode"))
if mibBuilder.loadTexts: alarmNotify.setStatus('current')
alarmNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2))
alarmNotiNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 22, 23, 24, 41, 42, 43, 44, 45, 46)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("mme", 21), ("pgw", 22), ("sgw", 23), ("pcrf", 24), ("pcscf", 41), ("icscf", 42), ("scscf", 43), ("sbc", 44), ("bgcf", 45), ("as", 46)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiNEType.setStatus('current')
alarmNotiNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiNEID.setStatus('current')
alarmNotiNEVer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiNEVer.setStatus('current')
alarmNotiRequestID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiRequestID.setStatus('current')
alarmNotiCauseNo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2500), ValueRangeConstraint(0, 0), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiCauseNo.setStatus('current')
alarmNotiSubCauseNo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(0, 0), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiSubCauseNo.setStatus('current')
alarmNotiSeverity = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 6)).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warn", 4), ("clear", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiSeverity.setStatus('current')
alarmNotiType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("communication", 1), ("qos", 2), ("processing", 3), ("equipment", 4), ("environment", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiType.setStatus('current')
alarmNotiReportType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("statelessAlarmCreate", 0), ("alarmCreate", 1), ("alarmAutoClear", 2), ("alarmProblemSourceResetClear", 3), ("alarmProblemSourceConfigDeletClear", 4), ("alarmReportSourceResetClear", 5), ("alarmReportSourceConfigDeleteClear", 6), ("alarmManualClear", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiReportType.setStatus('current')
alarmNotiTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 10), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiTime.setStatus('current')
alarmNotiItfNCauseNo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiItfNCauseNo.setStatus('current')
alarmNotiProblemSourceObject = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 12), VariablePointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiProblemSourceObject.setStatus('current')
alarmNotiReportSourceObject = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 13), VariablePointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiReportSourceObject.setStatus('current')
alarmNotiThreshHold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiThreshHold.setStatus('current')
alarmNotiCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiCurrentValue.setStatus('current')
alarmNotiAddition = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiAddition.setStatus('current')
alarmNotiMaintenanceStatus = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("waitingToSetup", 0), ("settingup", 1), ("inMaintenance", 2), ("inService", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiMaintenanceStatus.setStatus('current')
alarmAssociatedRequestId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 18), Unsigned32Array()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmAssociatedRequestId.setStatus('current')
alarmNotiRepeatTimes = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNotiRepeatTimes.setStatus('current')
alarmAffectNetworkMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 2, 2, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("invalid", 0), ("tds", 1), ("tdl", 2), ("all", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmAffectNetworkMode.setStatus('current')
activeAlarmManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3))
activeAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1), )
if mibBuilder.loadTexts: activeAlarmTable.setStatus('current')
activeAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "activeAlarmRequestID"))
if mibBuilder.loadTexts: activeAlarmEntry.setStatus('current')
activeAlarmRequestID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: activeAlarmRequestID.setStatus('current')
activeAlarmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeAlarmRowStatus.setStatus('current')
activeAlarmCauseNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmCauseNo.setStatus('current')
activeAlarmSubCauseNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmSubCauseNo.setStatus('current')
activeAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 6)).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warn", 4), ("clear", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmSeverity.setStatus('current')
activeAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("communication", 1), ("qos", 2), ("processing", 3), ("equipment", 4), ("environment", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmType.setStatus('current')
activeAlarmReportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("statelessAlarmCreate", 0), ("alarmCreate", 1), ("alarmAutoClear", 2), ("alarmProblemSourceResetClear", 3), ("alarmProblemSourceConfigDeletClear", 4), ("alarmReportSourceResetClear", 5), ("alarmReportSourceConfigDeleteClear", 6), ("alarmManualClear", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmReportType.setStatus('current')
activeAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmTime.setStatus('current')
activeAlarmItfNCauseNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmItfNCauseNo.setStatus('current')
activeAlarmProblemSourceObject = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 10), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmProblemSourceObject.setStatus('current')
activeAlarmReportSourceObject = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 11), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmReportSourceObject.setStatus('current')
activeAlarmThreshHold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmThreshHold.setStatus('current')
activeAlarmCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmCurrentValue.setStatus('current')
activeAlarmAddition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmAddition.setStatus('current')
activeAlarmMaintenanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("waitingToSetup", 0), ("settingup", 1), ("inMaintenance", 2), ("inService", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmMaintenanceStatus.setStatus('current')
activeAlarmAssociatedRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 16), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmAssociatedRequestId.setStatus('current')
activeAlarmRepeatTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmRepeatTimes.setStatus('current')
activeAlarmAffectNetworkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("invalid", 0), ("tds", 1), ("tdl", 2), ("all", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmAffectNetworkMode.setStatus('current')
alarmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 6))
alarmCauseVersion = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCauseVersion.setStatus('current')
alarmStatelessAlarmCompressionInterval = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmStatelessAlarmCompressionInterval.setStatus('current')
alarmStatefulAlarmSends = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStatefulAlarmSends.setStatus('current')
alarmStatelessSends = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStatelessSends.setStatus('current')
alarmBox = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 7))
alarmBoxTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 7, 1), )
if mibBuilder.loadTexts: alarmBoxTable.setStatus('current')
alarmBoxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 7, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "alarmBoxIndex"))
if mibBuilder.loadTexts: alarmBoxEntry.setStatus('current')
alarmBoxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alarmBoxIndex.setStatus('current')
alarmBoxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmBoxRowStatus.setStatus('current')
alarmBoxMute = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmBoxMute.setStatus('current')
alarmBoxVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmBoxVersion.setStatus('current')
alarmBoxManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 7, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmBoxManufacturer.setStatus('current')
alarmBoxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("abnormal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmBoxStatus.setStatus('current')
alarmBoxMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmBoxMStatus.setStatus('current')
alarmBoxAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 7, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmBoxAttr.setStatus('current')
alarmBoxOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 7, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmBoxOption.setStatus('current')
alarmBoxCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("reboot", 1), ("enable", 2), ("disable", 3), ("selftest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmBoxCmd.setStatus('current')
fileManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2))
fileServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1))
ftpServerTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1), )
if mibBuilder.loadTexts: ftpServerTable.setStatus('current')
ftpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ftpServerManangerIndex"))
if mibBuilder.loadTexts: ftpServerEntry.setStatus('current')
ftpServerManangerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: ftpServerManangerIndex.setStatus('current')
ftpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftpServerRowStatus.setStatus('current')
ftpServerManagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4, 8)).clone(namedValues=NamedValues(("omc", 1), ("dci", 2), ("lmt", 4), ("rnc", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftpServerManagerType.setStatus('current')
ftpServerInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftpServerInetAddrType.setStatus('current')
ftpServerInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftpServerInetAddr.setStatus('current')
ftpServerPerformanceDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftpServerPerformanceDirectory.setStatus('current')
ftpServerAlarmDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftpServerAlarmDirectory.setStatus('current')
ftpServerSoftwareDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftpServerSoftwareDirectory.setStatus('current')
ftpServerConfigurationDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftpServerConfigurationDirectory.setStatus('current')
ftpServerLogDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftpServerLogDirectory.setStatus('current')
ftpServerLoginName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftpServerLoginName.setStatus('current')
ftpServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftpServerPassword.setStatus('current')
fileTransferControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2))
fileTransIDInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 1))
fileTransNextAvailableIDForOMC = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileTransNextAvailableIDForOMC.setStatus('current')
fileTransNextAvailableIDForOthers = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileTransNextAvailableIDForOthers.setStatus('current')
fileTransTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 2), )
if mibBuilder.loadTexts: fileTransTable.setStatus('current')
fileTransEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "fileTransID"))
if mibBuilder.loadTexts: fileTransEntry.setStatus('current')
fileTransID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: fileTransID.setStatus('current')
fileTransRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileTransRowStatus.setStatus('current')
fileTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54)).clone(namedValues=NamedValues(("operationLog", 1), ("alterLog", 2), ("omSecurityLog", 3), ("alarmLog", 4), ("omKeyLog", 5), ("updateLog", 6), ("debugLog", 7), ("statelessAlarmLog", 8), ("eventLog", 9), ("userLog", 10), ("cfgDataConsistency", 11), ("stateDataConsistency", 12), ("dataConsistency", 13), ("curConfig", 14), ("planConfig", 15), ("equipSoftwarePack", 16), ("coldPatchPack", 17), ("hotPatchPack", 18), ("rruEquipSoftwarePack", 19), ("relantEquipSoftwarePack", 20), ("enviromentEquipSoftwarePackPack", 21), ("gpsEquipSoftwarePack", 22), ("equip1588SoftwarePack", 23), ("cnssEquipSoftwarePackPack", 24), ("generalFile", 25), ("lmtMDBFile", 26), ("activeAlarmFile", 27), ("performanceFile", 28), ("cfgPatchFile", 29), ("snapshotFile", 30), ("cdlFile", 31), ("sctpLogFile", 32), ("dumpLogFile", 33), ("ocuEquipSoftwarePack", 34), ("servicecdlFile", 35), ("mroFile", 36), ("mrsFile", 37), ("mreFile", 38), ("mmlOpLog", 39), ("mmlPmFile", 40), ("gtsaLog", 41), ("iotLog", 42), ("traceUserLog", 43), ("pcapLog", 44), ("immediatMdt", 45), ("loggedMdt", 46), ("rlf", 47), ("ripLog", 48), ("rncDisa", 49), ("raeFile", 50), ("riaLog", 51), ("slotRipFile", 52), ("symbolRipFile", 53), ("secStatelessAlarmLog", 54)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileTransType.setStatus('current')
fileTransIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("upload", 1), ("download", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileTransIndicator.setStatus('current')
fileTransNEDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileTransNEDirectory.setStatus('current')
fileTransFTPDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileTransFTPDirectory.setStatus('current')
fileTransFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 69))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileTransFileName.setStatus('current')
fileTransState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("transfering", 1), ("unzipping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileTransState.setStatus('current')
fileTransPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileTransPercent.setStatus('current')
fileTransNotificationNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 3))
fileTransResultNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 3, 1))
fileTransNotification = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 3, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "fileTransNotiNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fileTransNotiNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fileTransNotiFileTaskId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fileTransNotiFileType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fileTransNotiFileName"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fileTransNotiIndicator"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fileTransNotiResult"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fileTransNotiErrorCode"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fileTransNotiTime"))
if mibBuilder.loadTexts: fileTransNotification.setStatus('current')
fileTransObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 3, 2))
fileTransNotiNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileTransNotiNEType.setStatus('current')
fileTransNotiNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 3, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileTransNotiNEID.setStatus('current')
fileTransNotiFileTaskId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileTransNotiFileTaskId.setStatus('current')
fileTransNotiFileType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54)).clone(namedValues=NamedValues(("operationLog", 1), ("alterLog", 2), ("omSecurityLog", 3), ("alarmLog", 4), ("omKeyLog", 5), ("updateLog", 6), ("debugLog", 7), ("statelessAlarmLog", 8), ("eventLog", 9), ("userLog", 10), ("cfgDataConsistency", 11), ("stateDataConsistency", 12), ("dataConsistency", 13), ("curConfig", 14), ("planConfig", 15), ("equipSoftwarePack", 16), ("coldPatchPack", 17), ("hotPatchPack", 18), ("rruEquipSoftwarePack", 19), ("relantEquipSoftwarePack", 20), ("enviromentEquipSoftwarePackPack", 21), ("gpsEquipSoftwarePack", 22), ("equip1588SoftwarePack", 23), ("cnssEquipSoftwarePackPack", 24), ("generalFile", 25), ("lmtMDBFile", 26), ("activeAlarmFile", 27), ("performanceFile", 28), ("cfgPatchFile", 29), ("snapshotFile", 30), ("cdlFile", 31), ("sctpLogFile", 32), ("dumpLogFile", 33), ("ocuEquipSoftwarePack", 34), ("servicecdlFile", 35), ("mroFile", 36), ("mrsFile", 37), ("mreFile", 38), ("mmlOpLog", 39), ("mmlPmFile", 40), ("iotLog", 42), ("traceUserLog", 43), ("immediatMdt", 45), ("loggedMdt", 46), ("rlf", 47), ("ripLog", 48), ("rncDisa", 49), ("raeFile", 50), ("riaLog", 51), ("slotRipFile", 52), ("symbolRipFile", 53), ("secStatelessAlarmLog", 54)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileTransNotiFileType.setStatus('current')
fileTransNotiFileName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileTransNotiFileName.setStatus('current')
fileTransNotiIndicator = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("upload", 1), ("download", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileTransNotiIndicator.setStatus('current')
fileTransNotiResult = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 3)).clone(namedValues=NamedValues(("success", 0), ("failure", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileTransNotiResult.setStatus('current')
fileTransNotiErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 100)).clone(namedValues=NamedValues(("success", 0), ("busy", 1), ("typeError", 2), ("filenameError", 3), ("ftpServerConnectError", 4), ("userNameOrPasswordError", 5), ("ftpPathError", 6), ("fileNotExistOrCreatError", 7), ("timeout", 8), ("downloadForbidden", 9), ("unzipError", 10), ("verError", 11), ("other", 100)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileTransNotiErrorCode.setStatus('current')
fileTransNotiTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 2, 3, 2, 9), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fileTransNotiTime.setStatus('current')
fileControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 5))
fileTypeLimitTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 5, 1), )
if mibBuilder.loadTexts: fileTypeLimitTable.setStatus('current')
fileTypeLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 5, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "fileTypeLimitIndex"))
if mibBuilder.loadTexts: fileTypeLimitEntry.setStatus('current')
fileTypeLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(28)).clone(namedValues=NamedValues(("performanceFile", 28))))
if mibBuilder.loadTexts: fileTypeLimitIndex.setStatus('current')
fileTypeLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileTypeLimitRowStatus.setStatus('current')
fileTypeLimitFileMaxPreservingDay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileTypeLimitFileMaxPreservingDay.setStatus('current')
fileTypeLimitSingleFileMaxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileTypeLimitSingleFileMaxBytes.setStatus('current')
fileTypeLimitFileMaxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileTypeLimitFileMaxNumber.setStatus('current')
fileDeleteControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 5, 2))
fileDeleteFileTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 5, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileDeleteFileTrigger.setStatus('current')
fileDeleteConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 5, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileDeleteConfigFileName.setStatus('current')
fileClearFolderTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 5, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileClearFolderTrigger.setStatus('current')
fileClearFolderName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 5, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileClearFolderName.setStatus('current')
fileUploadTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 6), )
if mibBuilder.loadTexts: fileUploadTable.setStatus('current')
fileUploadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "fileUpIndex"))
if mibBuilder.loadTexts: fileUploadEntry.setStatus('current')
fileUpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: fileUpIndex.setStatus('current')
fileUpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileUpRowStatus.setStatus('current')
fileUpTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 54)).clone(namedValues=NamedValues(("operationLog", 1), ("alterLog", 2), ("omSecurityLog", 3), ("alarmLog", 4), ("omKeyLog", 5), ("updateLog", 6), ("debugLog", 7), ("statelessAlarmLog", 8), ("eventLog", 9), ("userLog", 10), ("cfgDataConsistency", 11), ("stateDataConsistency", 12), ("dataConsistency", 13), ("curConfig", 14), ("planConfig", 15), ("equipSoftwarePack", 16), ("coldPatchPack", 17), ("hotPatchPack", 18), ("rruEquipSoftwarePack", 19), ("relantEquipSoftwarePack", 20), ("enviromentEquipSoftwarePackPack", 21), ("gpsEquipSoftwarePack", 22), ("equip1588SoftwarePack", 23), ("cnssEquipSoftwarePackPack", 24), ("generalFile", 25), ("lmtMDBFile", 26), ("activeAlarmFile", 27), ("performanceFile", 28), ("cfgPatchFile", 29), ("snapshotFile", 30), ("cdlFile", 31), ("sctpLogFile", 32), ("dumpLogFile", 33), ("ocuEquipSoftwarePack", 34), ("servicecdlFile", 35), ("mroFile", 36), ("mrsFile", 37), ("mreFile", 38), ("mmlOpLog", 39), ("mmlPmFile", 40), ("raeFile", 50), ("secStatelessAlarmLog", 54)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileUpTransType.setStatus('current')
fileUpStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 6, 1, 4), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileUpStartTime.setStatus('current')
fileUpEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 6, 1, 5), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileUpEndTime.setStatus('current')
fileUpFTPDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileUpFTPDirectory.setStatus('current')
fileUpState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("unProcess", 1), ("processing", 2), ("processed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileUpState.setStatus('current')
fileAutoUploadInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 7))
fileAutoUpInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 7, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAutoUpInetAddrType.setStatus('current')
fileAutoUpInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 7, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAutoUpInetAddr.setStatus('current')
fileAutoUpftpServerLoginName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAutoUpftpServerLoginName.setStatus('current')
fileAutoUpftpServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAutoUpftpServerPassword.setStatus('current')
fileAutoUpFTPDirectory = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAutoUpFTPDirectory.setStatus('current')
fileAutoUpInterval = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 2, 7, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 15, 30, 60, 720, 1440)).clone(namedValues=NamedValues(("min0", 0), ("min15", 15), ("min30", 30), ("min60", 60), ("min720", 720), ("min1440", 1440)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAutoUpInterval.setStatus('current')
programManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3))
softwareNB = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1))
softwarePackPlanTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1), )
if mibBuilder.loadTexts: softwarePackPlanTable.setStatus('current')
softwarePackPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "swPackPlanTypeIndex"))
if mibBuilder.loadTexts: softwarePackPlanEntry.setStatus('current')
swPackPlanTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("equip", 1), ("coldPatch", 2), ("hotPatch", 3))))
if mibBuilder.loadTexts: swPackPlanTypeIndex.setStatus('current')
swPackPlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackPlanRowStatus.setStatus('current')
swPackPlanPackName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackPlanPackName.setStatus('current')
swPackPlanVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackPlanVendor.setStatus('current')
swPackPlanVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackPlanVersion.setStatus('current')
swPackPlanDownloadIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("doNothing", 0), ("instantDownload", 1), ("scheduleDownload", 2), ("forcedDownload", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackPlanDownloadIndicator.setStatus('current')
swPackPlanScheduleDownloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 7), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackPlanScheduleDownloadTime.setStatus('current')
swPackPlanDownloadDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackPlanDownloadDirectory.setStatus('current')
swPackPlanActivateIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("doNothing", 0), ("instantActivate", 1), ("scheduleActivate", 2), ("instantDeactivate", 3), ("scheduleDeactivate", 4), ("forceActive", 5), ("manualActivate", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackPlanActivateIndicator.setStatus('current')
swPackPlanScheduleActivateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 10), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackPlanScheduleActivateTime.setStatus('current')
swPackPlanRelyVesion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackPlanRelyVesion.setStatus('current')
swPackPlanFwActiveIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notactive", 0), ("active", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackPlanFwActiveIndicator.setStatus('current')
swPackPlanUpgradeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("doNothing", 0), ("downloading", 1), ("unzipping", 2), ("activating", 3), ("synchronization", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackPlanUpgradeState.setStatus('current')
swPackPlanUpgradePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackPlanUpgradePercent.setStatus('current')
swPackPlanUpgradeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 15), Bits().clone(namedValues=NamedValues(("slot0", 0), ("slot1", 1), ("slot2", 2), ("slot3", 3), ("slot4", 4), ("slot5", 5), ("slot6", 6), ("slot7", 7), ("slot8", 8), ("slot9", 9), ("slot10", 10), ("slot11", 11), ("slot12", 12), ("slot13", 13), ("slot14", 14), ("slot15", 15), ("slot16", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackPlanUpgradeResult.setStatus('current')
swPackPlanOpEndingIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackPlanOpEndingIndicator.setStatus('current')
swPackPlanSubPackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackPlanSubPackNumber.setStatus('current')
swPackPlanRstOpEndingIndTrg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPackPlanRstOpEndingIndTrg.setStatus('current')
swPackPlanFwUpgEndingIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackPlanFwUpgEndingIndicator.setStatus('current')
peripheralPackPlanTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2), )
if mibBuilder.loadTexts: peripheralPackPlanTable.setStatus('current')
peripheralPackPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "peripheralPackPlanTypeIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "peripheralPackPlanVendorIndex"))
if mibBuilder.loadTexts: peripheralPackPlanEntry.setStatus('current')
peripheralPackPlanTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("rruEquip", 1), ("relantEquip", 2), ("enviromentEuip", 3), ("gpsEuip", 4), ("pt1588Equip", 5), ("cnssEquip", 6), ("ocuEquip", 7), ("rruColdPatch", 8))))
if mibBuilder.loadTexts: peripheralPackPlanTypeIndex.setStatus('current')
peripheralPackPlanVendorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: peripheralPackPlanVendorIndex.setStatus('current')
peripheralPackPlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: peripheralPackPlanRowStatus.setStatus('current')
peripheralPackPlanPackName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: peripheralPackPlanPackName.setStatus('current')
peripheralPackPlanVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: peripheralPackPlanVendor.setStatus('current')
peripheralPackPlanVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: peripheralPackPlanVersion.setStatus('current')
peripheralPackPlanDownloadIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("doNothing", 0), ("instantDownload", 1), ("scheduleDownload", 2), ("forcedDownload", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: peripheralPackPlanDownloadIndicator.setStatus('current')
peripheralPackPlanScheduleDownloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 8), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: peripheralPackPlanScheduleDownloadTime.setStatus('current')
peripheralPackPlanDownloadDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: peripheralPackPlanDownloadDirectory.setStatus('current')
peripheralPackPlanActivateIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("doNothing", 0), ("instantActivate", 1), ("scheduleActivate", 2), ("manualActivate", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: peripheralPackPlanActivateIndicator.setStatus('current')
peripheralPackPlanScheduleActivateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 11), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: peripheralPackPlanScheduleActivateTime.setStatus('current')
peripheralPackPlanRelyVesion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: peripheralPackPlanRelyVesion.setStatus('current')
peripheralPackPlanUpgradeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("doNothing", 0), ("downloading", 1), ("unzipping", 2), ("activating", 3), ("synchronization", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackPlanUpgradeState.setStatus('current')
peripheralPackPlanUpgradePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackPlanUpgradePercent.setStatus('current')
peripheralPackPlanUpgradeResult1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 15), Bits().clone(namedValues=NamedValues(("entity0", 0), ("entity1", 1), ("entity2", 2), ("entity3", 3), ("entity4", 4), ("entity5", 5), ("entity6", 6), ("entity7", 7), ("entity8", 8), ("entity9", 9), ("entity10", 10), ("entity11", 11), ("entity12", 12), ("entity13", 13), ("entity14", 14), ("entity15", 15), ("entity16", 16), ("entity17", 17), ("entity18", 18), ("entity19", 19), ("entity20", 20), ("entity21", 21), ("entity22", 22), ("entity23", 23), ("entity24", 24), ("entity25", 25), ("entity26", 26), ("entity27", 27), ("entity28", 28), ("entity29", 29), ("entity30", 30), ("entity31", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackPlanUpgradeResult1.setStatus('current')
peripheralPackPlanUpgradeResult2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 16), Bits().clone(namedValues=NamedValues(("entity32", 0), ("entity33", 1), ("entity34", 2), ("entity35", 3), ("entity36", 4), ("entity37", 5), ("entity38", 6), ("entity39", 7), ("entity40", 8), ("entity41", 9), ("entity42", 10), ("entity43", 11), ("entity44", 12), ("entity45", 13), ("entity46", 14), ("entity47", 15), ("entity48", 16), ("entity49", 17), ("entity50", 18), ("entity51", 19), ("entity52", 20), ("entity53", 21), ("entity54", 22), ("entity55", 23), ("entity56", 24), ("entity57", 25), ("entity58", 26), ("entity59", 27), ("entity60", 28), ("entity61", 29), ("entity62", 30), ("entity63", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackPlanUpgradeResult2.setStatus('current')
peripheralPackPlanOpEndingIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackPlanOpEndingIndicator.setStatus('current')
peripheralPackPlanSubPackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: peripheralPackPlanSubPackNumber.setStatus('current')
peripheralPackPlanRstOpEndingIndTrg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: peripheralPackPlanRstOpEndingIndTrg.setStatus('current')
peripheralPackPlanPackType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("ret", 1), ("rae", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: peripheralPackPlanPackType.setStatus('current')
peripheralPackPlanUpgradeResult3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 24), Bits().clone(namedValues=NamedValues(("entity64", 0), ("entity65", 1), ("entity66", 2), ("entity67", 3), ("entity68", 4), ("entity69", 5), ("entity70", 6), ("entity71", 7), ("entity72", 8), ("entity73", 9), ("entity74", 10), ("entity75", 11), ("entity76", 12), ("entity77", 13), ("entity78", 14), ("entity79", 15), ("entity80", 16), ("entity81", 17), ("entity82", 18), ("entity83", 19), ("entity84", 20), ("entity85", 21), ("entity86", 22), ("entity87", 23), ("entity88", 24), ("entity89", 25), ("entity90", 26), ("entity91", 27), ("entity92", 28), ("entity93", 29), ("entity94", 30), ("entity95", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackPlanUpgradeResult3.setStatus('current')
peripheralPackPlanUpgradeResult4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 25), Bits().clone(namedValues=NamedValues(("entity96", 0), ("entity97", 1), ("entity98", 2), ("entity99", 3), ("entity100", 4), ("entity101", 5), ("entity102", 6), ("entity103", 7), ("entity104", 8), ("entity105", 9), ("entity106", 10), ("entity107", 11), ("entity108", 12), ("entity109", 13), ("entity110", 14), ("entity111", 15), ("entity112", 16), ("entity113", 17), ("entity114", 18), ("entity115", 19), ("entity116", 20), ("entity117", 21), ("entity118", 22), ("entity119", 23), ("entity120", 24), ("entity121", 25), ("entity122", 26), ("entity123", 27), ("entity124", 28), ("entity125", 29), ("entity126", 30), ("entity127", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackPlanUpgradeResult4.setStatus('current')
peripheralPackPlanUpgradeResult5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 26), Bits().clone(namedValues=NamedValues(("entity128", 0), ("entity129", 1), ("entity130", 2), ("entity131", 3), ("entity132", 4), ("entity133", 5), ("entity134", 6), ("entity135", 7), ("entity136", 8), ("entity137", 9), ("entity138", 10), ("entity139", 11), ("entity140", 12), ("entity141", 13), ("entity142", 14), ("entity143", 15), ("entity144", 16), ("entity145", 17), ("entity146", 18), ("entity147", 19), ("entity148", 20), ("entity149", 21), ("entity150", 22), ("entity151", 23), ("entity152", 24), ("entity153", 25), ("entity154", 26), ("entity155", 27), ("entity156", 28), ("entity157", 29), ("entity158", 30), ("entity159", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackPlanUpgradeResult5.setStatus('current')
peripheralPackPlanUpgradeResult6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 27), Bits().clone(namedValues=NamedValues(("entity160", 0), ("entity161", 1), ("entity162", 2), ("entity163", 3), ("entity164", 4), ("entity165", 5), ("entity166", 6), ("entity167", 7), ("entity168", 8), ("entity169", 9), ("entity170", 10), ("entity171", 11), ("entity172", 12), ("entity173", 13), ("entity174", 14), ("entity175", 15), ("entity176", 16), ("entity177", 17), ("entity178", 18), ("entity179", 19), ("entity180", 20), ("entity181", 21), ("entity182", 22), ("entity183", 23), ("entity184", 24), ("entity185", 25), ("entity186", 26), ("entity187", 27), ("entity188", 28), ("entity189", 29), ("entity190", 30), ("entity191", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackPlanUpgradeResult6.setStatus('current')
peripheralPackPlanUpgradeResult7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 28), Bits().clone(namedValues=NamedValues(("entity192", 0), ("entity193", 1), ("entity194", 2), ("entity195", 3), ("entity196", 4), ("entity197", 5), ("entity198", 6), ("entity199", 7), ("entity200", 8), ("entity201", 9), ("entity202", 10), ("entity203", 11), ("entity204", 12), ("entity205", 13), ("entity206", 14), ("entity207", 15), ("entity208", 16), ("entity209", 17), ("entity210", 18), ("entity211", 19), ("entity212", 20), ("entity213", 21), ("entity214", 22), ("entity215", 23), ("entity216", 24), ("entity217", 25), ("entity218", 26), ("entity219", 27), ("entity220", 28), ("entity221", 29), ("entity222", 30), ("entity223", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackPlanUpgradeResult7.setStatus('current')
peripheralPackPlanUpgradeResult8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 2, 1, 29), Bits().clone(namedValues=NamedValues(("entity224", 0), ("entity225", 1), ("entity226", 2), ("entity227", 3), ("entity228", 4), ("entity229", 5), ("entity230", 6), ("entity231", 7), ("entity232", 8), ("entity233", 9), ("entity234", 10), ("entity235", 11), ("entity236", 12), ("entity237", 13), ("entity238", 14), ("entity239", 15), ("entity240", 16), ("entity241", 17), ("entity242", 18), ("entity243", 19), ("entity244", 20), ("entity245", 21), ("entity246", 22), ("entity247", 23), ("entity248", 24), ("entity249", 25), ("entity250", 26), ("entity251", 27), ("entity252", 28), ("entity253", 29), ("entity254", 30), ("entity255", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackPlanUpgradeResult8.setStatus('current')
softwarePackRunningTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 3), )
if mibBuilder.loadTexts: softwarePackRunningTable.setStatus('current')
softwarePackRunningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "swPackRunningTypeIndex"))
if mibBuilder.loadTexts: softwarePackRunningEntry.setStatus('current')
swPackRunningTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("equip", 1), ("coldPatch", 2), ("hotPatch", 3))))
if mibBuilder.loadTexts: swPackRunningTypeIndex.setStatus('current')
swPackRunningRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackRunningRowStatus.setStatus('current')
swPackRunningVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackRunningVersion.setStatus('current')
swPackRunningDownloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 3, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackRunningDownloadTime.setStatus('current')
swPackRunningDownloadDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackRunningDownloadDirectory.setStatus('current')
swPackRunningRelyVesion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackRunningRelyVesion.setStatus('current')
swPackRunningZipType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackRunningZipType.setStatus('current')
swPackRunningDetailVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackRunningDetailVersion.setStatus('current')
peripheralPackRunningTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 4), )
if mibBuilder.loadTexts: peripheralPackRunningTable.setStatus('current')
peripheralPackRunningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "peripheralPackRunningTypeIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "peripheralPackRunningVendorIndex"))
if mibBuilder.loadTexts: peripheralPackRunningEntry.setStatus('current')
peripheralPackRunningTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("rruEquip", 1), ("relantEquip", 2), ("enviromentEuip", 3), ("gpsEuip", 4), ("pt1588Equip", 5), ("cnssEquip", 6), ("ocuEquip", 7), ("rruColdPatch", 8))))
if mibBuilder.loadTexts: peripheralPackRunningTypeIndex.setStatus('current')
peripheralPackRunningVendorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: peripheralPackRunningVendorIndex.setStatus('current')
peripheralPackRunningRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 4, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackRunningRowStatus.setStatus('current')
peripheralPackRunningVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackRunningVersion.setStatus('current')
peripheralPackRunningDownloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackRunningDownloadTime.setStatus('current')
peripheralPackRunningDownloadDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackRunningDownloadDirectory.setStatus('current')
peripheralPackRunningZipType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackRunningZipType.setStatus('current')
peripheralPackRunningDetailVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackRunningDetailVersion.setStatus('current')
softwarePackTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 5), )
if mibBuilder.loadTexts: softwarePackTable.setStatus('current')
softwarePackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "swPackTypeIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "swPackVersionIndex"))
if mibBuilder.loadTexts: softwarePackEntry.setStatus('current')
swPackTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("equip", 1), ("coldPatch", 2), ("hotPatch", 3))))
if mibBuilder.loadTexts: swPackTypeIndex.setStatus('current')
swPackVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: swPackVersionIndex.setStatus('current')
swPackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 5, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackRowStatus.setStatus('current')
swPackVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackVersion.setStatus('current')
swPackDownloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 5, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackDownloadTime.setStatus('current')
swPackDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackDirectory.setStatus('current')
swPackRelyVesion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackRelyVesion.setStatus('current')
swPackZipType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackZipType.setStatus('current')
swPackDetailVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackDetailVersion.setStatus('current')
peripheralPackTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 6), )
if mibBuilder.loadTexts: peripheralPackTable.setStatus('current')
peripheralPackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "peripheralPackTypeIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "peripheralPackVendorIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "peripheralPackVersionIndex"))
if mibBuilder.loadTexts: peripheralPackEntry.setStatus('current')
peripheralPackTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("rruEquip", 1), ("relantEquip", 2), ("enviromentEuip", 3), ("gpsEuip", 4), ("pt1588Equip", 5), ("cnssEquip", 6), ("ocuEquip", 7))))
if mibBuilder.loadTexts: peripheralPackTypeIndex.setStatus('current')
peripheralPackVendorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: peripheralPackVendorIndex.setStatus('current')
peripheralPackVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: peripheralPackVersionIndex.setStatus('current')
peripheralPackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 6, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackRowStatus.setStatus('current')
peripheralPackVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackVersion.setStatus('current')
peripheralPackDownloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 6, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackDownloadTime.setStatus('current')
peripheralPackDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackDirectory.setStatus('current')
peripheralPackZipType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackZipType.setStatus('current')
peripheralPackDetailVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralPackDetailVersion.setStatus('current')
softwareFileTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 7), )
if mibBuilder.loadTexts: softwareFileTable.setStatus('current')
softwareFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "swFilePackTypeIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "swFilePackVersionIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "swFileIndex"))
if mibBuilder.loadTexts: softwareFileEntry.setStatus('current')
swFilePackTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("equip", 1), ("coldPatch", 2), ("hotPatch", 3))))
if mibBuilder.loadTexts: swFilePackTypeIndex.setStatus('current')
swFilePackVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: swFilePackVersionIndex.setStatus('current')
swFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 80)))
if mibBuilder.loadTexts: swFileIndex.setStatus('current')
swFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 7, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFileRowStatus.setStatus('current')
swFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFileName.setStatus('current')
swFileVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFileVersion.setStatus('current')
peripheralFileTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 8), )
if mibBuilder.loadTexts: peripheralFileTable.setStatus('current')
peripheralFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "peripheralFilePackTypeIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "peripheralSoftwareFilePackVendorIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "peripheralFilePackVersionIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "peripheralFileIndex"))
if mibBuilder.loadTexts: peripheralFileEntry.setStatus('current')
peripheralFilePackTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("rruEquip", 1), ("relantEquip", 2), ("enviromentEuip", 3), ("gpsEuip", 4), ("pt1588Equip", 5), ("cnssEquip", 6), ("ocuEquip", 7))))
if mibBuilder.loadTexts: peripheralFilePackTypeIndex.setStatus('current')
peripheralSoftwareFilePackVendorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: peripheralSoftwareFilePackVendorIndex.setStatus('current')
peripheralFilePackVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: peripheralFilePackVersionIndex.setStatus('current')
peripheralFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: peripheralFileIndex.setStatus('current')
peripheralFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 8, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralFileRowStatus.setStatus('current')
peripheralFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralFileName.setStatus('current')
peripheralFileVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 8, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralFileVersion.setStatus('current')
boardSoftwareFileTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 9), )
if mibBuilder.loadTexts: boardSoftwareFileTable.setStatus('current')
boardSoftwareFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 9, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardSoftwareFileRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardSoftwareFileShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardSoftwareFileSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardSoftwareFileIndex"))
if mibBuilder.loadTexts: boardSoftwareFileEntry.setStatus('current')
boardSoftwareFileRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: boardSoftwareFileRackNo.setStatus('current')
boardSoftwareFileShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: boardSoftwareFileShelfNo.setStatus('current')
boardSoftwareFileSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: boardSoftwareFileSlotNo.setStatus('current')
boardSoftwareFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: boardSoftwareFileIndex.setStatus('current')
boardSoftwareFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 9, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardSoftwareFileRowStatus.setStatus('current')
boardSoftwareFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardSoftwareFileName.setStatus('current')
boardSoftwareFileVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 9, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardSoftwareFileVersion.setStatus('current')
softwarePackCustomerPlanTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10), )
if mibBuilder.loadTexts: softwarePackCustomerPlanTable.setStatus('current')
softwarePackCustomerPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "swPackCustomerPlanTypeIndex"))
if mibBuilder.loadTexts: softwarePackCustomerPlanEntry.setStatus('current')
swPackCustomerPlanTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("equip", 1), ("coldPatch", 2), ("hotPatch", 3))))
if mibBuilder.loadTexts: swPackCustomerPlanTypeIndex.setStatus('current')
swPackCustomerPlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackCustomerPlanRowStatus.setStatus('current')
swPackCustomerPlanPackName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackCustomerPlanPackName.setStatus('current')
swPackCustomerPlanVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackCustomerPlanVendor.setStatus('current')
swPackCustomerPlanVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackCustomerPlanVersion.setStatus('current')
swPackCustomerPlanDownloadIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("doNothing", 0), ("instantDownload", 1), ("scheduleDownload", 2), ("forcedDownload", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackCustomerPlanDownloadIndicator.setStatus('current')
swPackCustomerPlanScheduleDownloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 7), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackCustomerPlanScheduleDownloadTime.setStatus('current')
swPackCustomerPlanDownloadDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackCustomerPlanDownloadDirectory.setStatus('current')
swPackCustomerPlanActivateIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("doNothing", 0), ("instantActivate", 1), ("scheduleActivate", 2), ("instantDeactivate", 3), ("scheduleDeactivate", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackCustomerPlanActivateIndicator.setStatus('current')
swPackCustomerPlanScheduleActivateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 10), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackCustomerPlanScheduleActivateTime.setStatus('current')
swPackCustomerPlanRelyVesion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackCustomerPlanRelyVesion.setStatus('current')
swPackCustomerPlanFwActiveIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notactive", 0), ("active", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPackCustomerPlanFwActiveIndicator.setStatus('current')
swPackCustomerPlanUpgradeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("downloading", 1), ("unzipping", 2), ("activating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackCustomerPlanUpgradeState.setStatus('current')
swPackCustomerPlanUpgradePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackCustomerPlanUpgradePercent.setStatus('current')
swPackCustomerPlanUpgradeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 10, 1, 15), Bits().clone(namedValues=NamedValues(("slot0", 0), ("slot1", 1), ("slot2", 2), ("slot3", 3), ("slot4", 4), ("slot5", 5), ("slot6", 6), ("slot7", 7), ("slot8", 8), ("slot9", 9), ("slot10", 10), ("slot11", 11), ("slot12", 12), ("slot13", 13), ("slot14", 14), ("slot15", 15), ("slot16", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackCustomerPlanUpgradeResult.setStatus('current')
softwarePackCustRunningTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 11), )
if mibBuilder.loadTexts: softwarePackCustRunningTable.setStatus('current')
softwarePackCustRunningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 11, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "swPackCustRunningTypeIndex"))
if mibBuilder.loadTexts: softwarePackCustRunningEntry.setStatus('current')
swPackCustRunningTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("equip", 1), ("coldPatch", 2), ("hotPatch", 3))))
if mibBuilder.loadTexts: swPackCustRunningTypeIndex.setStatus('current')
swPackCustRunningRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 11, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackCustRunningRowStatus.setStatus('current')
swPackCustRunningVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackCustRunningVersion.setStatus('current')
swPackCustRunningDownloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 11, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackCustRunningDownloadTime.setStatus('current')
swPackCustRunningDownloadDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackCustRunningDownloadDirectory.setStatus('current')
swPackCustRunningRelyVesion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 11, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackCustRunningRelyVesion.setStatus('current')
swPackCustRunningZipType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 11, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPackCustRunningZipType.setStatus('current')
softwarePackUpgradeControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 12))
swPackUpgradeControlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 12, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("customer", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPackUpgradeControlSwitch.setStatus('current')
packStoreOptimizeControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 13))
packRRUUpgradeCtrlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 13, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: packRRUUpgradeCtrlSwitch.setStatus('current')
packNBUpgradeCtrlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 13, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: packNBUpgradeCtrlSwitch.setStatus('current')
packHotPackRollbackTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 13, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: packHotPackRollbackTrigger.setStatus('current')
packHotPackRollbackResult = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 13, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("invalid", 0), ("fail", 1), ("success", 2), ("backloading", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: packHotPackRollbackResult.setStatus('current')
packActiveControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 14))
packActiveCtrlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 14, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: packActiveCtrlSwitch.setStatus('current')
softwareBaseBandBoardCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 17), )
if mibBuilder.loadTexts: softwareBaseBandBoardCfgTable.setStatus('current')
softwareBaseBandBoardCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 17, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "softwareBaseBandBoardCfgIndex"))
if mibBuilder.loadTexts: softwareBaseBandBoardCfgEntry.setStatus('current')
softwareBaseBandBoardCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: softwareBaseBandBoardCfgIndex.setStatus('current')
softwareBaseBandBoardCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 17, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softwareBaseBandBoardCfgRowStatus.setStatus('current')
softwareBaseBandBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 3, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 48, 49, 50, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 128, 129, 130, 141, 142, 143, 177, 178, 224, 240, 241)).clone(namedValues=NamedValues(("unknown", 0), ("riuDof", 48), ("riuE1", 49), ("riuA", 50), ("gcu", 52), ("ccu", 54), ("ceu", 56), ("bbu", 58), ("aifur6C8A", 59), ("ifur3C6A", 60), ("ifur6C1A", 61), ("ifur3C4A", 62), ("aifur9C1A", 63), ("gru", 64), ("ctu", 65), ("iiu", 66), ("bcu", 67), ("biu", 68), ("accu", 70), ("abbut", 71), ("abbuf", 72), ("eiuE1", 73), ("synu", 74), ("eiuDof", 75), ("aifur12C1A", 77), ("aifur9C8A", 78), ("scta", 97), ("bpia", 98), ("bpoa", 99), ("gpscu", 100), ("emu", 101), ("geu", 102), ("emau", 103), ("etpa", 104), ("etpd", 105), ("psu", 106), ("fcu", 107), ("bpoc", 108), ("bpoe", 109), ("emdu", 110), ("etpc", 111), ("bpof", 128), ("etpe", 129), ("sctc", 130), ("sctd", 141), ("mmba", 142), ("bpog", 143), ("bpoh", 177), ("scte", 178), ("mmbc", 224), ("sctf", 240), ("bpoi", 241)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softwareBaseBandBoardType.setStatus('current')
snmpControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4))
snmpInterProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 1))
snmpResponseTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpResponseTimer.setStatus('current')
snmpResponseInformRetryTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpResponseInformRetryTimer.setStatus('current')
snmpInformTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInformTimer.setStatus('current')
snmpInformRetrys = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInformRetrys.setStatus('current')
snmpAlarmPDUType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("trap", 0), ("inform", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAlarmPDUType.setStatus('current')
snmpEventPDUType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("trap", 0), ("inform", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpEventPDUType.setStatus('current')
snmpAlterationPDUType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("trap", 0), ("inform", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAlterationPDUType.setStatus('current')
snmpInformBufferNumber = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInformBufferNumber.setStatus('current')
configProcessNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 2))
configProcessNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 2, 1))
configProcessNotify = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 2, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "configProcNotiNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "configProcNotiNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "configProcNotiNEVer"), ("DTM-TD-LTE-ENODEB-ENBMIB", "configProcSrcRequestID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "configProcResult"), ("DTM-TD-LTE-ENODEB-ENBMIB", "configProcAdditionInfo"), ("DTM-TD-LTE-ENODEB-ENBMIB", "configProcOccurTime"))
if mibBuilder.loadTexts: configProcessNotify.setStatus('current')
configProcessNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 2, 2))
configProcNotiNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: configProcNotiNEType.setStatus('current')
configProcNotiNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 2, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: configProcNotiNEID.setStatus('current')
configProcNotiNEVer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 2, 2, 3), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: configProcNotiNEVer.setStatus('current')
configProcSrcRequestID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: configProcSrcRequestID.setStatus('current')
configProcResult = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 2, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("fail", 0), ("success", 1), ("processing", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: configProcResult.setStatus('current')
configProcAdditionInfo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: configProcAdditionInfo.setStatus('current')
configProcOccurTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 4, 2, 2, 7), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: configProcOccurTime.setStatus('current')
configManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5))
configFile = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1))
configFileInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 1))
configFileSaveTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFileSaveTrigger.setStatus('current')
configFileSaveName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFileSaveName.setStatus('current')
configFileAutoUpgradeIndicator = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFileAutoUpgradeIndicator.setStatus('current')
configFileTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 2), )
if mibBuilder.loadTexts: configFileTable.setStatus('current')
configFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "configFileIndex"))
if mibBuilder.loadTexts: configFileEntry.setStatus('current')
configFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: configFileIndex.setStatus('current')
configFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFileRowStatus.setStatus('current')
configFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFileName.setStatus('current')
configFileRelyMIBVesion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFileRelyMIBVesion.setStatus('current')
configFileSaveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFileSaveTime.setStatus('current')
configFileDelTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFileDelTrigger.setStatus('current')
configfilePlanTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 3), )
if mibBuilder.loadTexts: configfilePlanTable.setStatus('current')
configfilePlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "configfilePlanTypeIndex"))
if mibBuilder.loadTexts: configfilePlanEntry.setStatus('current')
configfilePlanTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1)).clone(namedValues=NamedValues(("configFile", 1))))
if mibBuilder.loadTexts: configfilePlanTypeIndex.setStatus('current')
configfilePlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: configfilePlanRowStatus.setStatus('current')
configFileLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("localFile", 0), ("remoteFile", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: configFileLocationType.setStatus('current')
configfilePlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: configfilePlanName.setStatus('current')
configfilePlanDownloadDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: configfilePlanDownloadDirectory.setStatus('current')
configfilePlanActivateIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("doNothing", 0), ("instantActivate", 1), ("scheduleActivate", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: configfilePlanActivateIndicator.setStatus('current')
configfilePlanScheduleActivateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 3, 1, 7), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: configfilePlanScheduleActivateTime.setStatus('current')
configfilePlanIsActivatedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("notActivate", 0), ("activateSuccess", 1), ("activateFailure", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: configfilePlanIsActivatedFlag.setStatus('current')
alteration = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 2))
alterationNotificationNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 2, 1))
alterationNotifiactions = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 2, 1, 1))
alterationNofication = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 2, 1, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "alterationNotiNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alterationNotiNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alterationNotiType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "alterationNotiTime"))
if mibBuilder.loadTexts: alterationNofication.setStatus('current')
alterationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 2, 1, 2))
alterationNotiNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alterationNotiNEType.setStatus('current')
alterationNotiNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 2, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alterationNotiNEID.setStatus('current')
alterationNotiType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 3)).clone(namedValues=NamedValues(("create", 0), ("delete", 1), ("modify", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alterationNotiType.setStatus('current')
alterationNotiTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 2, 1, 2, 4), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alterationNotiTime.setStatus('current')
alterationStatics = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 2, 2))
alterationNotiSends = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 2, 2, 1))
transaction = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3))
transactionControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 1))
transactionControlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("prepare", 1), ("commit", 2), ("abort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transactionControlSwitch.setStatus('current')
transactionProcedureStatus = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("idle", 0), ("preparing", 1), ("commiting", 2), ("rollbacking", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionProcedureStatus.setStatus('current')
transactionExcutiveMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("batchSet", 0), ("file", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transactionExcutiveMode.setStatus('current')
transactionNextSetTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transactionNextSetTimer.setStatus('current')
transactionDataFileName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transactionDataFileName.setStatus('current')
transactionDataFileDirectory = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transactionDataFileDirectory.setStatus('current')
transactionDataFileTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transactionDataFileTimer.setStatus('current')
transactionResultNotificationNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 2))
transactionResultNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 2, 1))
transactionResultNotification = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 2, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "transactionResultNotiNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "transactionResultNotiNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "transactionResultNotiResult"), ("DTM-TD-LTE-ENODEB-ENBMIB", "transactionResultNotiFirstErrVariableOID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "transactionResultNotiErrCode"), ("DTM-TD-LTE-ENODEB-ENBMIB", "transactionResultNotiAddition"), ("DTM-TD-LTE-ENODEB-ENBMIB", "transactionResultNotiTime"))
if mibBuilder.loadTexts: transactionResultNotification.setStatus('current')
transactionResultObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 2, 2))
transactionResultNotiNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: transactionResultNotiNEType.setStatus('current')
transactionResultNotiNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 2, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: transactionResultNotiNEID.setStatus('current')
transactionResultNotiResult = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 2, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("startSuccess", 0), ("commitSuccess", 1), ("fail", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: transactionResultNotiResult.setStatus('current')
transactionResultNotiFirstErrVariableOID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 2, 2, 4), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: transactionResultNotiFirstErrVariableOID.setStatus('current')
transactionResultNotiErrCode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 2, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: transactionResultNotiErrCode.setStatus('current')
transactionResultNotiAddition = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: transactionResultNotiAddition.setStatus('current')
transactionResultNotiTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 3, 2, 2, 7), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: transactionResultNotiTime.setStatus('current')
commTrapManangement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4))
eventGeneralEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 1))
eventGeneralEventTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 1, 1))
eventGeneralEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 1, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "eventGeneralEventNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "eventGeneralEventNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "eventGeneralEventType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "eventGeneralEventResult"), ("DTM-TD-LTE-ENODEB-ENBMIB", "eventGeneralEventSource"), ("DTM-TD-LTE-ENODEB-ENBMIB", "eventGeneralEventAdditionInfo"), ("DTM-TD-LTE-ENODEB-ENBMIB", "eventGeneralEventOccurTime"))
if mibBuilder.loadTexts: eventGeneralEventTrap.setStatus('current')
eventGeneralEventObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 1, 2))
eventGeneralEventNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 1, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventGeneralEventNEType.setStatus('current')
eventGeneralEventNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventGeneralEventNEID.setStatus('current')
eventGeneralEventType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 1, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 6, 7, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 200, 201, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310)).clone(namedValues=NamedValues(("cellBlock", 1), ("cellUnblock", 2), ("masterSlaveConsistency", 3), ("ipoaBuild", 4), ("dynCfgActOn", 6), ("softActOnTime", 7), ("masterSlaveSwap", 16), ("boardPowerOn", 19), ("saalCreate", 21), ("saalDestroy", 22), ("pathCreate", 23), ("pathDestroy", 24), ("debugUpload", 25), ("dfgCreate", 26), ("antCfgParse", 27), ("gpsUpgrade", 28), ("ifuNetworkPlanReq", 29), ("programSyn", 30), ("initCfgResult", 31), ("localCellSetup", 32), ("localCellDelete", 33), ("cellSetup", 34), ("cellDelete", 35), ("rruActiveAlarmCheck", 38), ("antCalibration", 39), ("rruProgramDownload", 40), ("rruProgramActive", 41), ("retAntSelfTest", 43), ("retAntProgrameDownload", 44), ("retAntPathCalibrate", 45), ("retAntSetTilt", 46), ("anrAdd", 47), ("anrDel", 48), ("pciCollision", 49), ("pciListInvalid", 50), ("retActiveAlarmCheck", 51), ("bbuProgramActive", 52), ("coldpatchProgramActive", 53), ("hotpatchProgramActive", 54), ("cfgParse", 55), ("snapCfgCreat", 56), ("fileTransStop", 57), ("envProgramActive", 58), ("rruLogUpload", 59), ("rruLoopBack", 60), ("initCfgStart", 61), ("cellLccCongestion", 62), ("cellLccNormal", 63), ("ocuProgramActive", 64), ("rmClkLoopBack", 65), ("cellHighLoag", 66), ("cellLowLoag", 67), ("cellLoadReport", 68), ("cfgFileAmalgamResult", 69), ("rollBackSceneCheckFail", 70), ("rrucellparacheck", 71), ("rHubLogUpload", 72), ("carrierCheck", 100), ("cellPerfStatistics", 101), ("cellR5PerfReport", 102), ("nbapNodeBReset", 103), ("cellPerfDataClear", 104), ("interfereMeasure", 105), ("cellInterfere", 106), ("cellSuspicionfulShift", 107), ("cellShift", 108), ("cellBusyNoDetect", 109), ("raeFileDownload", 110), ("raeFileUpload", 111), ("adiStatus", 112), ("tdsCellBlock", 200), ("tdsCellUnblock", 201), ("cpuOverLoad", 301), ("cpuOverLoadRecv", 302), ("cellPrbAc", 303), ("cellPrbAcRecv", 304), ("ueNumAcHighLoad", 305), ("ueNumAcRecv", 306), ("highLoadAcBar", 307), ("acBarRecv", 308), ("cellPrbCong", 309), ("cellPrbCongRecv", 310)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventGeneralEventType.setStatus('current')
eventGeneralEventResult = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 1, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("fail", 0), ("success", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventGeneralEventResult.setStatus('current')
eventGeneralEventSource = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventGeneralEventSource.setStatus('current')
eventGeneralEventAdditionInfo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventGeneralEventAdditionInfo.setStatus('current')
eventGeneralEventOccurTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 1, 2, 7), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventGeneralEventOccurTime.setStatus('current')
eventSynchronization = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 2))
eventSynchronizationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 2, 1))
eventSynchronizationTrap = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 2, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "eventSynchronizationNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "eventSynchronizationNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "eventSynchronizationType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "eventSynchronizationAdditionInfo"), ("DTM-TD-LTE-ENODEB-ENBMIB", "eventSynchronizationOccurTime"))
if mibBuilder.loadTexts: eventSynchronizationTrap.setStatus('current')
eventSynchronizationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 2, 2))
eventSynchronizationNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSynchronizationNEType.setStatus('current')
eventSynchronizationNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 2, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSynchronizationNEID.setStatus('current')
eventSynchronizationType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 2, 2, 3), Bits().clone(namedValues=NamedValues(("activeAlarmFile", 0), ("dataConsistency", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSynchronizationType.setStatus('current')
eventSynchronizationAdditionInfo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSynchronizationAdditionInfo.setStatus('current')
eventSynchronizationOccurTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 5, 4, 2, 2, 5), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSynchronizationOccurTime.setStatus('current')
timeManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6))
sntp = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1))
sntpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 1))
sntpServerInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerInetAddrType.setStatus('current')
sntpServerInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerInetAddr.setStatus('current')
sntpPortId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1234, 1234))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpPortId.setStatus('current')
sntpFirstSynchronizedPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpFirstSynchronizedPeriod.setStatus('current')
sntpPeriodicSynchronizedPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPeriodicSynchronizedPeriod.setStatus('current')
sntpSynchronizedSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpSynchronizedSwitch.setStatus('current')
sntpLastSynchronizedTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpLastSynchronizedTime.setStatus('current')
sntpProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("sntpv2", 1), ("sntpv3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpProtocolVersion.setStatus('current')
sntpFirstDiscAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpFirstDiscAlarmThreshold.setStatus('current')
sntpPeriodicDiscAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPeriodicDiscAlarmThreshold.setStatus('current')
sntpLocalTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-11, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpLocalTimeZone.setStatus('current')
sntpConnectState = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpConnectState.setStatus('current')
sntpStatics = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 2))
sntpDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 6, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpDisconnects.setStatus('current')
inventoryManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7))
inventoryEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1))
invRackTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 1), )
if mibBuilder.loadTexts: invRackTable.setStatus('current')
invRackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "invRackRackNo"))
if mibBuilder.loadTexts: invRackEntry.setStatus('current')
invRackRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: invRackRackNo.setStatus('current')
invRackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRackRowStatus.setStatus('current')
invRackType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invRackType.setStatus('current')
invRackDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invRackDescription.setStatus('current')
invRackVendorUnitTypeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invRackVendorUnitTypeNumber.setStatus('current')
invRackVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invRackVendorName.setStatus('current')
invRackSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invRackSerialNumber.setStatus('current')
invRackVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invRackVersionNumber.setStatus('current')
invRackDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invRackDateOfManufacture.setStatus('current')
invRackDateOfLastService = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invRackDateOfLastService.setStatus('current')
invShelfTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 2), )
if mibBuilder.loadTexts: invShelfTable.setStatus('current')
invShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "invShelfRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "invShelfShelfNo"))
if mibBuilder.loadTexts: invShelfEntry.setStatus('current')
invShelfRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: invShelfRackNo.setStatus('current')
invShelfShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: invShelfShelfNo.setStatus('current')
invShelfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 2, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invShelfRowStatus.setStatus('current')
invShelfType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invShelfType.setStatus('current')
invShelfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invShelfDescription.setStatus('current')
invShelfVendorUnitTypeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invShelfVendorUnitTypeNumber.setStatus('current')
invShelfVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invShelfVendorName.setStatus('current')
invShelfSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invShelfSerialNumber.setStatus('current')
invShelfVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invShelfVersionNumber.setStatus('current')
invShelfDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invShelfDateOfManufacture.setStatus('current')
invShelfDateOfLastService = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invShelfDateOfLastService.setStatus('current')
circuitPackTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3), )
if mibBuilder.loadTexts: circuitPackTable.setStatus('current')
circuitPackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "circuitPackRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "circuitPackShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "circuitPackSlotNo"))
if mibBuilder.loadTexts: circuitPackEntry.setStatus('current')
circuitPackRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: circuitPackRackNo.setStatus('current')
circuitPackShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: circuitPackShelfNo.setStatus('current')
circuitPackSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: circuitPackSlotNo.setStatus('current')
circuitPackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPackRowStatus.setStatus('current')
circuitPackInventoryUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPackInventoryUnitType.setStatus('current')
circuitPackVendorUnitFamilyType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPackVendorUnitFamilyType.setStatus('current')
circuitPackVendorUnitTypeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPackVendorUnitTypeNumber.setStatus('current')
circuitPackVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPackVersionNumber.setStatus('current')
circuitPackVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPackVendorName.setStatus('current')
circuitPackSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPackSerialNumber.setStatus('current')
circuitPackDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPackDateOfManufacture.setStatus('current')
circuitPackDateOfLastService = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPackDateOfLastService.setStatus('current')
circuitPackManufacturerData = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPackManufacturerData.setStatus('current')
circuitPackManufacturerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPackManufacturerFlag.setStatus('current')
invRruTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 4), )
if mibBuilder.loadTexts: invRruTable.setStatus('current')
invRruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "invRruNo"))
if mibBuilder.loadTexts: invRruEntry.setStatus('current')
invRruNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: invRruNo.setStatus('current')
invRruRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 4, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRruRowStatus.setStatus('current')
invRruInventoryUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRruInventoryUnitType.setStatus('current')
invRruVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRruVersionNumber.setStatus('current')
invRruManufactureName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRruManufactureName.setStatus('current')
invRruVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRruVendorName.setStatus('current')
invRruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRruSerialNumber.setStatus('current')
invRruDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRruDateOfManufacture.setStatus('current')
invRruDateOfLastService = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRruDateOfLastService.setStatus('current')
invRruManufacturerData = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRruManufacturerData.setStatus('current')
invRruRealUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRruRealUnitType.setStatus('current')
daughterBoardTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5), )
if mibBuilder.loadTexts: daughterBoardTable.setStatus('current')
daughterBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "daughterBoardRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "daughterBoardShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "daughterBoardSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "daughterBoardNo"))
if mibBuilder.loadTexts: daughterBoardEntry.setStatus('current')
daughterBoardRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: daughterBoardRackNo.setStatus('current')
daughterBoardShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: daughterBoardShelfNo.setStatus('current')
daughterBoardSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: daughterBoardSlotNo.setStatus('current')
daughterBoardNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: daughterBoardNo.setStatus('current')
daughterBoardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daughterBoardRowStatus.setStatus('current')
daughterBoardInventoryUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: daughterBoardInventoryUnitType.setStatus('current')
daughterBoardVendorUnitFamilyType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: daughterBoardVendorUnitFamilyType.setStatus('current')
daughterBoardVendorUnitTypeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: daughterBoardVendorUnitTypeNumber.setStatus('current')
daughterBoardVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: daughterBoardVersionNumber.setStatus('current')
daughterBoardVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: daughterBoardVendorName.setStatus('current')
daughterBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: daughterBoardSerialNumber.setStatus('current')
daughterBoardDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: daughterBoardDateOfManufacture.setStatus('current')
daughterBoardDateOfLastService = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: daughterBoardDateOfLastService.setStatus('current')
daughterBoardManufacturerData = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 5, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: daughterBoardManufacturerData.setStatus('current')
invAntennaArrayTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 6), )
if mibBuilder.loadTexts: invAntennaArrayTable.setStatus('current')
invAntennaArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "invAntArrayNo"))
if mibBuilder.loadTexts: invAntennaArrayEntry.setStatus('current')
invAntArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: invAntArrayNo.setStatus('current')
invAntArrayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 6, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invAntArrayRowStatus.setStatus('current')
invAntArrayVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invAntArrayVendor.setStatus('current')
invAntArrayModel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invAntArrayModel.setStatus('current')
invAntArraySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invAntArraySerialNumber.setStatus('current')
invAntArrayLocalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invAntArrayLocalInfo.setStatus('current')
outDoorCabinetTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 7), )
if mibBuilder.loadTexts: outDoorCabinetTable.setStatus('current')
outDoorCabinetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "outDoorCabinetNo"))
if mibBuilder.loadTexts: outDoorCabinetEntry.setStatus('current')
outDoorCabinetNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: outDoorCabinetNo.setStatus('current')
outDoorCabinetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outDoorCabinetRowStatus.setStatus('current')
outDoorCabinetPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outDoorCabinetPosition.setStatus('current')
outDoorCabinetSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outDoorCabinetSerialNumber.setStatus('current')
outDoorCabinetPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outDoorCabinetPowerSupplyType.setStatus('current')
outDoorCabinetLocalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outDoorCabinetLocalInfo.setStatus('current')
invIocTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 8), )
if mibBuilder.loadTexts: invIocTable.setStatus('current')
invIocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "invIocIndex"))
if mibBuilder.loadTexts: invIocEntry.setStatus('current')
invIocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: invIocIndex.setStatus('current')
invIocRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: invIocRowStatus.setStatus('current')
invIocPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: invIocPosition.setStatus('current')
invIocSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: invIocSerialNumber.setStatus('current')
invIocPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: invIocPowerSupplyType.setStatus('current')
invIocLocalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: invIocLocalInfo.setStatus('current')
invRhubTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 9), )
if mibBuilder.loadTexts: invRhubTable.setStatus('current')
invRhubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 9, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "invRhubNo"))
if mibBuilder.loadTexts: invRhubEntry.setStatus('current')
invRhubNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: invRhubNo.setStatus('current')
invRhubRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 9, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRhubRowStatus.setStatus('current')
invRhubInventoryUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRhubInventoryUnitType.setStatus('current')
invRhubVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRhubVersionNumber.setStatus('current')
invRhubManufactureName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRhubManufactureName.setStatus('current')
invRhubVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRhubVendorName.setStatus('current')
invRhubSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 9, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRhubSerialNumber.setStatus('current')
invRhubDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 9, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRhubDateOfManufacture.setStatus('current')
invRhubDateOfLastService = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 9, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRhubDateOfLastService.setStatus('current')
invRhubManufacturerData = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 9, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRhubManufacturerData.setStatus('current')
invRhubRealUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 1, 9, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invRhubRealUnitType.setStatus('current')
inventoryPort = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 2))
invPortTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 2, 1), )
if mibBuilder.loadTexts: invPortTable.setStatus('current')
invPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "invPortRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "invPortShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "invPortSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "invPortPortNo"))
if mibBuilder.loadTexts: invPortEntry.setStatus('current')
invPortRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: invPortRackNo.setStatus('current')
invPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: invPortShelfNo.setStatus('current')
invPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: invPortSlotNo.setStatus('current')
invPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: invPortPortNo.setStatus('current')
invPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 2, 1, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invPortRowStatus.setStatus('current')
invPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("feport", 1), ("e1port", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invPortType.setStatus('current')
invPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invPortDescription.setStatus('current')
invPortLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 7, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invPortLocation.setStatus('current')
performanceManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8))
pmTask = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 1))
pmTaskTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 1, 1), )
if mibBuilder.loadTexts: pmTaskTable.setStatus('current')
pmTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pmTaskIndex"))
if mibBuilder.loadTexts: pmTaskEntry.setStatus('current')
pmTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)))
if mibBuilder.loadTexts: pmTaskIndex.setStatus('current')
pmTaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmTaskRowStatus.setStatus('current')
pmTaskDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmTaskDescription.setStatus('current')
pmTaskCollectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(5, 15, 30, 60)).clone(namedValues=NamedValues(("min5", 5), ("min15", 15), ("min30", 30), ("min60", 60)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmTaskCollectInterval.setStatus('current')
pmTaskReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(5, 15, 30, 60)).clone(namedValues=NamedValues(("min5", 5), ("min15", 15), ("min30", 30), ("min60", 60)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmTaskReportInterval.setStatus('current')
pmTaskCouterGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 1, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmTaskCouterGroup.setStatus('current')
pmTaskReportManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmTaskReportManagerIndex.setStatus('current')
pmDerivedCounterExpressionDefine = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2))
pmExpressionTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 1), )
if mibBuilder.loadTexts: pmExpressionTable.setStatus('current')
pmExpressionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pmExpressionIndex"))
if mibBuilder.loadTexts: pmExpressionEntry.setStatus('current')
pmExpressionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: pmExpressionIndex.setStatus('current')
pmExpressionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmExpressionRowStatus.setStatus('current')
pmExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmExpression.setStatus('current')
pmExpressionName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmExpressionName.setStatus('current')
pmExpressionValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 4)).clone(namedValues=NamedValues(("invalid", 0), ("counter32", 1), ("unsigned32", 2), ("integer32", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmExpressionValueType.setStatus('current')
pmExpressionCounterGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmExpressionCounterGroup.setStatus('current')
pmExpressionCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 1, 1, 7), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmExpressionCounter.setStatus('current')
pmExpObjectTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 2), )
if mibBuilder.loadTexts: pmExpObjectTable.setStatus('current')
pmExpObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pmExpObjectExpressionIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "pmExpObjectIndex"))
if mibBuilder.loadTexts: pmExpObjectEntry.setStatus('current')
pmExpObjectExpressionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: pmExpObjectExpressionIndex.setStatus('current')
pmExpObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: pmExpObjectIndex.setStatus('current')
pmExpObjectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmExpObjectRowStatus.setStatus('current')
pmExpObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 2, 1, 4), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmExpObjectID.setStatus('current')
pmExpValueTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 3), )
if mibBuilder.loadTexts: pmExpValueTable.setStatus('current')
pmExpValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pmExpValueExpressionIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "pmExpValueInstanceIndex"))
if mibBuilder.loadTexts: pmExpValueEntry.setStatus('current')
pmExpValueExpressionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: pmExpValueExpressionIndex.setStatus('current')
pmExpValueInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: pmExpValueInstanceIndex.setStatus('current')
pmExpValueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 3, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmExpValueRowStatus.setStatus('current')
pmExpValueCounter32Val = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmExpValueCounter32Val.setStatus('current')
pmExpValueUnsigned32Val = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmExpValueUnsigned32Val.setStatus('current')
pmExpValueInteger32Val = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 8, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmExpValueInteger32Val.setStatus('current')
equipmentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9))
equipmentCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 1))
equipNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipNEType.setStatus('current')
equipMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipMIBVersion.setStatus('current')
equipMIBLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipMIBLastUpdate.setStatus('current')
equipMIBContact = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipMIBContact.setStatus('current')
equipLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipLoginPassword.setStatus('current')
equipMIBDevVersion = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipMIBDevVersion.setStatus('current')
equipStartupNotificationNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 2))
equipStartupNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 2, 1))
equipStartupNotify = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 2, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "equipStartupNotiNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "equipStartupNotiInetAddrType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "equipStartupNotiInetAddress"), ("DTM-TD-LTE-ENODEB-ENBMIB", "equipStartupNotiNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "equipStartupNotiNEVersion"), ("DTM-TD-LTE-ENODEB-ENBMIB", "equipStartupNotiMIBVersion"), ("DTM-TD-LTE-ENODEB-ENBMIB", "equipStartupNotiCfgFileName"), ("DTM-TD-LTE-ENODEB-ENBMIB", "equipStartupNotiDataTypeIndicator"), ("DTM-TD-LTE-ENODEB-ENBMIB", "equipStartupNotiTime"))
if mibBuilder.loadTexts: equipStartupNotify.setStatus('current')
equipStartupNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 2, 2))
equipStartupNotiNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: equipStartupNotiNEType.setStatus('current')
equipStartupNotiInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 2, 2, 2), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: equipStartupNotiInetAddrType.setStatus('current')
equipStartupNotiInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 2, 2, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: equipStartupNotiInetAddress.setStatus('current')
equipStartupNotiNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 2, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: equipStartupNotiNEID.setStatus('current')
equipStartupNotiNEVersion = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 2, 2, 5), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: equipStartupNotiNEVersion.setStatus('current')
equipStartupNotiMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 2, 2, 6), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: equipStartupNotiMIBVersion.setStatus('current')
equipStartupNotiCfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: equipStartupNotiCfgFileName.setStatus('current')
equipStartupNotiDataTypeIndicator = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 2, 2, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("startup", 1), ("reConnect", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: equipStartupNotiDataTypeIndicator.setStatus('current')
equipStartupNotiTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 2, 2, 9), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: equipStartupNotiTime.setStatus('current')
managerTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3), )
if mibBuilder.loadTexts: managerTable.setStatus('current')
managerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "managerIndex"))
if mibBuilder.loadTexts: managerEntry.setStatus('current')
managerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: managerIndex.setStatus('current')
managerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerRowStatus.setStatus('current')
managerType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4, 16)).clone(namedValues=NamedValues(("omc", 1), ("dci", 2), ("lmt", 4), ("patrol", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerType.setStatus('current')
managerInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerInetAddrType.setStatus('current')
managerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerInetAddress.setStatus('current')
managerHeartbeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerHeartbeatInterval.setStatus('current')
managerHeartbeatToleranceRetrys = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerHeartbeatToleranceRetrys.setStatus('current')
managerOnlineState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("offline", 0), ("online", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerOnlineState.setStatus('current')
managerTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerTrapPort.setStatus('current')
managerPerformanceReportSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerPerformanceReportSwitch.setStatus('current')
managerStatelessAlarmReportSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerStatelessAlarmReportSwitch.setStatus('current')
managerAlterationReportSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerAlterationReportSwitch.setStatus('current')
managerKickTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerKickTrigger.setStatus('current')
managerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 3, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("tds", 0), ("tdl", 1), ("dual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerMode.setStatus('current')
equipmentSysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4))
equipNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipNEID.setStatus('current')
equipPhyID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipPhyID.setStatus('current')
equipFriendName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipFriendName.setStatus('current')
equipLongitude = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipLongitude.setStatus('current')
equipLatitude = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipLatitude.setStatus('current')
equipElevation = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipElevation.setStatus('current')
equipDescription = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipDescription.setStatus('current')
equipContact = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipContact.setStatus('current')
equipLocation = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipLocation.setStatus('current')
equipCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipCurrentTime.setStatus('current')
equipUpTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipUpTime.setStatus('current')
equipProceduralStatus = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("initializationRequired", 0), ("notInitialized", 1), ("initializing", 2), ("reporting", 3), ("terminating", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipProceduralStatus.setStatus('current')
equipOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipOperationalState.setStatus('current')
equipMaintenceState = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("waitForEstablish", 0), ("establishing", 1), ("inMaintenance", 2), ("inService", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipMaintenceState.setStatus('current')
equipEnvironmentMonitorMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 16), Bits().clone(namedValues=NamedValues(("oab", 0), ("monitor", 1), ("rootnode", 2), ("air", 3), ("heatEx", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipEnvironmentMonitorMode.setStatus('current')
equipResetTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("onWithNoDfg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipResetTrigger.setStatus('current')
equipStartupStage = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("startupinfoget", 1), ("authentication", 2), ("omlinkcreate", 3), ("synchronization", 4), ("configuring", 5), ("configured", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipStartupStage.setStatus('current')
equipInitCfgStopTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipInitCfgStopTrigger.setStatus('current')
equipSysFunctionId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipSysFunctionId.setStatus('current')
equipMaintenceStatePDFSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipMaintenceStatePDFSwitch.setStatus('current')
equipDisguiseEquipMaintenceState = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(2, 3)).clone(namedValues=NamedValues(("inMaintenance", 2), ("inService", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipDisguiseEquipMaintenceState.setStatus('current')
equipLoAutoUpdateSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 4, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipLoAutoUpdateSwitch.setStatus('current')
board = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5))
boardTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1), )
if mibBuilder.loadTexts: boardTable.setStatus('current')
boardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardSlotNo"))
if mibBuilder.loadTexts: boardEntry.setStatus('current')
boardRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: boardRackNo.setStatus('current')
boardShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: boardShelfNo.setStatus('current')
boardSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: boardSlotNo.setStatus('current')
boardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardRowStatus.setStatus('current')
boardHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 48, 49, 50, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 128, 129, 130, 141, 142, 143, 177, 178, 224, 240, 241)).clone(namedValues=NamedValues(("unknown", 0), ("riuDof", 48), ("riuE1", 49), ("riuA", 50), ("gcu", 52), ("ccu", 54), ("ceu", 56), ("bbu", 58), ("aifur6C8A", 59), ("ifur3C6A", 60), ("ifur6C1A", 61), ("ifur3C4A", 62), ("aifur9C1A", 63), ("gru", 64), ("ctu", 65), ("iiu", 66), ("bcu", 67), ("biu", 68), ("accu", 70), ("abbut", 71), ("abbuf", 72), ("eiuE1", 73), ("synu", 74), ("eiuDof", 75), ("aifur12C1A", 77), ("aifur9C8A", 78), ("scta", 97), ("bpia", 98), ("bpoa", 99), ("gpscu", 100), ("emu", 101), ("geu", 102), ("emau", 103), ("etpa", 104), ("etpd", 105), ("psu", 106), ("fcu", 107), ("bpoc", 108), ("bpoe", 109), ("emdu", 110), ("etpc", 111), ("bpof", 128), ("etpe", 129), ("sctc", 130), ("sctd", 141), ("mmba", 142), ("bpog", 143), ("bpoh", 177), ("scte", 178), ("mmbc", 224), ("sctf", 240), ("bpoi", 241)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardHardwareType.setStatus('current')
boardApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 48, 49, 50, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 128, 129, 130, 141, 142, 143, 177, 178, 224, 240, 241)).clone(namedValues=NamedValues(("unknown", 0), ("riuDof", 48), ("riuE1", 49), ("riuA", 50), ("gcu", 52), ("ccu", 54), ("ceu", 56), ("bbu", 58), ("aifur6C8A", 59), ("ifur3C6A", 60), ("ifur6C1A", 61), ("ifur3C4A", 62), ("aifur9C1A", 63), ("gru", 64), ("ctu", 65), ("iiu", 66), ("bcu", 67), ("biu", 68), ("accu", 70), ("abbut", 71), ("abbuf", 72), ("eiuE1", 73), ("synu", 74), ("eiuDof", 75), ("aifur12C1A", 77), ("aifur9C8A", 78), ("scta", 97), ("bpia", 98), ("bpoa", 99), ("gpscu", 100), ("emu", 101), ("geu", 102), ("emau", 103), ("etpa", 104), ("etpd", 105), ("psu", 106), ("fcu", 107), ("bpoc", 108), ("bpoe", 109), ("emdu", 110), ("etpc", 111), ("bpof", 128), ("etpe", 129), ("sctc", 130), ("sctd", 141), ("mmba", 142), ("bpog", 143), ("bpoh", 177), ("scte", 178), ("mmbc", 224), ("sctf", 240), ("bpoi", 241)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardApplicationType.setStatus('current')
boardDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardDescription.setStatus('current')
boardHardwareTypeMatchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notMatched", 0), ("matched", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardHardwareTypeMatchStatus.setStatus('current')
boardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardUpTime.setStatus('current')
boardStartupFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardStartupFailureReason.setStatus('current')
boardProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("initializationRequired", 0), ("notInitialized", 1), ("initializing", 2), ("reporting", 3), ("terminating", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardProceduralStatus.setStatus('current')
boardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardOperationalState.setStatus('current')
boardAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardAdministrativeState.setStatus('current')
boardPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("normal", 0), ("powerOff", 1), ("highTempPowerOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardPowerState.setStatus('current')
boardAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 17), Bits().clone(namedValues=NamedValues(("underRepair", 0), ("critical", 1), ("major", 2), ("minor", 3), ("alarmOutstanding", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardAlarmStatus.setStatus('current')
boardAlarmStatics = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 18), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardAlarmStatics.setStatus('current')
boardUpdateState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("normal", 0), ("download", 1), ("upgrade", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardUpdateState.setStatus('current')
boardResetTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardResetTrigger.setStatus('current')
boardPcbVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPcbVersion.setStatus('current')
boardContainMainCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardContainMainCpu.setStatus('current')
boardFpgaFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("tdriTd", 0), ("tdriLte", 1), ("cpri", 2), ("cprihdlc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardFpgaFrameType.setStatus('current')
boardPowerManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 4, 8, 16, 32)).clone(namedValues=NamedValues(("unknown", 0), ("emerson", 1), ("goldpower", 2), ("raypower", 4), ("anpower", 8), ("synQor", 16), ("dctec", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerManufacturer.setStatus('current')
boardPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 64, 128)).clone(namedValues=NamedValues(("unknown", 0), ("dc", 64), ("ac", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPowerType.setStatus('current')
boardEmdSeriesMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardEmdSeriesMode.setStatus('current')
boardTimeslotoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("none", 0), ("us700", 1), ("us1025", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardTimeslotoffset.setStatus('current')
boardBspMainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2)).clone(namedValues=NamedValues(("unknown", -1), ("unAvailable", 0), ("available", 1), ("unLoad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardBspMainStatus.setStatus('current')
boardBspBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2)).clone(namedValues=NamedValues(("unknown", -1), ("unAvailable", 0), ("available", 1), ("unLoad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardBspBackupStatus.setStatus('current')
boardSBootUpdateTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardSBootUpdateTrigger.setStatus('current')
boardSwapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 2))
boardSwapTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardSwapTrigger.setStatus('current')
boardSwapType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notSpecifyDest", 0), ("specifyDest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardSwapType.setStatus('current')
boardSwapSourceRackNo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardSwapSourceRackNo.setStatus('current')
boardSwapSourceShelfNo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardSwapSourceShelfNo.setStatus('current')
boardSwapSourceSlotNo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardSwapSourceSlotNo.setStatus('current')
boardSwapDestRackNo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardSwapDestRackNo.setStatus('current')
boardSwapDestShelfNo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardSwapDestShelfNo.setStatus('current')
boardSwapDestSlotNo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 5, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardSwapDestSlotNo.setStatus('current')
boardProcessor = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6))
processorTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1), )
if mibBuilder.loadTexts: processorTable.setStatus('current')
processorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "procRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "procShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "procSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "procIndexOnBoard"))
if mibBuilder.loadTexts: processorEntry.setStatus('current')
procRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: procRackNo.setStatus('current')
procShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: procShelfNo.setStatus('current')
procSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: procSlotNo.setStatus('current')
procIndexOnBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: procIndexOnBoard.setStatus('current')
procRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procRowStatus.setStatus('current')
procType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 0), ("mcu", 1), ("dsp", 2), ("fpga", 3), ("mcmcu", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procType.setStatus('current')
procDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procDescription.setStatus('current')
procProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("initializationRequired", 0), ("notInitialized", 1), ("initializing", 2), ("reporting", 3), ("terminating", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procProceduralStatus.setStatus('current')
procOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procOperationalState.setStatus('current')
procCPUCheckInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCPUCheckInterval.setStatus('current')
procCoreNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procCoreNum.setStatus('current')
procResetTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procResetTrigger.setStatus('current')
procStatCPUOccupation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procStatCPUOccupation.setStatus('current')
boardSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7))
boardTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1))
boardTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1, 1), )
if mibBuilder.loadTexts: boardTemperatureTable.setStatus('current')
boardTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardTempRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardTempShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardTempSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardTempIndexOnBoard"))
if mibBuilder.loadTexts: boardTemperatureEntry.setStatus('current')
boardTempRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: boardTempRackNo.setStatus('current')
boardTempShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: boardTempShelfNo.setStatus('current')
boardTempSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: boardTempSlotNo.setStatus('current')
boardTempIndexOnBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: boardTempIndexOnBoard.setStatus('current')
boardTempRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1, 1, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardTempRowStatus.setStatus('current')
boardTempDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardTempDescription.setStatus('current')
boardTempIdeal = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardTempIdeal.setStatus('current')
boardTempUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardTempUpperThreshold.setStatus('current')
boardTempLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardTempLowerThreshold.setStatus('current')
boardTempUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardTempUpperCriticalThreshold.setStatus('current')
boardTempStatTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardTempStatTemperature.setStatus('current')
boardVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 2))
boardVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 2, 1), )
if mibBuilder.loadTexts: boardVoltageTable.setStatus('current')
boardVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardVoltRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardVoltShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardVoltSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardVoltIndexOnBoard"))
if mibBuilder.loadTexts: boardVoltageEntry.setStatus('current')
boardVoltRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: boardVoltRackNo.setStatus('current')
boardVoltShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: boardVoltShelfNo.setStatus('current')
boardVoltSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: boardVoltSlotNo.setStatus('current')
boardVoltIndexOnBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: boardVoltIndexOnBoard.setStatus('current')
boardVoltRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 2, 1, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardVoltRowStatus.setStatus('current')
boardVoltDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardVoltDescription.setStatus('current')
boardVoltUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardVoltUpperThreshold.setStatus('current')
boardVoltLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardVoltLowerThreshold.setStatus('current')
boardStatVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardStatVoltage.setStatus('current')
boardLed = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 3))
boardLedTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 3, 1), )
if mibBuilder.loadTexts: boardLedTable.setStatus('current')
boardLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardLedRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardLedShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardLedSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardLedIndexOnBoard"))
if mibBuilder.loadTexts: boardLedEntry.setStatus('current')
boardLedRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: boardLedRackNo.setStatus('current')
boardLedShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: boardLedShelfNo.setStatus('current')
boardLedSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: boardLedSlotNo.setStatus('current')
boardLedIndexOnBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)))
if mibBuilder.loadTexts: boardLedIndexOnBoard.setStatus('current')
boardLedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 3, 1, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardLedRowStatus.setStatus('current')
boardLedDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardLedDescription.setStatus('current')
boardLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 7, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("off", 0), ("slow", 1), ("normal", 2), ("fast", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardLedStatus.setStatus('current')
boardStorageDev = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 8))
boardStorageDevTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 8, 1), )
if mibBuilder.loadTexts: boardStorageDevTable.setStatus('current')
boardStorageDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 8, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardStorageDevRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardStorageDevShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardStorageDevSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "boardStorageDevOnBoard"))
if mibBuilder.loadTexts: boardStorageDevEntry.setStatus('current')
boardStorageDevRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: boardStorageDevRackNo.setStatus('current')
boardStorageDevShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: boardStorageDevShelfNo.setStatus('current')
boardStorageDevSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: boardStorageDevSlotNo.setStatus('current')
boardStorageDevOnBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: boardStorageDevOnBoard.setStatus('current')
boardStorageDevRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 8, 1, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardStorageDevRowStatus.setStatus('current')
boardStorageDevTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 8, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardStorageDevTotalSize.setStatus('current')
boardStorageDevUsedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 8, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardStorageDevUsedSize.setStatus('current')
boardStorageDevFreeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 8, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardStorageDevFreeBytes.setStatus('current')
boardStorageDevFreePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardStorageDevFreePercent.setStatus('current')
boardStorageMountPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 9, 8, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardStorageMountPath.setStatus('current')
traceManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10))
traceTask = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1))
traceTaskTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1), )
if mibBuilder.loadTexts: traceTaskTable.setStatus('current')
traceTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "traceTaskId"))
if mibBuilder.loadTexts: traceTaskEntry.setStatus('current')
traceTaskId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: traceTaskId.setStatus('current')
traceTaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskRowStatus.setStatus('current')
traceTaskCollectEntityInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskCollectEntityInetAddrType.setStatus('current')
traceTaskCollectEntityInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskCollectEntityInetAddr.setStatus('current')
traceTaskCollectEntityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskCollectEntityPort.setStatus('current')
traceTaskTceInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskTceInetAddrType.setStatus('current')
traceTaskTceInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskTceInetAddr.setStatus('current')
traceTaskManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceTaskManagerIndex.setStatus('current')
traceTaskBandWidthThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskBandWidthThreshold.setStatus('current')
traceTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("itf", 1), ("cell", 2), ("ue", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskType.setStatus('current')
traceTaskObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskObjectID.setStatus('current')
traceTaskPlmnMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 12), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskPlmnMcc.setStatus('current')
traceTaskPlmnMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 13), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskPlmnMnc.setStatus('current')
traceTaskReferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskReferenceId.setStatus('current')
traceDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("min", 1), ("medium", 2), ("max", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceDepth.setStatus('current')
traceTaskTrcList = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 16), Bits().clone(namedValues=NamedValues(("s1", 0), ("x2", 1), ("uu", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskTrcList.setStatus('current')
traceTaskUeId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceTaskUeId.setStatus('current')
traceCellTrcNotiMme = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceCellTrcNotiMme.setStatus('current')
traceMsgTypeBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 1, 1, 1, 19), Unsigned32Array()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceMsgTypeBitMap.setStatus('current')
traceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 2))
traceMmeUeTrcSrvCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 2, 1))
traceUeSrvInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 2, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceUeSrvInetAddrType.setStatus('current')
traceUeSrvInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 2, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceUeSrvInetAddr.setStatus('current')
traceUeSrvPort = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceUeSrvPort.setStatus('current')
traceLiscence = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 3))
traceLiscenceCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 3, 1))
traceMmeUeTrcSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceMmeUeTrcSwitch.setStatus('current')
traceManagementTrcSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceManagementTrcSwitch.setStatus('current')
outPutManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11))
syslogServerControlTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 1), )
if mibBuilder.loadTexts: syslogServerControlTable.setStatus('current')
syslogServerControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "syslogServerManagerIndex"))
if mibBuilder.loadTexts: syslogServerControlEntry.setStatus('current')
syslogServerManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: syslogServerManagerIndex.setStatus('current')
syslogServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServerRowStatus.setStatus('current')
syslogServerSendSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServerSendSwitch.setStatus('current')
syslogServerSendSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 1, 1, 4), Bits().clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("informational", 6), ("debug", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServerSendSeverity.setStatus('current')
syslogServerSendFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 1, 1, 5), Bits().clone(namedValues=NamedValues(("om", 16), ("dd", 17), ("hl", 18), ("pl", 19)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServerSendFacility.setStatus('current')
syslogServerMsgSendEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("none", 0), ("tls", 1), ("beep", 2), ("other", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServerMsgSendEncapsulation.setStatus('current')
syslogServerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServerDescr.setStatus('current')
syslogServerInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 1, 1, 8), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServerInetAddrType.setStatus('current')
syslogServerInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 1, 1, 9), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServerInetAddr.setStatus('current')
syslogServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogServerPort.setStatus('current')
syslogConsoleControlTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 2), )
if mibBuilder.loadTexts: syslogConsoleControlTable.setStatus('current')
syslogConsoleControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "syslogConsoleManagerIndex"))
if mibBuilder.loadTexts: syslogConsoleControlEntry.setStatus('current')
syslogConsoleManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: syslogConsoleManagerIndex.setStatus('current')
syslogConsoleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogConsoleRowStatus.setStatus('current')
syslogConsoleSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogConsoleSwitch.setStatus('current')
syslogConsoleSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 2, 1, 4), Bits().clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("informational", 6), ("debug", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogConsoleSeverity.setStatus('current')
syslogConsoleFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 2, 1, 5), Bits().clone(namedValues=NamedValues(("om", 16), ("dd", 17), ("hl", 18), ("pl", 19)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogConsoleFacility.setStatus('current')
syslogStatis = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 3))
syslogMsgSends = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogMsgSends.setStatus('current')
syslogMsgHostName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 11, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogMsgHostName.setStatus('current')
licenseManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 12))
licenseAuthorization = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 12, 1))
licenseFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 12, 1, 1), )
if mibBuilder.loadTexts: licenseFeatureTable.setStatus('current')
licenseFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 12, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "licenseFeatureIndex"))
if mibBuilder.loadTexts: licenseFeatureEntry.setStatus('current')
licenseFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 12, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: licenseFeatureIndex.setStatus('current')
licenseFeatureRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 12, 1, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureRowStatus.setStatus('current')
licenseFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 12, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureName.setStatus('current')
licenseFeatureSupportable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 12, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unsupported", 0), ("supported", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureSupportable.setStatus('current')
licenseFeatureAuthorizedState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 12, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unauthorized", 0), ("authorized", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseFeatureAuthorizedState.setStatus('current')
licenseFeatureSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 12, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseFeatureSwitch.setStatus('current')
licenseCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 12, 1, 2))
securityManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13))
accessControlManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 1))
accessUserTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 1, 1), )
if mibBuilder.loadTexts: accessUserTable.setStatus('current')
accessUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "accessUserIndex"))
if mibBuilder.loadTexts: accessUserEntry.setStatus('current')
accessUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: accessUserIndex.setStatus('current')
accessUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessUserRowStatus.setStatus('current')
accessUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessUserName.setStatus('current')
accessUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessUserPassword.setStatus('current')
accessUserGroupView = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 0), ("administrator", 1), ("systemUser", 2), ("commonUser", 3), ("guest", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessUserGroupView.setStatus('current')
cmdAuthorizationManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2))
cmdAuthorizationTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 1), )
if mibBuilder.loadTexts: cmdAuthorizationTable.setStatus('current')
cmdAuthorizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cmdAuthorizationIndex"))
if mibBuilder.loadTexts: cmdAuthorizationEntry.setStatus('current')
cmdAuthorizationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: cmdAuthorizationIndex.setStatus('current')
cmdAuthorizationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdAuthorizationRowStatus.setStatus('current')
cmdAuthorizationCMDOID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdAuthorizationCMDOID.setStatus('current')
cmdAuthorizationCMDName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdAuthorizationCMDName.setStatus('current')
cmdAuthorizationCMDType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("get", 1), ("config", 2), ("action", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdAuthorizationCMDType.setStatus('current')
cmdAuthorizationGroupView = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("unknown", 0), ("administrator", 1), ("systemUser", 2), ("commonUser", 3), ("guest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdAuthorizationGroupView.setStatus('current')
mibAuthorizationTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 2), )
if mibBuilder.loadTexts: mibAuthorizationTable.setStatus('current')
mibAuthorizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "mibAuthorizationIndex"))
if mibBuilder.loadTexts: mibAuthorizationEntry.setStatus('current')
mibAuthorizationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: mibAuthorizationIndex.setStatus('current')
mibAuthorizationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibAuthorizationRowStatus.setStatus('current')
mibAuthorizationMIBOID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibAuthorizationMIBOID.setStatus('current')
mibAuthorizationMIBName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibAuthorizationMIBName.setStatus('current')
mibAuthorizationMIBMaxAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("read", 0), ("write", 1), ("create", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibAuthorizationMIBMaxAccess.setStatus('current')
mibAuthorizationGroupView = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 0), ("administrator", 1), ("systemUser", 2), ("commonUser", 3), ("guest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mibAuthorizationGroupView.setStatus('current')
securityCommSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 3))
userFailLimits = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userFailLimits.setStatus('current')
userLogOutNoOpTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 3, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLogOutNoOpTime.setStatus('current')
userAutoUnlockTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAutoUnlockTime.setStatus('current')
pwdMinLength = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwdMinLength.setStatus('current')
pwdPolicy = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 3, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("weak", 0), ("strict", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwdPolicy.setStatus('current')
pwdNoRepeatNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwdNoRepeatNum.setStatus('current')
pwdExpireReminderTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwdExpireReminderTime.setStatus('current')
userTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 4), )
if mibBuilder.loadTexts: userTable.setStatus('current')
userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "userIndex"))
if mibBuilder.loadTexts: userEntry.setStatus('current')
userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: userIndex.setStatus('current')
userRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userRowStatus.setStatus('current')
userType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("admin", 1), ("system", 2), ("normal", 3), ("patrol", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userType.setStatus('current')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userName.setStatus('current')
userPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userPwd.setStatus('current')
userPwdlifeCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 90), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userPwdlifeCycle.setStatus('current')
userLockedState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 4, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("pwdErrLocked", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userLockedState.setStatus('current')
userAlarmReportSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 4, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAlarmReportSwitch.setStatus('current')
userRemoteLoginSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 4, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userRemoteLoginSwitch.setStatus('current')
userHandoverInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 5))
userHandoverUserName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userHandoverUserName.setStatus('current')
userHandoverUserPwd = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userHandoverUserPwd.setStatus('current')
userHandoverDisplayTypeListTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 1, 13, 5, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userHandoverDisplayTypeListTrigger.setStatus('current')
eNB = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2))
nodeBSys = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1))
nodeBInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 1))
nodeBSynTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBSynTrigger.setStatus('current')
nodeBProtocolVer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("protocolVer1", 1), ("protocolVer2", 2), ("protocolVer3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBProtocolVer.setStatus('current')
nodeBTimeslotOffsetMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("none", 0), ("tdscdma", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBTimeslotOffsetMode.setStatus('current')
nodeBRRUTimeslotOffset = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("none", 0), ("us700", 1), ("us1025", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBRRUTimeslotOffset.setStatus('current')
nodeBModeInfo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 1, 5), Bits().clone(namedValues=NamedValues(("tds", 0), ("tdl", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBModeInfo.setStatus('current')
maintenceStateNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 2))
maintenceStateNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 2, 1))
maintenceStateNotify = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 2, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "maintenceStateNotiNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "maintenceStateNotiNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "maintenceStateValue"), ("DTM-TD-LTE-ENODEB-ENBMIB", "maintenceStateOccurTime"))
if mibBuilder.loadTexts: maintenceStateNotify.setStatus('current')
maintenceStateNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 2, 2))
maintenceStateNotiNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: maintenceStateNotiNEType.setStatus('current')
maintenceStateNotiNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 2, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: maintenceStateNotiNEID.setStatus('current')
maintenceStateValue = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("waitForEstablish", 0), ("establishing", 1), ("inMaintenance", 2), ("inService", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: maintenceStateValue.setStatus('current')
maintenceStateOccurTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 2, 2, 4), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: maintenceStateOccurTime.setStatus('current')
nodebBlockStateNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 3))
nodebBlockStateNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 3, 1))
nodebBlockStateNotify = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 3, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "nodebBlockStateNotiNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "nodebBlockStateNotiNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "nodebBlockStateValue"), ("DTM-TD-LTE-ENODEB-ENBMIB", "nodebBlockStatLcId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "nodebBlockStateOccurTime"))
if mibBuilder.loadTexts: nodebBlockStateNotify.setStatus('current')
nodebBlockStateNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 3, 2))
nodebBlockStateNotiNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nodebBlockStateNotiNEType.setStatus('current')
nodebBlockStateNotiNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 3, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nodebBlockStateNotiNEID.setStatus('current')
nodebBlockStateValue = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 3, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(2, 3)).clone(namedValues=NamedValues(("inMaintenance", 2), ("inService", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nodebBlockStateValue.setStatus('current')
nodebBlockStatLcId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(-1, -1), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nodebBlockStatLcId.setStatus('current')
nodebBlockStateOccurTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 1, 3, 2, 5), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nodebBlockStateOccurTime.setStatus('current')
debug = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2))
policy = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1))
sysStartMode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1, 1))
sysStartIsNoClkSrcMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("noClkSrc", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysStartIsNoClkSrcMode.setStatus('current')
sysS1CreateMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("noPeerMme", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysS1CreateMode.setStatus('current')
sysX2CreateMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("noPeerEnb", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysX2CreateMode.setStatus('current')
sysPrintMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("information", 6), ("debug", 7), ("noprint", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPrintMode.setStatus('current')
sysStartIsNoRNCMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("noRNC", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysStartIsNoRNCMode.setStatus('current')
logFileConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1, 2))
logFileConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: logFileConfigurationTable.setStatus('current')
logFileConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "logFileConfigurationIndex"))
if mibBuilder.loadTexts: logFileConfigurationEntry.setStatus('current')
logFileConfigurationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 39, 54)).clone(namedValues=NamedValues(("operationLog", 1), ("alterLog", 2), ("omSecurityLog", 3), ("alarmLog", 4), ("omKeyLog", 5), ("updateLog", 6), ("debugLog", 7), ("statelessAlarmLog", 8), ("eventLog", 9), ("mmlOplog", 39), ("secStatelessAlarmLog", 54))))
if mibBuilder.loadTexts: logFileConfigurationIndex.setStatus('current')
logFileConfigurationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: logFileConfigurationRowStatus.setStatus('current')
logFileConfigurationMaxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: logFileConfigurationMaxBytes.setStatus('current')
logFileConfigurationMaxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: logFileConfigurationMaxNumber.setStatus('current')
debugUpload = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 2))
debugUploadTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 2, 1), )
if mibBuilder.loadTexts: debugUploadTable.setStatus('current')
debugUploadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "debugUploadRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "debugUploadShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "debugUploadSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "debugUploadProcNo"))
if mibBuilder.loadTexts: debugUploadEntry.setStatus('current')
debugUploadRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: debugUploadRackNo.setStatus('current')
debugUploadShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: debugUploadShelfNo.setStatus('current')
debugUploadSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: debugUploadSlotNo.setStatus('current')
debugUploadProcNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)))
if mibBuilder.loadTexts: debugUploadProcNo.setStatus('current')
debugUploadRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: debugUploadRowStatus.setStatus('current')
debugUploadType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: debugUploadType.setStatus('current')
debugUploadDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: debugUploadDestination.setStatus('current')
debugUploadPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: debugUploadPercent.setStatus('current')
processorCore = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3))
processorCoreTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3, 1), )
if mibBuilder.loadTexts: processorCoreTable.setStatus('current')
processorCoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "procCoreRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "procCoreShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "procCoreSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "procCoreIndexOnBoard"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "procCoreNo"))
if mibBuilder.loadTexts: processorCoreEntry.setStatus('current')
procCoreRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: procCoreRackNo.setStatus('current')
procCoreShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: procCoreShelfNo.setStatus('current')
procCoreSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: procCoreSlotNo.setStatus('current')
procCoreIndexOnBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: procCoreIndexOnBoard.setStatus('current')
procCoreNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21)))
if mibBuilder.loadTexts: procCoreNo.setStatus('current')
procCoreRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3, 1, 1, 6), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procCoreRowStatus.setStatus('current')
procCoreType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("mcu", 1), ("dsp", 2), ("fpga", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procCoreType.setStatus('current')
procCoreToProId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procCoreToProId.setStatus('current')
procCoreIndexSameType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procCoreIndexSameType.setStatus('current')
procSoftCoreStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("normal", 0), ("midLoad", 1), ("highLoad", 2), ("overLoad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procSoftCoreStatus.setStatus('current')
procSoftCoreLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 3, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procSoftCoreLoad.setStatus('current')
cdl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4))
cdlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlSwitch.setStatus('current')
cdlServerInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlServerInetAddrType.setStatus('current')
cdlServerInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlServerInetAddr.setStatus('current')
cdlFileDirectory = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlFileDirectory.setStatus('current')
cdlFtpServerLoginName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlFtpServerLoginName.setStatus('current')
cdlFtpServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlFtpServerPassword.setStatus('current')
cdlFileSize = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlFileSize.setStatus('current')
cdlFileInterval = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdlFileInterval.setStatus('current')
cdlUploadTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlUploadTrigger.setStatus('current')
cdlServiceFileDirectory = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlServiceFileDirectory.setStatus('current')
cdlServiceFileSize = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlServiceFileSize.setStatus('current')
cdlResourceStatusUpdateMsgTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlResourceStatusUpdateMsgTrigger.setStatus('current')
cdlFaultSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 4, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlFaultSwitch.setStatus('current')
measurementReport = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5))
mrServerInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrServerInetAddrType.setStatus('current')
mrServerInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrServerInetAddr.setStatus('current')
mrFileDirectory = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrFileDirectory.setStatus('current')
mrFtpServerLoginName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrFtpServerLoginName.setStatus('current')
mrFtpServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrFtpServerPassword.setStatus('current')
mrFileSize = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrFileSize.setStatus('current')
mrTaskSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrTaskSwitch.setStatus('current')
mrStartDate = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 9), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrStartDate.setStatus('current')
mrEndDate = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 10), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrEndDate.setStatus('current')
mrTmValidNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrTmValidNum.setStatus('current')
mrStartTime1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrStartTime1.setStatus('current')
mrEndTime1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrEndTime1.setStatus('current')
mrStartTime2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrStartTime2.setStatus('current')
mrEndTime2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrEndTime2.setStatus('current')
mrMroSamplingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("ms120", 0), ("ms240", 1), ("ms480", 2), ("ms640", 3), ("ms1024", 4), ("ms2048", 5), ("ms5120", 6), ("ms10240", 7), ("min1", 8), ("min6", 9), ("min12", 10), ("min30", 11), ("min60", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrMroSamplingPeriod.setStatus('current')
mrMrsPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 3)).clone(namedValues=NamedValues(("min15", 0), ("min30", 1), ("min60", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrMrsPeriod.setStatus('current')
mrDim2MrsBitMap = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 18), Bits().clone(namedValues=NamedValues(("tadvRsrp", 0), ("tadvAoa", 1), ("rsrpRsrq", 2), ("ripRsrp", 3), ("ripRsrq", 4), ("plrULQci1SinrUL", 5), ("plrDLQciRsrq", 6), ("plrDLQciRsrp", 7), ("plrULQc1Rip", 8), ("sinrULRip", 9), ("puschPRBNumPhr", 10), ("pdschPRBNumRsrq", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrDim2MrsBitMap.setStatus('current')
mrDim1MrsBitMap = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 19), Bits().clone(namedValues=NamedValues(("rsrp", 0), ("rsrq", 1), ("tadv", 2), ("powerHeadRoom", 3), ("receivedIPower", 4), ("aoa", 5), ("packetLossRateULQci", 6), ("packetLossRateDLQci", 7), ("sinrUL", 8), ("prbreceivedIPower", 9), ("puschPRBNum", 10), ("pdschPRBNum", 11), ("eNBRxTxTimeDiff", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrDim1MrsBitMap.setStatus('current')
mrUeMrCfgRatio = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrUeMrCfgRatio.setStatus('current')
mrCellListBitMap = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 21), Bits().clone(namedValues=NamedValues(("localCell0", 0), ("localCell1", 1), ("localCell2", 2), ("localCell3", 3), ("localCell4", 4), ("localCell5", 5), ("localCell6", 6), ("localCell7", 7), ("localCell8", 8), ("localCell9", 9), ("localCell10", 10), ("localCell11", 11), ("localCell12", 12), ("localCell13", 13), ("localCell14", 14), ("localCell15", 15), ("localCell16", 16), ("localCell17", 17), ("localCell18", 18), ("localCell19", 19), ("localCell20", 20), ("localCell21", 21), ("localCell22", 22), ("localCell23", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrCellListBitMap.setStatus('current')
mrPrbRptType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("allRpt", 0), ("partRpt", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrPrbRptType.setStatus('current')
mrPrbStartPosition = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrPrbStartPosition.setStatus('current')
mrRsrpAdd = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-7, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrRsrpAdd.setStatus('current')
mrRsrpDropThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrRsrpDropThreshold.setStatus('current')
mrRsrpDropRatio = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrRsrpDropRatio.setStatus('current')
mrPacketLossRate = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrPacketLossRate.setStatus('current')
mrPHRReportMod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("rightnow", 0), ("max", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrPHRReportMod.setStatus('current')
mrPHRReportRatio = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrPHRReportRatio.setStatus('current')
mrPHRReportDelta = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrPHRReportDelta.setStatus('current')
mrMeasCtrlGeranSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrMeasCtrlGeranSwitch.setStatus('current')
mrMeasCtrlUtraSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrMeasCtrlUtraSwitch.setStatus('current')
mrMeasCtrlEutraDifFreSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrMeasCtrlEutraDifFreSwitch.setStatus('current')
mrMeasCtrlCdma2000Switch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrMeasCtrlCdma2000Switch.setStatus('current')
mrStartDifFreqSysMeasSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 37), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrStartDifFreqSysMeasSwitch.setStatus('current')
mrDocRptMROSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 38), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrDocRptMROSwitch.setStatus('current')
mrDocRptMRESwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 39), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrDocRptMRESwitch.setStatus('current')
mrDocRptMRSSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 40), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrDocRptMRSSwitch.setStatus('current')
mrUeRxTxTimeDiff = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 41), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrUeRxTxTimeDiff.setStatus('current')
mrLteNcMroOptSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 42), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrLteNcMroOptSwitch.setStatus('current')
mrPLRULThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrPLRULThreshold.setStatus('current')
mrPLRULCorrection = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrPLRULCorrection.setStatus('current')
mrQCI1PLRULThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrQCI1PLRULThreshold.setStatus('current')
mrQCI1PLRULCorrection = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrQCI1PLRULCorrection.setStatus('current')
mrQCI5PLRULThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrQCI5PLRULThreshold.setStatus('current')
mrQCI5PLRULCorrection = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrQCI5PLRULCorrection.setStatus('current')
mrQCI9PLRDLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrQCI9PLRDLThreshold.setStatus('current')
mrQCI9PLRDLCorrection = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrQCI9PLRDLCorrection.setStatus('current')
mrQCI1PLRDLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrQCI1PLRDLThreshold.setStatus('current')
mrQCI1PLRDLCorrection = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrQCI1PLRDLCorrection.setStatus('current')
mrQCI5PLRDLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrQCI5PLRDLThreshold.setStatus('current')
mrQCI5PLRDLCorrection = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrQCI5PLRDLCorrection.setStatus('current')
mrUeCellCompIdRptSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 55), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrUeCellCompIdRptSwitch.setStatus('current')
mrImsiRptSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 56), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrImsiRptSwitch.setStatus('current')
mrUeCellCompIdRptDirectory = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrUeCellCompIdRptDirectory.setStatus('current')
mrNcRsrpSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 59), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrNcRsrpSwitch.setStatus('current')
mrNcRsrpOffset = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 5, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrNcRsrpOffset.setStatus('current')
alarmActUpload = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6))
almActUploadRegInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 1), )
if mibBuilder.loadTexts: almActUploadRegInfoTable.setStatus('current')
almActUploadRegInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "almActUploadAlarmNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "almActUploadLogIdx"))
if mibBuilder.loadTexts: almActUploadRegInfoEntry.setStatus('current')
almActUploadAlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: almActUploadAlarmNo.setStatus('current')
almActUploadLogIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: almActUploadLogIdx.setStatus('current')
almActUploadRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: almActUploadRowStatus.setStatus('current')
almActUploadBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 97, 98, 99, 109, 128, 130, 141, 143, 177, 178, 224, 240, 241)).clone(namedValues=NamedValues(("unknown", 0), ("scta", 97), ("bpia", 98), ("bpoa", 99), ("bpoe", 109), ("bpof", 128), ("sctc", 130), ("sctd", 141), ("bpog", 143), ("bpoh", 177), ("scte", 178), ("mmbc", 224), ("sctf", 240), ("bpoi", 241)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: almActUploadBoardType.setStatus('current')
almActUploadProcNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: almActUploadProcNo.setStatus('current')
almActUploadLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: almActUploadLogType.setStatus('current')
almActUploadCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 2))
almActUploadInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 2, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: almActUploadInetAddrType.setStatus('current')
almActUploadInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 2, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: almActUploadInetAddr.setStatus('current')
almActUploadftpServerLoginName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: almActUploadftpServerLoginName.setStatus('current')
almActUploadftpServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: almActUploadftpServerPassword.setStatus('current')
almActUploadFTPDirectory = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: almActUploadFTPDirectory.setStatus('current')
almActUploadSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 6, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: almActUploadSwitch.setStatus('current')
omTestInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7))
omTestDspTskFltSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omTestDspTskFltSwitch.setStatus('current')
omTestPpcTskFltSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omTestPpcTskFltSwitch.setStatus('current')
omTestProcPerformanceAdjFaoctor = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omTestProcPerformanceAdjFaoctor.setStatus('current')
omTestMrStaggerDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omTestMrStaggerDelayTime.setStatus('current')
omTestCdlStaggerDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omTestCdlStaggerDelayTime.setStatus('current')
omTestLogSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omTestLogSwitch.setStatus('current')
omTestCdlRandomGroupTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omTestCdlRandomGroupTime.setStatus('current')
omTestAlarmRpsSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omTestAlarmRpsSwitch.setStatus('current')
omTestAlarmRptStats = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notRPT", 0), ("rPT", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: omTestAlarmRptStats.setStatus('current')
omTestHeartbeatSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omTestHeartbeatSwitch.setStatus('current')
omTestHeartbeatPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omTestHeartbeatPeriod.setStatus('current')
omTestRruResetRruTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(15, 120), ValueRangeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omTestRruResetRruTimer.setStatus('current')
omTestAlmPersisSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omTestAlmPersisSwitch.setStatus('current')
omTestS1DelayRecSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 2, 7, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omTestS1DelayRecSwitch.setStatus('current')
nodeBCtrlPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3))
alarmCtrlDSPRecoverSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmCtrlDSPRecoverSwitch.setStatus('current')
alarmCtrlRRUVSWRRptSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmCtrlRRUVSWRRptSwitch.setStatus('current')
rruCtrlVSWRMonitorSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rruCtrlVSWRMonitorSwitch.setStatus('current')
antennaArrayFaultDealSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaArrayFaultDealSwitch.setStatus('current')
s1FaultResetNBSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s1FaultResetNBSwitch.setStatus('current')
s1FaultResetNBTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s1FaultResetNBTime.setStatus('current')
selftTestSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selftTestSwitch.setStatus('current')
ofpSelfAdaptiveCtrlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ofpSelfAdaptiveCtrlSwitch.setStatus('current')
ofpSelfAdaptiveCtrlTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ofpSelfAdaptiveCtrlTime.setStatus('current')
rruSlaveOfpFaultDealSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rruSlaveOfpFaultDealSwitch.setStatus('current')
rruFddiRecClkMonSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rruFddiRecClkMonSwitch.setStatus('current')
curCfgFileSavePeriodSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: curCfgFileSavePeriodSwitch.setStatus('current')
curCfgFileSavePeriodTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: curCfgFileSavePeriodTime.setStatus('current')
cfgFileAmalgamTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgFileAmalgamTrigger.setStatus('current')
rollBackSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rollBackSwitch.setStatus('current')
rtIotEventLogSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIotEventLogSwitch.setStatus('current')
s1FaultSnapshotSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s1FaultSnapshotSwitch.setStatus('current')
tranRealCapPacketSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tranRealCapPacketSwitch.setStatus('current')
brdIrFrameSelfAdaptSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brdIrFrameSelfAdaptSwitch.setStatus('current')
protocolStackCapPacketSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolStackCapPacketSwitch.setStatus('current')
sysUpShiftSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysUpShiftSwitch.setStatus('current')
s1FaultPolicy = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("releaseusr", 1), ("redirectusr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s1FaultPolicy.setStatus('current')
selfTransX2SetupSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selfTransX2SetupSwitch.setStatus('current')
freqChangeSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: freqChangeSwitch.setStatus('current')
hlProcMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlProcMaxNum.setStatus('current')
sipCapPacketSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCapPacketSwitch.setStatus('current')
pcapFilterRule = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("noRule", 0), ("ipRule", 1), ("dscpRule", 2), ("cmdRule", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcapFilterRule.setStatus('current')
pcapFilterIpType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcapFilterIpType.setStatus('current')
pcapFilterIpaddress1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 31), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcapFilterIpaddress1.setStatus('current')
pcapFilterIpaddress2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 32), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcapFilterIpaddress2.setStatus('current')
pcapFilterIpaddress3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 33), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcapFilterIpaddress3.setStatus('current')
pcapFilterDscp = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcapFilterDscp.setStatus('current')
backupVersionTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupVersionTrigger.setStatus('current')
backupCopyResult = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("invalid", 0), ("fail", 1), ("success", 2), ("backloading", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupCopyResult.setStatus('current')
rapidIOSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 37), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rapidIOSwitch.setStatus('current')
enbSgwLinkPerformanceSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 38), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enbSgwLinkPerformanceSwitch.setStatus('current')
gtpcCheckSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 40), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtpcCheckSwitch.setStatus('current')
baseBoardSWCfgEnableSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 41), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseBoardSWCfgEnableSwitch.setStatus('current')
rruPortSelfAdaptiveCtrlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 42), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rruPortSelfAdaptiveCtrlSwitch.setStatus('current')
verProtectSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 43), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: verProtectSwitch.setStatus('current')
reservedCmdString = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedCmdString.setStatus('current')
omLinkFaultSwitchTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkFaultSwitchTime.setStatus('current')
tdExitCmdSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 46), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdExitCmdSwitch.setStatus('current')
tdExitStatus = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 3, 47), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("noExit", 0), ("onExit", 1), ("sucExit", 2), ("failExit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdExitStatus.setStatus('current')
eNBConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4))
transport = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1))
eNb = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1))
ipPhysicalPort = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2))
ethernetPortTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1), )
if mibBuilder.loadTexts: ethernetPortTable.setStatus('current')
ethernetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ethRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ethShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ethSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ethPhyPortId"))
if mibBuilder.loadTexts: ethernetPortEntry.setStatus('current')
ethRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: ethRackNo.setStatus('current')
ethShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: ethShelfNo.setStatus('current')
ethSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: ethSlotNo.setStatus('current')
ethPhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: ethPhyPortId.setStatus('current')
ethRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRowStatus.setStatus('current')
ethCfgPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("auto", 0), ("t10M", 1), ("t100M", 2), ("t1000M", 3), ("t10000M", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethCfgPortMode.setStatus('current')
ethRealPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 0), ("t10M", 1), ("t100M", 2), ("t1000M", 3), ("t10000M", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethRealPortMode.setStatus('current')
ethLogicBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethLogicBandwidth.setStatus('current')
ethDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("fullDuplex", 0), ("halfDuplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethDuplexMode.setStatus('current')
ethLocalMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 11), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethLocalMacAddress.setStatus('current')
ethPortBlockSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("block", 0), ("unblock", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortBlockSwitch.setStatus('current')
ethPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortStatus.setStatus('current')
ethPortUlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortUlRate.setStatus('current')
ethPortDlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortDlRate.setStatus('current')
ethPortUlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortUlByte.setStatus('current')
ethPortDlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortDlByte.setStatus('current')
ethCongestThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethCongestThreshold.setStatus('current')
ethPortUpUseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortUpUseRatio.setStatus('current')
ethPortDownUseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortDownUseRatio.setStatus('current')
ethPortGigabitSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortGigabitSwitch.setStatus('current')
ethPortActuralBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortActuralBitRate.setStatus('current')
nodeBHW = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2))
clock = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1))
clockCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 1))
clkCommUsableState = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clkCommUsableState.setStatus('current')
clkCommRunState = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("start", 0), ("warmup", 1), ("lock", 2), ("holdover", 3), ("holdoveralert", 4), ("holdovertimeout", 5), ("abnormal", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clkCommRunState.setStatus('current')
clkCommHoldoverTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clkCommHoldoverTime.setStatus('current')
clkCommClkSupplySrc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("unknown", 0), ("gps", 1), ("cnss", 2), ("series", 3), ("ptp1588", 4), ("romteClk", 5), ("cmSync", 6), ("interSeries", 7), ("opSeries", 8), ("ocuSeries", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clkCommClkSupplySrc.setStatus('current')
clkCommPLLDelayAdjustThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clkCommPLLDelayAdjustThreshold.setStatus('current')
clockSourceTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 2), )
if mibBuilder.loadTexts: clockSourceTable.setStatus('current')
clockSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "clkSrcIndex"))
if mibBuilder.loadTexts: clockSourceEntry.setStatus('current')
clkSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: clkSrcIndex.setStatus('current')
clkSrcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clkSrcRowStatus.setStatus('current')
clkSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("unknown", 0), ("gps", 1), ("cnss", 2), ("series", 3), ("ptp1588", 4), ("romteClk", 5), ("cmSync", 6), ("interSeries", 7), ("opSeries", 8), ("ocuSeries", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clkSrcType.setStatus('current')
clkSrcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("active", 0), ("standby", 1), ("unusable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clkSrcStatus.setStatus('current')
clkSrcDelayValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000000, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clkSrcDelayValue.setStatus('current')
gpsDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3))
gpsTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1), )
if mibBuilder.loadTexts: gpsTable.setStatus('current')
gpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "gpsRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "gpsShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "gpsSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "gpsIndexOnBoard"))
if mibBuilder.loadTexts: gpsEntry.setStatus('current')
gpsRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: gpsRackNo.setStatus('current')
gpsShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: gpsShelfNo.setStatus('current')
gpsSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: gpsSlotNo.setStatus('current')
gpsIndexOnBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: gpsIndexOnBoard.setStatus('current')
gpsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsRowStatus.setStatus('current')
gpsDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("gps", 1), ("cnss", 2), ("romteGps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsDevType.setStatus('current')
gpsLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsLongitude.setStatus('current')
gpsLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsLatitude.setStatus('current')
gpsElevation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsElevation.setStatus('current')
gpsUnlockReason = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 10), Bits().clone(namedValues=NamedValues(("noUse0", 0), ("antOpen", 1), ("antSht", 2), ("notTrk", 3), ("noUse4", 4), ("svyIn", 5), ("noPos", 6), ("lpsecPend", 7), ("testMd", 8), ("posIvd", 9), ("noUse10", 10), ("ancWit", 11), ("ppsGen", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsUnlockReason.setStatus('current')
gpsInfoLockSateNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsInfoLockSateNum.setStatus('current')
gpsInfoSignalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsInfoSignalValue.setStatus('current')
gpsReceiverSoftWareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsReceiverSoftWareVer.setStatus('current')
gpsReceiverAntennaDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsReceiverAntennaDelay.setStatus('current')
gpsReceiverResetTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsReceiverResetTrigger.setStatus('current')
remoteClockModule = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4))
remoteClockModuleTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1), )
if mibBuilder.loadTexts: remoteClockModuleTable.setStatus('current')
remoteClockModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "remoteClkModuleIndex"))
if mibBuilder.loadTexts: remoteClockModuleEntry.setStatus('current')
remoteClkModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: remoteClkModuleIndex.setStatus('current')
remoteClkModuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkModuleRowStatus.setStatus('current')
remoteClkModuleManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkModuleManufacturer.setStatus('current')
remoteClkModuleAntennaDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteClkModuleAntennaDelay.setStatus('current')
remoteClkModuleTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkModuleTemperature.setStatus('current')
remoteClkModuleSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkModuleSoftwareVersion.setStatus('current')
remoteClkModuleFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkModuleFirmwareVersion.setStatus('current')
remoteClkModuleHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkModuleHardwareVersion.setStatus('current')
remoteClkModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkModuleSerialNumber.setStatus('current')
remoteClkOpticalModuleRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkOpticalModuleRxPower.setStatus('current')
remoteClkOpticalModuleTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkOpticalModuleTxPower.setStatus('current')
remoteClkOpticalModuleManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkOpticalModuleManufacturer.setStatus('current')
remoteClkOpticalModuleBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkOpticalModuleBitRate.setStatus('current')
remoteClkOpticalModuleTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkOpticalModuleTemperature.setStatus('current')
remoteClkOpticalModuleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkOpticalModuleVoltage.setStatus('current')
remoteClkOpticalModuleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkOpticalModuleCurrent.setStatus('current')
remoteClkModuleResetTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteClkModuleResetTrigger.setStatus('current')
remoteClkModuleLoopBackTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteClkModuleLoopBackTrigger.setStatus('current')
remoteClkModuleLockSateNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkModuleLockSateNum.setStatus('current')
remoteClkModuleSignalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 1, 4, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteClkModuleSignalValue.setStatus('current')
ofpPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2))
ofpPortTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1), )
if mibBuilder.loadTexts: ofpPortTable.setStatus('current')
ofpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ofpPortRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ofpPortShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ofpPortSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ofpPortIndexOnBoard"))
if mibBuilder.loadTexts: ofpPortEntry.setStatus('current')
ofpPortRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: ofpPortRackNo.setStatus('current')
ofpPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: ofpPortShelfNo.setStatus('current')
ofpPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: ofpPortSlotNo.setStatus('current')
ofpPortIndexOnBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: ofpPortIndexOnBoard.setStatus('current')
ofpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortRowStatus.setStatus('current')
ofpPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 0), ("eth", 1), ("stm", 2), ("ir", 3), ("remoteClk", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortType.setStatus('current')
ofpPortFpgaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("syn", 0), ("asyn", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortFpgaStatus.setStatus('current')
ofpPortModuleStandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleStandStatus.setStatus('current')
ofpPortModuleTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleTemperature.setStatus('current')
ofpPortModuleVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleVcc.setStatus('current')
ofpPortModuleBias = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleBias.setStatus('current')
ofpPortModuleTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleTxPower.setStatus('current')
ofpPortModuleRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleRxPower.setStatus('current')
ofpPortModuleLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("noLosss", 0), ("loss", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleLossStatus.setStatus('current')
ofpPortModuleVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleVendorName.setStatus('current')
ofpPortModuleS9umKmLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleS9umKmLen.setStatus('current')
ofpPortModuleS9um100MLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleS9um100MLen.setStatus('current')
ofpPortModuleM50um10MLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleM50um10MLen.setStatus('current')
ofpPortModuleM625um10MLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleM625um10MLen.setStatus('current')
ofpPortModuleBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleBitRate.setStatus('current')
ofpPortLoopBackTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("zeroLoop", 0), ("firstLoop", 1), ("secondLoop", 2), ("thirdLoop", 3), ("fourthLoop", 4), ("fifthLoop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ofpPortLoopBackTrigger.setStatus('current')
ofpPortLoopCheckPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ofpPortLoopCheckPeriod.setStatus('current')
ofpPortMatchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("match", 1), ("notmatch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortMatchStatus.setStatus('current')
ofpPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortLinkStatus.setStatus('current')
ofpPortModuleActualBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortModuleActualBitRate.setStatus('current')
ofpPortFPGARate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 3)).clone(namedValues=NamedValues(("invalid", -1), ("rate25G", 0), ("rate5G", 1), ("rate10G", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ofpPortFPGARate.setStatus('current')
ofpPortResetOfpTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ofpPortResetOfpTrigger.setStatus('current')
ofpPortOperationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortOperationStatus.setStatus('current')
ofpPortBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortBitErrorRate.setStatus('current')
ofpPortFpgaOpenState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ofpPortFpgaOpenState.setStatus('current')
ofpPortGsmSetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofpPortGsmSetFlag.setStatus('current')
ofpPortCommInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 2))
ofpPortRxPowerThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-300, -100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ofpPortRxPowerThreshold.setStatus('current')
environmentMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3))
rootNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 1))
outerAlarmBoxTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 1, 1), )
if mibBuilder.loadTexts: outerAlarmBoxTable.setStatus('current')
outerAlarmBoxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "oabIndex"))
if mibBuilder.loadTexts: outerAlarmBoxEntry.setStatus('current')
oabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: oabIndex.setStatus('current')
oabRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 1, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oabRowStatus.setStatus('current')
oabResetTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oabResetTrigger.setStatus('current')
oabPathReverseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oabPathReverseStatus.setStatus('current')
dryContactTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 1, 2), )
if mibBuilder.loadTexts: dryContactTable.setStatus('current')
dryContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 1, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "dryContactNo"))
if mibBuilder.loadTexts: dryContactEntry.setStatus('current')
dryContactNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: dryContactNo.setStatus('current')
dryContactRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dryContactRowStatus.setStatus('current')
dryContactAlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1219, 1234), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dryContactAlarmNo.setStatus('current')
dryContactAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dryContactAlarmState.setStatus('current')
supervisionEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2))
emEquipmentTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 1), )
if mibBuilder.loadTexts: emEquipmentTable.setStatus('current')
emEquipmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "emEquipmentIndex"))
if mibBuilder.loadTexts: emEquipmentEntry.setStatus('current')
emEquipmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: emEquipmentIndex.setStatus('current')
emEquipmentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emEquipmentRowStatus.setStatus('current')
emEquipmentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emEquipmentLocation.setStatus('current')
emEquipmentManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emEquipmentManufacturer.setStatus('current')
emEquipmentModel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emEquipmentModel.setStatus('current')
emEquipmentProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unknown", 0), ("ver20", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emEquipmentProtocolVersion.setStatus('current')
emEquipmentSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emEquipmentSoftwareVersion.setStatus('current')
emEquipmentOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emEquipmentOperationState.setStatus('current')
emTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 2), )
if mibBuilder.loadTexts: emTemperatureTable.setStatus('current')
emTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "emTemperatureIndex"))
if mibBuilder.loadTexts: emTemperatureEntry.setStatus('current')
emTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: emTemperatureIndex.setStatus('current')
emTemperatureRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emTemperatureRowStatus.setStatus('current')
emTemperatureLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emTemperatureLocation.setStatus('current')
emTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-9999, 10000), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emTemperature.setStatus('current')
emTemperatureUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 6000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emTemperatureUpperLimit.setStatus('current')
emTemperatureLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1500, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emTemperatureLowerLimit.setStatus('current')
emHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 3), )
if mibBuilder.loadTexts: emHumidityTable.setStatus('current')
emHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "emHumidityIndex"))
if mibBuilder.loadTexts: emHumidityEntry.setStatus('current')
emHumidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: emHumidityIndex.setStatus('current')
emHumidityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emHumidityRowStatus.setStatus('current')
emHumidityLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emHumidityLocation.setStatus('current')
emHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 10000), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emHumidity.setStatus('current')
emHumidityUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7000, 9000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emHumidityUpperLimit.setStatus('current')
emHumidityLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emHumidityLowerLimit.setStatus('current')
emSmokeTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 4), )
if mibBuilder.loadTexts: emSmokeTable.setStatus('current')
emSmokeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "emSmokeIndex"))
if mibBuilder.loadTexts: emSmokeEntry.setStatus('current')
emSmokeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: emSmokeIndex.setStatus('current')
emSmokeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 4, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emSmokeRowStatus.setStatus('current')
emSmokeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emSmokeLocation.setStatus('current')
emWaterTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 5), )
if mibBuilder.loadTexts: emWaterTable.setStatus('current')
emWaterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "emWaterIndex"))
if mibBuilder.loadTexts: emWaterEntry.setStatus('current')
emWaterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: emWaterIndex.setStatus('current')
emWaterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 5, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emWaterRowStatus.setStatus('current')
emWaterLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emWaterLocation.setStatus('current')
emTheftTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 6), )
if mibBuilder.loadTexts: emTheftTable.setStatus('current')
emTheftEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "emTheftIndex"))
if mibBuilder.loadTexts: emTheftEntry.setStatus('current')
emTheftIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: emTheftIndex.setStatus('current')
emTheftRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 6, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emTheftRowStatus.setStatus('current')
emTheftLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emTheftLocation.setStatus('current')
emThunderboltTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 7), )
if mibBuilder.loadTexts: emThunderboltTable.setStatus('current')
emThunderboltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "emThunderboltIndex"))
if mibBuilder.loadTexts: emThunderboltEntry.setStatus('current')
emThunderboltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: emThunderboltIndex.setStatus('current')
emThunderboltRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 7, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emThunderboltRowStatus.setStatus('current')
emThunderboltLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emThunderboltLocation.setStatus('current')
emThunderboltAlarmSwitchReportState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 3, 4)).clone(namedValues=NamedValues(("unknown", 0), ("high", 3), ("lower", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emThunderboltAlarmSwitchReportState.setStatus('current')
peripheralEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3))
airConditioner = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1))
airConditionerTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1), )
if mibBuilder.loadTexts: airConditionerTable.setStatus('current')
airConditionerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "airConditionerIndex"))
if mibBuilder.loadTexts: airConditionerEntry.setStatus('current')
airConditionerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: airConditionerIndex.setStatus('current')
airConditionerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airConditionerRowStatus.setStatus('current')
airCondLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCondLocation.setStatus('current')
airCondManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondManufacturer.setStatus('current')
airCondModel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondModel.setStatus('current')
airCondProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unknown", 0), ("ver20", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondProtocolVersion.setStatus('current')
airCondRunningSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCondRunningSwitch.setStatus('current')
airCondRunningState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondRunningState.setStatus('current')
airCondVentilationState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondVentilationState.setStatus('current')
airCondCoolingState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondCoolingState.setStatus('current')
airCondHeatingState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondHeatingState.setStatus('current')
airCondCoolingStopTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCondCoolingStopTemperature.setStatus('current')
airCondCoolingSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCondCoolingSensitivity.setStatus('current')
airCondWarmingStartTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCondWarmingStartTemperature.setStatus('current')
airCondWarmingSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCondWarmingSensitivity.setStatus('current')
airCondOverTemperatureLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 6000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCondOverTemperatureLimit.setStatus('current')
airCondUnderTemperatureLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1500, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCondUnderTemperatureLimit.setStatus('current')
airCondVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondVoltage.setStatus('current')
airCondSupplyAirTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondSupplyAirTemperature.setStatus('current')
airCondReturnAirTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondReturnAirTemperature.setStatus('current')
airCondSupplyAirHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondSupplyAirHumidity.setStatus('current')
airCondReturnAirHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondReturnAirHumidity.setStatus('current')
airCondOverVoltageAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondOverVoltageAlarmState.setStatus('current')
airCondUnderVoltageAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondUnderVoltageAlarmState.setStatus('current')
airCondOverTemperatureAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondOverTemperatureAlarmState.setStatus('current')
airCondUnderTemperatureAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondUnderTemperatureAlarmState.setStatus('current')
airCondInnerFanAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondInnerFanAlarmState.setStatus('current')
airCondOuterFanAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondOuterFanAlarmState.setStatus('current')
airCondReturnAirTempSensorAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondReturnAirTempSensorAlarmState.setStatus('current')
airCondReturnAirHumiditySensorAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondReturnAirHumiditySensorAlarmState.setStatus('current')
airCondCompressorOverVoltageAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondCompressorOverVoltageAlarmState.setStatus('current')
airCondCompressorUnderVoltageAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondCompressorUnderVoltageAlarmState.setStatus('current')
airCondFilterLoggedAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondFilterLoggedAlarmState.setStatus('current')
airCondOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCondOperationState.setStatus('current')
ioc = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2))
iocTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 1), )
if mibBuilder.loadTexts: iocTable.setStatus('current')
iocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "iocIndex"))
if mibBuilder.loadTexts: iocEntry.setStatus('current')
iocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: iocIndex.setStatus('current')
iocRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iocRowStatus.setStatus('current')
iocDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iocDescription.setStatus('current')
heatExchangerTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2), )
if mibBuilder.loadTexts: heatExchangerTable.setStatus('current')
heatExchangerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "heatExIndex"))
if mibBuilder.loadTexts: heatExchangerEntry.setStatus('current')
heatExIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: heatExIndex.setStatus('current')
heatExRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heatExRowStatus.setStatus('current')
heatExLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heatExLocation.setStatus('current')
heatExManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: heatExManufacturer.setStatus('current')
heatExModel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: heatExModel.setStatus('current')
heatExProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: heatExProtocolVersion.setStatus('current')
heatExRunningState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: heatExRunningState.setStatus('current')
heatExInnerFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: heatExInnerFanState.setStatus('current')
heatExOuterFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: heatExOuterFanState.setStatus('current')
heatExOuterFanRunTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heatExOuterFanRunTemperature.setStatus('current')
heatExOuterFanTempOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 4500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heatExOuterFanTempOffset.setStatus('current')
heatExOverTemperatureLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 8600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heatExOverTemperatureLimit.setStatus('current')
heatExUnderTemperatureLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1500, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heatExUnderTemperatureLimit.setStatus('current')
heatExVoltageDC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: heatExVoltageDC.setStatus('current')
heatExReturnAirTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 3, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: heatExReturnAirTemperature.setStatus('current')
coolingFan = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4))
coolingCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 1))
coolingPolicy = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("stablePWM", 0), ("stagePWM", 1), ("callBackPWM", 2), ("intelligentPWM", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingPolicy.setStatus('current')
coolingFanStablePWM = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingFanStablePWM.setStatus('current')
coolingNormalMaxTemperature = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingNormalMaxTemperature.setStatus('current')
coolingNormalMinTemperature = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingNormalMinTemperature.setStatus('current')
coolingTargetTemperature = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingTargetTemperature.setStatus('current')
coolingTemperatureSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingTemperatureSensitivity.setStatus('current')
coolingFanAdjustPWMStep = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingFanAdjustPWMStep.setStatus('current')
coolingAdjustTempThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingAdjustTempThreshold.setStatus('current')
coolingFanLoadAdjustUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingFanLoadAdjustUpperLimit.setStatus('current')
coolingFanLoadAdjustLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingFanLoadAdjustLowerLimit.setStatus('current')
coolingFanHighSpeedThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingFanHighSpeedThreshold.setStatus('current')
coolingFanHighSpeedDetectPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingFanHighSpeedDetectPeriod.setStatus('current')
coolingFanTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 2), )
if mibBuilder.loadTexts: coolingFanTable.setStatus('current')
coolingFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "coolingFanShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "coolingFanIndex"))
if mibBuilder.loadTexts: coolingFanEntry.setStatus('current')
coolingFanShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: coolingFanShelfNo.setStatus('current')
coolingFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: coolingFanIndex.setStatus('current')
coolingFanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 2, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingFanRowStatus.setStatus('current')
coolingFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingFanSpeed.setStatus('current')
coolingFanPWM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingFanPWM.setStatus('current')
calibration = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5))
initCalibrationTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3), )
if mibBuilder.loadTexts: initCalibrationTable.setStatus('current')
initCalibrationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "initCalibrationRRUNo"))
if mibBuilder.loadTexts: initCalibrationEntry.setStatus('current')
initCalibrationRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: initCalibrationRRUNo.setStatus('current')
initCalibrationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationRowStatus.setStatus('current')
initCalibrationAnt1TxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt1TxStatus.setStatus('current')
initCalibrationAnt1RxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt1RxStatus.setStatus('current')
initCalibrationAnt2TxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt2TxStatus.setStatus('current')
initCalibrationAnt2RxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt2RxStatus.setStatus('current')
initCalibrationAnt3TxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt3TxStatus.setStatus('current')
initCalibrationAnt3RxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt3RxStatus.setStatus('current')
initCalibrationAnt4TxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt4TxStatus.setStatus('current')
initCalibrationAnt4RxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt4RxStatus.setStatus('current')
initCalibrationAnt5TxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt5TxStatus.setStatus('current')
initCalibrationAnt5RxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt5RxStatus.setStatus('current')
initCalibrationAnt6TxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt6TxStatus.setStatus('current')
initCalibrationAnt6RxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt6RxStatus.setStatus('current')
initCalibrationAnt7TxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt7TxStatus.setStatus('current')
initCalibrationAnt7RxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt7RxStatus.setStatus('current')
initCalibrationAnt8TxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt8TxStatus.setStatus('current')
initCalibrationAnt8RxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCalibrationAnt8RxStatus.setStatus('current')
remoteRadioUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6))
topologyRRUTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1), )
if mibBuilder.loadTexts: topologyRRUTable.setStatus('current')
topologyRRUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoRRUNo"))
if mibBuilder.loadTexts: topologyRRUEntry.setStatus('current')
topoRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: topoRRUNo.setStatus('current')
topoRRURowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRURowStatus.setStatus('current')
topoRRUTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUTypeName.setStatus('current')
topoRRULocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRULocation.setStatus('current')
topoRRUMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUMacAddr.setStatus('current')
topoRRUAccessRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAccessRackNo.setStatus('current')
topoRRUAccessShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAccessShelfNo.setStatus('current')
topoRRUAccessSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 7), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAccessSlotNo.setStatus('current')
topoRRUAccessBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 54, 56, 58, 66, 67, 68, 70, 71, 72, 75, 97, 98, 99, 109, 113, 114, 128, 141, 142, 143, 177, 178, 224, 240, 241)).clone(namedValues=NamedValues(("unknown", 0), ("ccu", 54), ("ceu", 56), ("bbu", 58), ("iiu", 66), ("bcu", 67), ("biu", 68), ("accu", 70), ("abbut", 71), ("abbuf", 72), ("eiuDof", 75), ("scta", 97), ("bpia", 98), ("bpoa", 99), ("bpoe", 109), ("tdru311B", 113), ("tdru312", 114), ("bpof", 128), ("sctd", 141), ("mmba", 142), ("bpog", 143), ("bpoh", 177), ("scte", 178), ("mmbc", 224), ("sctf", 240), ("bpoi", 241)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAccessBoardType.setStatus('current')
topoRRUOfp1AccessOfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUOfp1AccessOfpPortNo.setStatus('current')
topoRRUOfp1AccessLinePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 6), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUOfp1AccessLinePosition.setStatus('current')
topoRRUOfp2AccessOfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUOfp2AccessOfpPortNo.setStatus('current')
topoRRUOfp2AccessLinePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 6), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUOfp2AccessLinePosition.setStatus('current')
topoRRUMainOfpNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUMainOfpNo.setStatus('current')
topoRRUAccessUlTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAccessUlTimeDelay.setStatus('current')
topoRRUAccessDlTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAccessDlTimeDelay.setStatus('current')
topoRRUIsNetMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("matched", 0), ("unmatched", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUIsNetMatched.setStatus('current')
topoRRUMaxAntPathNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUMaxAntPathNum.setStatus('current')
topoRRUMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUMaxTxPower.setStatus('current')
topoRRUBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandWidth.setStatus('current')
topoRRUBandScope = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2, 3, 4, 6, 7, 8, 10, 254)).clone(namedValues=NamedValues(("unknown", -1), ("v1880to1920", 0), ("v2010to2025", 1), ("v2300to2400", 2), ("v2575to2615", 3), ("v2545to2575", 4), ("v1447to1467", 6), ("v2620to2690", 7), ("v1785to1805", 8), ("v703to803", 10), ("otherBand", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandScope.setStatus('current')
topoRRUMaxTimeDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUMaxTimeDelayCompensation.setStatus('current')
topoRRUHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUHardwareType.setStatus('current')
topoRRUHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUHardwareVersion.setStatus('current')
topoRRUSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUSoftwareVersion.setStatus('current')
topoRRUFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUFirmwareVersion.setStatus('current')
topoRRUOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("normal", 0), ("test", 1), ("doubleNormal", 2), ("doubleTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUOperationMode.setStatus('current')
topoRRURunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("free", 0), ("test", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRURunningStatus.setStatus('current')
topoRRUAccessPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("unknown", 0), ("broadcastAccess", 1), ("pathSetup", 2), ("versionUpdate", 3), ("timeDelayMeasure", 4), ("antConfig", 5), ("available", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAccessPhase.setStatus('current')
topoRRUOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUOperationalState.setStatus('current')
topoRRULocalOscillationFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRULocalOscillationFreq.setStatus('current')
topoRRULocalOscillationState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("locked", 0), ("unLocked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRULocalOscillationState.setStatus('current')
topoRRUClockState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("syn", 0), ("asyn", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUClockState.setStatus('current')
topoRRUTemperatureUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUTemperatureUpperLimit.setStatus('current')
topoRRUTemperatureLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUTemperatureLowerLimit.setStatus('current')
topoRRUStateMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("radioFrameSyn", 0), ("superGroupSyn", 1), ("synErr", 2), ("statD", 3), ("statE", 4), ("statF", 5), ("statG", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUStateMachine.setStatus('current')
topoRRUResetTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 37), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 11)).clone(namedValues=NamedValues(("notEffectNextRru", 0), ("effectNextRru", 1), ("bbuCmdCode", 2), ("remoteResetRru", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUResetTrigger.setStatus('current')
topoRRUNextResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUNextResetTimer.setStatus('current')
topoRRUProgramDownloadTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 39), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("software", 0), ("firmware", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUProgramDownloadTrigger.setStatus('current')
topoRRUProgramActivateTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 40), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("software", 0), ("firmware", 1), ("softwareAndFirmware", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUProgramActivateTrigger.setStatus('current')
topoRRUSystemContact = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUSystemContact.setStatus('current')
topoRRUSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 42), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUSystemTime.setStatus('current')
topoRRUOfpWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 43), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", -1), ("normal", 1), ("lined", 2), ("backup", 3), ("shared", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUOfpWorkMode.setStatus('current')
topoRRUCheckActiveAlarmTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 44), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUCheckActiveAlarmTrigger.setStatus('current')
topoRRUCheckActiveAlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUCheckActiveAlarmNo.setStatus('current')
topoRRUCheckActiveAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUCheckActiveAlarmValue.setStatus('current')
topoRRULogDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRULogDestination.setStatus('current')
topoRRULogFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 48), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("alarm", 0), ("user", 1), ("system", 2), ("all", 3), ("operate", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRULogFileType.setStatus('current')
topoRRURemoteResetNextRruTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 49), Integer32().subtype(subtypeSpec=SingleValueConstraint(0)).clone(namedValues=NamedValues(("on", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRURemoteResetNextRruTrigger.setStatus('current')
topoRRURemoteResetNextRruTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(500, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRURemoteResetNextRruTimer.setStatus('current')
topoRRUFaultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 51), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("fault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUFaultStatus.setStatus('current')
topoRRUUnavaiableReason = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 52), Bits().clone(namedValues=NamedValues(("rruMasterOfpAbnormalBBU", 0), ("rruSlaveOfpAbnormalBBU", 1), ("rruLocalCrystaloidUnlock", 2), ("rruSlaveOfpAbnormalRRU", 3), ("rruOfpModuleMixedUse", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUUnavaiableReason.setStatus('current')
topoRRUUUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUUUpTime.setStatus('current')
topoRRUAccessSlaveUlTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 54), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAccessSlaveUlTimeDelay.setStatus('current')
topoRRUAccessSlaveDlTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAccessSlaveDlTimeDelay.setStatus('current')
topoRRUAccessMasterFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAccessMasterFiberLength.setStatus('current')
topoRRUAccessSlaveFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAccessSlaveFiberLength.setStatus('current')
topoRRUFiberFaultReason = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 58), Bits().clone(namedValues=NamedValues(("rruMasterOfpAbnormalBBU", 0), ("rruSlaveOfpAbnormalBBU", 1), ("rruSlaveOfpAbnormalRRU", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUFiberFaultReason.setStatus('current')
topoRRUSupportTdCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUSupportTdCarrierNum.setStatus('current')
topoRRUDLMaxTimeDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 60), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUDLMaxTimeDelayCompensation.setStatus('current')
topoRRUULMaxTimeDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 61), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUULMaxTimeDelayCompensation.setStatus('current')
topoRRUSupportCellWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 62), Bits().clone(namedValues=NamedValues(("tddlte", 0), ("tdscdma", 1), ("fddlte", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUSupportCellWorkMode.setStatus('current')
topoRRUSupportSingleAntCal = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 63), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unsupportSingleCal", 0), ("supportSingleCal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUSupportSingleAntCal.setStatus('current')
topoRRUMainSendAntCalPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUMainSendAntCalPortNo.setStatus('current')
topoRRUSlaveSendAntCalPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUSlaveSendAntCalPortNo.setStatus('current')
topoRRUMainRecvAntCalPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUMainRecvAntCalPortNo.setStatus('current')
topoRRUSlaveRecvAntCalPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUSlaveRecvAntCalPortNo.setStatus('current')
topoRRULocalOscillationFreq2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 68), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRULocalOscillationFreq2.setStatus('current')
topoRRULocalOscillationState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 69), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("locked", 0), ("unLocked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRULocalOscillationState2.setStatus('current')
topoRRULocalOscillationFreq3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 70), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRULocalOscillationFreq3.setStatus('current')
topoRRULocalOscillationState3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 71), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("locked", 0), ("unLocked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRULocalOscillationState3.setStatus('current')
topoRRUCPUCheckInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUCPUCheckInterval.setStatus('current')
topoRRUCPUOccupation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCPUOccupation.setStatus('current')
topoRRUVSWRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 74), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUVSWRThreshold.setStatus('current')
topoRRUTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUTemperature.setStatus('current')
topoRRUTxConstSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 76), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUTxConstSwitch.setStatus('current')
topoRRUTxConstFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 77), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("fpga", 0), ("intermediateFreq", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUTxConstFlag.setStatus('current')
topoRRUACPowerOffsetRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUACPowerOffsetRx.setStatus('current')
topoRRUACPowerOffsetTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUACPowerOffsetTx.setStatus('current')
topoRRUBspMainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 80), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2)).clone(namedValues=NamedValues(("unknown", -1), ("unAvailable", 0), ("available", 1), ("unLoad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBspMainStatus.setStatus('current')
topoRRUBspBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 81), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2)).clone(namedValues=NamedValues(("unknown", -1), ("unAvailable", 0), ("available", 1), ("unLoad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBspBackupStatus.setStatus('current')
topoRRUMainBrdCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUMainBrdCurrentValue.setStatus('current')
topoRRUTRxConstSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 83), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUTRxConstSwitch.setStatus('current')
topoRRUTRxConstType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 84), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2, 3)).clone(namedValues=NamedValues(("invalid", -1), ("irSource", 0), ("dacSource", 1), ("tdsPathSource", 2), ("tdlPathSourch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUTRxConstType.setStatus('current')
topoRRUSetTRxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 86), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("invalid", -1), ("uplink", 0), ("downlink", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUSetTRxMode.setStatus('current')
topoRRUTRxConstPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUTRxConstPower.setStatus('current')
topoRRUTempCompensationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 91), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 36000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUTempCompensationPeriod.setStatus('current')
topoRRUSlaveBootUpgradeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 92), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("standBy", 0), ("upgrading", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUSlaveBootUpgradeSwitch.setStatus('current')
topoRRURunningCellWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 93), Bits().clone(namedValues=NamedValues(("tddlte", 0), ("tdscdma", 1), ("fddlte", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRURunningCellWorkMode.setStatus('current')
topoRRUJamCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 94), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUJamCounter.setStatus('current')
topoRRUBootMainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 95), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2)).clone(namedValues=NamedValues(("unknown", -1), ("unAvailable", 0), ("available", 1), ("unLoad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBootMainStatus.setStatus('current')
topoRRUBootSlaveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 96), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2)).clone(namedValues=NamedValues(("unknown", -1), ("unAvailable", 0), ("available", 1), ("unLoad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBootSlaveStatus.setStatus('current')
topoRRUBearedCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBearedCarrierNum.setStatus('current')
topoRRUVSWR2ndThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 98), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUVSWR2ndThreshold.setStatus('current')
topoRRUIrE1AccessIrENo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 8), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUIrE1AccessIrENo.setStatus('current')
topoRRUTopoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 117), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("pico", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUTopoType.setStatus('current')
topoRRUAccessRHUBNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 118), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAccessRHUBNo.setStatus('current')
topoRRUIrE2AccessIrENo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 8), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUIrE2AccessIrENo.setStatus('current')
topoRRUHubMainEthNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 8), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUHubMainEthNo.setStatus('current')
topoRRUChannelGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 123), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 450))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUChannelGain.setStatus('current')
topoRRUSignalTxRxSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 124), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRRUSignalTxRxSwitch.setStatus('current')
topoRRUAntCombinGrpNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 125), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAntCombinGrpNo.setStatus('current')
topoRRUAntGrpAcessSequenceNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 126), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUAntGrpAcessSequenceNo.setStatus('current')
topoRRUJamResistantRange = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 1, 1, 127), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUJamResistantRange.setStatus('current')
topologyAntennaArrayTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 2), )
if mibBuilder.loadTexts: topologyAntennaArrayTable.setStatus('current')
topologyAntennaArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoAntArrayNo"))
if mibBuilder.loadTexts: topologyAntennaArrayEntry.setStatus('current')
topoAntArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: topoAntArrayNo.setStatus('current')
topoAntArrayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoAntArrayRowStatus.setStatus('current')
topoAntArrayPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 359))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoAntArrayPosition.setStatus('current')
topoAntArrayLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoAntArrayLocation.setStatus('current')
topoAntArrayVendorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoAntArrayVendorIndex.setStatus('current')
topoAntArrayTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoAntArrayTypeIndex.setStatus('current')
topoAntArrayIsRet = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unsupport", 0), ("support", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoAntArrayIsRet.setStatus('current')
topoRRUAntSettingTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3), )
if mibBuilder.loadTexts: topoRRUAntSettingTable.setStatus('current')
topoRRUAntSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoSetRRUNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoSetRRUPortNo"))
if mibBuilder.loadTexts: topoRRUAntSettingEntry.setStatus('current')
topoSetRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: topoSetRRUNo.setStatus('current')
topoSetRRUPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: topoSetRRUPortNo.setStatus('current')
topoSetRRUPortWithAntennaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortWithAntennaRowStatus.setStatus('current')
topoSetRRUPortAntArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 191), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortAntArrayNo.setStatus('current')
topoSetRRUPortAntArrayPathNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 8), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortAntArrayPathNo.setStatus('current')
topoSetRRUPortSubtoLocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortSubtoLocalCellId.setStatus('current')
topoSetRRUPortSubtoAntGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortSubtoAntGrpID.setStatus('current')
topoSetRRURETAntSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unsupport", 0), ("support", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRURETAntSupport.setStatus('current')
topoSetRRURETAntRCUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRURETAntRCUNo.setStatus('current')
topoSetRRUPortPathNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortPathNo.setStatus('current')
topoSetRRUPortCarrierStart = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortCarrierStart.setStatus('current')
topoSetRRUPortCarrierEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortCarrierEnd.setStatus('current')
topoSetRRUPortMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortMaxTxPower.setStatus('current')
topoSetRRUPortSupportFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 14), Bits().clone(namedValues=NamedValues(("freqBand0", 0), ("freqBand1", 1), ("freqBand2", 2), ("freqBand3", 3), ("freqBand4", 4), ("freqBand5", 5), ("freqBand6", 6), ("freqBand7", 7), ("freqBand8", 8), ("freqBand9", 9), ("freqBand10", 10), ("freqBand11", 11), ("freqBand12", 12), ("freqBand13", 13), ("freqBand14", 14), ("freqBand15", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortSupportFreq.setStatus('current')
topoSetRRUPortSubtoLocalCellId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortSubtoLocalCellId2.setStatus('current')
topoSetRRUPortSubtoLocalCellId3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortSubtoLocalCellId3.setStatus('current')
topoSetRRUPortSubtoLocalCellId4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortSubtoLocalCellId4.setStatus('current')
topoSetRRUPortSubtoAntGrpID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortSubtoAntGrpID2.setStatus('current')
topoSetRRUPortSubtoAntGrpID3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortSubtoAntGrpID3.setStatus('current')
topoSetRRUPortSubtoAntGrpID4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortSubtoAntGrpID4.setStatus('current')
topoSetRRUPortTDCarrierStart = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortTDCarrierStart.setStatus('current')
topoSetRRUPortTDCarrierEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortTDCarrierEnd.setStatus('current')
topoSetRRUSendAndRecvAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("recv", 1), ("send", 2), ("recvAndSend", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUSendAndRecvAbility.setStatus('current')
topoSetRRUCalAIqTxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUCalAIqTxNom.setStatus('current')
topoSetRRUCalAIqRxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUCalAIqRxNom.setStatus('current')
topoSetRRUCalPoutTxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUCalPoutTxNom.setStatus('current')
topoSetRRUCalPinRxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUCalPinRxNom.setStatus('current')
topoSetRRUPortSubtoTdsLocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 11), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUPortSubtoTdsLocalCellId.setStatus('current')
topoSetRRUTdsCalAIqTxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUTdsCalAIqTxNom.setStatus('current')
topoSetRRUTdsCalAIqRxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUTdsCalAIqRxNom.setStatus('current')
topoSetRRUTdsCalPoutTxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUTdsCalPoutTxNom.setStatus('current')
topoSetRRUTdsCalPinRxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoSetRRUTdsCalPinRxNom.setStatus('current')
topoRRUBandCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 4), )
if mibBuilder.loadTexts: topoRRUBandCapabilityTable.setStatus('current')
topoRRUBandCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoRRUBandCapRRUNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoRRUBandCapBandNo"))
if mibBuilder.loadTexts: topoRRUBandCapabilityEntry.setStatus('current')
topoRRUBandCapRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: topoRRUBandCapRRUNo.setStatus('current')
topoRRUBandCapBandNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: topoRRUBandCapBandNo.setStatus('current')
topoRRUBandCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 4, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandCapRowStatus.setStatus('current')
topoRRUBandCapCarrierStart = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandCapCarrierStart.setStatus('current')
topoRRUBandCapCarrierEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandCapCarrierEnd.setStatus('current')
topoRRUBandCapBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandCapBandWidth.setStatus('current')
topoRRUBandCapCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandCapCarrierNum.setStatus('current')
topoRRUBandCapLTECarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandCapLTECarrierNum.setStatus('current')
rruPathTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5), )
if mibBuilder.loadTexts: rruPathTable.setStatus('current')
rruPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruPathRRUNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruPathNo"))
if mibBuilder.loadTexts: rruPathEntry.setStatus('current')
rruPathRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: rruPathRRUNo.setStatus('current')
rruPathNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: rruPathNo.setStatus('current')
rruPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathRowStatus.setStatus('current')
rruPathTxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathTxStatus.setStatus('current')
rruPathRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathRxStatus.setStatus('current')
rruPathOpenState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rruPathOpenState.setStatus('current')
rruPathVSWR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 10000), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathVSWR.setStatus('current')
rruPathTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathTxPower.setStatus('current')
rruPathTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathTemperature.setStatus('current')
rruPathVgsValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathVgsValue1.setStatus('current')
rruPathVgsValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathVgsValue2.setStatus('current')
rruPathVgsValue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathVgsValue3.setStatus('current')
rruPathVgsValue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathVgsValue4.setStatus('current')
rruPathRpdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathRpdValue.setStatus('current')
rruPathTdsTxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathTdsTxStatus.setStatus('current')
rruPathTdsRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathTdsRxStatus.setStatus('current')
rruPathAntDelayFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathAntDelayFactor.setStatus('current')
rruPathBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 22), Bits().clone(namedValues=NamedValues(("f", 0), ("a", 1), ("e", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathBand.setStatus('current')
rruPathLicenseState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathLicenseState.setStatus('current')
rruPathRRUGsmCellInputPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 550))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathRRUGsmCellInputPwr.setStatus('current')
rruPathRRUGsmCellOutputPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 5, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 550))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPathRRUGsmCellOutputPwr.setStatus('current')
iuant = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6))
retap = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1))
retAntennaRCUTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1), )
if mibBuilder.loadTexts: retAntennaRCUTable.setStatus('current')
retAntennaRCUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "retAntRCUNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "retSubIndexNo"))
if mibBuilder.loadTexts: retAntennaRCUEntry.setStatus('current')
retAntRCUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47)))
if mibBuilder.loadTexts: retAntRCUNo.setStatus('current')
retSubIndexNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: retSubIndexNo.setStatus('current')
retAntRCURowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntRCURowStatus.setStatus('current')
retAntRCUProductNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntRCUProductNumber.setStatus('current')
retAntRCUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntRCUSerialNumber.setStatus('current')
retAntRCUHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntRCUHwVersion.setStatus('current')
retAntRCUSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntRCUSwVersion.setStatus('current')
retAntRCUUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntRCUUserData.setStatus('current')
retAntRCUResetTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntRCUResetTrigger.setStatus('current')
retAntRCUAlarmGetTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntRCUAlarmGetTrigger.setStatus('current')
retAntRCUAlarmClearTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntRCUAlarmClearTrigger.setStatus('current')
retAntRCUAlarmSubscribeTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntRCUAlarmSubscribeTrigger.setStatus('current')
retAntRCUSelfTestTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntRCUSelfTestTrigger.setStatus('current')
retAntModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntModelNumber.setStatus('current')
retAntSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntSerialNumber.setStatus('current')
retAntOperatingBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntOperatingBand.setStatus('current')
retAntBeamwidthForEachOperatingBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntBeamwidthForEachOperatingBand.setStatus('current')
retAntGainForEachOperatingBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntGainForEachOperatingBand.setStatus('current')
retAntMaximumSupportedElectricalTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3599))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntMaximumSupportedElectricalTilt.setStatus('current')
retAntMinimumSupportedElectricalTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3599))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntMinimumSupportedElectricalTilt.setStatus('current')
retAntInstallationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntInstallationDate.setStatus('current')
retAntInstallersID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntInstallersID.setStatus('current')
retAntBaseStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntBaseStationID.setStatus('current')
retAntSectorID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntSectorID.setStatus('current')
retAntAntennaBearing = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3599))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntAntennaBearing.setStatus('current')
retAntInstalledMechanicalTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3599))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntInstalledMechanicalTilt.setStatus('current')
retAntTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3599))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntTilt.setStatus('current')
retAntCalibrateTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntCalibrateTrigger.setStatus('current')
retAntRCUOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("poweroff", 2), ("upgrade", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntRCUOperationState.setStatus('current')
retAntPowerSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntPowerSwitch.setStatus('current')
retAntFrquencyBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 31), Bits().clone(namedValues=NamedValues(("a", 0), ("d", 1), ("e", 2), ("f", 3), ("v", 5), ("b41", 6), ("t", 7), ("b03", 8), ("b01", 9), ("b44", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntFrquencyBand.setStatus('current')
retAntRCUSubtoRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 191), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntRCUSubtoRRUNo.setStatus('current')
retAntMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("single", 0), ("multi", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntMode.setStatus('current')
retAntRCUCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("cmcc", 0), ("ctcc", 1), ("cucc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntRCUCarrier.setStatus('current')
retAntOperatingBand2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntOperatingBand2.setStatus('current')
retAntOperatingBand3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: retAntOperatingBand3.setStatus('current')
retAntDownloadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntDownloadFileName.setStatus('current')
retAntDownloadFromDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 1, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: retAntDownloadFromDestination.setStatus('current')
raeap = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2))
raeTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1), )
if mibBuilder.loadTexts: raeTable.setStatus('current')
raeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeAntennaArrayNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeSubIndexNo"))
if mibBuilder.loadTexts: raeEntry.setStatus('current')
raeAntennaArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47)))
if mibBuilder.loadTexts: raeAntennaArrayNo.setStatus('current')
raeSubIndexNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: raeSubIndexNo.setStatus('current')
raeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeRowStatus.setStatus('current')
raeModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeModelNumber.setStatus('current')
raeAntSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeAntSerialNumber.setStatus('current')
raeBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("vi", 0), ("v", 1), ("iv", 2), ("iii", 3), ("ii", 4), ("i", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBand.setStatus('current')
raeBeamwidthOperatBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 7), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBeamwidthOperatBand.setStatus('current')
raeGainForEachOperatingBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 8), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeGainForEachOperatingBand.setStatus('current')
raeMaximumSupportedElectricalTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeMaximumSupportedElectricalTilt.setStatus('current')
raeMinimumSupportedElectricalTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeMinimumSupportedElectricalTilt.setStatus('current')
raeEquipElevation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeEquipElevation.setStatus('current')
raeEquipLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeEquipLongitude.setStatus('current')
raeEquipLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeEquipLatitude.setStatus('current')
raeInstallationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeInstallationDate.setStatus('current')
raeInstallersID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeInstallersID.setStatus('current')
raeBaseStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeBaseStationID.setStatus('current')
raeSectorID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeSectorID.setStatus('current')
raeAntennaBearing = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3599))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeAntennaBearing.setStatus('current')
raeInstalledMechanicalTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3599))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeInstalledMechanicalTilt.setStatus('current')
raeTestRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeTestRecord.setStatus('current')
raeSupportFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 21), Bits().clone(namedValues=NamedValues(("weightingFactor", 0), ("locationSensor", 1), ("heightSensor", 2), ("antennaBearingSensor", 3), ("installedMechanicTilt", 4), ("antennaPatternFile", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeSupportFunctions.setStatus('current')
raeAlarmGetTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeAlarmGetTrigger.setStatus('current')
raeAlarmClearTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeAlarmClearTrigger.setStatus('current')
raeAlarmSubscribeTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeAlarmSubscribeTrigger.setStatus('current')
raeRestoreFactoryWeightingFactorsTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeRestoreFactoryWeightingFactorsTrigger.setStatus('current')
raeDownloadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeDownloadFileName.setStatus('current')
raeDownloadFromDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeDownloadFromDestination.setStatus('current')
raeFileNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeFileNum.setStatus('current')
raeWeightFactorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightFactorInfo.setStatus('current')
raeWeightFactorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightFactorVer.setStatus('current')
raeTiltNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeTiltNum.setStatus('current')
raeTiltBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 32), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeTiltBuf.setStatus('current')
raeBroadcastBeamWidthNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBroadcastBeamWidthNum.setStatus('current')
raeBroadcastBeamWidthBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 34), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBroadcastBeamWidthBuf.setStatus('current')
raeFrequencyBandNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeFrequencyBandNum.setStatus('current')
raeFrequencyBandBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 36), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeFrequencyBandBuf.setStatus('current')
raeRFPortsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeRFPortsNum.setStatus('current')
raeAntAdvancedParam = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeAntAdvancedParam.setStatus('current')
raeSubtoRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeSubtoRRUNo.setStatus('current')
raeRCUNoOnRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeRCUNoOnRRU.setStatus('current')
raeSubUnitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeSubUnitNum.setStatus('current')
raeProductNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeProductNumber.setStatus('current')
raeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeSerialNumber.setStatus('current')
raeSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeSoftwareVersion.setStatus('current')
raeHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeHardwareVersion.setStatus('current')
raeResetTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeResetTrigger.setStatus('current')
raeFileTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 2), )
if mibBuilder.loadTexts: raeFileTable.setStatus('current')
raeFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeFileAntennaArrayNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeFileSubIndexNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeFileIndex"))
if mibBuilder.loadTexts: raeFileEntry.setStatus('current')
raeFileAntennaArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47)))
if mibBuilder.loadTexts: raeFileAntennaArrayNo.setStatus('current')
raeFileSubIndexNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: raeFileSubIndexNo.setStatus('current')
raeFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: raeFileIndex.setStatus('current')
raeFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 2, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeFileRowStatus.setStatus('current')
raeFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(4, 5)).clone(namedValues=NamedValues(("weightingFactorFile", 4), ("antennaPatternFile", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeFileType.setStatus('current')
raeFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeFileSize.setStatus('current')
raeFileNameLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeFileNameLen.setStatus('current')
raeFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeFileName.setStatus('current')
raeFileUploadPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeFileUploadPath.setStatus('current')
raeZipFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeZipFileName.setStatus('current')
raeWeightingFactorsTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3), )
if mibBuilder.loadTexts: raeWeightingFactorsTable.setStatus('current')
raeWeightingFactorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeWeightingFactorsAntennaArrayNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeWeightingFactorsSubIndexNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeWeightingFactorsInstalledMechanicalTilt"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeWeightFactorsBeamwidthOperatBand"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeWeightingFactorsFrequencyBand"))
if mibBuilder.loadTexts: raeWeightingFactorsEntry.setStatus('current')
raeWeightingFactorsAntennaArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: raeWeightingFactorsAntennaArrayNo.setStatus('current')
raeWeightingFactorsSubIndexNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: raeWeightingFactorsSubIndexNo.setStatus('current')
raeWeightingFactorsInstalledMechanicalTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3599)))
if mibBuilder.loadTexts: raeWeightingFactorsInstalledMechanicalTilt.setStatus('current')
raeWeightFactorsBeamwidthOperatBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360)))
if mibBuilder.loadTexts: raeWeightFactorsBeamwidthOperatBand.setStatus('current')
raeWeightingFactorsFrequencyBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("vi", 0), ("v", 1), ("iv", 2), ("iii", 3), ("ii", 4), ("i", 5))))
if mibBuilder.loadTexts: raeWeightingFactorsFrequencyBand.setStatus('current')
raeWeightingFactorsAmplitude0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsAmplitude0.setStatus('current')
raeWeightingFactorsPhase0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsPhase0.setStatus('current')
raeWeightingFactorsAmplitude1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsAmplitude1.setStatus('current')
raeWeightingFactorsPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsPhase1.setStatus('current')
raeWeightingFactorsAmplitude2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsAmplitude2.setStatus('current')
raeWeightingFactorsPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsPhase2.setStatus('current')
raeWeightingFactorsAmplitude3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsAmplitude3.setStatus('current')
raeWeightingFactorsPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsPhase3.setStatus('current')
raeWeightingFactorsAmplitude4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsAmplitude4.setStatus('current')
raeWeightingFactorsPhase4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsPhase4.setStatus('current')
raeWeightingFactorsAmplitude5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsAmplitude5.setStatus('current')
raeWeightingFactorsPhase5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsPhase5.setStatus('current')
raeWeightingFactorsAmplitude6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsAmplitude6.setStatus('current')
raeWeightingFactorsPhase6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsPhase6.setStatus('current')
raeWeightingFactorsAmplitude7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsAmplitude7.setStatus('current')
raeWeightingFactorsPhase7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeWeightingFactorsPhase7.setStatus('current')
raeGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 4), )
if mibBuilder.loadTexts: raeGeneralTable.setStatus('current')
raeGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeGeneralAntArrayNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raecGeneralSubIndexNo"))
if mibBuilder.loadTexts: raeGeneralEntry.setStatus('current')
raeGeneralAntArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: raeGeneralAntArrayNo.setStatus('current')
raecGeneralSubIndexNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: raecGeneralSubIndexNo.setStatus('current')
raeGeneralFormatCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeGeneralFormatCode.setStatus('current')
raeGeneralFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeGeneralFileName.setStatus('current')
raeGeneralInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeGeneralInfo.setStatus('current')
raeGeneralVer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeGeneralVer.setStatus('current')
raeGeneralAdvanced = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeGeneralAdvanced.setStatus('current')
raeGeneralFreqNums = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeGeneralFreqNums.setStatus('current')
raeGeneralLowFreqBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 4, 1, 9), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeGeneralLowFreqBuf.setStatus('current')
raeGeneralHighFreqBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 4, 1, 10), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeGeneralHighFreqBuf.setStatus('current')
raeBeamBandTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 5), )
if mibBuilder.loadTexts: raeBeamBandTable.setStatus('current')
raeBeamBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeBeamBandAntArrayNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeBeamBandSubIndexNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeBeamBandFreq"))
if mibBuilder.loadTexts: raeBeamBandEntry.setStatus('current')
raeBeamBandAntArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: raeBeamBandAntArrayNo.setStatus('current')
raeBeamBandSubIndexNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: raeBeamBandSubIndexNo.setStatus('current')
raeBeamBandFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: raeBeamBandFreq.setStatus('current')
raeBeamBandVerticalBandNums = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBeamBandVerticalBandNums.setStatus('current')
raeBeamBandVerticalBandBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 5, 1, 5), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBeamBandVerticalBandBuf.setStatus('current')
raeBeamBandHorizonBandNums = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBeamBandHorizonBandNums.setStatus('current')
raeBeamBandHorizonBandBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 5, 1, 7), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBeamBandHorizonBandBuf.setStatus('current')
raePortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 6), )
if mibBuilder.loadTexts: raePortInfoTable.setStatus('current')
raePortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "raePortInfoAntArrayNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raePortInfoSubIndexNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raePortInfoFreq"))
if mibBuilder.loadTexts: raePortInfoEntry.setStatus('current')
raePortInfoAntArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: raePortInfoAntArrayNo.setStatus('current')
raePortInfoSubIndexNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: raePortInfoSubIndexNo.setStatus('current')
raePortInfoFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: raePortInfoFreq.setStatus('current')
raePortInfoPortNums = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raePortInfoPortNums.setStatus('current')
raePortInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 6, 1, 5), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raePortInfoMode.setStatus('current')
raePortInfoPortIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 6, 1, 6), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raePortInfoPortIDs.setStatus('current')
raeBmIndicatTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 7), )
if mibBuilder.loadTexts: raeBmIndicatTable.setStatus('current')
raeBmIndicatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeBmIndicatAntArrayNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeBmIndicatSubIndexNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeBmIndicatFreq"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeBmIndicatVerticalBand"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeBmIndicatHorizonBand"))
if mibBuilder.loadTexts: raeBmIndicatEntry.setStatus('current')
raeBmIndicatAntArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: raeBmIndicatAntArrayNo.setStatus('current')
raeBmIndicatSubIndexNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: raeBmIndicatSubIndexNo.setStatus('current')
raeBmIndicatFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: raeBmIndicatFreq.setStatus('current')
raeBmIndicatVerticalBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360)))
if mibBuilder.loadTexts: raeBmIndicatVerticalBand.setStatus('current')
raeBmIndicatHorizonBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360)))
if mibBuilder.loadTexts: raeBmIndicatHorizonBand.setStatus('current')
raeBmIndicatTiltStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBmIndicatTiltStep.setStatus('current')
raeBmIndicatTiltRangeL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBmIndicatTiltRangeL.setStatus('current')
raeBmIndicatTiltRangeH = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBmIndicatTiltRangeH.setStatus('current')
raeBmIndicatBearingStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBmIndicatBearingStep.setStatus('current')
raeBmIndicatBearingRangeL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBmIndicatBearingRangeL.setStatus('current')
raeBmIndicatBearingRangeH = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeBmIndicatBearingRangeH.setStatus('current')
raeGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 8), )
if mibBuilder.loadTexts: raeGroupsTable.setStatus('current')
raeGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeGroupsAntArrayNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeGroupsSubIndexNo"))
if mibBuilder.loadTexts: raeGroupsEntry.setStatus('current')
raeGroupsAntArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: raeGroupsAntArrayNo.setStatus('current')
raeGroupsSubIndexNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: raeGroupsSubIndexNo.setStatus('current')
raeGroupsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 8, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeGroupsRowStatus.setStatus('current')
raeGroupsFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeGroupsFreq.setStatus('current')
raeGroupsVerticalBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeGroupsVerticalBand.setStatus('current')
raeGroupsHorizonBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeGroupsHorizonBand.setStatus('current')
raeGroupsTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 359))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeGroupsTilt.setStatus('current')
raeGroupsAntennaBearing = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-359, 359))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeGroupsAntennaBearing.setStatus('current')
raeGroupsGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeGroupsGroups.setStatus('current')
raeParamTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9), )
if mibBuilder.loadTexts: raeParamTable.setStatus('current')
raeParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeParamAntArrayNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "raeParamSubIndexNo"))
if mibBuilder.loadTexts: raeParamEntry.setStatus('current')
raeParamAntArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: raeParamAntArrayNo.setStatus('current')
raeParamSubIndexNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: raeParamSubIndexNo.setStatus('current')
raeParamRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeParamRowStatus.setStatus('current')
raeParamFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeParamFreq.setStatus('current')
raeParamVerticalBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeParamVerticalBand.setStatus('current')
raeParamHorizonBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeParamHorizonBand.setStatus('current')
raeParamTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 359))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeParamTilt.setStatus('current')
raeParamAntennaBearing = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-359, 359))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeParamAntennaBearing.setStatus('current')
raeParamGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeParamGroup.setStatus('current')
raeParamAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9, 1, 10), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeParamAmplitude.setStatus('current')
raeParamPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9, 1, 11), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raeParamPhase.setStatus('current')
raeParamUseTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 6, 2, 9, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1)).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raeParamUseTrigger.setStatus('current')
rruOpticalTransceiverTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7), )
if mibBuilder.loadTexts: rruOpticalTransceiverTable.setStatus('current')
rruOpticalTransceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruOptTransRRUNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruOptTransIndex"))
if mibBuilder.loadTexts: rruOpticalTransceiverEntry.setStatus('current')
rruOptTransRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: rruOptTransRRUNo.setStatus('current')
rruOptTransIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("ofp1", 0), ("ofp2", 1))))
if mibBuilder.loadTexts: rruOptTransIndex.setStatus('current')
rruOptTransRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransRowStatus.setStatus('current')
rruOptTransTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransTemperature.setStatus('current')
rruOptTransVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransVcc.setStatus('current')
rruOptTransBias = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransBias.setStatus('current')
rruOptTransTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransTxPower.setStatus('current')
rruOptTransRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransRxPower.setStatus('current')
rruOptTransStandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransStandStatus.setStatus('current')
rruOptTransVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransVendorName.setStatus('current')
rruOptTransS9umKmLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransS9umKmLen.setStatus('current')
rruOptTransS9um100MLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransS9um100MLen.setStatus('current')
rruOptTransM50um10MLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransM50um10MLen.setStatus('current')
rruOptTransM625um10MLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransM625um10MLen.setStatus('current')
rruOptTransBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransBitRate.setStatus('current')
rruOptTransFpgaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("syn", 0), ("asyn", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptTransFpgaStatus.setStatus('current')
rruOptBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 7, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruOptBitErrorRate.setStatus('current')
topoRRUPortBandCapabTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 8), )
if mibBuilder.loadTexts: topoRRUPortBandCapabTable.setStatus('current')
topoRRUPortBandCapabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoPortBandCapRRUNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoPortBandCapRRUPortNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoPortBandCapNo"))
if mibBuilder.loadTexts: topoRRUPortBandCapabEntry.setStatus('current')
topoPortBandCapRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: topoPortBandCapRRUNo.setStatus('current')
topoPortBandCapRRUPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: topoPortBandCapRRUPortNo.setStatus('current')
topoPortBandCapNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: topoPortBandCapNo.setStatus('current')
topoPortBandCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 8, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoPortBandCapRowStatus.setStatus('current')
topoRRUBandCap1P4CarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandCap1P4CarrierNum.setStatus('current')
topoRRUBandCap3MCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandCap3MCarrierNum.setStatus('current')
topoRRUBandCap5MCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandCap5MCarrierNum.setStatus('current')
topoRRUBandCap10MCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandCap10MCarrierNum.setStatus('current')
topoRRUBandCap15MCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandCap15MCarrierNum.setStatus('current')
topoRRUBandCap20MCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUBandCap20MCarrierNum.setStatus('current')
rruCalcPathTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 9), )
if mibBuilder.loadTexts: rruCalcPathTable.setStatus('current')
rruCalcPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 9, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruCalcPathRRUNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruCalcPathNo"))
if mibBuilder.loadTexts: rruCalcPathEntry.setStatus('current')
rruCalcPathRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: rruCalcPathRRUNo.setStatus('current')
rruCalcPathNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: rruCalcPathNo.setStatus('current')
rruCalcPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 9, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCalcPathRowStatus.setStatus('current')
rruCalcPathTxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCalcPathTxStatus.setStatus('current')
rruCalcPathRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 9, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("running", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCalcPathRxStatus.setStatus('current')
rruCalcPathAIqTxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCalcPathAIqTxNom.setStatus('current')
rruCalcPathAIqRxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCalcPathAIqRxNom.setStatus('current')
rruCalcPathPoutTxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCalcPathPoutTxNom.setStatus('current')
rruCalcPathPinRxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCalcPathPinRxNom.setStatus('current')
topoRRUPACurrentTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 10), )
if mibBuilder.loadTexts: topoRRUPACurrentTable.setStatus('current')
topoRRUPACurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 10, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoRRUPACurrentRRUNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoRRUPACurrentNo"))
if mibBuilder.loadTexts: topoRRUPACurrentEntry.setStatus('current')
topoRRUPACurrentRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: topoRRUPACurrentRRUNo.setStatus('current')
topoRRUPACurrentNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: topoRRUPACurrentNo.setStatus('current')
topoRRUPACurrentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 10, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUPACurrentRowStatus.setStatus('current')
topoRRUPACurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 0), ("rru342XPara1", 1), ("rru342XPara2", 2), ("rru348XPara1", 3), ("rru348XPara2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUPACurrentDescription.setStatus('current')
topoRRUPAUpAverageCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUPAUpAverageCurrentValue.setStatus('current')
topoRRUPADownAverageCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUPADownAverageCurrentValue.setStatus('current')
topoRRUPAAverageCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUPAAverageCurrentValue.setStatus('current')
topoRRUULPowerTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11), )
if mibBuilder.loadTexts: topoRRUULPowerTable.setStatus('current')
topoRRUULPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoRRUULPowerRRUNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoRRUULPowerRRUPathNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoRRUULPowerMode"))
if mibBuilder.loadTexts: topoRRUULPowerEntry.setStatus('current')
topoRRUULPowerRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: topoRRUULPowerRRUNo.setStatus('current')
topoRRUULPowerRRUPathNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: topoRRUULPowerRRUPathNo.setStatus('current')
topoRRUULPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("tdsMode", 0), ("tdlMode", 1))))
if mibBuilder.loadTexts: topoRRUULPowerMode.setStatus('current')
topoRRUULPowerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUULPowerRowStatus.setStatus('current')
topoRRUCarrier1ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 5), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier1ULPowerValue.setStatus('current')
topoRRUCarrier2ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 6), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier2ULPowerValue.setStatus('current')
topoRRUCarrier3ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 7), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier3ULPowerValue.setStatus('current')
topoRRUCarrier4ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 8), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier4ULPowerValue.setStatus('current')
topoRRUCarrier5ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 9), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier5ULPowerValue.setStatus('current')
topoRRUCarrier6ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 10), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier6ULPowerValue.setStatus('current')
topoRRUCarrier7ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 11), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier7ULPowerValue.setStatus('current')
topoRRUCarrier8ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 12), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier8ULPowerValue.setStatus('current')
topoRRUCarrier9ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 13), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier9ULPowerValue.setStatus('current')
topoRRUCarrier10ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 14), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier10ULPowerValue.setStatus('current')
topoRRUCarrier11ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 15), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier11ULPowerValue.setStatus('current')
topoRRUCarrier12ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 16), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier12ULPowerValue.setStatus('current')
topoRRUCarrier13ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 17), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier13ULPowerValue.setStatus('current')
topoRRUCarrier14ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 18), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier14ULPowerValue.setStatus('current')
topoRRUCarrier15ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 19), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier15ULPowerValue.setStatus('current')
topoRRUCarrier16ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 20), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier16ULPowerValue.setStatus('current')
topoRRUCarrier17ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 21), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier17ULPowerValue.setStatus('current')
topoRRUCarrier18ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 22), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier18ULPowerValue.setStatus('current')
topoRRUCarrier19ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 23), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier19ULPowerValue.setStatus('current')
topoRRUCarrier20ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 24), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier20ULPowerValue.setStatus('current')
topoRRUCarrier21ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 25), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier21ULPowerValue.setStatus('current')
topoRRUCarrier22ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 26), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier22ULPowerValue.setStatus('current')
topoRRUCarrier23ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 27), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier23ULPowerValue.setStatus('current')
topoRRUCarrier24ULPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 6, 11, 1, 28), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRRUCarrier24ULPowerValue.setStatus('current')
remoteHub = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10))
topologyRHUBTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1), )
if mibBuilder.loadTexts: topologyRHUBTable.setStatus('current')
topologyRHUBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "topoRHUBNo"))
if mibBuilder.loadTexts: topologyRHUBEntry.setStatus('current')
topoRHUBNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 254)))
if mibBuilder.loadTexts: topoRHUBNo.setStatus('current')
topoRHUBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBRowStatus.setStatus('current')
topoRHUBLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBLocation.setStatus('current')
topoRHUBMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBMacAddr.setStatus('current')
topoRHUBAccessRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBAccessRackNo.setStatus('current')
topoRHUBAccessShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBAccessShelfNo.setStatus('current')
topoRHUBAccessSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 7), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBAccessSlotNo.setStatus('current')
topoRHUBAccessBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 54, 56, 58, 66, 67, 68, 70, 71, 72, 75, 97, 98, 99, 109, 113, 114, 128, 141, 142, 143, 177, 178, 240, 241)).clone(namedValues=NamedValues(("unknown", 0), ("ccu", 54), ("ceu", 56), ("bbu", 58), ("iiu", 66), ("bcu", 67), ("biu", 68), ("accu", 70), ("abbut", 71), ("abbuf", 72), ("eiuDof", 75), ("scta", 97), ("bpia", 98), ("bpoa", 99), ("bpoe", 109), ("tdru311B", 113), ("tdru312", 114), ("bpof", 128), ("sctd", 141), ("mmba", 142), ("bpog", 143), ("bpoh", 177), ("scte", 178), ("sctf", 240), ("bpoi", 241)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBAccessBoardType.setStatus('current')
topoRHUBOfp1AccessOfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBOfp1AccessOfpPortNo.setStatus('current')
topoRHUBOfp1AccessLinePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 6), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBOfp1AccessLinePosition.setStatus('current')
topoRHUBAccessUlTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBAccessUlTimeDelay.setStatus('current')
topoRHUBAccessDlTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBAccessDlTimeDelay.setStatus('current')
topoRHUBIsNetMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("matched", 0), ("unmatched", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBIsNetMatched.setStatus('current')
topoRHUBMaxTimeDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBMaxTimeDelayCompensation.setStatus('current')
topoRHUBSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBSoftwareVersion.setStatus('current')
topoRHUBFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBFirmwareVersion.setStatus('current')
topoRHUBAccessPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("unknown", 0), ("broadcastAccess", 1), ("pathSetup", 2), ("versionUpdate", 3), ("timeDelayMeasure", 4), ("antConfig", 5), ("available", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBAccessPhase.setStatus('current')
topoRHUBClockState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("syn", 0), ("asyn", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBClockState.setStatus('current')
topoRHUBResetTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 11)).clone(namedValues=NamedValues(("notEffectNextRHUB", 0), ("effectNextRHUB", 1), ("bbuCmdCode", 2), ("remoteResetRHUB", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRHUBResetTrigger.setStatus('current')
topoRHUBNextResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRHUBNextResetTimer.setStatus('current')
topoRHUBSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBSystemTime.setStatus('current')
topoRHUBOfpWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 1, 2, 4, 5)).clone(namedValues=NamedValues(("unknown", -1), ("normal", 1), ("lined", 2), ("shared", 4), ("linedshared", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBOfpWorkMode.setStatus('current')
topoRHUBLogDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRHUBLogDestination.setStatus('current')
topoRHUBLogFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("alarm", 0), ("user", 1), ("system", 2), ("all", 3), ("operate", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRHUBLogFileType.setStatus('current')
topoRHUBRemoteResetNextRHUBTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0)).clone(namedValues=NamedValues(("on", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRHUBRemoteResetNextRHUBTrigger.setStatus('current')
topoRHUBRemoteResetNextRHUBTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(500, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRHUBRemoteResetNextRHUBTimer.setStatus('current')
topoRHUBFaultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("fault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBFaultStatus.setStatus('current')
topoRHUBUnavaiableReason = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 28), Bits().clone(namedValues=NamedValues(("rHUBMasterOfpAbnormalBBU", 0), ("rHUBSlaveOfpAbnormalBBU", 1), ("rHUBLocalCrystaloidUnlock", 2), ("rHUBSlaveOfpAbnormalRHUB", 3), ("rHUBOfpModuleMixedUse", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBUnavaiableReason.setStatus('current')
topoRHUBUUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBUUpTime.setStatus('current')
topoRHUBFiberFaultReason = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 30), Bits().clone(namedValues=NamedValues(("rHUBMasterOfpAbnormalBBU", 0), ("rHUBSlaveOfpAbnormalBBU", 1), ("rHUBSlaveOfpAbnormalRHUB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBFiberFaultReason.setStatus('current')
topoRHUBDLMaxTimeDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBDLMaxTimeDelayCompensation.setStatus('current')
topoRHUBULMaxTimeDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBULMaxTimeDelayCompensation.setStatus('current')
topoRHUBTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBTemperature.setStatus('current')
topoRHUBOfp2AccessOfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBOfp2AccessOfpPortNo.setStatus('current')
topoRHUBOfp2AccessLinePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 6), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBOfp2AccessLinePosition.setStatus('current')
topoRHUBUpLinkSlaveOfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBUpLinkSlaveOfpPortNo.setStatus('current')
topoRHUBMainOfpNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBMainOfpNo.setStatus('current')
topoRHUBOfp3AccessOfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBOfp3AccessOfpPortNo.setStatus('current')
topoRHUBOfp3AccessLinePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 6), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBOfp3AccessLinePosition.setStatus('current')
topoRHUBOfp4AccessOfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBOfp4AccessOfpPortNo.setStatus('current')
topoRHUBOfp4AccessLinePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 6), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBOfp4AccessLinePosition.setStatus('current')
topoRHUBGsmCellInputPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBGsmCellInputPwr.setStatus('current')
topoRHUBGsmCellOutputPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 550))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topoRHUBGsmCellOutputPwr.setStatus('current')
topoRHUBAutTMSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 1, 1, 53), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topoRHUBAutTMSwitch.setStatus('current')
rhubOpticalTransceiverTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2), )
if mibBuilder.loadTexts: rhubOpticalTransceiverTable.setStatus('current')
rhubOpticalTransceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rhubOptTransrhubNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "rhubOptTransIndex"))
if mibBuilder.loadTexts: rhubOpticalTransceiverEntry.setStatus('current')
rhubOptTransrhubNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 254)))
if mibBuilder.loadTexts: rhubOptTransrhubNo.setStatus('current')
rhubOptTransIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("ofp1", 0), ("ofp2", 1), ("ofp3", 2), ("ofp4", 3))))
if mibBuilder.loadTexts: rhubOptTransIndex.setStatus('current')
rhubOptTransRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransRowStatus.setStatus('current')
rhubOptTransTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransTemperature.setStatus('current')
rhubOptTransVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransVcc.setStatus('current')
rhubOptTransBias = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransBias.setStatus('current')
rhubOptTransTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransTxPower.setStatus('current')
rhubOptTransRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransRxPower.setStatus('current')
rhubOptTransStandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransStandStatus.setStatus('current')
rhubOptTransVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransVendorName.setStatus('current')
rhubOptTransS9umKmLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransS9umKmLen.setStatus('current')
rhubOptTransS9um100MLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransS9um100MLen.setStatus('current')
rhubOptTransM50um10MLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransM50um10MLen.setStatus('current')
rhubOptTransM625um10MLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransM625um10MLen.setStatus('current')
rhubOptTransBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransBitRate.setStatus('current')
rhubOptTransFpgaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("syn", 0), ("asyn", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubOptTransFpgaStatus.setStatus('current')
rhubEtherTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 3), )
if mibBuilder.loadTexts: rhubEtherTable.setStatus('current')
rhubEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rhubEtherRHUBNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "rhubEtherIndex"))
if mibBuilder.loadTexts: rhubEtherEntry.setStatus('current')
rhubEtherRHUBNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 254)))
if mibBuilder.loadTexts: rhubEtherRHUBNo.setStatus('current')
rhubEtherIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("ire1", 0), ("ire2", 1), ("ire3", 2), ("ire4", 3), ("ire5", 4), ("ire6", 5), ("ire7", 6), ("ire8", 7))))
if mibBuilder.loadTexts: rhubEtherIndex.setStatus('current')
rhubEtherRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 3, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubEtherRowStatus.setStatus('current')
rhubEtherPortSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rhubEtherPortSwitch.setStatus('current')
rhubEtherStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubEtherStatus.setStatus('current')
rhubEtherOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 540))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubEtherOutputVoltage.setStatus('current')
rhubEtherOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubEtherOutputCurrent.setStatus('current')
rhubEthActurlSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubEthActurlSpeed.setStatus('current')
rhubEthFpgaBer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 10, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rhubEthFpgaBer.setStatus('current')
networkElementLayoutPlan = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7))
baseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1))
rruBaseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1))
rruTypeTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 1), )
if mibBuilder.loadTexts: rruTypeTable.setStatus('current')
rruTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruTypeManufacturerIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruTypeIndex"))
if mibBuilder.loadTexts: rruTypeEntry.setStatus('current')
rruTypeManufacturerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(2, 4, 6, 8, 10)).clone(namedValues=NamedValues(("erisson", 2), ("datang", 4), ("dingqiao", 6), ("putian", 8), ("zhongxing", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypeManufacturerIndex.setStatus('current')
rruTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypeIndex.setStatus('current')
rruTypeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypeRowStatus.setStatus('current')
rruTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypeName.setStatus('current')
rruTypeMaxAntPathNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypeMaxAntPathNum.setStatus('current')
rruTypeMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypeMaxTxPower.setStatus('current')
rruTypeBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypeBandWidth.setStatus('current')
rruTypeFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 1, 1, 8), Bits().clone(namedValues=NamedValues(("ten", 0), ("twenty", 1), ("forty", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypeFiberLength.setStatus('current')
rruTypeIrCompressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 1, 1, 9), Bits().clone(namedValues=NamedValues(("notCompress", 0), ("compress", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypeIrCompressMode.setStatus('current')
rruTypeSupportCellWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 1, 1, 10), Bits().clone(namedValues=NamedValues(("lte", 0), ("td", 1), ("fdd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypeSupportCellWorkMode.setStatus('current')
rruTypeFamilyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypeFamilyName.setStatus('current')
rruTypePortTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2), )
if mibBuilder.loadTexts: rruTypePortTable.setStatus('current')
rruTypePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruTypePortManufacturerIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruTypePortIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruTypePortNo"))
if mibBuilder.loadTexts: rruTypePortEntry.setStatus('current')
rruTypePortManufacturerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(2, 4, 6, 8, 10)).clone(namedValues=NamedValues(("erisson", 2), ("datang", 4), ("dingqiao", 6), ("putian", 8), ("zhongxing", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortManufacturerIndex.setStatus('current')
rruTypePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortIndex.setStatus('current')
rruTypePortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortNo.setStatus('current')
rruTypePortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortRowStatus.setStatus('current')
rruTypePortPathNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortPathNo.setStatus('current')
rruTypePortSupportFreqBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 6), Bits().clone(namedValues=NamedValues(("a", 0), ("d", 1), ("e", 2), ("f", 3), ("dl", 4), ("v", 5), ("b41", 6), ("t", 7), ("b03", 8), ("b01", 9), ("b44", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortSupportFreqBand.setStatus('current')
rruTypePortSupportFreqBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortSupportFreqBandWidth.setStatus('current')
rruTypePortSupportAbandTdsCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortSupportAbandTdsCarrierNum.setStatus('current')
rruTypePortSupportFBandTdsCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortSupportFBandTdsCarrierNum.setStatus('current')
rruTypePortCalAIqTxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortCalAIqTxNom.setStatus('current')
rruTypePortCalAIqRxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortCalAIqRxNom.setStatus('current')
rruTypePortCalPoutTxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortCalPoutTxNom.setStatus('current')
rruTypePortCalPinRxNom = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortCalPinRxNom.setStatus('current')
rruTypePortAntMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rruTypePortAntMaxPower.setStatus('current')
antennaBaseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2))
antennaArrayTypeTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 1), )
if mibBuilder.loadTexts: antennaArrayTypeTable.setStatus('current')
antennaArrayTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "antArrayVendor"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "antArrayIndex"))
if mibBuilder.loadTexts: antennaArrayTypeEntry.setStatus('current')
antArrayVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antArrayVendor.setStatus('current')
antArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antArrayIndex.setStatus('current')
antArrayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antArrayRowStatus.setStatus('current')
antArrayModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antArrayModelName.setStatus('current')
antArrayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("ula", 0), ("uca", 1), ("polar", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antArrayType.setStatus('current')
antArrayNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antArrayNum.setStatus('current')
antArrayDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antArrayDistance.setStatus('current')
antennaWeightTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2), )
if mibBuilder.loadTexts: antennaWeightTable.setStatus('current')
antennaWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "antWeightArrayNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "antWeightFrequencyBand"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "antWeightStatusIndex"))
if mibBuilder.loadTexts: antennaWeightEntry.setStatus('current')
antWeightArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightArrayNo.setStatus('current')
antWeightFrequencyBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4, 8, 32, 64, 128, 256, 512, 1024, 8192, 16384)).clone(namedValues=NamedValues(("a", 1), ("d", 2), ("e", 4), ("f", 8), ("v", 32), ("b41", 64), ("t", 128), ("b03", 256), ("b01", 512), ("b44", 1024), ("f1", 8192), ("f2", 16384)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightFrequencyBand.setStatus('current')
antWeightStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 3), Bits().clone(namedValues=NamedValues(("ant1", 0), ("ant2", 1), ("ant3", 2), ("ant4", 3), ("ant5", 4), ("ant6", 5), ("ant7", 6), ("ant8", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightStatusIndex.setStatus('current')
antWeightRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightRowStatus.setStatus('current')
antWeightHalfPowerBeamWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightHalfPowerBeamWidth.setStatus('current')
antWeightBeamDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightBeamDirection.setStatus('current')
antWeightAmplitude0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightAmplitude0.setStatus('current')
antWeightPhase0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightPhase0.setStatus('current')
antWeightAmplitude1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightAmplitude1.setStatus('current')
antWeightPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightPhase1.setStatus('current')
antWeightAmplitude2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightAmplitude2.setStatus('current')
antWeightPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightPhase2.setStatus('current')
antWeightAmplitude3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightAmplitude3.setStatus('current')
antWeightPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightPhase3.setStatus('current')
antWeightAmplitude4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightAmplitude4.setStatus('current')
antWeightPhase4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightPhase4.setStatus('current')
antWeightAmplitude5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightAmplitude5.setStatus('current')
antWeightPhase5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightPhase5.setStatus('current')
antWeightAmplitude6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightAmplitude6.setStatus('current')
antWeightPhase6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightPhase6.setStatus('current')
antWeightAmplitude7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightAmplitude7.setStatus('current')
antWeightPhase7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightPhase7.setStatus('current')
antWeightLibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antWeightLibIndex.setStatus('current')
raeUseingWeightTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3), )
if mibBuilder.loadTexts: raeUseingWeightTable.setStatus('current')
raeUseingWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "antUseingWeightArrayNo"))
if mibBuilder.loadTexts: raeUseingWeightEntry.setStatus('current')
antUseingWeightArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightArrayNo.setStatus('current')
antUseingWeightRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightRowStatus.setStatus('current')
antUseingWeightAmplitude0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightAmplitude0.setStatus('current')
antUseingWeightPhase0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightPhase0.setStatus('current')
antUseingWeightAmplitude1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightAmplitude1.setStatus('current')
antUseingWeightPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightPhase1.setStatus('current')
antUseingWeightAmplitude2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightAmplitude2.setStatus('current')
antUseingWeightPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightPhase2.setStatus('current')
antUseingWeightAmplitude3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightAmplitude3.setStatus('current')
antUseingWeightPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightPhase3.setStatus('current')
antUseingWeightAmplitude4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightAmplitude4.setStatus('current')
antUseingWeightPhase4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightPhase4.setStatus('current')
antUseingWeightAmplitude5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightAmplitude5.setStatus('current')
antUseingWeightPhase5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightPhase5.setStatus('current')
antUseingWeightAmplitude6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightAmplitude6.setStatus('current')
antUseingWeightPhase6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightPhase6.setStatus('current')
antUseingWeightAmplitude7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightAmplitude7.setStatus('current')
antUseingWeightPhase7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: antUseingWeightPhase7.setStatus('current')
netEquipInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2))
netBoardTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 1), )
if mibBuilder.loadTexts: netBoardTable.setStatus('current')
netBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netBoardRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "netBoardShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "netBoardSlotNo"))
if mibBuilder.loadTexts: netBoardEntry.setStatus('current')
netBoardRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: netBoardRackNo.setStatus('current')
netBoardShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: netBoardShelfNo.setStatus('current')
netBoardSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: netBoardSlotNo.setStatus('current')
netBoardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netBoardRowStatus.setStatus('current')
netBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 48, 49, 50, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 128, 129, 130, 141, 142, 143, 177, 178, 224, 240, 241)).clone(namedValues=NamedValues(("unknown", 0), ("riuDof", 48), ("riuE1", 49), ("riuA", 50), ("gcu", 52), ("ccu", 54), ("ceu", 56), ("bbu", 58), ("aifur6C8A", 59), ("ifur3C6A", 60), ("ifur6C1A", 61), ("ifur3C4A", 62), ("aifur9C1A", 63), ("gru", 64), ("ctu", 65), ("iiu", 66), ("bcu", 67), ("biu", 68), ("accu", 70), ("abbut", 71), ("abbuf", 72), ("eiuE1", 73), ("synu", 74), ("eiuDof", 75), ("aifur12C1A", 77), ("aifur9C8A", 78), ("scta", 97), ("bpia", 98), ("bpoa", 99), ("gpscu", 100), ("emu", 101), ("geu", 102), ("emau", 103), ("etpa", 104), ("etpd", 105), ("psu", 106), ("fcu", 107), ("bpoc", 108), ("bpoe", 109), ("emdu", 110), ("etpc", 111), ("bpof", 128), ("etpe", 129), ("sctc", 130), ("sctd", 141), ("mmba", 142), ("bpog", 143), ("bpoh", 177), ("scte", 178), ("mmbc", 224), ("sctf", 240), ("bpoi", 241)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netBoardType.setStatus('current')
netBoardWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(2, 4, 8)).clone(namedValues=NamedValues(("lte", 2), ("td", 4), ("fdd", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netBoardWorkMode.setStatus('current')
netBoardIrFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("tdriTd", 0), ("tdriLte", 1), ("cpri", 2), ("cprihdlc", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netBoardIrFrameType.setStatus('current')
netRemoteRadioUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2))
netRRUTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1), )
if mibBuilder.loadTexts: netRRUTable.setStatus('current')
netRRUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netRRUNo"))
if mibBuilder.loadTexts: netRRUEntry.setStatus('current')
netRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: netRRUNo.setStatus('current')
netRRURowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURowStatus.setStatus('current')
netRRUManufacturerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(2, 4, 6, 8, 10)).clone(namedValues=NamedValues(("erisson", 2), ("datang", 4), ("dingqiao", 6), ("putian", 8), ("zhongxing", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUManufacturerIndex.setStatus('current')
netRRUTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUTypeIndex.setStatus('current')
netRRULocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRULocation.setStatus('current')
netRRUOfpWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("normal", 1), ("lined", 2), ("backup", 3), ("shared", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUOfpWorkMode.setStatus('current')
netRRUAccessRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUAccessRackNo.setStatus('current')
netRRUAccessShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUAccessShelfNo.setStatus('current')
netRRUAccessSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 7), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUAccessSlotNo.setStatus('current')
netRRUAccessBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 54, 56, 58, 66, 67, 68, 70, 71, 72, 75, 97, 98, 99, 109, 113, 114, 128, 141, 142, 143, 177, 178, 224, 240, 241)).clone(namedValues=NamedValues(("unknown", 0), ("ccu", 54), ("ceu", 56), ("bbu", 58), ("iiu", 66), ("bcu", 67), ("biu", 68), ("accu", 70), ("abbut", 71), ("abbuf", 72), ("eiuDof", 75), ("scta", 97), ("bpia", 98), ("bpoa", 99), ("bpoe", 109), ("tdru311B", 113), ("tdru312", 114), ("bpof", 128), ("sctd", 141), ("mmba", 142), ("bpog", 143), ("bpoh", 177), ("scte", 178), ("mmbc", 224), ("sctf", 240), ("bpoi", 241)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUAccessBoardType.setStatus('current')
netRRUOfp1AccessOfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUOfp1AccessOfpPortNo.setStatus('current')
netRRUOfp1AccessLinePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 6), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUOfp1AccessLinePosition.setStatus('current')
netRRUOfp2AccessOfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUOfp2AccessOfpPortNo.setStatus('current')
netRRUOfp2AccessLinePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 6), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUOfp2AccessLinePosition.setStatus('current')
netRRUFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("ten", 0), ("twenty", 1), ("forty", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUFiberLength.setStatus('current')
netRRUPGCSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUPGCSwitch.setStatus('current')
netRRUPGCSetRange = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUPGCSetRange.setStatus('current')
netRRUJamResistantSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUJamResistantSwitch.setStatus('current')
netRRUJamResistantSetRange = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, -7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUJamResistantSetRange.setStatus('current')
netRRUOfp1AccessEthernetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1)).clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("unknown", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUOfp1AccessEthernetPort.setStatus('current')
netRRUHubNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(200, 254), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUHubNo.setStatus('current')
netRRUOfp2AccessEthernetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1)).clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("unknown", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUOfp2AccessEthernetPort.setStatus('current')
netRRUGsmSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUGsmSwitch.setStatus('current')
netRRUAntCombinGrpNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRUAntCombinGrpNo.setStatus('current')
netAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2))
netAntennaArrayTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1), )
if mibBuilder.loadTexts: netAntennaArrayTable.setStatus('current')
netAntennaArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netAntArrayNo"))
if mibBuilder.loadTexts: netAntennaArrayEntry.setStatus('current')
netAntArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: netAntArrayNo.setStatus('current')
netAntArrayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netAntArrayRowStatus.setStatus('current')
netAntArrayVendorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netAntArrayVendorIndex.setStatus('current')
netAntArrayTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netAntArrayTypeIndex.setStatus('current')
netAntArrayPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 359))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netAntArrayPosition.setStatus('current')
netAntArrayLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netAntArrayLocation.setStatus('current')
netAntArrayIsRet = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unsupport", 0), ("support", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netAntArrayIsRet.setStatus('current')
netAntArrayHalfPowerBeamWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netAntArrayHalfPowerBeamWidth.setStatus('current')
netAntArrayTdsInfoValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("invalid", 0), ("valid", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAntArrayTdsInfoValidFlag.setStatus('current')
netAntArrayVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAntArrayVendorName.setStatus('current')
netAntArrayModel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAntArrayModel.setStatus('current')
netAntArrayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("uca", 1), ("ula", 2), ("dis", 3), ("polar", 4), ("tideula", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAntArrayType.setStatus('current')
netAntArrayNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAntArrayNum.setStatus('current')
netAntArrayDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAntArrayDistance.setStatus('current')
netAntArrayGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAntArrayGain.setStatus('current')
netAntArrayRAEScanTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAntArrayRAEScanTrigger.setStatus('current')
netRETAntRCUTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 2), )
if mibBuilder.loadTexts: netRETAntRCUTable.setStatus('current')
netRETAntRCUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netRETAntRCUNo"))
if mibBuilder.loadTexts: netRETAntRCUEntry.setStatus('current')
netRETAntRCUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: netRETAntRCUNo.setStatus('current')
netRETAntRCURowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRETAntRCURowStatus.setStatus('current')
netRETAntRCULocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netRETAntRCULocation.setStatus('current')
netRRUAntennaSettingTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3), )
if mibBuilder.loadTexts: netRRUAntennaSettingTable.setStatus('current')
netRRUAntennaSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netSetRRUNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "netSetRRUPortNo"))
if mibBuilder.loadTexts: netRRUAntennaSettingEntry.setStatus('current')
netSetRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: netSetRRUNo.setStatus('current')
netSetRRUPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: netSetRRUPortNo.setStatus('current')
netSetRRUPortWithAntennaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortWithAntennaRowStatus.setStatus('current')
netSetRRUPortAntArrayNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 191), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortAntArrayNo.setStatus('current')
netSetRRUPortAntArrayPathNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 8), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortAntArrayPathNo.setStatus('current')
netSetRRUPortRETAntSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unsupport", 0), ("support", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortRETAntSupport.setStatus('current')
netSetRRUPortRETAntRCUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 191), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortRETAntRCUNo.setStatus('current')
netSetRRUPortSubtoLocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortSubtoLocalCellId.setStatus('current')
netSetRRUPortTxRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("rxAndTx", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortTxRxStatus.setStatus('current')
netSetRRUPortSubtoLocalCellId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortSubtoLocalCellId2.setStatus('current')
netSetRRUPortSubtoLocalCellId3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortSubtoLocalCellId3.setStatus('current')
netSetRRUPortSubtoLocalCellId4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortSubtoLocalCellId4.setStatus('current')
netSetRRUPortGroupNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortGroupNo.setStatus('current')
netSetRRUPortSubtoTdsLocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 11), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortSubtoTdsLocalCellId.setStatus('current')
netSetRRUPortSubtoAntPathNoInLocalCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortSubtoAntPathNoInLocalCell.setStatus('current')
netSetRRUPortCellPortionId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortCellPortionId.setStatus('current')
netSetRRUPortBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("unknown", 0), ("f", 1), ("a", 2), ("fa", 3), ("e", 4), ("fe", 5), ("ae", 6), ("fae", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortBand.setStatus('current')
netSetRRUPortManualConfigPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netSetRRUPortManualConfigPortNo.setStatus('current')
netIROptPlanTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 4), )
if mibBuilder.loadTexts: netIROptPlanTable.setStatus('current')
netIROptPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netIROfpPortRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "netIROfpPortShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "netIROfpPortSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "netIROfpPortIndexOnBoard"))
if mibBuilder.loadTexts: netIROptPlanEntry.setStatus('current')
netIROfpPortRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: netIROfpPortRackNo.setStatus('current')
netIROfpPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: netIROfpPortShelfNo.setStatus('current')
netIROfpPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: netIROfpPortSlotNo.setStatus('current')
netIROfpPortIndexOnBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: netIROfpPortIndexOnBoard.setStatus('current')
netIROfpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netIROfpPortRowStatus.setStatus('current')
netIROfpTransPlanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("mbps2500", 0), ("mbps5000", 1), ("mbps6000", 2), ("mbps10000", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netIROfpTransPlanSpeed.setStatus('current')
netRRURootAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5), )
if mibBuilder.loadTexts: netRRURootAlarmTable.setStatus('current')
netRRURootAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netRRURootAlarmRRUNo"))
if mibBuilder.loadTexts: netRRURootAlarmEntry.setStatus('current')
netRRURootAlarmRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: netRRURootAlarmRRUNo.setStatus('current')
netRRURootAlarmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmRowStatus.setStatus('current')
netRRURootAlarmType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1235, 1250), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmType1.setStatus('current')
netRRURootAlarmState1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmState1.setStatus('current')
netRRURootAlarmType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1235, 1250), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmType2.setStatus('current')
netRRURootAlarmState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmState2.setStatus('current')
netRRURootAlarmType3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1235, 1250), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmType3.setStatus('current')
netRRURootAlarmState3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmState3.setStatus('current')
netRRURootAlarmType4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1235, 1250), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmType4.setStatus('current')
netRRURootAlarmState4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmState4.setStatus('current')
netRRURootAlarmType5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1235, 1250), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmType5.setStatus('current')
netRRURootAlarmState5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmState5.setStatus('current')
netRRURootAlarmType6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1235, 1250), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmType6.setStatus('current')
netRRURootAlarmState6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmState6.setStatus('current')
netRRURootAlarmType7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1235, 1250), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmType7.setStatus('current')
netRRURootAlarmState7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmState7.setStatus('current')
netRRURootAlarmType8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1235, 1250), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmType8.setStatus('current')
netRRURootAlarmState8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 5, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRRURootAlarmState8.setStatus('current')
netRHUBTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6), )
if mibBuilder.loadTexts: netRHUBTable.setStatus('current')
netRHUBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netRHUBNo"))
if mibBuilder.loadTexts: netRHUBEntry.setStatus('current')
netRHUBNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 254)))
if mibBuilder.loadTexts: netRHUBNo.setStatus('current')
netRHUBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBRowStatus.setStatus('current')
netRHUBLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBLocation.setStatus('current')
netRHUBOfpWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4, 5)).clone(namedValues=NamedValues(("normal", 1), ("lined", 2), ("shared", 4), ("linedshared", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBOfpWorkMode.setStatus('current')
netRHUBAccessRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBAccessRackNo.setStatus('current')
netRHUBAccessShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBAccessShelfNo.setStatus('current')
netRHUBAccessSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 7), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBAccessSlotNo.setStatus('current')
netRHUBAccessBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 177, 241)).clone(namedValues=NamedValues(("unknown", 0), ("bpoh", 177), ("bpoi", 241)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBAccessBoardType.setStatus('current')
netRHUBOfp1AccessOfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBOfp1AccessOfpPortNo.setStatus('current')
netRHUBOfp1AccessLinePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBOfp1AccessLinePosition.setStatus('current')
netRHUBFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("ten", 0), ("twenty", 1), ("forty", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBFiberLength.setStatus('current')
netRHUBOfp2AccessOfpPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBOfp2AccessOfpPortNo.setStatus('current')
netRHUBOfp2AccessLinePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBOfp2AccessLinePosition.setStatus('current')
netRHUBType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBType.setStatus('current')
netRHUBChannelGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 6, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 450))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netRHUBChannelGain.setStatus('current')
netEthPlanTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 7), )
if mibBuilder.loadTexts: netEthPlanTable.setStatus('current')
netEthPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netEthPortRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "netEthPortShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "netEthPortSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "netEthRHUBNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "netEthPortIndexOnHub"))
if mibBuilder.loadTexts: netEthPlanEntry.setStatus('current')
netEthPortRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: netEthPortRackNo.setStatus('current')
netEthPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: netEthPortShelfNo.setStatus('current')
netEthPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: netEthPortSlotNo.setStatus('current')
netEthRHUBNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 254)))
if mibBuilder.loadTexts: netEthRHUBNo.setStatus('current')
netEthPortIndexOnHub = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: netEthPortIndexOnHub.setStatus('current')
netEthPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netEthPortRowStatus.setStatus('current')
netEthTransPlanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 2, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 4)).clone(namedValues=NamedValues(("mbps1250", 0), ("mbps2500", 1), ("mbps5000", 2), ("mbps10000", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netEthTransPlanSpeed.setStatus('current')
linkCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 1))
linkCommonOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCommonOperationStatus.setStatus('current')
linkCommonOperationTDSStatus = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCommonOperationTDSStatus.setStatus('current')
iubSignalTransportMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("atm", 0), ("ip", 1), ("atmFirst", 2), ("ipFirst", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iubSignalTransportMode.setStatus('current')
iubServiceTransportMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("atm", 0), ("ip", 1), ("atmip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iubServiceTransportMode.setStatus('current')
linkCommonMtuValue = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1400, 1600), ValueRangeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkCommonMtuValue.setStatus('current')
ofPortTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 2), )
if mibBuilder.loadTexts: ofPortTable.setStatus('current')
ofPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ofPortRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ofPortShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ofPortSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ofPortPhyPortId"))
if mibBuilder.loadTexts: ofPortEntry.setStatus('current')
ofPortRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: ofPortRackNo.setStatus('current')
ofPortShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: ofPortShelfNo.setStatus('current')
ofPortSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: ofPortSlotNo.setStatus('current')
ofPortPhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: ofPortPhyPortId.setStatus('current')
ofPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 2, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofPortRowStatus.setStatus('current')
ofPortModuleExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExisted", 0), ("existed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofPortModuleExistState.setStatus('current')
ofPortActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofPortActiveStatus.setStatus('current')
ipLogicPort = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3))
ipAddrTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 1), )
if mibBuilder.loadTexts: ipAddrTable.setStatus('current')
ipAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ipAddrIndex"))
if mibBuilder.loadTexts: ipAddrEntry.setStatus('current')
ipAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: ipAddrIndex.setStatus('current')
ipAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddrRowStatus.setStatus('current')
ipAddrLocalIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 1, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddrLocalIpAddressType.setStatus('current')
ipAddrLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddrLocalIpAddress.setStatus('current')
ipAddrLocalIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddrLocalIpMask.setStatus('current')
ipAddrPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2)).clone(namedValues=NamedValues(("eth", 0), ("ops", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddrPhyType.setStatus('current')
ipAddrRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddrRackNo.setStatus('current')
ipAddrShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddrShelfNo.setStatus('current')
ipAddrSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddrSlotNo.setStatus('current')
ipAddrPhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddrPhyPortId.setStatus('current')
ipAddrCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 3, -1)).clone(namedValues=NamedValues(("unknown", 0), ("ok", 3), ("invalid", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddrCfgStatus.setStatus('current')
ipPathTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 2), )
if mibBuilder.loadTexts: ipPathTable.setStatus('current')
ipPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ipPathIpAddrIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ipPathIndex"))
if mibBuilder.loadTexts: ipPathEntry.setStatus('current')
ipPathIpAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: ipPathIpAddrIndex.setStatus('current')
ipPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)))
if mibBuilder.loadTexts: ipPathIndex.setStatus('current')
ipPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPathRowStatus.setStatus('current')
ipPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("controlPlane", 1), ("userPlane", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPathType.setStatus('current')
ipPathMaxTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPathMaxTxBandwidth.setStatus('current')
ipPathMaxRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPathMaxRxBandwidth.setStatus('current')
ipPathSetupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 3, -1)).clone(namedValues=NamedValues(("unknown", 0), ("driverOK", 1), ("ok", 3), ("invalid", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPathSetupStatus.setStatus('current')
iubIPPathTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3), )
if mibBuilder.loadTexts: iubIPPathTable.setStatus('current')
iubIPPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "iubIPPathIPPortIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "iubIPPathIndex"))
if mibBuilder.loadTexts: iubIPPathEntry.setStatus('current')
iubIPPathIPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: iubIPPathIPPortIndex.setStatus('current')
iubIPPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: iubIPPathIndex.setStatus('current')
iubIPPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iubIPPathRowStatus.setStatus('current')
iubIPPathServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)).clone(namedValues=NamedValues(("unknown", 0), ("csSpeech", 1), ("csStreaming", 2), ("csConversational", 3), ("hsdpaStreaming", 4), ("hsdpaInteractive", 5), ("hsdpaBackground", 6), ("hsupaStreaming", 7), ("hsupaInteractive", 8), ("hsupaBackground", 9), ("hsupaConversational", 10), ("r4psStreaming", 11), ("r4psInteractive", 12), ("r4psBackground", 13), ("r4psConversational", 14), ("signaling", 15), ("nbapSignal", 16), ("cch", 17), ("om", 18), ("default", 19)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iubIPPathServiceType.setStatus('current')
iubIPPathMaxTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iubIPPathMaxTxBandwidth.setStatus('current')
iubIPPathMaxRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iubIPPathMaxRxBandwidth.setStatus('current')
iubIPPathEnableMacQos = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iubIPPathEnableMacQos.setStatus('current')
iubIPPathVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iubIPPathVlanId.setStatus('current')
iubIPPathSetupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 3)).clone(namedValues=NamedValues(("unknown", 0), ("driverOK", 1), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iubIPPathSetupStatus.setStatus('current')
iubIPPathMacPri = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iubIPPathMacPri.setStatus('current')
iubIPPathDelTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iubIPPathDelTrigger.setStatus('current')
iubIPPathMCMLPPPClassNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iubIPPathMCMLPPPClassNumber.setStatus('current')
iubIPPathGuarTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iubIPPathGuarTxBandwidth.setStatus('current')
ipControlLink = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4))
sctpTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1), )
if mibBuilder.loadTexts: sctpTable.setStatus('current')
sctpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sctpIndex"))
if mibBuilder.loadTexts: sctpEntry.setStatus('current')
sctpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 81)))
if mibBuilder.loadTexts: sctpIndex.setStatus('current')
sctpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpRowStatus.setStatus('current')
sctpWorkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("server", 0), ("client", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpWorkingMode.setStatus('current')
sctpLocalIpAddrIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpLocalIpAddrIndex1.setStatus('current')
sctpLocalIpAddrIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpLocalIpAddrIndex2.setStatus('current')
sctpLocalIpAddrIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpLocalIpAddrIndex3.setStatus('current')
sctpLocalIpAddrIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpLocalIpAddrIndex4.setStatus('current')
sctpPeerIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 8), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpPeerIpAddressType.setStatus('current')
sctpPeerIpAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 9), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpPeerIpAddr1.setStatus('current')
sctpPeerIpAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 10), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpPeerIpAddr2.setStatus('current')
sctpPeerIpAddr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 11), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpPeerIpAddr3.setStatus('current')
sctpPeerIpAddr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 12), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpPeerIpAddr4.setStatus('current')
sctpPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("mme", 0), ("eNB", 1), ("rnc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpPeerType.setStatus('current')
sctpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("driverCfgOk", 1), ("driverOk", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctpStatus.setStatus('current')
sctpBlockSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("block", 0), ("unblock", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sctpBlockSwitch.setStatus('current')
sctpResetTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0)).clone(namedValues=NamedValues(("on", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sctpResetTrigger.setStatus('current')
sctpSignalBearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2)).clone(namedValues=NamedValues(("invalid", -1), ("unknown", 0), ("setup", 1), ("block", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctpSignalBearStatus.setStatus('current')
sctpDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("valid", 0), ("invalid", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctpDataType.setStatus('current')
sctpPeerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sctpPeerPortNumber.setStatus('current')
sctpDeleteFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sctpDeleteFlag.setStatus('current')
sctpStreamTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 2), )
if mibBuilder.loadTexts: sctpStreamTable.setStatus('current')
sctpStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sctpStreamSctpIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "sctpStreamIndex"))
if mibBuilder.loadTexts: sctpStreamEntry.setStatus('current')
sctpStreamSctpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 81)))
if mibBuilder.loadTexts: sctpStreamSctpIndex.setStatus('current')
sctpStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: sctpStreamIndex.setStatus('current')
sctpStreamRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpStreamRowStatus.setStatus('current')
sctpStreamIdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpStreamIdTx.setStatus('current')
sctpStreamIdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpStreamIdRx.setStatus('current')
sctpStreamIsCommonDedi = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("common", 0), ("dedicated", 1), ("both", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sctpStreamIsCommonDedi.setStatus('current')
sctpStreamLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctpStreamLinkId.setStatus('current')
sctpTimer = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 3))
sctpTimerRTOInitial = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctpTimerRTOInitial.setStatus('current')
sctpTimerRTOMin = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 3, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctpTimerRTOMin.setStatus('current')
sctpTimerRTOMax = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctpTimerRTOMax.setStatus('current')
sctpTimerValidCookieLife = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctpTimerValidCookieLife.setStatus('current')
sctpTimerAssocMaxRetrans = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 3, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctpTimerAssocMaxRetrans.setStatus('current')
sctpTimerPathMaxRetrans = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 3, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctpTimerPathMaxRetrans.setStatus('current')
sctpTimerMaxInitRetransmits = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 3, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctpTimerMaxInitRetransmits.setStatus('current')
sctpTimerHBInterval = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 3, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctpTimerHBInterval.setStatus('current')
omLinkStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 4))
omLinkStatInPkts = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: omLinkStatInPkts.setStatus('current')
omLinkStatOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 4, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: omLinkStatOutPkts.setStatus('current')
iubSCTPStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 5))
iubSCTPStatInPkts = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iubSCTPStatInPkts.setStatus('current')
iubSCTPStatOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iubSCTPStatOutPkts.setStatus('current')
iubSCTPStatOutLossPkts = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 5, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iubSCTPStatOutLossPkts.setStatus('current')
iubSCTPStatOutLossPktsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 5, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iubSCTPStatOutLossPktsThreshold.setStatus('current')
iubSCTPStatOutLossRateThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 5, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iubSCTPStatOutLossRateThreshold.setStatus('current')
iubSCTPStatOutLossCheckPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 5, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iubSCTPStatOutLossCheckPeriod.setStatus('current')
iubSCTPStatOutLossRateLongThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 5, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iubSCTPStatOutLossRateLongThreshold.setStatus('current')
iubSCTPStatOutLossCheckLongPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 4, 5, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iubSCTPStatOutLossCheckLongPeriod.setStatus('current')
ipManagementLink = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5))
omLinkTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1), )
if mibBuilder.loadTexts: omLinkTable.setStatus('current')
omLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "omLinkIndex"))
if mibBuilder.loadTexts: omLinkEntry.setStatus('current')
omLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: omLinkIndex.setStatus('current')
omLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: omLinkRowStatus.setStatus('current')
omLinkSetupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("notReady", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: omLinkSetupStatus.setStatus('current')
omLinkLocalIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkLocalIPAddressType.setStatus('current')
omLinkLocalIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkLocalIPAddress.setStatus('current')
omLinkLocalIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 6), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkLocalIpMask.setStatus('current')
omLinkDefaultGWIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkDefaultGWIpAddr.setStatus('current')
omLinkPeerIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkPeerIpAddrType.setStatus('current')
omLinkPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkPeerIpAddr.setStatus('current')
omLinkMaxTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkMaxTxBandwidth.setStatus('current')
omLinkMaxRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkMaxRxBandwidth.setStatus('current')
omLinkDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkDSCP.setStatus('current')
omLinkEnableMacQos = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkEnableMacQos.setStatus('current')
omLinkMacPri = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkMacPri.setStatus('current')
omLinkVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkVlanId.setStatus('current')
omLinkPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("eth", 0), ("e1", 1), ("ops", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkPhyType.setStatus('current')
omLinkRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkRackNo.setStatus('current')
omLinkShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkShelfNo.setStatus('current')
omLinkSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkSlotNo.setStatus('current')
omLinkPhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkPhyPortId.setStatus('current')
omLinkRecoverTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkRecoverTimer.setStatus('current')
omLinkIsRealTimeValid = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkIsRealTimeValid.setStatus('current')
omLinkNetworkAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("linkTDS", 0), ("lnkTDL", 1), ("linkSingle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omLinkNetworkAttribute.setStatus('current')
trafficCategory = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6))
trafficCategoryTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 1), )
if mibBuilder.loadTexts: trafficCategoryTable.setStatus('current')
trafficCategoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "trafficCategoryIndex"))
if mibBuilder.loadTexts: trafficCategoryEntry.setStatus('current')
trafficCategoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: trafficCategoryIndex.setStatus('current')
trafficCategoryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trafficCategoryRowStatus.setStatus('current')
trafficCategoryServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 5, 6)).clone(namedValues=NamedValues(("unknown", 0), ("userPlane", 1), ("signal", 5), ("handOver", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trafficCategoryServiceType.setStatus('current')
trafficCategoryQCI = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trafficCategoryQCI.setStatus('current')
trafficCategoryDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trafficCategoryDSCP.setStatus('current')
trafficCategoryEnableMacQos = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trafficCategoryEnableMacQos.setStatus('current')
trafficCategoryMacPri = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trafficCategoryMacPri.setStatus('current')
iubTrafficCategoryTypeTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 2), )
if mibBuilder.loadTexts: iubTrafficCategoryTypeTable.setStatus('current')
iubTrafficCategoryTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "iubTrafficCategoryTypeIndex"))
if mibBuilder.loadTexts: iubTrafficCategoryTypeEntry.setStatus('current')
iubTrafficCategoryTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19)))
if mibBuilder.loadTexts: iubTrafficCategoryTypeIndex.setStatus('current')
iubTrafficCategoryTypeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iubTrafficCategoryTypeRowStatus.setStatus('current')
iubTrafficCategoryServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)).clone(namedValues=NamedValues(("unknown", 0), ("csSpeech", 1), ("csStreaming", 2), ("csConversational", 3), ("hsdpaStreaming", 4), ("hsdpaInteractive", 5), ("hsdpaBackground", 6), ("hsupaStreaming", 7), ("hsupaInteractive", 8), ("hsupaBackground", 9), ("hsupaConversational", 10), ("r4psStreaming", 11), ("r4psInteractive", 12), ("r4psBackground", 13), ("r4psConversational", 14), ("signaling", 15), ("nbapSignal", 16), ("cch", 17), ("om", 18), ("default", 19)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iubTrafficCategoryServiceType.setStatus('current')
iubTrafficCategoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iubTrafficCategoryType.setStatus('current')
iubTrafficCategoryDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(255, 255), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iubTrafficCategoryDSCP.setStatus('current')
transCutOver = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 7))
transCutOverTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transCutOverTrigger.setStatus('current')
transCutOverTdsTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transCutOverTdsTrigger.setStatus('current')
reverseOperation = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 8))
reverseOperationTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 8, 1), )
if mibBuilder.loadTexts: reverseOperationTable.setStatus('current')
reverseOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 8, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "reverseOperationIndex"))
if mibBuilder.loadTexts: reverseOperationEntry.setStatus('current')
reverseOperationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: reverseOperationIndex.setStatus('current')
reverseOperationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reverseOperationRowStatus.setStatus('current')
reverseOperationSrcIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 8, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reverseOperationSrcIPAddress.setStatus('current')
reverseOperationDesIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 8, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reverseOperationDesIPAddress.setStatus('current')
mirrorFunction = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 9))
mirrorSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorSwitch.setStatus('current')
linkAggregation = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 10))
linkAgationSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkAgationSwitch.setStatus('current')
routeRelation = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 2))
routeRelationTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 2, 1), )
if mibBuilder.loadTexts: routeRelationTable.setStatus('current')
routeRelationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rtRelatIndex"))
if mibBuilder.loadTexts: routeRelationEntry.setStatus('current')
rtRelatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199)))
if mibBuilder.loadTexts: rtRelatIndex.setStatus('current')
rtRelatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtRelatRowStatus.setStatus('current')
rtRelatPeerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 2, 1, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtRelatPeerIpType.setStatus('current')
rtRelatPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 2, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtRelatPeerIp.setStatus('current')
rtRelatPeerIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 2, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtRelatPeerIpMask.setStatus('current')
rtRelatGatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 2, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtRelatGatewayIpAddress.setStatus('current')
vlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 3))
vlanIdTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 3, 1), )
if mibBuilder.loadTexts: vlanIdTable.setStatus('current')
vlanIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "vlanConfigIndex"))
if mibBuilder.loadTexts: vlanIdEntry.setStatus('current')
vlanConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: vlanConfigIndex.setStatus('current')
vlanConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanConfigRowStatus.setStatus('current')
vlanConfigVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanConfigVlanId.setStatus('current')
vlanConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 100)).clone(namedValues=NamedValues(("x2", 0), ("s1Mme", 1), ("s1User", 2), ("x2User", 3), ("default", 100)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanConfigType.setStatus('current')
vlanConfigIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 3, 1, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanConfigIpAddressType.setStatus('current')
vlanConfigNtHpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 3, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanConfigNtHpIpAddress.setStatus('current')
detection = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4))
ethernetOAMTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1), )
if mibBuilder.loadTexts: ethernetOAMTable.setStatus('current')
ethernetOAMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ethernetOAMIndex"))
if mibBuilder.loadTexts: ethernetOAMEntry.setStatus('current')
ethernetOAMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: ethernetOAMIndex.setStatus('current')
ethernetOAMRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetOAMRowStatus.setStatus('current')
ethernetOAMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetOAMEnable.setStatus('current')
ethernetOAMMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("active", 0), ("passive", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetOAMMode.setStatus('current')
ethernetOAMLoopbackEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetOAMLoopbackEnable.setStatus('current')
ethernetOAMUnitPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetOAMUnitPerSec.setStatus('current')
ethernetOAMPDUMaxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 2047))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetOAMPDUMaxLength.setStatus('current')
ethernetOAMPeerMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOAMPeerMac.setStatus('current')
ethernetOAMDiscoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("beign", 0), ("fault", 1), ("activeSendLocal", 2), ("passiveWait", 3), ("localUnsatisfied", 4), ("remoteUnsatisfied", 5), ("sendANY", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOAMDiscoveryState.setStatus('current')
ethernetOAMSendLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("well", 0), ("fault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOAMSendLinkState.setStatus('current')
ethernetOAMReceiveLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("well", 0), ("fault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOAMReceiveLinkState.setStatus('current')
ethernetOAMLoopbackCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOAMLoopbackCounts.setStatus('current')
ethernetOAMShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetOAMShelfNo.setStatus('current')
ethernetOAMSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetOAMSlotNo.setStatus('current')
ethernetOAMPhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetOAMPhyPortId.setStatus('current')
ethernetOAMLoopbackTxCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOAMLoopbackTxCounts.setStatus('current')
bfdTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2), )
if mibBuilder.loadTexts: bfdTable.setStatus('current')
bfdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "bfdIndex"))
if mibBuilder.loadTexts: bfdEntry.setStatus('current')
bfdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: bfdIndex.setStatus('current')
bfdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdRowStatus.setStatus('current')
bfdLocalIpAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdLocalIpAddrIndex.setStatus('current')
bfdPeerIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdPeerIPAddressType.setStatus('current')
bfdPeerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdPeerIPAddress.setStatus('current')
bfdDetectMulti = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdDetectMulti.setStatus('current')
bfdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("selfdetect", 0), ("manudetect", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdMode.setStatus('current')
bfdWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("async", 1), ("demand", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdWorkMode.setStatus('current')
bfdMinTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdMinTxInterval.setStatus('current')
bfdMinRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdMinRxInterval.setStatus('current')
bfdEchoInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdEchoInterval.setStatus('current')
bfdEchoTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdEchoTimes.setStatus('current')
qolTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 3), )
if mibBuilder.loadTexts: qolTable.setStatus('current')
qolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "qolIndex"))
if mibBuilder.loadTexts: qolEntry.setStatus('current')
qolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: qolIndex.setStatus('current')
qolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qolRowStatus.setStatus('current')
qolLocalIpAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qolLocalIpAddrIndex.setStatus('current')
qolPeerIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 3, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qolPeerIPAddressType.setStatus('current')
qolPeerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 3, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qolPeerIPAddress.setStatus('current')
qolMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("bfd", 0), ("ping", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qolMode.setStatus('current')
qolEchoTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qolEchoTimes.setStatus('current')
qolEchoMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qolEchoMaxDelay.setStatus('current')
qolEchoMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qolEchoMinDelay.setStatus('current')
qolEchoAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qolEchoAvgDelay.setStatus('current')
qolEchoLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qolEchoLoss.setStatus('current')
gtpuFailInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 4), )
if mibBuilder.loadTexts: gtpuFailInfoTable.setStatus('current')
gtpuFailInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "gfiIndex"))
if mibBuilder.loadTexts: gtpuFailInfoEntry.setStatus('current')
gfiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)))
if mibBuilder.loadTexts: gfiIndex.setStatus('current')
gfiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 4, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfiRowStatus.setStatus('current')
gfiEnbIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfiEnbIPAddress.setStatus('current')
gfiSgwIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 4, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfiSgwIPAddress.setStatus('current')
gfiTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfiTimeStamp.setStatus('current')
twampLinkTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 5), )
if mibBuilder.loadTexts: twampLinkTable.setStatus('current')
twampLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "twampLinkIndex"))
if mibBuilder.loadTexts: twampLinkEntry.setStatus('current')
twampLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: twampLinkIndex.setStatus('current')
twampRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: twampRowStatus.setStatus('current')
twampLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("responderLight", 0), ("responderFull", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: twampLinkType.setStatus('current')
twampLinkIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 5, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: twampLinkIPAddressType.setStatus('current')
twampRemoteIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 5, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: twampRemoteIPAddr.setStatus('current')
twampLocalIPAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: twampLocalIPAddrIndex.setStatus('current')
twampLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: twampLocalPort.setStatus('current')
arpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 5))
arpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 5, 1), )
if mibBuilder.loadTexts: arpStatusTable.setStatus('current')
arpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 5, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "arpStatusIndex"))
if mibBuilder.loadTexts: arpStatusEntry.setStatus('current')
arpStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: arpStatusIndex.setStatus('current')
arpStatusRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 5, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatusRowStatus.setStatus('current')
arpStatusDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 5, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatusDstIp.setStatus('current')
arpStatusDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 5, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatusDstMac.setStatus('current')
arpStatusVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatusVlanId.setStatus('current')
arpStatusMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("valid", 0), ("learning", 1), ("aged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatusMacStatus.setStatus('current')
arpConfigInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 5, 2))
arpAgedPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 5, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpAgedPeriod.setStatus('current')
arpLearningPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 5, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpLearningPeriod.setStatus('current')
saal = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 6))
saalStatisticInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 6, 1))
saalPeakRate = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalPeakRate.setStatus('current')
saalValleyRate = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalValleyRate.setStatus('current')
saalAverageRate = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalAverageRate.setStatus('current')
saalRateStatisticPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 1440), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalRateStatisticPeriod.setStatus('current')
atmTransport = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7))
atmTransportInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1))
iubImaGrpTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 1), )
if mibBuilder.loadTexts: iubImaGrpTable.setStatus('current')
iubImaGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "iubImaGrpSlotId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "iubImaGrpIndex"))
if mibBuilder.loadTexts: iubImaGrpEntry.setStatus('current')
iubImaGrpSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: iubImaGrpSlotId.setStatus('current')
iubImaGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: iubImaGrpIndex.setStatus('current')
iubImaGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 1, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iubImaGrpRowStatus.setStatus('current')
iubImaGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iubImaGrpId.setStatus('current')
iubImaGrpActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("inactive", 0), ("active", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iubImaGrpActiveStatus.setStatus('current')
iubImaGrpIsIpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notIpoa", 0), ("isIpoa", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iubImaGrpIsIpoa.setStatus('current')
iubOFPortTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 2), )
if mibBuilder.loadTexts: iubOFPortTable.setStatus('current')
iubOFPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "iubOFPortSlotId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "iubOFPortPhyPortId"))
if mibBuilder.loadTexts: iubOFPortEntry.setStatus('current')
iubOFPortSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: iubOFPortSlotId.setStatus('current')
iubOFPortPhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: iubOFPortPhyPortId.setStatus('current')
iubOFPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 2, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iubOFPortRowStatus.setStatus('current')
iubOFPortActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iubOFPortActiveStatus.setStatus('current')
iubOFPortPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iubOFPortPortId.setStatus('current')
iubOFPortIsOMLink = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notOMLink", 0), ("isOMLink", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iubOFPortIsOMLink.setStatus('current')
ipoaChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3))
ipoaChVPI = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChVPI.setStatus('current')
ipoaChVCI = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChVCI.setStatus('current')
ipoaChPortId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChPortId.setStatus('current')
ipoaChActiveState = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipoaChActiveState.setStatus('current')
ipoaChActiveCheckPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipoaChActiveCheckPeriod.setStatus('current')
ipoaChLinkType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("cbr", 0), ("rtVbr", 1), ("nrtVbr", 2), ("ubr", 3), ("ubrPlus", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChLinkType.setStatus('current')
ipoaChRnc2NbPcr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 24000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChRnc2NbPcr.setStatus('current')
ipoaChRnc2NbScrMcr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 24000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChRnc2NbScrMcr.setStatus('current')
ipoaChRnc2NbMbs = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChRnc2NbMbs.setStatus('current')
ipoaChRnc2NbCdvt = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChRnc2NbCdvt.setStatus('current')
ipoaChRnc2NbMaxCTD = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChRnc2NbMaxCTD.setStatus('current')
ipoaChRnc2NbClr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChRnc2NbClr.setStatus('current')
ipoaChNb2RncPcr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 24000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChNb2RncPcr.setStatus('current')
ipoaChNb2RncScrMcr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 24000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChNb2RncScrMcr.setStatus('current')
ipoaChNb2RncMbs = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChNb2RncMbs.setStatus('current')
ipoaChNb2RncCdvt = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChNb2RncCdvt.setStatus('current')
ipoaChNb2RncMaxCTD = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChNb2RncMaxCTD.setStatus('current')
ipoaChNb2RncCcr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChNb2RncCcr.setStatus('current')
ipoaChPolicingAction = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("off", 0), ("policy1", 1), ("policy2", 2), ("policy3", 3), ("policy4", 4), ("policy5", 5), ("policy6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChPolicingAction.setStatus('current')
ipoaChInactiveTolerance = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipoaChInactiveTolerance.setStatus('current')
ipoaChLastErrReason = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 3, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 255)).clone(namedValues=NamedValues(("ok", 0), ("loopback", 1), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipoaChLastErrReason.setStatus('current')
saalConnTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4), )
if mibBuilder.loadTexts: saalConnTable.setStatus('current')
saalConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "saalConnId"))
if mibBuilder.loadTexts: saalConnEntry.setStatus('current')
saalConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(10, 11, 1, 2)).clone(namedValues=NamedValues(("ten", 10), ("eleven", 11), ("one", 1), ("two", 2))))
if mibBuilder.loadTexts: saalConnId.setStatus('current')
saalConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnRowStatus.setStatus('current')
saalConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("undetermined", 0), ("nbap", 1), ("alcap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnType.setStatus('current')
saalConnVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnVpi.setStatus('current')
saalConnVci = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnVci.setStatus('current')
saalConnPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnPortId.setStatus('current')
saalConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("aal5Ok", 1), ("localSetup", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnStatus.setStatus('current')
saalConnNmbRxBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 16777216))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnNmbRxBufs.setStatus('current')
saalConnMaxTxCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 16777216))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnMaxTxCredit.setStatus('current')
saalConnIsMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("master", 0), ("slave", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnIsMaster.setStatus('current')
saalConnAsxIntState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnAsxIntState.setStatus('current')
saalConnAalIntState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnAalIntState.setStatus('current')
saalConnSscfState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnSscfState.setStatus('current')
saalConnSscopState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnSscopState.setStatus('current')
saalConnTxDiscardedSdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxDiscardedSdus.setStatus('current')
saalConnRxErrorPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxErrorPdus.setStatus('current')
saalConnRxDiscardedPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxDiscardedPdus.setStatus('current')
saalConnTxErrorPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxErrorPdus.setStatus('current')
saalConnTxDiscardedPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxDiscardedPdus.setStatus('current')
saalConnRxBgnPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxBgnPdus.setStatus('current')
saalConnTxBgnPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxBgnPdus.setStatus('current')
saalConnRxBgAkPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxBgAkPdus.setStatus('current')
saalConnTxBgAkPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxBgAkPdus.setStatus('current')
saalConnRxBgRejPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxBgRejPdus.setStatus('current')
saalConnTxBgRejPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxBgRejPdus.setStatus('current')
saalConnRxEndPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxEndPdus.setStatus('current')
saalConnTxEndPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxEndPdus.setStatus('current')
saalConnRxEndAkPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxEndAkPdus.setStatus('current')
saalConnTxEndAkPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxEndAkPdus.setStatus('current')
saalConnRxRsPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxRsPdus.setStatus('current')
saalConnTxRsPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxRsPdus.setStatus('current')
saalConnRxRsAkPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxRsAkPdus.setStatus('current')
saalConnTxRsAkPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxRsAkPdus.setStatus('current')
saalConnRxErPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxErPdus.setStatus('current')
saalConnTxErPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxErPdus.setStatus('current')
saalConnRxErAkPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxErAkPdus.setStatus('current')
saalConnTxErAkPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxErAkPdus.setStatus('current')
saalConnRxSdPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxSdPdus.setStatus('current')
saalConnTxSdPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxSdPdus.setStatus('current')
saalConnRxPollPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxPollPdus.setStatus('current')
saalConnTxPollPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxPollPdus.setStatus('current')
saalConnRxStatPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxStatPdus.setStatus('current')
saalConnTxStatPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxStatPdus.setStatus('current')
saalConnRxUstatPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxUstatPdus.setStatus('current')
saalConnTxUstatPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxUstatPdus.setStatus('current')
saalConnRxUdPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxUdPdus.setStatus('current')
saalConnTxUdPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxUdPdus.setStatus('current')
saalConnRxMdPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxMdPdus.setStatus('current')
saalConnTxMdPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxMdPdus.setStatus('current')
saalConnRxBufferInUseCntr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxBufferInUseCntr.setStatus('current')
saalConnRxBufferInUseGauge = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnRxBufferInUseGauge.setStatus('current')
saalConnTxBufferInUseCntr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxBufferInUseCntr.setStatus('current')
saalConnTxBufferInUseGauge = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalConnTxBufferInUseGauge.setStatus('current')
saalConnDelTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 54), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnDelTrigger.setStatus('current')
saalConnLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 55), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("cbr", 0), ("rtVbr", 1), ("nrtVbr", 2), ("ubr", 3), ("ubrPlus", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnLinkType.setStatus('current')
saalConnRnc2NbPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 24000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnRnc2NbPcr.setStatus('current')
saalConnRnc2NbScrMcr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 24000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnRnc2NbScrMcr.setStatus('current')
saalConnRnc2NbMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnRnc2NbMbs.setStatus('current')
saalConnRnc2NbCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnRnc2NbCdvt.setStatus('current')
saalConnRnc2NbMaxCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnRnc2NbMaxCTD.setStatus('current')
saalConnRnc2NbClr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnRnc2NbClr.setStatus('current')
saalConnNb2RncPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 24000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnNb2RncPcr.setStatus('current')
saalConnNb2RncScrMcr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 24000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnNb2RncScrMcr.setStatus('current')
saalConnNb2RncMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnNb2RncMbs.setStatus('current')
saalConnNb2RncCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnNb2RncCdvt.setStatus('current')
saalConnNb2RncMaxCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnNb2RncMaxCTD.setStatus('current')
saalConnNb2RncCcr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnNb2RncCcr.setStatus('current')
saalConnPolicingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 4, 1, 68), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("off", 0), ("policy1", 1), ("policy2", 2), ("policy3", 3), ("policy4", 4), ("policy5", 5), ("policy6", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalConnPolicingAction.setStatus('current')
saalCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 5))
saalMaxNmbBufs = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalMaxNmbBufs.setStatus('current')
saalNmbDlcs = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalNmbDlcs.setStatus('current')
saalTmrPollVal = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 5, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalTmrPollVal.setStatus('current')
saalTmrKeepAliveVal = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 5, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalTmrKeepAliveVal.setStatus('current')
saalTmrNoResponseVal = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 5, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(21, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saalTmrNoResponseVal.setStatus('current')
saalTmrCcVal = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 5, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalTmrCcVal.setStatus('current')
saalTmrIdleVal = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 5, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalTmrIdleVal.setStatus('current')
saalSscopMaxCC = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 5, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalSscopMaxCC.setStatus('current')
saalSscopMaxPD = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 5, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalSscopMaxPD.setStatus('current')
saalSscopMaxSTAT = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 5, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalSscopMaxSTAT.setStatus('current')
saalAllNbapAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 5, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("clear", 0), ("notClear", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalAllNbapAlarmState.setStatus('current')
saalAllAlcapAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 5, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("clear", 0), ("notClear", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saalAllAlcapAlarmState.setStatus('current')
pathTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6), )
if mibBuilder.loadTexts: pathTable.setStatus('current')
pathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pathIndex"))
if mibBuilder.loadTexts: pathEntry.setStatus('current')
pathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 95)))
if mibBuilder.loadTexts: pathIndex.setStatus('current')
pathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathRowStatus.setStatus('current')
pathId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathId.setStatus('current')
pathVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathVpi.setStatus('current')
pathVci = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathVci.setStatus('current')
pathPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathPortId.setStatus('current')
pathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 3)).clone(namedValues=NamedValues(("unknown", 0), ("aal2Ok", 1), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathStatus.setStatus('current')
pathCheckEnableSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathCheckEnableSwitch.setStatus('current')
pathConns = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathConns.setStatus('current')
pathDelTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathDelTrigger.setStatus('current')
pathLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("cbr", 0), ("rtVbr", 1), ("nrtVbr", 2), ("ubr", 3), ("ubrPlus", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathLinkType.setStatus('current')
pathRnc2NbPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 24000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathRnc2NbPcr.setStatus('current')
pathRnc2NbScrMcr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 24000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathRnc2NbScrMcr.setStatus('current')
pathRnc2NbMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathRnc2NbMbs.setStatus('current')
pathRnc2NbCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathRnc2NbCdvt.setStatus('current')
pathRnc2NbMaxCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathRnc2NbMaxCTD.setStatus('current')
pathRnc2NbClr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathRnc2NbClr.setStatus('current')
pathNb2RncPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 24000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathNb2RncPcr.setStatus('current')
pathNb2RncScrMcr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 24000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathNb2RncScrMcr.setStatus('current')
pathNb2RncMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathNb2RncMbs.setStatus('current')
pathNb2RncCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathNb2RncCdvt.setStatus('current')
pathNb2RncMaxCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathNb2RncMaxCTD.setStatus('current')
pathNb2RncCcr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathNb2RncCcr.setStatus('current')
pathPolicingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 1, 6, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("off", 0), ("policy1", 1), ("policy2", 2), ("policy3", 3), ("policy4", 4), ("policy5", 5), ("policy6", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathPolicingAction.setStatus('current')
imaGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2))
imaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1), )
if mibBuilder.loadTexts: imaGroupTable.setStatus('current')
imaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "imaGrpSlotId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "imaGrpIndex"))
if mibBuilder.loadTexts: imaGroupEntry.setStatus('current')
imaGrpSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: imaGrpSlotId.setStatus('current')
imaGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: imaGrpIndex.setStatus('current')
imaGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpRowStatus.setStatus('current')
imaGrpInitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("ima", 0), ("uni", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpInitMode.setStatus('current')
imaGrpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 15)).clone(namedValues=NamedValues(("ver10", 0), ("ver11", 1), ("invalid", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpVersion.setStatus('current')
imaGrpFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 15)).clone(namedValues=NamedValues(("len32", 0), ("len64", 1), ("len128", 2), ("len256", 3), ("invalid", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpFrameLength.setStatus('current')
imaGrpClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 15)).clone(namedValues=NamedValues(("itc", 0), ("ctc", 1), ("invalid", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpClockMode.setStatus('current')
imaGrpE1LinkOhm = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("ohm75", 0), ("ohm120", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpE1LinkOhm.setStatus('current')
imaGrpTxSigLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpTxSigLevel.setStatus('current')
imaGrpRxDetectThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("db8", 0), ("db9", 1), ("db10", 2), ("db11", 3), ("db20", 4), ("db21", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpRxDetectThreshold.setStatus('current')
imaGrpStartLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpStartLinkId.setStatus('current')
imaGrpActiveThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpActiveThreshold.setStatus('current')
imaGrpLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpLinkNum.setStatus('current')
imaGrpGtsmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 255)).clone(namedValues=NamedValues(("inactive", 0), ("active", 1), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpGtsmState.setStatus('current')
imaGrpNeGsmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 8, 9, 10, 255)).clone(namedValues=NamedValues(("startUp", 0), ("startUpAck", 1), ("configAbort", 2), ("insufficientLinks", 8), ("block", 9), ("operational", 10), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpNeGsmState.setStatus('current')
imaGrpFeGsmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 8, 9, 10, 255)).clone(namedValues=NamedValues(("startUp", 0), ("startUpAck", 1), ("configAbort", 2), ("insufficientLinks", 8), ("block", 9), ("operational", 10), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpFeGsmState.setStatus('current')
imaGrpRxFrameLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 255)).clone(namedValues=NamedValues(("len32", 0), ("len64", 1), ("len128", 2), ("len256", 3), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpRxFrameLen.setStatus('current')
imaGrpTxTrlPhyLink = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpTxTrlPhyLink.setStatus('current')
imaGrpRxTrlPhyLink = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpRxTrlPhyLink.setStatus('current')
imaGrpRxTrlLid = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 31), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpRxTrlLid.setStatus('current')
imaGrpNumTxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpNumTxLinks.setStatus('current')
imaGrpNumTxLinksActv = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpNumTxLinksActv.setStatus('current')
imaGrpNumRxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpNumRxLinks.setStatus('current')
imaGrpNumRxLinksActv = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpNumRxLinksActv.setStatus('current')
e1LinkInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3))
e1LinkTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1), )
if mibBuilder.loadTexts: e1LinkTable.setStatus('current')
e1LinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "e1LinkSlotId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "e1LinkId"))
if mibBuilder.loadTexts: e1LinkEntry.setStatus('current')
e1LinkSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: e1LinkSlotId.setStatus('current')
e1LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: e1LinkId.setStatus('current')
e1LinkSignalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 255)).clone(namedValues=NamedValues(("sigOk", 0), ("sigLos", 1), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkSignalState.setStatus('current')
e1LinkLof = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 255)).clone(namedValues=NamedValues(("sFrmSyn", 0), ("sFrmLos", 1), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkLof.setStatus('current')
e1LinkLocMf = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 255)).clone(namedValues=NamedValues(("cFrmSyn", 0), ("cFrmLos", 1), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkLocMf.setStatus('current')
e1LinkTcLcd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 255)).clone(namedValues=NamedValues(("tcCellSyn", 0), ("tcCellLos", 1), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkTcLcd.setStatus('current')
e1LinkImaNeLif = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 255)).clone(namedValues=NamedValues(("imaFrmSyn", 0), ("imaFrmLos", 1), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkImaNeLif.setStatus('current')
e1LinkImaFeLcd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 255)).clone(namedValues=NamedValues(("tcCellSyn", 0), ("tcCellLos", 1), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkImaFeLcd.setStatus('current')
e1LinkImaFeLif = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 255)).clone(namedValues=NamedValues(("imaFrmSyn", 0), ("imaFrmLos", 1), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkImaFeLif.setStatus('current')
e1LinkRxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 31), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxLid.setStatus('current')
e1LinkImaNeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 6, 7, 255)).clone(namedValues=NamedValues(("outOfGroup", 0), ("disable", 2), ("enable", 6), ("active", 7), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkImaNeTxState.setStatus('current')
e1LinkImaNeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 6, 7, 255)).clone(namedValues=NamedValues(("outOfGroup", 0), ("disable", 2), ("enable", 6), ("active", 7), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkImaNeRxState.setStatus('current')
e1LinkImaFeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 6, 7, 255)).clone(namedValues=NamedValues(("outOfGroup", 0), ("disable", 2), ("enable", 6), ("active", 7), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkImaFeTxState.setStatus('current')
e1LinkImaFeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 6, 7, 255)).clone(namedValues=NamedValues(("outOfGroup", 0), ("disable", 2), ("enable", 6), ("active", 7), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkImaFeRxState.setStatus('current')
e1LinkImaDCBDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4294967294), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkImaDCBDepth.setStatus('current')
e1LinkRxVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 255)).clone(namedValues=NamedValues(("ver10", 0), ("ver11", 1), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxVersion.setStatus('current')
e1LinkRxOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 255)).clone(namedValues=NamedValues(("sym", 0), ("asym", 1), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxOpMode.setStatus('current')
e1LinkRxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 255)).clone(namedValues=NamedValues(("itc", 0), ("ctc", 1), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxClkMode.setStatus('current')
e1LinkRxFrameLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 255)).clone(namedValues=NamedValues(("len32", 0), ("len64", 1), ("len128", 2), ("len256", 3), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxFrameLen.setStatus('current')
e1LinkRxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 254), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxImaId.setStatus('current')
e1LinkRxIcpOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 254), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxIcpOffset.setStatus('current')
e1LinkRxTrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 31), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxTrlId.setStatus('current')
e1LinkFrmErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkFrmErrCnt.setStatus('current')
e1LinkE1FEBECnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkE1FEBECnt.setStatus('current')
e1LinkE1CRCErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkE1CRCErrCnt.setStatus('current')
e1LinkLcvCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkLcvCnt.setStatus('current')
e1LinkTxUserCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkTxUserCells.setStatus('current')
e1LinkRxUserCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxUserCells.setStatus('current')
e1LinkRxHcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxHcsErrs.setStatus('current')
e1LinkRxFilteredCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxFilteredCells.setStatus('current')
e1LinkRxDroppedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxDroppedCells.setStatus('current')
e1LinkRxOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxOifAnomalies.setStatus('current')
e1LinkRxIcpViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxIcpViolations.setStatus('current')
e1LinkTxStuffCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkTxStuffCells.setStatus('current')
e1LinkRxStuffCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxStuffCells.setStatus('current')
e1LinkRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxIcpCells.setStatus('current')
e1LinkRxFillerCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkRxFillerCells.setStatus('current')
e1LinkLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 255)).clone(namedValues=NamedValues(("normal", 0), ("loopback", 1), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkLoopbackState.setStatus('current')
e1LinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("electric", 0), ("optical", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkType.setStatus('current')
e1ErrorRateAlarmParam = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 2))
e1FrameErrorAlarmGenThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1FrameErrorAlarmGenThreshold.setStatus('current')
e1FrameErrorAlarmClearThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1FrameErrorAlarmClearThreshold.setStatus('current')
e1CRCErrorAlarmGenThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1CRCErrorAlarmGenThreshold.setStatus('current')
e1CRCErrorAlarmClearThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1CRCErrorAlarmClearThreshold.setStatus('current')
e1FEBEErrorAlarmGenThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1FEBEErrorAlarmGenThreshold.setStatus('current')
e1FEBEErrorAlarmClearThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 2, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1FEBEErrorAlarmClearThreshold.setStatus('current')
e1ErrorDetectPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 7, 3, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1ErrorDetectPeriod.setStatus('current')
remoteLmtRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8))
remoteLmtRouteTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8, 1), )
if mibBuilder.loadTexts: remoteLmtRouteTable.setStatus('current')
remoteLmtRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "remoteLmtRouteIndex"))
if mibBuilder.loadTexts: remoteLmtRouteEntry.setStatus('current')
remoteLmtRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: remoteLmtRouteIndex.setStatus('current')
remoteLmtRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLmtRouteRowStatus.setStatus('current')
remoteLmtRoutePeerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8, 1, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLmtRoutePeerIpType.setStatus('current')
remoteLmtRoutePeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLmtRoutePeerIp.setStatus('current')
remoteLmtRoutePeerIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLmtRoutePeerIpMask.setStatus('current')
remoteLmtRouteGatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLmtRouteGatewayIpAddress.setStatus('current')
remoteLmtRoutePhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("eth", 0), ("e1", 1), ("ops", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLmtRoutePhyType.setStatus('current')
remoteLmtRouteRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLmtRouteRackNo.setStatus('current')
remoteLmtRouteShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLmtRouteShelfNo.setStatus('current')
remoteLmtRouteSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLmtRouteSlotNo.setStatus('current')
remoteLmtRoutePhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 1, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLmtRoutePhyPortId.setStatus('current')
localCell = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4))
localCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 1), )
if mibBuilder.loadTexts: localCellTable.setStatus('current')
localCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "lcId"))
if mibBuilder.loadTexts: localCellEntry.setStatus('current')
lcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: lcId.setStatus('current')
lcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcRowStatus.setStatus('current')
lcCellMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("tdscdma", 1), ("tdlte", 2), ("fddlte", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCellMode.setStatus('current')
lcAntArrayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("smartAnt", 1), ("nonSmartAnt", 2), ("mixedAnt", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcAntArrayMode.setStatus('current')
lcProcedureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 4, 5, 6)).clone(namedValues=NamedValues(("invalid", 0), ("notReady", 1), ("loadSoftware", 2), ("iqPathCfg", 4), ("setuped", 5), ("inDelete", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcProcedureStatus.setStatus('current')
lcOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcOperationalState.setStatus('current')
lcDisableReason = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 1, 1, 7), Bits().clone(namedValues=NamedValues(("clockErr", 0), ("transErr", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcDisableReason.setStatus('current')
lcMaxDlPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcMaxDlPower.setStatus('current')
lcMinDlPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcMinDlPower.setStatus('current')
lcConfigTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("add", 0), ("delete", 1), ("reconfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConfigTrigger.setStatus('current')
lcHlProcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcHlProcId.setStatus('current')
baseBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2), )
if mibBuilder.loadTexts: baseBandwidthTable.setStatus('current')
baseBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "baseBandwidthRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "baseBandwidthShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "baseBandwidthSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "baseBandwidthIndexOnBoard"))
if mibBuilder.loadTexts: baseBandwidthEntry.setStatus('current')
baseBandwidthRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: baseBandwidthRackNo.setStatus('current')
baseBandwidthShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: baseBandwidthShelfNo.setStatus('current')
baseBandwidthSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: baseBandwidthSlotNo.setStatus('current')
baseBandwidthIndexOnBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47)))
if mibBuilder.loadTexts: baseBandwidthIndexOnBoard.setStatus('current')
baseBandwidthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandwidthRowStatus.setStatus('current')
baseBandwidthOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandwidthOperationalState.setStatus('current')
baseBandwidthEngagedState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("free", 0), ("preengage", 1), ("engaging", 2), ("engaged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandwidthEngagedState.setStatus('current')
baseBandwidthLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandwidthLcId.setStatus('current')
baseBandwidthLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("notLoad", 0), ("loading", 1), ("loaded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandwidthLoadState.setStatus('current')
baseBandwidthSwType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, -1)).clone(namedValues=NamedValues(("lte2a", 0), ("lte8a", 1), ("fdd", 2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandwidthSwType.setStatus('current')
baseBandwidthMainDspFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("main", 0), ("assistant", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandwidthMainDspFlag.setStatus('current')
baseBandwidthL1CoreList = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1, 12), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandwidthL1CoreList.setStatus('current')
baseBandwidthSocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandwidthSocIndex.setStatus('current')
cellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3), )
if mibBuilder.loadTexts: cellTable.setStatus('current')
cellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellId"))
if mibBuilder.loadTexts: cellEntry.setStatus('current')
cellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellId.setStatus('current')
cellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellRowStatus.setStatus('current')
cellOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellOperationalState.setStatus('current')
cellAvailbilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 7)).clone(namedValues=NamedValues(("empty", 0), ("failed", 2), ("degraded", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAvailbilityStatus.setStatus('current')
cellProcedureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("invalid", 0), ("inSetup", 1), ("inDelete", 2), ("inRecfg", 3), ("inShuttingDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellProcedureStatus.setStatus('current')
cellActiveTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("active", 0), ("deactive", 1), ("shuttingDown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellActiveTrigger.setStatus('current')
cellAntCalPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(60, 2100000), ValueRangeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAntCalPeriod.setStatus('current')
cellAntCalTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("txPath", 0), ("rxPath", 1), ("rtxPath", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAntCalTrigger.setStatus('current')
cellBlockSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("off", 0), ("unblock", 1), ("blockHigh", 2), ("blockNormal", 3), ("blockLow", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellBlockSwitch.setStatus('current')
cellBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellBlockTime.setStatus('current')
cellBlockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unblocked", 0), ("blocking", 1), ("blocked", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellBlockStatus.setStatus('current')
cellActTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellActTime.setStatus('current')
cellDeactDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellDeactDelayTime.setStatus('current')
cellRrcConnectNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellRrcConnectNum.setStatus('current')
cellUlIot = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 16), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellUlIot.setStatus('current')
cellPathShutdownState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("conservation", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellPathShutdownState.setStatus('current')
cellCellShutdownState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("conservation", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCellShutdownState.setStatus('current')
cellSymbolState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellSymbolState.setStatus('current')
cellMBSFNState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellMBSFNState.setStatus('current')
cellFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("fdd", 0), ("tdd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellFrameType.setStatus('current')
cellPrbAcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("highLoad", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellPrbAcStatus.setStatus('current')
cellActiveUeAcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("normal", 0), ("highLoad", 1), ("superHighLoad", 2), ("limitHighLoad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellActiveUeAcStatus.setStatus('current')
cellPrbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 3, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("prbCongest", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellPrbStatus.setStatus('current')
cellUlIotTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 4), )
if mibBuilder.loadTexts: cellUlIotTable.setStatus('current')
cellUlIotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellUlIotId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellUlIotSubSfn"))
if mibBuilder.loadTexts: cellUlIotEntry.setStatus('current')
cellUlIotId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellUlIotId.setStatus('current')
cellUlIotSubSfn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: cellUlIotSubSfn.setStatus('current')
cellUlIotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 4, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellUlIotRowStatus.setStatus('current')
cellUlIotValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 4, 1, 4), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellUlIotValue.setStatus('current')
cellUlAnteRSSIValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 4, 1, 5), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellUlAnteRSSIValue.setStatus('current')
cellUlNoUserAnteRSSIValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 4, 1, 6), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellUlNoUserAnteRSSIValue.setStatus('current')
radioBandTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 5), )
if mibBuilder.loadTexts: radioBandTable.setStatus('current')
radioBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "radioBandRRUNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "radioBandRRUPathNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "radioBandIndexOnRRUPath"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "radioBandEngagedLcIndex"))
if mibBuilder.loadTexts: radioBandEntry.setStatus('current')
radioBandRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: radioBandRRUNo.setStatus('current')
radioBandRRUPathNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: radioBandRRUPathNo.setStatus('current')
radioBandIndexOnRRUPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: radioBandIndexOnRRUPath.setStatus('current')
radioBandEngagedLcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: radioBandEngagedLcIndex.setStatus('current')
radioBandRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 5, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioBandRowStatus.setStatus('current')
radioBandEngagedState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("free", 0), ("preengage", 1), ("engaging", 2), ("engaged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioBandEngagedState.setStatus('current')
radioBandCellStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("cellActiving", 1), ("cellActived", 2), ("cellSetupFail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioBandCellStatus.setStatus('current')
radioBandLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioBandLcId.setStatus('current')
radioBandBaseBandAntNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioBandBaseBandAntNo.setStatus('current')
radioBandBaseBandPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioBandBaseBandPortNo.setStatus('current')
cellLccTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 6), )
if mibBuilder.loadTexts: cellLccTable.setStatus('current')
cellLccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellLccId"))
if mibBuilder.loadTexts: cellLccEntry.setStatus('current')
cellLccId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellLccId.setStatus('current')
cellLccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 6, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellLccRowStatus.setStatus('current')
cellLccStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("normal", 0), ("congestion", 1), ("highloag", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellLccStatus.setStatus('current')
cellLccUlLoadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellLccUlLoadValue.setStatus('current')
cellLccDlLoadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellLccDlLoadValue.setStatus('current')
cellUlIotRTMonitorTaskTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 7), )
if mibBuilder.loadTexts: cellUlIotRTMonitorTaskTable.setStatus('current')
cellUlIotRTMonitorTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellUlIotRTMonitorTaskLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellUlIotRTMonitorTaskSubSfn"))
if mibBuilder.loadTexts: cellUlIotRTMonitorTaskEntry.setStatus('current')
cellUlIotRTMonitorTaskLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellUlIotRTMonitorTaskLcId.setStatus('current')
cellUlIotRTMonitorTaskSubSfn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: cellUlIotRTMonitorTaskSubSfn.setStatus('current')
cellUlIotRTMonitorTaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellUlIotRTMonitorTaskRowStatus.setStatus('current')
cellUlIotRTMonitorTaskPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("value1s", 0), ("value2s", 1), ("value5s", 2), ("value10s", 3), ("value30s", 4), ("value1m", 5), ("value2m", 6), ("value5m", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellUlIotRTMonitorTaskPeriod.setStatus('current')
cellIotNotificationNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 8))
cellIotNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 8, 1))
cellIotNotification = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 8, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "cellIotNotiNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "cellIotNotiNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "cellIotNotiCellId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "cellIotNotiSubSfn"), ("DTM-TD-LTE-ENODEB-ENBMIB", "cellIotNotiTime"), ("DTM-TD-LTE-ENODEB-ENBMIB", "cellIotNotiValue"))
if mibBuilder.loadTexts: cellIotNotification.setStatus('current')
cellIotObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 8, 2))
cellIotNotiNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 8, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cellIotNotiNEType.setStatus('current')
cellIotNotiNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 8, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cellIotNotiNEID.setStatus('current')
cellIotNotiCellId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 8, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cellIotNotiCellId.setStatus('current')
cellIotNotiSubSfn = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 8, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cellIotNotiSubSfn.setStatus('current')
cellIotNotiTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 8, 2, 5), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cellIotNotiTime.setStatus('current')
cellIotNotiValue = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 8, 2, 6), Integer32Array()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cellIotNotiValue.setStatus('current')
cellSpecialCalCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 9), )
if mibBuilder.loadTexts: cellSpecialCalCfgTable.setStatus('current')
cellSpecialCalCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 9, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellSpeCalCfgLcId"))
if mibBuilder.loadTexts: cellSpecialCalCfgEntry.setStatus('current')
cellSpeCalCfgLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellSpeCalCfgLcId.setStatus('current')
cellSpeCalCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSpeCalCfgRowStatus.setStatus('current')
cellSpeCalCfgDwptsTruncateLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSpeCalCfgDwptsTruncateLength.setStatus('current')
cellSpeCalCfgDwptsMcsLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSpeCalCfgDwptsMcsLimit.setStatus('current')
cellSpeCalCfgDwptsMcsSingleLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSpeCalCfgDwptsMcsSingleLimit.setStatus('current')
cellSpeCalCfgDwptsCqiFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 9, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("nopartake", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSpeCalCfgDwptsCqiFlag.setStatus('current')
cellSpeCalCfgDwptsRetxFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 9, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("nolimit", 0), ("noretx", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSpeCalCfgDwptsRetxFlag.setStatus('current')
cellSpeCalCfgDwptsTransFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSpeCalCfgDwptsTransFlag.setStatus('current')
cellSpeCalCfgMacAckCollideMcsThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSpeCalCfgMacAckCollideMcsThr.setStatus('current')
cellSpeCalCfgOffsetArray = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 9, 1, 11), Unsigned32Array()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSpeCalCfgOffsetArray.setStatus('current')
hlSctSourceTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 11), )
if mibBuilder.loadTexts: hlSctSourceTable.setStatus('current')
hlSctSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 11, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hlSctSourceRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "hlSctSourceShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "hlSctSourceSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "hlSctSourceCoreIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "hlSctSourceCellIndexOnCore"))
if mibBuilder.loadTexts: hlSctSourceEntry.setStatus('current')
hlSctSourceRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: hlSctSourceRackNo.setStatus('current')
hlSctSourceShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: hlSctSourceShelfNo.setStatus('current')
hlSctSourceSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: hlSctSourceSlotNo.setStatus('current')
hlSctSourceCoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)))
if mibBuilder.loadTexts: hlSctSourceCoreIndex.setStatus('current')
hlSctSourceCellIndexOnCore = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: hlSctSourceCellIndexOnCore.setStatus('current')
hlSctSourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 11, 1, 6), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlSctSourceRowStatus.setStatus('current')
hlSctSourceLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 71), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlSctSourceLcId.setStatus('current')
hlSctSourceEngagedState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 11, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("free", 0), ("preengage", 1), ("engaging", 2), ("engaged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlSctSourceEngagedState.setStatus('current')
hlSctSourceUsableState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 11, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlSctSourceUsableState.setStatus('current')
macBbuSourceTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 12), )
if mibBuilder.loadTexts: macBbuSourceTable.setStatus('current')
macBbuSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 12, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "macBbuSourceRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "macBbuSourceShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "macBbuSourceSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "macBbuSourceIndex"))
if mibBuilder.loadTexts: macBbuSourceEntry.setStatus('current')
macBbuSourceRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: macBbuSourceRackNo.setStatus('current')
macBbuSourceShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: macBbuSourceShelfNo.setStatus('current')
macBbuSourceSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: macBbuSourceSlotNo.setStatus('current')
macBbuSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: macBbuSourceIndex.setStatus('current')
macBbuSourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 12, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBbuSourceRowStatus.setStatus('current')
macBbuSourceCoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBbuSourceCoreIndex.setStatus('current')
macBbuSourceLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 11), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBbuSourceLcId.setStatus('current')
macBbuSourceEngagedState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 12, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3)).clone(namedValues=NamedValues(("free", 0), ("engaging", 2), ("engaged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBbuSourceEngagedState.setStatus('current')
macBbuSourceOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 12, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBbuSourceOperationalState.setStatus('current')
macBbuRlcCoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBbuRlcCoreIndex.setStatus('current')
macBbuSocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBbuSocIndex.setStatus('current')
pdcpBbuSourceTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 13), )
if mibBuilder.loadTexts: pdcpBbuSourceTable.setStatus('current')
pdcpBbuSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 13, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpBbuSourceRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpBbuSourceShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpBbuSourceSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpBbuSourceIndex"))
if mibBuilder.loadTexts: pdcpBbuSourceEntry.setStatus('current')
pdcpBbuSourceRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: pdcpBbuSourceRackNo.setStatus('current')
pdcpBbuSourceShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: pdcpBbuSourceShelfNo.setStatus('current')
pdcpBbuSourceSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: pdcpBbuSourceSlotNo.setStatus('current')
pdcpBbuSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: pdcpBbuSourceIndex.setStatus('current')
pdcpBbuSourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 13, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpBbuSourceRowStatus.setStatus('current')
pdcpBbuSourceCoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpBbuSourceCoreIndex.setStatus('current')
pdcpBbuSourceLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 11), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpBbuSourceLcId.setStatus('current')
pdcpBbuSourceEngagedState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 13, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3)).clone(namedValues=NamedValues(("free", 0), ("engaging", 2), ("engaged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpBbuSourceEngagedState.setStatus('current')
pdcpBbuSourceOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 13, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpBbuSourceOperationalState.setStatus('current')
pdcpBbuSocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpBbuSocIndex.setStatus('current')
cellBoardLogTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 14), )
if mibBuilder.loadTexts: cellBoardLogTable.setStatus('current')
cellBoardLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 14, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellBoardLoglcId"))
if mibBuilder.loadTexts: cellBoardLogEntry.setStatus('current')
cellBoardLoglcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellBoardLoglcId.setStatus('current')
cellBoardLogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 14, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellBoardLogRowStatus.setStatus('current')
cellBoardLogRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellBoardLogRackNo.setStatus('current')
cellBoardLogShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellBoardLogShelfNo.setStatus('current')
cellBoardLogSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellBoardLogSlotNo.setStatus('current')
cellBoardLogCoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 14, 1, 6), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellBoardLogCoreIndex.setStatus('current')
cellRruCellTxPowerTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 15), )
if mibBuilder.loadTexts: cellRruCellTxPowerTable.setStatus('current')
cellRruCellTxPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 15, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellRruNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellRruLcNo"))
if mibBuilder.loadTexts: cellRruCellTxPowerEntry.setStatus('current')
cellRruNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47)))
if mibBuilder.loadTexts: cellRruNo.setStatus('current')
cellRruLcNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: cellRruLcNo.setStatus('current')
cellRruRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 15, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellRruRowStatus.setStatus('current')
cellRruCellLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellRruCellLcId.setStatus('current')
cellRruCellTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellRruCellTxPower.setStatus('current')
cellAntennaWeightTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16), )
if mibBuilder.loadTexts: cellAntennaWeightTable.setStatus('current')
cellAntennaWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellAntWeightLcId"))
if mibBuilder.loadTexts: cellAntennaWeightEntry.setStatus('current')
cellAntWeightLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellAntWeightLcId.setStatus('current')
cellAntWeightRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightRowStatus.setStatus('current')
cellAntWeightAmplitude0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude0.setStatus('current')
cellAntWeightPhase0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase0.setStatus('current')
cellAntWeightAmplitude1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude1.setStatus('current')
cellAntWeightPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase1.setStatus('current')
cellAntWeightAmplitude2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude2.setStatus('current')
cellAntWeightPhase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase2.setStatus('current')
cellAntWeightAmplitude3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude3.setStatus('current')
cellAntWeightPhase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase3.setStatus('current')
cellAntWeightAmplitude4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude4.setStatus('current')
cellAntWeightPhase4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase4.setStatus('current')
cellAntWeightAmplitude5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude5.setStatus('current')
cellAntWeightPhase5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase5.setStatus('current')
cellAntWeightAmplitude6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude6.setStatus('current')
cellAntWeightPhase6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase6.setStatus('current')
cellAntWeightAmplitude7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude7.setStatus('current')
cellAntWeightPhase7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase7.setStatus('current')
cellAntWeightAmplitude8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude8.setStatus('current')
cellAntWeightPhase8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase8.setStatus('current')
cellAntWeightAmplitude9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude9.setStatus('current')
cellAntWeightPhase9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase9.setStatus('current')
cellAntWeightAmplitude10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude10.setStatus('current')
cellAntWeightPhase10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase10.setStatus('current')
cellAntWeightAmplitude11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude11.setStatus('current')
cellAntWeightPhase11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase11.setStatus('current')
cellAntWeightAmplitude12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude12.setStatus('current')
cellAntWeightPhase12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase12.setStatus('current')
cellAntWeightAmplitude13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude13.setStatus('current')
cellAntWeightPhase13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase13.setStatus('current')
cellAntWeightAmplitude14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude14.setStatus('current')
cellAntWeightPhase14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase14.setStatus('current')
cellAntWeightAmplitude15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude15.setStatus('current')
cellAntWeightPhase15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase15.setStatus('current')
cellAntWeightAmplitude16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude16.setStatus('current')
cellAntWeightPhase16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase16.setStatus('current')
cellAntWeightAmplitude17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude17.setStatus('current')
cellAntWeightPhase17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase17.setStatus('current')
cellAntWeightAmplitude18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude18.setStatus('current')
cellAntWeightPhase18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase18.setStatus('current')
cellAntWeightAmplitude19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude19.setStatus('current')
cellAntWeightPhase19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase19.setStatus('current')
cellAntWeightAmplitude20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude20.setStatus('current')
cellAntWeightPhase20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase20.setStatus('current')
cellAntWeightAmplitude21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude21.setStatus('current')
cellAntWeightPhase21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase21.setStatus('current')
cellAntWeightAmplitude22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude22.setStatus('current')
cellAntWeightPhase22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase22.setStatus('current')
cellAntWeightAmplitude23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightAmplitude23.setStatus('current')
cellAntWeightPhase23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 4, 16, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAntWeightPhase23.setStatus('current')
calibrationNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 1))
calAcEnable = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calAcEnable.setStatus('current')
calAcPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 2100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calAcPeriod.setStatus('current')
calcellCalRepeatLength = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("n2", 0), ("n4", 1), ("n8", 2), ("n16", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: calcellCalRepeatLength.setStatus('current')
calcellCalRepeatPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("n128", 0), ("n256", 1), ("n512", 2), ("n1024", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: calcellCalRepeatPeriod.setStatus('current')
calcellCalModeSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calcellCalModeSwitch.setStatus('current')
periodCalibrationTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 4), )
if mibBuilder.loadTexts: periodCalibrationTable.setStatus('current')
periodCalibrationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "periodCalibrationRRUNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "periodCalibrationPathNo"))
if mibBuilder.loadTexts: periodCalibrationEntry.setStatus('current')
periodCalibrationRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: periodCalibrationRRUNo.setStatus('current')
periodCalibrationPathNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: periodCalibrationPathNo.setStatus('current')
periodCalibrationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 4, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: periodCalibrationRowStatus.setStatus('current')
periodCalibrationTxPeakPosShift = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: periodCalibrationTxPeakPosShift.setStatus('current')
periodCalibrationTxCalGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: periodCalibrationTxCalGain.setStatus('current')
periodCalibrationRxPeakPosShift = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: periodCalibrationRxPeakPosShift.setStatus('current')
periodCalibrationRxCalGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: periodCalibrationRxCalGain.setStatus('current')
periodCalibrationTxCalGainTds = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: periodCalibrationTxCalGainTds.setStatus('current')
periodCalibrationRxCalGainTds = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: periodCalibrationRxCalGainTds.setStatus('current')
ssc = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7))
sscLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 1))
sscSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscSwitch.setStatus('current')
sscTaskTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2), )
if mibBuilder.loadTexts: sscTaskTable.setStatus('current')
sscTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sscTaskIndex"))
if mibBuilder.loadTexts: sscTaskEntry.setStatus('current')
sscTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: sscTaskIndex.setStatus('current')
sscTaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sscTaskRowStatus.setStatus('current')
sscServerInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscServerInetAddrType.setStatus('current')
sscServerInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscServerInetAddr.setStatus('current')
sscTaskCollectEntityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscTaskCollectEntityPort.setStatus('current')
sscTmValidNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscTmValidNum.setStatus('current')
sscStartTime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(24, 24), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscStartTime1.setStatus('current')
sscEndTime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(24, 24), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscEndTime1.setStatus('current')
sscStartTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(24, 24), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscStartTime2.setStatus('current')
sscEndTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(24, 24), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscEndTime2.setStatus('current')
sscStartTime3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(24, 24), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscStartTime3.setStatus('current')
sscEndTime3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(24, 24), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscEndTime3.setStatus('current')
sscStartTime4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(24, 24), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscStartTime4.setStatus('current')
sscEndTime4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(24, 24), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscEndTime4.setStatus('current')
sscStartTime5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(24, 24), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscStartTime5.setStatus('current')
sscEndTime5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(24, 24), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscEndTime5.setStatus('current')
sscOptSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscOptSwitch.setStatus('current')
sscOptRptInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("ms1024", 4), ("ms2048", 5), ("ms5120", 6), ("ms10240", 7), ("min1", 8), ("min6", 9), ("min12", 10), ("min30", 11), ("min60", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscOptRptInterval.setStatus('current')
sscX2Switch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("off", 0), ("tx", 1), ("rx", 2), ("txRx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscX2Switch.setStatus('current')
sscMaxUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscMaxUserNum.setStatus('current')
sscUuSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscUuSwitch.setStatus('current')
sscUuExternBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 22), Unsigned32Array()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscUuExternBitmap.setStatus('current')
sscPagSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscPagSwitch.setStatus('current')
sscUuBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 25), Unsigned32Array()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscUuBitmap.setStatus('current')
sscX2Bitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 26), Unsigned32Array()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscX2Bitmap.setStatus('current')
sscStartMinute1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscStartMinute1.setStatus('current')
sscEndMinute1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscEndMinute1.setStatus('current')
sscStartMinute2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscStartMinute2.setStatus('current')
sscEndMinute2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscEndMinute2.setStatus('current')
sscStartMinute3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscStartMinute3.setStatus('current')
sscEndMinute3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscEndMinute3.setStatus('current')
sscStartMinute4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscStartMinute4.setStatus('current')
sscEndMinute4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscEndMinute4.setStatus('current')
sscStartMinute5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscStartMinute5.setStatus('current')
sscEndMinute5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 7, 2, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sscEndMinute5.setStatus('current')
tdsLocalcell = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8))
tdsLocalCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1), )
if mibBuilder.loadTexts: tdsLocalCellTable.setStatus('current')
tdsLocalCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "tdsLcId"))
if mibBuilder.loadTexts: tdsLocalCellEntry.setStatus('current')
tdsLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: tdsLcId.setStatus('current')
tdsLcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcRowStatus.setStatus('current')
tdsLcCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcCellId.setStatus('current')
tdsLcCellParaId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcCellParaId.setStatus('current')
tdsLcCellExpectedCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcCellExpectedCarrierNum.setStatus('current')
tdsLcCellBlockSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("off", 0), ("unblock", 1), ("blockHigh", 2), ("blockNormal", 3), ("blockLow", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsLcCellBlockSwitch.setStatus('current')
tdsLcCellBlockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unblocked", 0), ("blocking", 1), ("blocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcCellBlockStatus.setStatus('current')
tdsLcCellOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcCellOperationalState.setStatus('current')
tdsLcCellAvailbilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("empty", 0), ("intest", 1), ("failed", 2), ("powerOff", 3), ("offline", 4), ("offDuty", 5), ("dependency", 6), ("degraded", 7), ("notInstalled", 8), ("logFull", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcCellAvailbilityStatus.setStatus('current')
tdsLcCalibrationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("temperatureCompensation", 0), ("outputPowerDetection", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsLcCalibrationMode.setStatus('current')
tdsLcAntArrayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("unknown", 0), ("singleAnt", 1), ("disAnt", 2), ("smartAnt", 3), ("ambipolarAnt", 4), ("disSmartAnt", 5), ("disAmbipolarAnt", 6), ("smartPolarAnt", 7), ("disSmartPolarAnt", 8), ("mixAnt", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcAntArrayMode.setStatus('current')
tdsLcMaxCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 21), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcMaxCarrierNum.setStatus('current')
tdsLcMinCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 21), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcMinCarrierNum.setStatus('current')
tdsLcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcPriority.setStatus('current')
tdsLcIsAntCombination = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("false", 0), ("antCombinationBetweenRRS", 1), ("antCombinationInRRS", 2), ("antCompleteCombination", 3), ("antOptionalCombination", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcIsAntCombination.setStatus('current')
tdsLcMaxCombinationAntNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcMaxCombinationAntNum.setStatus('current')
tdsLcLocalCellGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 11), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcLocalCellGrpId.setStatus('current')
tdsLcAppScene = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("normal", 0), ("largeScope", 1), ("underground", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcAppScene.setStatus('current')
tdsLcPrimaryLocalCarrierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcPrimaryLocalCarrierIndex.setStatus('current')
tdsLcAntennaCalibrationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsLcAntennaCalibrationEnable.setStatus('current')
tdsLcAntennaCalibrationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsLcAntennaCalibrationPeriod.setStatus('current')
tdsLcCellExpectedCarrierNumA = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcCellExpectedCarrierNumA.setStatus('current')
tdsLcPrimaryCarrierBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2)).clone(namedValues=NamedValues(("unknown", -1), ("v1880to1920", 0), ("v2010to2025", 1), ("v2300to2400", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcPrimaryCarrierBand.setStatus('current')
tdsLcDownTimeSlotClosedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcDownTimeSlotClosedNum.setStatus('current')
tdsLcDownTimeSlotTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsLcDownTimeSlotTotalNum.setStatus('current')
localCellConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 2), )
if mibBuilder.loadTexts: localCellConfigTable.setStatus('current')
localCellConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "lcConfigLcId"))
if mibBuilder.loadTexts: localCellConfigEntry.setStatus('current')
lcConfigLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: lcConfigLcId.setStatus('current')
lcConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcConfigRowStatus.setStatus('current')
tdsLcConfigTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("add", 0), ("delete", 1), ("reconfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsLcConfigTrigger.setStatus('current')
lcConfigCellBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConfigCellBlockTime.setStatus('current')
lcConfigRefClockAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConfigRefClockAvail.setStatus('current')
lcConfigMaxDlPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcConfigMaxDlPower.setStatus('current')
lcConfigMinDlPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcConfigMinDlPower.setStatus('current')
lcConfigCellPerfReportSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConfigCellPerfReportSwitch.setStatus('current')
lcConfigEts0Switch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConfigEts0Switch.setStatus('current')
localCellGrpTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 3), )
if mibBuilder.loadTexts: localCellGrpTable.setStatus('current')
localCellGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "lcGrpId"))
if mibBuilder.loadTexts: localCellGrpEntry.setStatus('current')
lcGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: lcGrpId.setStatus('current')
lcGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcGrpRowStatus.setStatus('current')
lcGrpCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 72))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcGrpCarrierNum.setStatus('current')
lcGrpPlanCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 72))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcGrpPlanCarrierNum.setStatus('current')
localCarrierTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4), )
if mibBuilder.loadTexts: localCarrierTable.setStatus('current')
localCarrierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "localCarrierLocalCellId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "localCarrierIndex"))
if mibBuilder.loadTexts: localCarrierEntry.setStatus('current')
localCarrierLocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: localCarrierLocalCellId.setStatus('current')
localCarrierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: localCarrierIndex.setStatus('current')
localCarrierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierRowStatus.setStatus('current')
localCarrierPrimarySecondery = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("undetermined", -1), ("primary", 0), ("secondery", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierPrimarySecondery.setStatus('current')
localCarrierFreqValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierFreqValue.setStatus('current')
localCarrierCarrierOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierCarrierOperationalState.setStatus('current')
localCarrierCarrierAvailbilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("empty", 0), ("intest", 1), ("failed", 2), ("powerOff", 3), ("offline", 4), ("offDuty", 5), ("dependency", 6), ("degraded", 7), ("notInstalled", 8), ("logFull", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierCarrierAvailbilityStatus.setStatus('current')
localCarrierStatusCheckTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localCarrierStatusCheckTrigger.setStatus('current')
localCarrierAckedUsrDataVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierAckedUsrDataVolume.setStatus('current')
localCarrierTTINum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierTTINum.setStatus('current')
localCarrierUsrBufferNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierUsrBufferNum.setStatus('current')
localCarrierRxACKNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierRxACKNum.setStatus('current')
localCarrierRxNACKNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierRxNACKNum.setStatus('current')
localCarrierDiscardHsFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierDiscardHsFrameNum.setStatus('current')
localCarrierPdschPowerMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localCarrierPdschPowerMinRate.setStatus('current')
localCarrierScchPowerMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localCarrierScchPowerMinRate.setStatus('current')
localCarrierInterfaceBaseBandCarrierNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(18, 143), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierInterfaceBaseBandCarrierNo.setStatus('current')
localCarrierFirstRxACKNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierFirstRxACKNum.setStatus('current')
localCarrierFirstRxNACKNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierFirstRxNACKNum.setStatus('current')
localCarrierSyncUlConflicts = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierSyncUlConflicts.setStatus('current')
localCarrierSyncUlDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierSyncUlDiscards.setStatus('current')
localCarrierFpachResps = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierFpachResps.setStatus('current')
localCarrierHsdpaUsedBRUNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierHsdpaUsedBRUNum.setStatus('current')
localCarrierHsupaUsedBRUNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierHsupaUsedBRUNum.setStatus('current')
localCarrierhsdpaTfrcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("invalid", -1), ("tdcdPartialTd", 0), ("tdcdPartialCd", 1), ("pureTd", 2), ("allTd", 3), ("sd", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierhsdpaTfrcMode.setStatus('current')
localCarrierhsupaTfrcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2, 3)).clone(namedValues=NamedValues(("invalid", -1), ("pureTd", 0), ("pureCd", 1), ("tdcd", 2), ("sd", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierhsupaTfrcMode.setStatus('current')
localCarrierOKRachs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierOKRachs.setStatus('current')
localCarrierFachs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierFachs.setStatus('current')
localCarrierPchs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierPchs.setStatus('current')
localCarrierERRRachs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierERRRachs.setStatus('current')
localCarrierCurrentUpptsPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierCurrentUpptsPosition.setStatus('current')
localCarrierNbrMacePdu = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierNbrMacePdu.setStatus('current')
localCarrierNbrAckMacePdu = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierNbrAckMacePdu.setStatus('current')
localCarrierNbrAckMaceOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierNbrAckMaceOcts.setStatus('current')
localCarrierhsdpaCtrlSDMACapability = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 64)).clone(namedValues=NamedValues(("notsdma", 0), ("sdma", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierhsdpaCtrlSDMACapability.setStatus('current')
localCarrierhsupaCtrlSDMACapability = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 64)).clone(namedValues=NamedValues(("notsdma", 0), ("sdma", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierhsupaCtrlSDMACapability.setStatus('current')
localCarrierFpToDdRachs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierFpToDdRachs.setStatus('current')
localCarrierFpFromDdRachs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierFpFromDdRachs.setStatus('current')
localCarrierFpToDdFachs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierFpToDdFachs.setStatus('current')
localCarrierFpFromDdFachs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierFpFromDdFachs.setStatus('current')
localCarrierFpToDdPchs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierFpToDdPchs.setStatus('current')
localCarrierFpFromDdPchs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierFpFromDdPchs.setStatus('current')
localCarrierApeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 4, 1, 43), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localCarrierApeSwitch.setStatus('current')
baseBandCarrierTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5), )
if mibBuilder.loadTexts: baseBandCarrierTable.setStatus('current')
baseBandCarrierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "baseBandCarrierNo"))
if mibBuilder.loadTexts: baseBandCarrierEntry.setStatus('current')
baseBandCarrierNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 143)))
if mibBuilder.loadTexts: baseBandCarrierNo.setStatus('current')
baseBandCarrierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierRowStatus.setStatus('current')
baseBandCarrierFrameNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierFrameNo.setStatus('current')
baseBandCarrierSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierSlotNo.setStatus('current')
baseBandCarrierIndexOnBBU = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierIndexOnBBU.setStatus('current')
baseBandCarrierEngagedState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("free", 0), ("preengage", 1), ("engaging", 2), ("engaged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseBandCarrierEngagedState.setStatus('current')
baseBandCarrierLocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 11), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseBandCarrierLocalCellId.setStatus('current')
baseBandCarrierLocalCarrierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierLocalCarrierIndex.setStatus('current')
baseBandCarrierIsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("unknown", -1), ("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierIsInterface.setStatus('current')
baseBandCarrierlcGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 11), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierlcGrpId.setStatus('current')
baseBandCarrierAntCalTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("txPath", 0), ("rxPath", 1), ("rtxPath", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseBandCarrierAntCalTrigger.setStatus('current')
baseBandCarrierAntCalType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("txPath", 0), ("rxPath", 1), ("rtxPath", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseBandCarrierAntCalType.setStatus('current')
baseBandCarrierTxPath1CalFactorI = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath1CalFactorI.setStatus('current')
baseBandCarrierTxPath1CalFactorQ = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath1CalFactorQ.setStatus('current')
baseBandCarrierTxPath2CalFactorI = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath2CalFactorI.setStatus('current')
baseBandCarrierTxPath2CalFactorQ = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath2CalFactorQ.setStatus('current')
baseBandCarrierTxPath3CalFactorI = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath3CalFactorI.setStatus('current')
baseBandCarrierTxPath3CalFactorQ = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath3CalFactorQ.setStatus('current')
baseBandCarrierTxPath4CalFactorI = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath4CalFactorI.setStatus('current')
baseBandCarrierTxPath4CalFactorQ = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath4CalFactorQ.setStatus('current')
baseBandCarrierTxPath5CalFactorI = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath5CalFactorI.setStatus('current')
baseBandCarrierTxPath5CalFactorQ = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath5CalFactorQ.setStatus('current')
baseBandCarrierTxPath6CalFactorI = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath6CalFactorI.setStatus('current')
baseBandCarrierTxPath6CalFactorQ = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath6CalFactorQ.setStatus('current')
baseBandCarrierTxPath7CalFactorI = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath7CalFactorI.setStatus('current')
baseBandCarrierTxPath7CalFactorQ = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath7CalFactorQ.setStatus('current')
baseBandCarrierTxPath8CalFactorI = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath8CalFactorI.setStatus('current')
baseBandCarrierTxPath8CalFactorQ = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierTxPath8CalFactorQ.setStatus('current')
baseBandCarrierRadioPathTxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierRadioPathTxStatus.setStatus('current')
baseBandCarrierRadioPathRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierRadioPathRxStatus.setStatus('current')
baseBandCarrierMaxDlPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierMaxDlPower.setStatus('current')
baseBandCarrierGpIscp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierGpIscp.setStatus('current')
baseBandCarrierDwPccpchInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 5, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBandCarrierDwPccpchInfo.setStatus('current')
radioCarrierTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 6), )
if mibBuilder.loadTexts: radioCarrierTable.setStatus('current')
radioCarrierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "radioCarrierNo"))
if mibBuilder.loadTexts: radioCarrierEntry.setStatus('current')
radioCarrierNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(36, 27683)))
if mibBuilder.loadTexts: radioCarrierNo.setStatus('current')
radioCarrierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 6, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCarrierRowStatus.setStatus('current')
radioCarrierIFUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 47), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCarrierIFUNo.setStatus('current')
radioCarrierIFUPathNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCarrierIFUPathNo.setStatus('current')
radioCarrierIndexOnIFUPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 35), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCarrierIndexOnIFUPath.setStatus('current')
radioCarrierEngagedState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 6, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("free", 0), ("preengage", 1), ("engaging", 2), ("engaged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCarrierEngagedState.setStatus('current')
radioCarrierBaseBandCarrierNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(18, 143), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCarrierBaseBandCarrierNo.setStatus('current')
radioCarrierBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 6, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2)).clone(namedValues=NamedValues(("unknown", -1), ("v1880to1920", 0), ("v2010to2025", 1), ("v2300to2400", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCarrierBand.setStatus('current')
radioCarrierCellStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 6, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("cellActiving", 1), ("cellActived", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCarrierCellStatus.setStatus('current')
carrierTimeSlotTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7), )
if mibBuilder.loadTexts: carrierTimeSlotTable.setStatus('current')
carrierTimeSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "carrierTsLocalCellId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "carrierTsLocalCarrierIndex"))
if mibBuilder.loadTexts: carrierTimeSlotEntry.setStatus('current')
carrierTsLocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: carrierTsLocalCellId.setStatus('current')
carrierTsLocalCarrierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: carrierTsLocalCarrierIndex.setStatus('current')
carrierTsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierTsRowStatus.setStatus('current')
carrierTs1ISCP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierTs1ISCP.setStatus('current')
carrierTs2ISCP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierTs2ISCP.setStatus('current')
carrierTs3ISCP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierTs3ISCP.setStatus('current')
carrierTs4ISCP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierTs4ISCP.setStatus('current')
carrierTs1RxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierTs1RxPower.setStatus('current')
carrierTs2RxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierTs2RxPower.setStatus('current')
carrierTs3RxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierTs3RxPower.setStatus('current')
carrierTs4RxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierTs4RxPower.setStatus('current')
carrierTs1ISCPInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierTs1ISCPInfo.setStatus('current')
carrierTs2ISCPInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierTs2ISCPInfo.setStatus('current')
carrierTs3ISCPInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierTs3ISCPInfo.setStatus('current')
carrierTs4ISCPInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierTs4ISCPInfo.setStatus('current')
carrierUpTs1CofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 255)).clone(namedValues=NamedValues(("coFreqOffRnOff", 0), ("coFreqOffRnOn", 1), ("coFreqOnRnOff", 2), ("coFreqOnRnOn", 3), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierUpTs1CofStatus.setStatus('current')
carrierUpTs2CofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 255)).clone(namedValues=NamedValues(("coFreqOffRnOff", 0), ("coFreqOffRnOn", 1), ("coFreqOnRnOff", 2), ("coFreqOnRnOn", 3), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierUpTs2CofStatus.setStatus('current')
carrierUpTs3CofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 255)).clone(namedValues=NamedValues(("coFreqOffRnOff", 0), ("coFreqOffRnOn", 1), ("coFreqOnRnOff", 2), ("coFreqOnRnOn", 3), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierUpTs3CofStatus.setStatus('current')
carrierUpTs4CofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 7, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 255)).clone(namedValues=NamedValues(("coFreqOffRnOff", 0), ("coFreqOffRnOn", 1), ("coFreqOnRnOff", 2), ("coFreqOnRnOn", 3), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierUpTs4CofStatus.setStatus('current')
rruCarrierTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 8), )
if mibBuilder.loadTexts: rruCarrierTable.setStatus('current')
rruCarrierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruCarrierRRSNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruCarrierAntGrpID"))
if mibBuilder.loadTexts: rruCarrierEntry.setStatus('current')
rruCarrierRRSNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47)))
if mibBuilder.loadTexts: rruCarrierRRSNo.setStatus('current')
rruCarrierAntGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: rruCarrierAntGrpID.setStatus('current')
rruCarrierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 8, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCarrierRowStatus.setStatus('current')
rruCarrierState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCarrierState.setStatus('current')
carrierRuTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9), )
if mibBuilder.loadTexts: carrierRuTable.setStatus('current')
carrierRuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "carrierRuLocalCellId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "carrierRuLocalCarrierIndex"))
if mibBuilder.loadTexts: carrierRuEntry.setStatus('current')
carrierRuLocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: carrierRuLocalCellId.setStatus('current')
carrierRuLocalCarrierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: carrierRuLocalCarrierIndex.setStatus('current')
carrierRuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierRuRowStatus.setStatus('current')
carrierRuCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierRuCellId.setStatus('current')
carrierRuCellFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierRuCellFreq.setStatus('current')
carrierRuTs0Info = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierRuTs0Info.setStatus('current')
carrierRuTs1Info = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierRuTs1Info.setStatus('current')
carrierRuTs2Info = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierRuTs2Info.setStatus('current')
carrierRuTs3Info = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierRuTs3Info.setStatus('current')
carrierRuTs4Info = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierRuTs4Info.setStatus('current')
carrierRuTs5Info = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierRuTs5Info.setStatus('current')
carrierRuTs6Info = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 8, 9, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierRuTs6Info.setStatus('current')
minimizationOfDriveTests = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9))
mdtSwitchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 1))
mdtManageEnableSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtManageEnableSwitch.setStatus('current')
mdtSignalEnableSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtSignalEnableSwitch.setStatus('current')
mdtConfigManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2))
mdtServerInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtServerInetAddrType.setStatus('current')
mdtServerInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtServerInetAddr.setStatus('current')
mdtFileDirectory = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtFileDirectory.setStatus('current')
mdtFtpServerLoginName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtFtpServerLoginName.setStatus('current')
mdtFtpServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtFtpServerPassword.setStatus('current')
mdtMmeSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtMmeSwitch.setStatus('current')
mdtRptPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(2, 5, 8, 11)).clone(namedValues=NamedValues(("min15", 2), ("min30", 5), ("min45", 8), ("min60", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtRptPeriod.setStatus('current')
mdtTCEIpaddrType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtTCEIpaddrType.setStatus('current')
mdtTCEIpaddr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtTCEIpaddr.setStatus('current')
mdtTCEId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtTCEId.setStatus('current')
mdtMaxUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtMaxUserNumber.setStatus('current')
mdtSelectUserPercent = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtSelectUserPercent.setStatus('current')
mdtDataAnonymization = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("noIdentity", 0), ("tacPartofIMEI", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtDataAnonymization.setStatus('current')
mdtImmediateMDTUeLocation = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtImmediateMDTUeLocation.setStatus('current')
mdtImmediateMDTReportQuantity = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 15), Bits().clone(namedValues=NamedValues(("rsrp", 0), ("rsrq", 1), ("phr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtImmediateMDTReportQuantity.setStatus('current')
mdtImmediateMDTReportType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("a2", 0), ("periodical", 1), ("a2periodical", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtImmediateMDTReportType.setStatus('current')
mdtLoggedMDTExecuteTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("ms10", 0), ("ms20", 1), ("ms40", 2), ("ms60", 3), ("ms90", 4), ("ms120", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtLoggedMDTExecuteTime.setStatus('current')
mdtLoggedMDTMeasureInterval = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("oneDot28", 0), ("twoDot56", 1), ("fiveDot12", 2), ("tenDot24", 3), ("twentyDot48", 4), ("thirtyDot72", 5), ("fortyDot96", 6), ("sixtyOneDot44", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtLoggedMDTMeasureInterval.setStatus('current')
mdtLoggedMDTAbsoluteTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 24), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtLoggedMDTAbsoluteTime.setStatus('current')
mdtLoggedMDTTraceAreaCfgType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("plmn", 0), ("tacList", 1), ("cellList", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtLoggedMDTTraceAreaCfgType.setStatus('current')
mdtLoggedMDTUeLocation = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtLoggedMDTUeLocation.setStatus('current')
mdtImmediateMdtPositionMethod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("trybest", 0), ("gnss", 1), ("ecid", 2), ("gnssAndECID", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtImmediateMdtPositionMethod.setStatus('current')
mdtLoggedMdtPositionMethod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("trybest", 0), ("gnss", 1), ("ecid", 2), ("gnssAndECID", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtLoggedMdtPositionMethod.setStatus('current')
mdtDataFormat = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 2, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("xml", 1), ("csv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdtDataFormat.setStatus('current')
loggedMdtCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 3), )
if mibBuilder.loadTexts: loggedMdtCellTable.setStatus('current')
loggedMdtCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "loggedMdtCellIndex"))
if mibBuilder.loadTexts: loggedMdtCellEntry.setStatus('current')
loggedMdtCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: loggedMdtCellIndex.setStatus('current')
loggedMdtCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loggedMdtCellRowStatus.setStatus('current')
loggedMdtPlmnMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 3, 1, 3), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loggedMdtPlmnMcc.setStatus('current')
loggedMdtPlmnMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 3, 1, 4), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loggedMdtPlmnMnc.setStatus('current')
loggedMdtCellEnbGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loggedMdtCellEnbGlobalId.setStatus('current')
loggedMdtCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loggedMdtCellId.setStatus('current')
loggedMdtTaTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 4), )
if mibBuilder.loadTexts: loggedMdtTaTable.setStatus('current')
loggedMdtTaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "loggedMdtTaIndex"))
if mibBuilder.loadTexts: loggedMdtTaEntry.setStatus('current')
loggedMdtTaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: loggedMdtTaIndex.setStatus('current')
loggedMdtTaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loggedMdtTaRowStatus.setStatus('current')
loggedMdtTac = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loggedMdtTac.setStatus('current')
mdtTaskTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 5), )
if mibBuilder.loadTexts: mdtTaskTable.setStatus('current')
mdtTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "mdtTaskIndex"))
if mibBuilder.loadTexts: mdtTaskEntry.setStatus('current')
mdtTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mdtTaskIndex.setStatus('current')
mdtTaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mdtTaskRowStatus.setStatus('current')
mdtTaskPlmnMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 5, 1, 3), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mdtTaskPlmnMcc.setStatus('current')
mdtTaskPlmnMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 5, 1, 4), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mdtTaskPlmnMnc.setStatus('current')
mdtTaskTraceID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mdtTaskTraceID.setStatus('current')
mdtTaskTRSR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mdtTaskTRSR.setStatus('current')
mdtCellListBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 5, 1, 7), Bits().clone(namedValues=NamedValues(("localCell0", 0), ("localCell1", 1), ("localCell2", 2), ("localCell3", 3), ("localCell4", 4), ("localCell5", 5), ("localCell6", 6), ("localCell7", 7), ("localCell8", 8), ("localCell9", 9), ("localCell10", 10), ("localCell11", 11), ("localCell12", 12), ("localCell13", 13), ("localCell14", 14), ("localCell15", 15), ("localCell16", 16), ("localCell17", 17), ("localCell18", 18), ("localCell19", 19), ("localCell20", 20), ("localCell21", 21), ("localCell22", 22), ("localCell23", 23)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mdtCellListBitMap.setStatus('current')
mdtTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 4, 9, 5, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 200)).clone(namedValues=NamedValues(("immediateMDTOnly", 0), ("loggedMDTOnly", 1), ("traceOnly", 2), ("rlf", 200)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mdtTaskType.setStatus('current')
netLocalCellInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3))
netLocalCellCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 1))
netLocalCellCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 1, 1), )
if mibBuilder.loadTexts: netLocalCellCtrlTable.setStatus('current')
netLocalCellCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netPlanControlLcId"))
if mibBuilder.loadTexts: netLocalCellCtrlEntry.setStatus('current')
netPlanControlLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: netPlanControlLcId.setStatus('current')
netPlanControlLcConfigSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netPlanControlLcConfigSwitch.setStatus('current')
tdsNetLocalCellCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 1, 2), )
if mibBuilder.loadTexts: tdsNetLocalCellCtrlTable.setStatus('current')
tdsNetLocalCellCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 1, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "tdsNetPlanControlLcId"))
if mibBuilder.loadTexts: tdsNetLocalCellCtrlEntry.setStatus('current')
tdsNetPlanControlLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: tdsNetPlanControlLcId.setStatus('current')
tdsNetPlanControlLcConfigSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNetPlanControlLcConfigSwitch.setStatus('current')
netLocalCellPowerCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 1, 3), )
if mibBuilder.loadTexts: netLocalCellPowerCtrlTable.setStatus('current')
netLocalCellPowerCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 1, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netPlanPowerControlLcId"))
if mibBuilder.loadTexts: netLocalCellPowerCtrlEntry.setStatus('current')
netPlanPowerControlLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: netPlanPowerControlLcId.setStatus('current')
netPlanPowerControlCfgSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netPlanPowerControlCfgSwitch.setStatus('current')
netLocalCell = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2))
netLocalCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1), )
if mibBuilder.loadTexts: netLocalCellTable.setStatus('current')
netLocalCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netLcLocalCellId"))
if mibBuilder.loadTexts: netLocalCellEntry.setStatus('current')
netLcLocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: netLcLocalCellId.setStatus('current')
netLcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcRowStatus.setStatus('current')
netLcFreqBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4, 8, 32, 64, 128, 256, 512, 1024)).clone(namedValues=NamedValues(("a", 1), ("d", 2), ("e", 4), ("f", 8), ("v", 32), ("b41", 64), ("t", 128), ("b03", 256), ("b01", 512), ("b44", 1024)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcFreqBand.setStatus('current')
netLcFreqBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("val5M", 0), ("val10M", 1), ("val15M", 2), ("val20M", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcFreqBandWidth.setStatus('current')
netLcAntCombinationFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcAntCombinationFlag.setStatus('current')
netLcAppScene = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("indoorNormal", 0), ("outdoorNormal", 1), ("outdoorHighSpeed", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcAppScene.setStatus('current')
netLcAntArrayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("smartAnt", 1), ("nonSmartAnt", 2), ("mixedAnt", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcAntArrayMode.setStatus('current')
netLcIrCompressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notCompress", 0), ("compress", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcIrCompressMode.setStatus('current')
netLcAntPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 255)).clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port4", 2), ("unknown", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcAntPortNum.setStatus('current')
netLcFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("fdd", 0), ("tdd", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcFrameType.setStatus('current')
netLcCellCombineEnhancedSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcCellCombineEnhancedSwitch.setStatus('current')
netLcSdcFuncSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcSdcFuncSwitch.setStatus('current')
netLcCellCombine4PortSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcCellCombine4PortSwitch.setStatus('current')
netLcRadioChannelCombinSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("bbuCom", 1), ("rhubCom", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcRadioChannelCombinSwitch.setStatus('current')
netLocalCellRruPowerTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 2), )
if mibBuilder.loadTexts: netLocalCellRruPowerTable.setStatus('current')
netLocalCellRruPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netLcRruPowerLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "netLcRruPowerRruNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "netLcRruPowerRruPathNo"))
if mibBuilder.loadTexts: netLocalCellRruPowerEntry.setStatus('current')
netLcRruPowerLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: netLcRruPowerLcId.setStatus('current')
netLcRruPowerRruNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: netLcRruPowerRruNo.setStatus('current')
netLcRruPowerRruPathNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: netLcRruPowerRruPathNo.setStatus('current')
netLcRruPowerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcRruPowerRowStatus.setStatus('current')
netLcRruPowerPathAdjustValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLcRruPowerPathAdjustValue.setStatus('current')
netLocalCellComponentTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 3), )
if mibBuilder.loadTexts: netLocalCellComponentTable.setStatus('current')
netLocalCellComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netLcComponentLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "netLcComponentIndex"))
if mibBuilder.loadTexts: netLocalCellComponentEntry.setStatus('current')
netLcComponentLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: netLcComponentLcId.setStatus('current')
netLcComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: netLcComponentIndex.setStatus('current')
netLcComponentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 3, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLcComponentRowStatus.setStatus('current')
netLcComponentRRUId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 2, 3, 1, 4), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLcComponentRRUId.setStatus('current')
tdsNetLocalCell = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3))
tdsNetLocalCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1), )
if mibBuilder.loadTexts: tdsNetLocalCellTable.setStatus('current')
tdsNetLocalCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "tdsNetLcLocalCellId"))
if mibBuilder.loadTexts: tdsNetLocalCellEntry.setStatus('current')
tdsNetLcLocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: tdsNetLcLocalCellId.setStatus('current')
tdsNetLcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tdsNetLcRowStatus.setStatus('current')
tdsNetLcAntArrayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("unknown", 0), ("singleAnt", 1), ("disAnt", 2), ("smartAnt", 3), ("ambipolarAnt", 4), ("disSmartAnt", 5), ("disAmbipolarAnt", 6), ("smartPolarAnt", 7), ("disSmartPolarAnt", 8), ("mixAnt", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tdsNetLcAntArrayMode.setStatus('current')
tdsNetLcMaxCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 21), ValueRangeConstraint(0, 0), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tdsNetLcMaxCarrierNum.setStatus('current')
tdsNetLcMinCarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 21), ValueRangeConstraint(0, 0), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tdsNetLcMinCarrierNum.setStatus('current')
tdsNetLcLocalCellGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 11), ValueRangeConstraint(0, 0), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tdsNetLcLocalCellGrpId.setStatus('current')
tdsNetLocalCellPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tdsNetLocalCellPriority.setStatus('current')
tdsNetLocalCellIsAntCombination = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("false", 0), ("antCombinationBetweenRRS", 1), ("antCombinationInRRS", 2), ("antCompleteCombination", 3), ("antOptionalCombination", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tdsNetLocalCellIsAntCombination.setStatus('current')
tdsNetLocalCellMaxCombinationAntNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 5), ValueRangeConstraint(0, 0), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tdsNetLocalCellMaxCombinationAntNum.setStatus('current')
tdsNetLcAppScene = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("normal", 0), ("largeScope", 1), ("underground", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNetLcAppScene.setStatus('current')
tdsNetLcPrimaryCarrierBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("v1880to1920", 0), ("v2010to2025", 1), ("v2300to2400", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tdsNetLcPrimaryCarrierBand.setStatus('current')
tdsNetLcCellPortionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 8), ValueRangeConstraint(0, 0), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tdsNetLcCellPortionNum.setStatus('current')
netLocalCellGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 4))
netLocalCellGrpTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 4, 1), )
if mibBuilder.loadTexts: netLocalCellGrpTable.setStatus('current')
netLocalCellGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 4, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netLocalCellGrpId"))
if mibBuilder.loadTexts: netLocalCellGrpEntry.setStatus('current')
netLocalCellGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: netLocalCellGrpId.setStatus('current')
netLocalCellGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLocalCellGrpRowStatus.setStatus('current')
netLocalCellGrpCarrierTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 72))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLocalCellGrpCarrierTotalNum.setStatus('current')
netLocalCellGrpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("singleAntSupportable", 1), ("multiAntSupportable", 2), ("miscellaneous", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netLocalCellGrpMode.setStatus('current')
networkElementMME = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 4))
mmeCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 4, 1), )
if mibBuilder.loadTexts: mmeCfgTable.setStatus('current')
mmeCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 4, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "mmeIndex"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "mmeCfgIndex"))
if mibBuilder.loadTexts: mmeCfgEntry.setStatus('current')
mmeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mmeIndex.setStatus('current')
mmeCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mmeCfgIndex.setStatus('current')
mmeCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 4, 1, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmeCfgRowStatus.setStatus('current')
mmeCfgPlmnMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 4, 1, 1, 4), MncMccType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmeCfgPlmnMcc.setStatus('current')
mmeCfgPlmnMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 4, 1, 1, 5), MncMccType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmeCfgPlmnMnc.setStatus('current')
mmeCfgGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmeCfgGroupId.setStatus('current')
mmeCfgMmeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmeCfgMmeCode.setStatus('current')
mmeCfgSctpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 81), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmeCfgSctpIndex.setStatus('current')
mmeCfgCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmeCfgCapacity.setStatus('current')
mmeCfgConnectUENum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmeCfgConnectUENum.setStatus('current')
networkElementPlanCell = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5))
cellCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1))
cellCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1), )
if mibBuilder.loadTexts: cellCfgTable.setStatus('current')
cellCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellLcId"))
if mibBuilder.loadTexts: cellCfgEntry.setStatus('current')
cellLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellLcId.setStatus('current')
cellCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCfgRowStatus.setStatus('current')
cellFriendName = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellFriendName.setStatus('current')
cellPhyId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 504), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellPhyId.setStatus('current')
cellOmcPhyId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 504), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellOmcPhyId.setStatus('current')
cellPhyIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 6), Unsigned32Array()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPhyIdList.setStatus('current')
cellFreqBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 61, 62)).clone(namedValues=NamedValues(("band1", 1), ("band2", 2), ("band3", 3), ("band4", 4), ("band5", 5), ("band7", 7), ("band8", 8), ("band9", 9), ("band10", 10), ("band11", 11), ("band12", 12), ("band13", 13), ("band14", 14), ("band17", 17), ("band18", 18), ("band19", 19), ("band20", 20), ("band21", 21), ("band22", 22), ("band23", 23), ("band24", 24), ("band25", 25), ("band33", 33), ("band34", 34), ("band35", 35), ("band36", 36), ("band37", 37), ("band38", 38), ("band39", 39), ("band40", 40), ("band41", 41), ("band44", 44), ("band61", 61), ("band62", 62)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellFreqBand.setStatus('current')
cellCenterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCenterFreq.setStatus('current')
cellDlSysBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("val1dot4", 0), ("val3", 1), ("val5", 2), ("val10", 3), ("val15", 4), ("val20", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellDlSysBandWidth.setStatus('current')
cellCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("extended", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCpType.setStatus('current')
cellSubSfnAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("sa0", 0), ("sa1", 1), ("sa2", 2), ("sa3", 3), ("sa4", 4), ("sa5", 5), ("sa6", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSubSfnAssign.setStatus('current')
cellSpecialSubSfnPatterns = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("ssp0", 0), ("ssp1", 1), ("ssp2", 2), ("ssp3", 3), ("ssp4", 4), ("ssp5", 5), ("ssp6", 6), ("ssp7", 7), ("ssp8", 8), ("ssp9", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSpecialSubSfnPatterns.setStatus('current')
cellMaxTransPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellMaxTransPwr.setStatus('current')
cellRsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-18, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellRsPower.setStatus('current')
cellPbchPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPbchPower.setStatus('current')
cellPschPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPschPower.setStatus('current')
cellSschPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSschPower.setStatus('current')
cellPchPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPchPower.setStatus('current')
cellPdschSibPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPdschSibPower.setStatus('current')
cellPcfichPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPcfichPower.setStatus('current')
cellPhichPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPhichPower.setStatus('current')
cellPdcchPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPdcchPower.setStatus('current')
cellBarred = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("barred", 0), ("notBarred", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellBarred.setStatus('current')
cellSiPageMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSiPageMcs.setStatus('current')
cellCountMSBcheckValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCountMSBcheckValue.setStatus('current')
cellCounterOverturnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCounterOverturnValue.setStatus('current')
cellCounterCheckErrorThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCounterCheckErrorThresh.setStatus('current')
cellDwptsForUserDataFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellDwptsForUserDataFlag.setStatus('current')
cellType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("verysmall", 0), ("small", 1), ("medium", 2), ("large", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellType.setStatus('current')
cellAntPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port4", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAntPortNum.setStatus('current')
cellQoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("n24dB", 0), ("n22dB", 1), ("n20dB", 2), ("n18dB", 3), ("n16dB", 4), ("n14dB", 5), ("n12dB", 6), ("n10dB", 7), ("n8dB", 8), ("n6dB", 9), ("n5dB", 10), ("n4dB", 11), ("n3dB", 12), ("n2dB", 13), ("n1dB", 14), ("p0dB", 15), ("p1dB", 16), ("p2dB", 17), ("p3dB", 18), ("p4dB", 19), ("p5dB", 20), ("p6dB", 21), ("p8dB", 22), ("p10dB", 23), ("p12dB", 24), ("p14dB", 25), ("p16dB", 26), ("p18dB", 27), ("p20dB", 28), ("p22dB", 29), ("p24dB", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellQoffset.setStatus('current')
cellAddtionlSpecEmis = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAddtionlSpecEmis.setStatus('current')
cellCalAcOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellCalAcOffset.setStatus('current')
cellCdlDetailSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdlDetailSwitch.setStatus('current')
cellPdcchCo4CceFormat1cPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPdcchCo4CceFormat1cPower.setStatus('current')
cellPdcchCo4CceOtherFormatPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPdcchCo4CceOtherFormatPower.setStatus('current')
cellPdcchCo8CceFormat1cPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPdcchCo8CceFormat1cPower.setStatus('current')
cellPdcchCo8CceOtherFormatPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPdcchCo8CceOtherFormatPower.setStatus('current')
cellMsg3PhichPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellMsg3PhichPower.setStatus('current')
cellPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPriority.setStatus('current')
cellCdlServiceSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdlServiceSwitch.setStatus('current')
cellCdlTcpSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdlTcpSwitch.setStatus('current')
cellCellID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCellID.setStatus('current')
cellPowerOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPowerOffset.setStatus('current')
cellCRSBoostingSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCRSBoostingSwitch.setStatus('current')
cellBlackCellsStartPhyId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 503), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellBlackCellsStartPhyId.setStatus('current')
cellBlackCellsRange = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("n4", 0), ("n8", 1), ("n12", 2), ("n16", 3), ("n24", 4), ("n32", 5), ("n48", 6), ("n64", 7), ("n84", 8), ("n96", 9), ("n128", 10), ("n168", 11), ("n252", 12), ("n504", 13), ("spare2", 14), ("spare1", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellBlackCellsRange.setStatus('current')
cellRsPowerDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellRsPowerDelta.setStatus('current')
cellPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellPortID.setStatus('current')
cellTypeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("sameBBUCell", 0), ("normalCell", 1), ("differBBUCell", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellTypeFlag.setStatus('current')
cellCfgFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("structureFdd", 0), ("structureTdd", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCfgFrameType.setStatus('current')
cellOffsetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("n24dB", 0), ("n22dB", 1), ("n20dB", 2), ("n18dB", 3), ("n16dB", 4), ("n14dB", 5), ("n12dB", 6), ("n10dB", 7), ("n8dB", 8), ("n6dB", 9), ("n5dB", 10), ("n4dB", 11), ("n3dB", 12), ("n2dB", 13), ("n1dB", 14), ("p0dB", 15), ("p1dB", 16), ("p2dB", 17), ("p3dB", 18), ("p4dB", 19), ("p5dB", 20), ("p6dB", 21), ("p8dB", 22), ("p10dB", 23), ("p12dB", 24), ("p14dB", 25), ("p16dB", 26), ("p18dB", 27), ("p20dB", 28), ("p22dB", 29), ("p24dB", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellOffsetFreq.setStatus('current')
cellEARFCN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellEARFCN.setStatus('current')
cellAntTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAntTilt.setStatus('current')
cellCdlPagingSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdlPagingSwitch.setStatus('current')
cellCdlVoLTESwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdlVoLTESwitch.setStatus('current')
cellCdlSpeedSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdlSpeedSwitch.setStatus('current')
cellAntWeightSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 67), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAntWeightSwitch.setStatus('current')
cellDisguiseMaintenceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 1, 1, 1, 68), Integer32().subtype(subtypeSpec=SingleValueConstraint(2, 3)).clone(namedValues=NamedValues(("inMaintenance", 2), ("inService", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellDisguiseMaintenceState.setStatus('current')
cellNetPara = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2))
cellNetParaTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 1), )
if mibBuilder.loadTexts: cellNetParaTable.setStatus('current')
cellNetParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellNetLcId"))
if mibBuilder.loadTexts: cellNetParaEntry.setStatus('current')
cellNetLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellNetLcId.setStatus('current')
cellNetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellNetRowStatus.setStatus('current')
cellNetTac = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellNetTac.setStatus('current')
cellNetPlmnMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 1, 1, 4), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellNetPlmnMcc.setStatus('current')
cellNetPlmnMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 1, 1, 5), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellNetPlmnMnc.setStatus('current')
cellNetResrvForOpUse = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("reserved", 0), ("notReserved", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellNetResrvForOpUse.setStatus('current')
cellNetImsEmergencyTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellNetImsEmergencyTag.setStatus('current')
netS1InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 2), )
if mibBuilder.loadTexts: netS1InterfaceTable.setStatus('current')
netS1InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "netS1IfIndex"))
if mibBuilder.loadTexts: netS1InterfaceEntry.setStatus('current')
netS1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: netS1IfIndex.setStatus('current')
netS1IfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netS1IfRowStatus.setStatus('current')
netS1IfMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 2, 1, 3), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netS1IfMcc.setStatus('current')
netS1IfMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 2, 1, 4), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netS1IfMnc.setStatus('current')
netS1IfSctpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 81))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netS1IfSctpIndex.setStatus('current')
cellSharingNetParaTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 3), )
if mibBuilder.loadTexts: cellSharingNetParaTable.setStatus('current')
cellSharingNetParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellShareNetLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellShareNetOperatorIndex"))
if mibBuilder.loadTexts: cellSharingNetParaEntry.setStatus('current')
cellShareNetLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellShareNetLcId.setStatus('current')
cellShareNetOperatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: cellShareNetOperatorIndex.setStatus('current')
cellShareNetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShareNetRowStatus.setStatus('current')
cellShareNetTac = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShareNetTac.setStatus('current')
cellShareNetMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 3, 1, 5), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShareNetMcc.setStatus('current')
cellShareNetMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 3, 1, 6), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShareNetMnc.setStatus('current')
cellShareNetReservFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("reserved", 0), ("notReserved", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShareNetReservFlag.setStatus('current')
cellInterFreqInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3))
cellInterFreqTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1), )
if mibBuilder.loadTexts: cellInterFreqTable.setStatus('current')
cellInterFreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellInterFreqLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellInterFreqIndex"))
if mibBuilder.loadTexts: cellInterFreqEntry.setStatus('current')
cellInterFreqLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellInterFreqLcId.setStatus('current')
cellInterFreqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: cellInterFreqIndex.setStatus('current')
cellInterFreqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqRowStatus.setStatus('current')
cellInterFreqBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 61, 62)).clone(namedValues=NamedValues(("band1", 1), ("band2", 2), ("band3", 3), ("band4", 4), ("band5", 5), ("band7", 7), ("band8", 8), ("band9", 9), ("band10", 10), ("band11", 11), ("band12", 12), ("band13", 13), ("band14", 14), ("band17", 17), ("band18", 18), ("band19", 19), ("band20", 20), ("band21", 21), ("band22", 22), ("band23", 23), ("band24", 24), ("band25", 25), ("band26", 26), ("band33", 33), ("band34", 34), ("band35", 35), ("band36", 36), ("band37", 37), ("band38", 38), ("band39", 39), ("band40", 40), ("band41", 41), ("band44", 44), ("band61", 61), ("band62", 62)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqBand.setStatus('current')
cellInterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreq.setStatus('current')
cellInterFreqRxLevMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)).clone(namedValues=NamedValues(("rxLevMinMinusDbm140", 0), ("rxLevMinMinusDbm138", 1), ("rxLevMinMinusDbm136", 2), ("rxLevMinMinusDbm134", 3), ("rxLevMinMinusDbm132", 4), ("rxLevMinMinusDbm130", 5), ("rxLevMinMinusDbm128", 6), ("rxLevMinMinusDbm126", 7), ("rxLevMinMinusDbm124", 8), ("rxLevMinMinusDbm122", 9), ("rxLevMinMinusDbm120", 10), ("rxLevMinMinusDbm118", 11), ("rxLevMinMinusDbm116", 12), ("rxLevMinMinusDbm114", 13), ("rxLevMinMinusDbm112", 14), ("rxLevMinMinusDbm110", 15), ("rxLevMinMinusDbm108", 16), ("rxLevMinMinusDbm106", 17), ("rxLevMinMinusDbm104", 18), ("rxLevMinMinusDbm102", 19), ("rxLevMinMinusDbm100", 20), ("rxLevMinMinusDbm98", 21), ("rxLevMinMinusDbm96", 22), ("rxLevMinMinusDbm94", 23), ("rxLevMinMinusDbm92", 24), ("rxLevMinMinusDbm90", 25), ("rxLevMinMinusDbm88", 26), ("rxLevMinMinusDbm86", 27), ("rxLevMinMinusDbm84", 28), ("rxLevMinMinusDbm82", 29), ("rxLevMinMinusDbm80", 30), ("rxLevMinMinusDbm78", 31), ("rxLevMinMinusDbm76", 32), ("rxLevMinMinusDbm74", 33), ("rxLevMinMinusDbm72", 34), ("rxLevMinMinusDbm70", 35), ("rxLevMinMinusDbm68", 36), ("rxLevMinMinusDbm66", 37), ("rxLevMinMinusDbm64", 38), ("rxLevMinMinusDbm62", 39), ("rxLevMinMinusDbm60", 40), ("rxLevMinMinusDbm58", 41), ("rxLevMinMinusDbm56", 42), ("rxLevMinMinusDbm54", 43), ("rxLevMinMinusDbm52", 44), ("rxLevMinMinusDbm50", 45), ("rxLevMinMinusDbm48", 46), ("rxLevMinMinusDbm46", 47), ("rxLevMinMinusDbm44", 48)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqRxLevMin.setStatus('current')
cellInterFreqPmax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 33))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqPmax.setStatus('current')
cellInterFreqTselection = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqTselection.setStatus('current')
cellInterFreqSpeedStateSfMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDot25", 0), ("oDot5", 1), ("oDot75", 2), ("one", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqSpeedStateSfMedium.setStatus('current')
cellInterFreqSpeedStateSfHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDot25", 0), ("oDot5", 1), ("oDot75", 2), ("one", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqSpeedStateSfHigh.setStatus('current')
cellInterFreqThreshXHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb2", 1), ("reselectThresholdDb4", 2), ("reselectThresholdDb6", 3), ("reselectThresholdDb8", 4), ("reselectThresholdDb10", 5), ("reselectThresholdDb12", 6), ("reselectThresholdDb14", 7), ("reselectThresholdDb16", 8), ("reselectThresholdDb18", 9), ("reselectThresholdDb20", 10), ("reselectThresholdDb22", 11), ("reselectThresholdDb24", 12), ("reselectThresholdDb26", 13), ("reselectThresholdDb28", 14), ("reselectThresholdDb30", 15), ("reselectThresholdDb32", 16), ("reselectThresholdDb34", 17), ("reselectThresholdDb36", 18), ("reselectThresholdDb38", 19), ("reselectThresholdDb40", 20), ("reselectThresholdDb42", 21), ("reselectThresholdDb44", 22), ("reselectThresholdDb46", 23), ("reselectThresholdDb48", 24), ("reselectThresholdDb50", 25), ("reselectThresholdDb52", 26), ("reselectThresholdDb54", 27), ("reselectThresholdDb56", 28), ("reselectThresholdDb58", 29), ("reselectThresholdDb60", 30), ("reselectThresholdDb62", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqThreshXHigh.setStatus('current')
cellInterFreqThreshXLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb2", 1), ("reselectThresholdDb4", 2), ("reselectThresholdDb6", 3), ("reselectThresholdDb8", 4), ("reselectThresholdDb10", 5), ("reselectThresholdDb12", 6), ("reselectThresholdDb14", 7), ("reselectThresholdDb16", 8), ("reselectThresholdDb18", 9), ("reselectThresholdDb20", 10), ("reselectThresholdDb22", 11), ("reselectThresholdDb24", 12), ("reselectThresholdDb26", 13), ("reselectThresholdDb28", 14), ("reselectThresholdDb30", 15), ("reselectThresholdDb32", 16), ("reselectThresholdDb34", 17), ("reselectThresholdDb36", 18), ("reselectThresholdDb38", 19), ("reselectThresholdDb40", 20), ("reselectThresholdDb42", 21), ("reselectThresholdDb44", 22), ("reselectThresholdDb46", 23), ("reselectThresholdDb48", 24), ("reselectThresholdDb50", 25), ("reselectThresholdDb52", 26), ("reselectThresholdDb54", 27), ("reselectThresholdDb56", 28), ("reselectThresholdDb58", 29), ("reselectThresholdDb60", 30), ("reselectThresholdDb62", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqThreshXLow.setStatus('current')
cellInterFreqMeasBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("val1dot4", 0), ("val3", 1), ("val5", 2), ("val10", 3), ("val15", 4), ("val20", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqMeasBandWidth.setStatus('current')
cellInterFreqPresenceAntePort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqPresenceAntePort1.setStatus('current')
cellInterFreqReselPriorityFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqReselPriorityFlag.setStatus('current')
cellInterFreqReselPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqReselPriority.setStatus('current')
cellInterFreqNeighCellCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("neighcellcfg00", 0), ("neighcellcfg01", 1), ("neighcellcfg10", 2), ("neighcellcfg11", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqNeighCellCfg.setStatus('current')
cellInterFreqQOffsetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("n24dB", 0), ("n22dB", 1), ("n20dB", 2), ("n18dB", 3), ("n16dB", 4), ("n14dB", 5), ("n12dB", 6), ("n10dB", 7), ("n8dB", 8), ("n6dB", 9), ("n5dB", 10), ("n4dB", 11), ("n3dB", 12), ("n2dB", 13), ("n1dB", 14), ("p0dB", 15), ("p1dB", 16), ("p2dB", 17), ("p3dB", 18), ("p4dB", 19), ("p5dB", 20), ("p6dB", 21), ("p8dB", 22), ("p10dB", 23), ("p12dB", 24), ("p14dB", 25), ("p16dB", 26), ("p18dB", 27), ("p20dB", 28), ("p22dB", 29), ("p24dB", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqQOffsetFreq.setStatus('current')
cellInterFreqPmaxFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqPmaxFlag.setStatus('current')
cellInterFreqSpeedStateScaleFactorsFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqSpeedStateScaleFactorsFlag.setStatus('current')
cellInterFreqQualMinFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqQualMinFlag.setStatus('current')
cellInterFreqQualMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("qualMinMinusDb34", 0), ("qualMinMinusDb33", 1), ("qualMinMinusDb32", 2), ("qualMinMinusDb31", 3), ("qualMinMinusDb30", 4), ("qualMinMinusDb29", 5), ("qualMinMinusDb28", 6), ("qualMinMinusDb27", 7), ("qualMinMinusDb26", 8), ("qualMinMinusDb25", 9), ("qualMinMinusDb24", 10), ("qualMinMinusDb23", 11), ("qualMinMinusDb22", 12), ("qualMinMinusDb21", 13), ("qualMinMinusDb20", 14), ("qualMinMinusDb19", 15), ("qualMinMinusDb18", 16), ("qualMinMinusDb17", 17), ("qualMinMinusDb16", 18), ("qualMinMinusDb15", 19), ("qualMinMinusDb14", 20), ("qualMinMinusDb13", 21), ("qualMinMinusDb12", 22), ("qualMinMinusDb11", 23), ("qualMinMinusDb10", 24), ("qualMinMinusDb9", 25), ("qualMinMinusDb8", 26), ("qualMinMinusDb7", 27), ("qualMinMinusDb6", 28), ("qualMinMinusDb5", 29), ("qualMinMinusDb4", 30), ("qualMinMinusDb3", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqQualMin.setStatus('current')
cellInterFreqThreshXQFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqThreshXQFlag.setStatus('current')
cellInterFreqThreshXHighQ = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb1", 1), ("reselectThresholdDb2", 2), ("reselectThresholdDb3", 3), ("reselectThresholdDb4", 4), ("reselectThresholdDb5", 5), ("reselectThresholdDb6", 6), ("reselectThresholdDb7", 7), ("reselectThresholdDb8", 8), ("reselectThresholdDb9", 9), ("reselectThresholdDb10", 10), ("reselectThresholdDb11", 11), ("reselectThresholdDb12", 12), ("reselectThresholdDb13", 13), ("reselectThresholdDb14", 14), ("reselectThresholdDb15", 15), ("reselectThresholdDb16", 16), ("reselectThresholdDb17", 17), ("reselectThresholdDb18", 18), ("reselectThresholdDb19", 19), ("reselectThresholdDb20", 20), ("reselectThresholdDb21", 21), ("reselectThresholdDb22", 22), ("reselectThresholdDb23", 23), ("reselectThresholdDb24", 24), ("reselectThresholdDb25", 25), ("reselectThresholdDb26", 26), ("reselectThresholdDb27", 27), ("reselectThresholdDb28", 28), ("reselectThresholdDb29", 29), ("reselectThresholdDb30", 30), ("reselectThresholdDb31", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqThreshXHighQ.setStatus('current')
cellInterFreqThreshXLowQ = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb1", 1), ("reselectThresholdDb2", 2), ("reselectThresholdDb3", 3), ("reselectThresholdDb4", 4), ("reselectThresholdDb5", 5), ("reselectThresholdDb6", 6), ("reselectThresholdDb7", 7), ("reselectThresholdDb8", 8), ("reselectThresholdDb9", 9), ("reselectThresholdDb10", 10), ("reselectThresholdDb11", 11), ("reselectThresholdDb12", 12), ("reselectThresholdDb13", 13), ("reselectThresholdDb14", 14), ("reselectThresholdDb15", 15), ("reselectThresholdDb16", 16), ("reselectThresholdDb17", 17), ("reselectThresholdDb18", 18), ("reselectThresholdDb19", 19), ("reselectThresholdDb20", 20), ("reselectThresholdDb21", 21), ("reselectThresholdDb22", 22), ("reselectThresholdDb23", 23), ("reselectThresholdDb24", 24), ("reselectThresholdDb25", 25), ("reselectThresholdDb26", 26), ("reselectThresholdDb27", 27), ("reselectThresholdDb28", 28), ("reselectThresholdDb29", 29), ("reselectThresholdDb30", 30), ("reselectThresholdDb31", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqThreshXLowQ.setStatus('current')
cellInterFreqOffsetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("n24dB", 0), ("n22dB", 1), ("n20dB", 2), ("n18dB", 3), ("n16dB", 4), ("n14dB", 5), ("n12dB", 6), ("n10dB", 7), ("n8dB", 8), ("n6dB", 9), ("n5dB", 10), ("n4dB", 11), ("n3dB", 12), ("n2dB", 13), ("n1dB", 14), ("p0dB", 15), ("p1dB", 16), ("p2dB", 17), ("p3dB", 18), ("p4dB", 19), ("p5dB", 20), ("p6dB", 21), ("p8dB", 22), ("p10dB", 23), ("p12dB", 24), ("p14dB", 25), ("p16dB", 26), ("p18dB", 27), ("p20dB", 28), ("p22dB", 29), ("p24dB", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqOffsetFreq.setStatus('current')
cellInterEARFCN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellInterEARFCN.setStatus('current')
cellInterFreqEvenType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("invalid", 0), ("a3", 1), ("a4", 2), ("a5", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqEvenType.setStatus('current')
cellInterFreqCfgPriForIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqCfgPriForIdle.setStatus('current')
cellInterFreqCfgPriForConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqCfgPriForConnect.setStatus('current')
cellInterFreqMrLimitForConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("period", 0), ("event", 1), ("both", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterFreqMrLimitForConnect.setStatus('current')
cellUtraFreqTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2), )
if mibBuilder.loadTexts: cellUtraFreqTable.setStatus('current')
cellUtraFreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellUtraFreqLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellUtraFreqIndex"))
if mibBuilder.loadTexts: cellUtraFreqEntry.setStatus('current')
cellUtraFreqLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellUtraFreqLcId.setStatus('current')
cellUtraFreqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: cellUtraFreqIndex.setStatus('current')
cellUtraFreqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellUtraFreqRowStatus.setStatus('current')
cellUtraFreqDuplexType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("tdd", 0), ("fdd", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellUtraFreqDuplexType.setStatus('current')
cellUtraFreqCarrierFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellUtraFreqCarrierFreq.setStatus('current')
cellUtraFreqCellReselectionPriorityFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellUtraFreqCellReselectionPriorityFlag.setStatus('current')
cellUtraFreqCellReselectionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellUtraFreqCellReselectionPriority.setStatus('current')
cellUtraFreqThreshxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb2", 1), ("reselectThresholdDb4", 2), ("reselectThresholdDb6", 3), ("reselectThresholdDb8", 4), ("reselectThresholdDb10", 5), ("reselectThresholdDb12", 6), ("reselectThresholdDb14", 7), ("reselectThresholdDb16", 8), ("reselectThresholdDb18", 9), ("reselectThresholdDb20", 10), ("reselectThresholdDb22", 11), ("reselectThresholdDb24", 12), ("reselectThresholdDb26", 13), ("reselectThresholdDb28", 14), ("reselectThresholdDb30", 15), ("reselectThresholdDb32", 16), ("reselectThresholdDb34", 17), ("reselectThresholdDb36", 18), ("reselectThresholdDb38", 19), ("reselectThresholdDb40", 20), ("reselectThresholdDb42", 21), ("reselectThresholdDb44", 22), ("reselectThresholdDb46", 23), ("reselectThresholdDb48", 24), ("reselectThresholdDb50", 25), ("reselectThresholdDb52", 26), ("reselectThresholdDb54", 27), ("reselectThresholdDb56", 28), ("reselectThresholdDb58", 29), ("reselectThresholdDb60", 30), ("reselectThresholdDb62", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellUtraFreqThreshxHigh.setStatus('current')
cellUtraFreqThreshxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb2", 1), ("reselectThresholdDb4", 2), ("reselectThresholdDb6", 3), ("reselectThresholdDb8", 4), ("reselectThresholdDb10", 5), ("reselectThresholdDb12", 6), ("reselectThresholdDb14", 7), ("reselectThresholdDb16", 8), ("reselectThresholdDb18", 9), ("reselectThresholdDb20", 10), ("reselectThresholdDb22", 11), ("reselectThresholdDb24", 12), ("reselectThresholdDb26", 13), ("reselectThresholdDb28", 14), ("reselectThresholdDb30", 15), ("reselectThresholdDb32", 16), ("reselectThresholdDb34", 17), ("reselectThresholdDb36", 18), ("reselectThresholdDb38", 19), ("reselectThresholdDb40", 20), ("reselectThresholdDb42", 21), ("reselectThresholdDb44", 22), ("reselectThresholdDb46", 23), ("reselectThresholdDb48", 24), ("reselectThresholdDb50", 25), ("reselectThresholdDb52", 26), ("reselectThresholdDb54", 27), ("reselectThresholdDb56", 28), ("reselectThresholdDb58", 29), ("reselectThresholdDb60", 30), ("reselectThresholdDb62", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellUtraFreqThreshxLow.setStatus('current')
cellUtraFreqQRxLevMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47)).clone(namedValues=NamedValues(("qrxlevminMinus119", 0), ("qrxlevminMinus117", 1), ("qrxlevminMinus115", 2), ("qrxlevminMinus113", 3), ("qrxlevminMinus111", 4), ("qrxlevminMinus109", 5), ("qrxlevminMinus107", 6), ("qrxlevminMinus105", 7), ("qrxlevminMinus103", 8), ("qrxlevminMinus101", 9), ("qrxlevminMinus99", 10), ("qrxlevminMinus97", 11), ("qrxlevminMinus95", 12), ("qrxlevminMinus93", 13), ("qrxlevminMinus91", 14), ("qrxlevminMinus89", 15), ("qrxlevminMinus87", 16), ("qrxlevminMinus85", 17), ("qrxlevminMinus83", 18), ("qrxlevminMinus81", 19), ("qrxlevminMinus79", 20), ("qrxlevminMinus77", 21), ("qrxlevminMinus75", 22), ("qrxlevminMinus73", 23), ("qrxlevminMinus71", 24), ("qrxlevminMinus69", 25), ("qrxlevminMinus67", 26), ("qrxlevminMinus65", 27), ("qrxlevminMinus63", 28), ("qrxlevminMinus61", 29), ("qrxlevminMinus59", 30), ("qrxlevminMinus57", 31), ("qrxlevminMinus55", 32), ("qrxlevminMinus53", 33), ("qrxlevminMinus51", 34), ("qrxlevminMinus49", 35), ("qrxlevminMinus47", 36), ("qrxlevminMinus45", 37), ("qrxlevminMinus43", 38), ("qrxlevminMinus41", 39), ("qrxlevminMinus39", 40), ("qrxlevminMinus37", 41), ("qrxlevminMinus35", 42), ("qrxlevminMinus33", 43), ("qrxlevminMinus31", 44), ("qrxlevminMinus29", 45), ("qrxlevminMinus27", 46), ("qrxlevminMinus25", 47)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellUtraFreqQRxLevMin.setStatus('current')
cellUtraFreqPMaxUtra = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 33))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellUtraFreqPMaxUtra.setStatus('current')
cellUtraFreqQualMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellUtraFreqQualMin.setStatus('current')
cellUtraFreqQoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellUtraFreqQoffset.setStatus('current')
cellGeranFreqTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3), )
if mibBuilder.loadTexts: cellGeranFreqTable.setStatus('current')
cellGeranFreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellGeranFreqLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellGeranFreqIndex"))
if mibBuilder.loadTexts: cellGeranFreqEntry.setStatus('current')
cellGeranFreqLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellGeranFreqLcId.setStatus('current')
cellGeranFreqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: cellGeranFreqIndex.setStatus('current')
cellGeranFreqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqRowStatus.setStatus('current')
cellGeranFreqStartingArfcn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqStartingArfcn.setStatus('current')
cellGeranFreqGeranBandIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("dcsl800", 0), ("dcsl900", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqGeranBandIndicator.setStatus('current')
cellGeranFreqFollowingArfcnsChoice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("explicit", 1), ("spacing", 2), ("bitMap", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqFollowingArfcnsChoice.setStatus('current')
cellGeranFreqExplicitArfcns1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns1.setStatus('current')
cellGeranFreqExplicitArfcns2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns2.setStatus('current')
cellGeranFreqExplicitArfcns3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns3.setStatus('current')
cellGeranFreqExplicitArfcns4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns4.setStatus('current')
cellGeranFreqExplicitArfcns5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns5.setStatus('current')
cellGeranFreqExplicitArfcns6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns6.setStatus('current')
cellGeranFreqExplicitArfcns7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns7.setStatus('current')
cellGeranFreqExplicitArfcns8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns8.setStatus('current')
cellGeranFreqExplicitArfcns9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns9.setStatus('current')
cellGeranFreqExplicitArfcns10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns10.setStatus('current')
cellGeranFreqExplicitArfcns11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns11.setStatus('current')
cellGeranFreqExplicitArfcns12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns12.setStatus('current')
cellGeranFreqExplicitArfcns13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns13.setStatus('current')
cellGeranFreqExplicitArfcns14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns14.setStatus('current')
cellGeranFreqExplicitArfcns15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns15.setStatus('current')
cellGeranFreqExplicitArfcns16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns16.setStatus('current')
cellGeranFreqExplicitArfcns17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns17.setStatus('current')
cellGeranFreqExplicitArfcns18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns18.setStatus('current')
cellGeranFreqExplicitArfcns19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns19.setStatus('current')
cellGeranFreqExplicitArfcns20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns20.setStatus('current')
cellGeranFreqExplicitArfcns21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns21.setStatus('current')
cellGeranFreqExplicitArfcns22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns22.setStatus('current')
cellGeranFreqExplicitArfcns23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns23.setStatus('current')
cellGeranFreqExplicitArfcns24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns24.setStatus('current')
cellGeranFreqExplicitArfcns25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns25.setStatus('current')
cellGeranFreqExplicitArfcns26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns26.setStatus('current')
cellGeranFreqExplicitArfcns27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns27.setStatus('current')
cellGeranFreqExplicitArfcns28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns28.setStatus('current')
cellGeranFreqExplicitArfcns29 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns29.setStatus('current')
cellGeranFreqExplicitArfcns30 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns30.setStatus('current')
cellGeranFreqExplicitArfcns31 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqExplicitArfcns31.setStatus('current')
cellGeranFreqArfcnSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqArfcnSpacing.setStatus('current')
cellGeranFreqNumberOfFollowingArfcns = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqNumberOfFollowingArfcns.setStatus('current')
cellGeranFreqNumberOfVarialbeBitMapArfcns = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqNumberOfVarialbeBitMapArfcns.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns1.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns2.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns3.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns4.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns5.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns6.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns7.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns8.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns9.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns10.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns11.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns12.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns13.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns14.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns15.setStatus('current')
cellGeranFreqVariableBitMapOfArfcns16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqVariableBitMapOfArfcns16.setStatus('current')
cellGeranFreqCellReselectionPriorityFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 57), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqCellReselectionPriorityFlag.setStatus('current')
cellGeranFreqCellReselectionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqCellReselectionPriority.setStatus('current')
cellGeranFreqNccPermitted = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqNccPermitted.setStatus('current')
cellGeranFreqQRxLevMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 45))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqQRxLevMin.setStatus('current')
cellGeranFreqPMaxGeranFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 61), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqPMaxGeranFlag.setStatus('current')
cellGeranFreqPMaxGeran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqPMaxGeran.setStatus('current')
cellGeranFreqThreshxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 63), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb2", 1), ("reselectThresholdDb4", 2), ("reselectThresholdDb6", 3), ("reselectThresholdDb8", 4), ("reselectThresholdDb10", 5), ("reselectThresholdDb12", 6), ("reselectThresholdDb14", 7), ("reselectThresholdDb16", 8), ("reselectThresholdDb18", 9), ("reselectThresholdDb20", 10), ("reselectThresholdDb22", 11), ("reselectThresholdDb24", 12), ("reselectThresholdDb26", 13), ("reselectThresholdDb28", 14), ("reselectThresholdDb30", 15), ("reselectThresholdDb32", 16), ("reselectThresholdDb34", 17), ("reselectThresholdDb36", 18), ("reselectThresholdDb38", 19), ("reselectThresholdDb40", 20), ("reselectThresholdDb42", 21), ("reselectThresholdDb44", 22), ("reselectThresholdDb46", 23), ("reselectThresholdDb48", 24), ("reselectThresholdDb50", 25), ("reselectThresholdDb52", 26), ("reselectThresholdDb54", 27), ("reselectThresholdDb56", 28), ("reselectThresholdDb58", 29), ("reselectThresholdDb60", 30), ("reselectThresholdDb62", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqThreshxHigh.setStatus('current')
cellGeranFreqThreshxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 64), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb2", 1), ("reselectThresholdDb4", 2), ("reselectThresholdDb6", 3), ("reselectThresholdDb8", 4), ("reselectThresholdDb10", 5), ("reselectThresholdDb12", 6), ("reselectThresholdDb14", 7), ("reselectThresholdDb16", 8), ("reselectThresholdDb18", 9), ("reselectThresholdDb20", 10), ("reselectThresholdDb22", 11), ("reselectThresholdDb24", 12), ("reselectThresholdDb26", 13), ("reselectThresholdDb28", 14), ("reselectThresholdDb30", 15), ("reselectThresholdDb32", 16), ("reselectThresholdDb34", 17), ("reselectThresholdDb36", 18), ("reselectThresholdDb38", 19), ("reselectThresholdDb40", 20), ("reselectThresholdDb42", 21), ("reselectThresholdDb44", 22), ("reselectThresholdDb46", 23), ("reselectThresholdDb48", 24), ("reselectThresholdDb50", 25), ("reselectThresholdDb52", 26), ("reselectThresholdDb54", 27), ("reselectThresholdDb56", 28), ("reselectThresholdDb58", 29), ("reselectThresholdDb60", 30), ("reselectThresholdDb62", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqThreshxLow.setStatus('current')
cellGeranFreqQoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 3, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellGeranFreqQoffset.setStatus('current')
cellAdjCdma2000FreqTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 4), )
if mibBuilder.loadTexts: cellAdjCdma2000FreqTable.setStatus('current')
cellAdjCdma2000FreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellAdjCdma2000FreqLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellAdjCdma2000FreqIndex"))
if mibBuilder.loadTexts: cellAdjCdma2000FreqEntry.setStatus('current')
cellAdjCdma2000FreqLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellAdjCdma2000FreqLcId.setStatus('current')
cellAdjCdma2000FreqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: cellAdjCdma2000FreqIndex.setStatus('current')
cellAdjCdma2000FreqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCdma2000FreqRowStatus.setStatus('current')
cellAdjCdma2000FreqBandClass = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)).clone(namedValues=NamedValues(("bc0", 0), ("bc1", 1), ("bc2", 2), ("bc3", 3), ("bc4", 4), ("bc5", 5), ("bc6", 6), ("bc7", 7), ("bc8", 8), ("bc9", 9), ("bc10", 10), ("bc11", 11), ("bc12", 12), ("bc13", 13), ("bc14", 14), ("bc15", 15), ("bc16", 16), ("bc17", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCdma2000FreqBandClass.setStatus('current')
cellAdjCdma2000FreqArfcn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCdma2000FreqArfcn.setStatus('current')
cellAdjCdma2000FreqType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("type1XRTT", 0), ("typeHRPD", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCdma2000FreqType.setStatus('current')
cellSelectReselect = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4))
cellSelectTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1), )
if mibBuilder.loadTexts: cellSelectTable.setStatus('current')
cellSelectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellSelectLcId"))
if mibBuilder.loadTexts: cellSelectEntry.setStatus('current')
cellSelectLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellSelectLcId.setStatus('current')
cellSelectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectRowStatus.setStatus('current')
cellSelectIntraFreqCellResel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("allowed", 0), ("notAllowed", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectIntraFreqCellResel.setStatus('current')
cellSelectCsgInd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectCsgInd.setStatus('current')
cellSelectCsgIdentityFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectCsgIdentityFlag.setStatus('current')
cellSelectCsgIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 134217727))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectCsgIdentity.setStatus('current')
cellSelectQRxlevMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)).clone(namedValues=NamedValues(("rxLevMinMinusDbm140", 0), ("rxLevMinMinusDbm138", 1), ("rxLevMinMinusDbm136", 2), ("rxLevMinMinusDbm134", 3), ("rxLevMinMinusDbm132", 4), ("rxLevMinMinusDbm130", 5), ("rxLevMinMinusDbm128", 6), ("rxLevMinMinusDbm126", 7), ("rxLevMinMinusDbm124", 8), ("rxLevMinMinusDbm122", 9), ("rxLevMinMinusDbm120", 10), ("rxLevMinMinusDbm118", 11), ("rxLevMinMinusDbm116", 12), ("rxLevMinMinusDbm114", 13), ("rxLevMinMinusDbm112", 14), ("rxLevMinMinusDbm110", 15), ("rxLevMinMinusDbm108", 16), ("rxLevMinMinusDbm106", 17), ("rxLevMinMinusDbm104", 18), ("rxLevMinMinusDbm102", 19), ("rxLevMinMinusDbm100", 20), ("rxLevMinMinusDbm98", 21), ("rxLevMinMinusDbm96", 22), ("rxLevMinMinusDbm94", 23), ("rxLevMinMinusDbm92", 24), ("rxLevMinMinusDbm90", 25), ("rxLevMinMinusDbm88", 26), ("rxLevMinMinusDbm86", 27), ("rxLevMinMinusDbm84", 28), ("rxLevMinMinusDbm82", 29), ("rxLevMinMinusDbm80", 30), ("rxLevMinMinusDbm78", 31), ("rxLevMinMinusDbm76", 32), ("rxLevMinMinusDbm74", 33), ("rxLevMinMinusDbm72", 34), ("rxLevMinMinusDbm70", 35), ("rxLevMinMinusDbm68", 36), ("rxLevMinMinusDbm66", 37), ("rxLevMinMinusDbm64", 38), ("rxLevMinMinusDbm62", 39), ("rxLevMinMinusDbm60", 40), ("rxLevMinMinusDbm58", 41), ("rxLevMinMinusDbm56", 42), ("rxLevMinMinusDbm54", 43), ("rxLevMinMinusDbm52", 44), ("rxLevMinMinusDbm50", 45), ("rxLevMinMinusDbm48", 46), ("rxLevMinMinusDbm46", 47), ("rxLevMinMinusDbm44", 48)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectQRxlevMin.setStatus('current')
cellSelectQRxlevMinOffsetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectQRxlevMinOffsetFlag.setStatus('current')
cellSelectQRxlevMinOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("rxLevDb2", 0), ("rxLevDb4", 1), ("rxLevDb6", 2), ("rxLevDb8", 3), ("rxLevDb10", 4), ("rxLevDb12", 5), ("rxLevDb14", 6), ("rxLevDb16", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectQRxlevMinOffset.setStatus('current')
cellSelectPmaxFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectPmaxFlag.setStatus('current')
cellSelectPmax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 33))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectPmax.setStatus('current')
cellSelectQQualMinFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectQQualMinFlag.setStatus('current')
cellSelectQQualMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("qualMinMinusDb34", 0), ("qualMinMinusDb33", 1), ("qualMinMinusDb32", 2), ("qualMinMinusDb31", 3), ("qualMinMinusDb30", 4), ("qualMinMinusDb29", 5), ("qualMinMinusDb28", 6), ("qualMinMinusDb27", 7), ("qualMinMinusDb26", 8), ("qualMinMinusDb25", 9), ("qualMinMinusDb24", 10), ("qualMinMinusDb23", 11), ("qualMinMinusDb22", 12), ("qualMinMinusDb21", 13), ("qualMinMinusDb20", 14), ("qualMinMinusDb19", 15), ("qualMinMinusDb18", 16), ("qualMinMinusDb17", 17), ("qualMinMinusDb16", 18), ("qualMinMinusDb15", 19), ("qualMinMinusDb14", 20), ("qualMinMinusDb13", 21), ("qualMinMinusDb12", 22), ("qualMinMinusDb11", 23), ("qualMinMinusDb10", 24), ("qualMinMinusDb9", 25), ("qualMinMinusDb8", 26), ("qualMinMinusDb7", 27), ("qualMinMinusDb6", 28), ("qualMinMinusDb5", 29), ("qualMinMinusDb4", 30), ("qualMinMinusDb3", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectQQualMin.setStatus('current')
cellSelectQQualMinOffsetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectQQualMinOffsetFlag.setStatus('current')
cellSelectQQualMinOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("qualDb1", 0), ("qualDb2", 1), ("qualDb3", 2), ("qualDb4", 3), ("qualDb5", 4), ("qualDb6", 5), ("qualDb7", 6), ("qualDb8", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSelectQQualMinOffset.setStatus('current')
cellReselectCommonTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2), )
if mibBuilder.loadTexts: cellReselectCommonTable.setStatus('current')
cellReselectCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellReselComLcId"))
if mibBuilder.loadTexts: cellReselectCommonEntry.setStatus('current')
cellReselComLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellReselComLcId.setStatus('current')
cellReselComRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComRowStatus.setStatus('current')
cellReselComQhyst = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("dB0", 0), ("dB1", 1), ("dB2", 2), ("dB3", 3), ("dB4", 4), ("dB5", 5), ("dB6", 6), ("dB8", 7), ("dB10", 8), ("dB12", 9), ("dB14", 10), ("dB16", 11), ("dB18", 12), ("dB20", 13), ("dB22", 14), ("dB24", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComQhyst.setStatus('current')
cellReselComSpeedReselFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComSpeedReselFlag.setStatus('current')
cellReselComTCRmax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("s30", 0), ("s60", 1), ("s120", 2), ("s180", 3), ("s240", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComTCRmax.setStatus('current')
cellReselComTCRmaxHyst = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("s30", 0), ("s60", 1), ("s120", 2), ("s180", 3), ("s240", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComTCRmaxHyst.setStatus('current')
cellReselComNCRM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComNCRM.setStatus('current')
cellReselComNCRH = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComNCRH.setStatus('current')
cellReselComScalFactorMediMoblity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("dBn6", 0), ("dBn4", 1), ("dBn2", 2), ("dB0", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComScalFactorMediMoblity.setStatus('current')
cellReselComScalFactorHiMoblity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("dBn6", 0), ("dBn4", 1), ("dBn2", 2), ("dB0", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComScalFactorHiMoblity.setStatus('current')
cellReselComSNonIntraSearchFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComSNonIntraSearchFlag.setStatus('current')
cellReselComSNonIntraSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb2", 1), ("reselectThresholdDb4", 2), ("reselectThresholdDb6", 3), ("reselectThresholdDb8", 4), ("reselectThresholdDb10", 5), ("reselectThresholdDb12", 6), ("reselectThresholdDb14", 7), ("reselectThresholdDb16", 8), ("reselectThresholdDb18", 9), ("reselectThresholdDb20", 10), ("reselectThresholdDb22", 11), ("reselectThresholdDb24", 12), ("reselectThresholdDb26", 13), ("reselectThresholdDb28", 14), ("reselectThresholdDb30", 15), ("reselectThresholdDb32", 16), ("reselectThresholdDb34", 17), ("reselectThresholdDb36", 18), ("reselectThresholdDb38", 19), ("reselectThresholdDb40", 20), ("reselectThresholdDb42", 21), ("reselectThresholdDb44", 22), ("reselectThresholdDb46", 23), ("reselectThresholdDb48", 24), ("reselectThresholdDb50", 25), ("reselectThresholdDb52", 26), ("reselectThresholdDb54", 27), ("reselectThresholdDb56", 28), ("reselectThresholdDb58", 29), ("reselectThresholdDb60", 30), ("reselectThresholdDb62", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComSNonIntraSearch.setStatus('current')
cellReselComThreshServLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb2", 1), ("reselectThresholdDb4", 2), ("reselectThresholdDb6", 3), ("reselectThresholdDb8", 4), ("reselectThresholdDb10", 5), ("reselectThresholdDb12", 6), ("reselectThresholdDb14", 7), ("reselectThresholdDb16", 8), ("reselectThresholdDb18", 9), ("reselectThresholdDb20", 10), ("reselectThresholdDb22", 11), ("reselectThresholdDb24", 12), ("reselectThresholdDb26", 13), ("reselectThresholdDb28", 14), ("reselectThresholdDb30", 15), ("reselectThresholdDb32", 16), ("reselectThresholdDb34", 17), ("reselectThresholdDb36", 18), ("reselectThresholdDb38", 19), ("reselectThresholdDb40", 20), ("reselectThresholdDb42", 21), ("reselectThresholdDb44", 22), ("reselectThresholdDb46", 23), ("reselectThresholdDb48", 24), ("reselectThresholdDb50", 25), ("reselectThresholdDb52", 26), ("reselectThresholdDb54", 27), ("reselectThresholdDb56", 28), ("reselectThresholdDb58", 29), ("reselectThresholdDb60", 30), ("reselectThresholdDb62", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComThreshServLow.setStatus('current')
cellReselComReselPriorityFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComReselPriorityFlag.setStatus('current')
cellReselComCellReselPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComCellReselPriority.setStatus('current')
cellReselComSNonIntraSearchR9Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComSNonIntraSearchR9Flag.setStatus('current')
cellReselComSNonIntraSearchP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb2", 1), ("reselectThresholdDb4", 2), ("reselectThresholdDb6", 3), ("reselectThresholdDb8", 4), ("reselectThresholdDb10", 5), ("reselectThresholdDb12", 6), ("reselectThresholdDb14", 7), ("reselectThresholdDb16", 8), ("reselectThresholdDb18", 9), ("reselectThresholdDb20", 10), ("reselectThresholdDb22", 11), ("reselectThresholdDb24", 12), ("reselectThresholdDb26", 13), ("reselectThresholdDb28", 14), ("reselectThresholdDb30", 15), ("reselectThresholdDb32", 16), ("reselectThresholdDb34", 17), ("reselectThresholdDb36", 18), ("reselectThresholdDb38", 19), ("reselectThresholdDb40", 20), ("reselectThresholdDb42", 21), ("reselectThresholdDb44", 22), ("reselectThresholdDb46", 23), ("reselectThresholdDb48", 24), ("reselectThresholdDb50", 25), ("reselectThresholdDb52", 26), ("reselectThresholdDb54", 27), ("reselectThresholdDb56", 28), ("reselectThresholdDb58", 29), ("reselectThresholdDb60", 30), ("reselectThresholdDb62", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComSNonIntraSearchP.setStatus('current')
cellReselComSNonIntraSearchQ = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb1", 1), ("reselectThresholdDb2", 2), ("reselectThresholdDb3", 3), ("reselectThresholdDb4", 4), ("reselectThresholdDb5", 5), ("reselectThresholdDb6", 6), ("reselectThresholdDb7", 7), ("reselectThresholdDb8", 8), ("reselectThresholdDb9", 9), ("reselectThresholdDb10", 10), ("reselectThresholdDb11", 11), ("reselectThresholdDb12", 12), ("reselectThresholdDb13", 13), ("reselectThresholdDb14", 14), ("reselectThresholdDb15", 15), ("reselectThresholdDb16", 16), ("reselectThresholdDb17", 17), ("reselectThresholdDb18", 18), ("reselectThresholdDb19", 19), ("reselectThresholdDb20", 20), ("reselectThresholdDb21", 21), ("reselectThresholdDb22", 22), ("reselectThresholdDb23", 23), ("reselectThresholdDb24", 24), ("reselectThresholdDb25", 25), ("reselectThresholdDb26", 26), ("reselectThresholdDb27", 27), ("reselectThresholdDb28", 28), ("reselectThresholdDb29", 29), ("reselectThresholdDb30", 30), ("reselectThresholdDb31", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComSNonIntraSearchQ.setStatus('current')
cellReselComThreshServLowQFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComThreshServLowQFlag.setStatus('current')
cellReselComThreshServLowQ = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb1", 1), ("reselectThresholdDb2", 2), ("reselectThresholdDb3", 3), ("reselectThresholdDb4", 4), ("reselectThresholdDb5", 5), ("reselectThresholdDb6", 6), ("reselectThresholdDb7", 7), ("reselectThresholdDb8", 8), ("reselectThresholdDb9", 9), ("reselectThresholdDb10", 10), ("reselectThresholdDb11", 11), ("reselectThresholdDb12", 12), ("reselectThresholdDb13", 13), ("reselectThresholdDb14", 14), ("reselectThresholdDb15", 15), ("reselectThresholdDb16", 16), ("reselectThresholdDb17", 17), ("reselectThresholdDb18", 18), ("reselectThresholdDb19", 19), ("reselectThresholdDb20", 20), ("reselectThresholdDb21", 21), ("reselectThresholdDb22", 22), ("reselectThresholdDb23", 23), ("reselectThresholdDb24", 24), ("reselectThresholdDb25", 25), ("reselectThresholdDb26", 26), ("reselectThresholdDb27", 27), ("reselectThresholdDb28", 28), ("reselectThresholdDb29", 29), ("reselectThresholdDb30", 30), ("reselectThresholdDb31", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselComThreshServLowQ.setStatus('current')
cellReselectIntraFreqTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3), )
if mibBuilder.loadTexts: cellReselectIntraFreqTable.setStatus('current')
cellReselectIntraFreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellReselIntraFreqLcId"))
if mibBuilder.loadTexts: cellReselectIntraFreqEntry.setStatus('current')
cellReselIntraFreqLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellReselIntraFreqLcId.setStatus('current')
cellReselIntraFreqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqRowStatus.setStatus('current')
cellReselIntraFreqTreselection = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqTreselection.setStatus('current')
cellReselIntraFreqQrxLevMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)).clone(namedValues=NamedValues(("rxLevMinMinusDbm140", 0), ("rxLevMinMinusDbm138", 1), ("rxLevMinMinusDbm136", 2), ("rxLevMinMinusDbm134", 3), ("rxLevMinMinusDbm132", 4), ("rxLevMinMinusDbm130", 5), ("rxLevMinMinusDbm128", 6), ("rxLevMinMinusDbm126", 7), ("rxLevMinMinusDbm124", 8), ("rxLevMinMinusDbm122", 9), ("rxLevMinMinusDbm120", 10), ("rxLevMinMinusDbm118", 11), ("rxLevMinMinusDbm116", 12), ("rxLevMinMinusDbm114", 13), ("rxLevMinMinusDbm112", 14), ("rxLevMinMinusDbm110", 15), ("rxLevMinMinusDbm108", 16), ("rxLevMinMinusDbm106", 17), ("rxLevMinMinusDbm104", 18), ("rxLevMinMinusDbm102", 19), ("rxLevMinMinusDbm100", 20), ("rxLevMinMinusDbm98", 21), ("rxLevMinMinusDbm96", 22), ("rxLevMinMinusDbm94", 23), ("rxLevMinMinusDbm92", 24), ("rxLevMinMinusDbm90", 25), ("rxLevMinMinusDbm88", 26), ("rxLevMinMinusDbm86", 27), ("rxLevMinMinusDbm84", 28), ("rxLevMinMinusDbm82", 29), ("rxLevMinMinusDbm80", 30), ("rxLevMinMinusDbm78", 31), ("rxLevMinMinusDbm76", 32), ("rxLevMinMinusDbm74", 33), ("rxLevMinMinusDbm72", 34), ("rxLevMinMinusDbm70", 35), ("rxLevMinMinusDbm68", 36), ("rxLevMinMinusDbm66", 37), ("rxLevMinMinusDbm64", 38), ("rxLevMinMinusDbm62", 39), ("rxLevMinMinusDbm60", 40), ("rxLevMinMinusDbm58", 41), ("rxLevMinMinusDbm56", 42), ("rxLevMinMinusDbm54", 43), ("rxLevMinMinusDbm52", 44), ("rxLevMinMinusDbm50", 45), ("rxLevMinMinusDbm48", 46), ("rxLevMinMinusDbm46", 47), ("rxLevMinMinusDbm44", 48)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqQrxLevMin.setStatus('current')
cellReselIntraFreqPmaxFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqPmaxFlag.setStatus('current')
cellReselIntraFreqPmax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 33))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqPmax.setStatus('current')
cellReselIntraFreqIntraSearchFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqIntraSearchFlag.setStatus('current')
cellReselIntraFreqIntraSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb2", 1), ("reselectThresholdDb4", 2), ("reselectThresholdDb6", 3), ("reselectThresholdDb8", 4), ("reselectThresholdDb10", 5), ("reselectThresholdDb12", 6), ("reselectThresholdDb14", 7), ("reselectThresholdDb16", 8), ("reselectThresholdDb18", 9), ("reselectThresholdDb20", 10), ("reselectThresholdDb22", 11), ("reselectThresholdDb24", 12), ("reselectThresholdDb26", 13), ("reselectThresholdDb28", 14), ("reselectThresholdDb30", 15), ("reselectThresholdDb32", 16), ("reselectThresholdDb34", 17), ("reselectThresholdDb36", 18), ("reselectThresholdDb38", 19), ("reselectThresholdDb40", 20), ("reselectThresholdDb42", 21), ("reselectThresholdDb44", 22), ("reselectThresholdDb46", 23), ("reselectThresholdDb48", 24), ("reselectThresholdDb50", 25), ("reselectThresholdDb52", 26), ("reselectThresholdDb54", 27), ("reselectThresholdDb56", 28), ("reselectThresholdDb58", 29), ("reselectThresholdDb60", 30), ("reselectThresholdDb62", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqIntraSearch.setStatus('current')
cellReselIntraFreqMeasBandWidthFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqMeasBandWidthFlag.setStatus('current')
cellReselIntraFreqMeasBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("mbw6", 0), ("mbw15", 1), ("mbw25", 2), ("mbw50", 3), ("mbw75", 4), ("mbw100", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqMeasBandWidth.setStatus('current')
cellReselIntraFreqPresenceAntennaPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqPresenceAntennaPort1.setStatus('current')
cellReselIntraFreqSpeedStateScaleFactorsFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqSpeedStateScaleFactorsFlag.setStatus('current')
cellReselIntraFreqSpeedStateScaleFactorsMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDot25", 0), ("oDot5", 1), ("oDot75", 2), ("lDot0", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqSpeedStateScaleFactorsMedium.setStatus('current')
cellReselIntraFreqSpeedStateScaleFactorsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDot25", 0), ("oDot5", 1), ("oDot75", 2), ("lDot0", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqSpeedStateScaleFactorsHigh.setStatus('current')
cellReselIntraFreqNeighbCellCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("neighcellcfg00", 0), ("neighcellcfg01", 1), ("neighcellcfg10", 2), ("neighcellcfg11", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqNeighbCellCfg.setStatus('current')
cellReselIntraFreqIntraSearchR9Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqIntraSearchR9Flag.setStatus('current')
cellReselIntraFreqIntraSearchP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb2", 1), ("reselectThresholdDb4", 2), ("reselectThresholdDb6", 3), ("reselectThresholdDb8", 4), ("reselectThresholdDb10", 5), ("reselectThresholdDb12", 6), ("reselectThresholdDb14", 7), ("reselectThresholdDb16", 8), ("reselectThresholdDb18", 9), ("reselectThresholdDb20", 10), ("reselectThresholdDb22", 11), ("reselectThresholdDb24", 12), ("reselectThresholdDb26", 13), ("reselectThresholdDb28", 14), ("reselectThresholdDb30", 15), ("reselectThresholdDb32", 16), ("reselectThresholdDb34", 17), ("reselectThresholdDb36", 18), ("reselectThresholdDb38", 19), ("reselectThresholdDb40", 20), ("reselectThresholdDb42", 21), ("reselectThresholdDb44", 22), ("reselectThresholdDb46", 23), ("reselectThresholdDb48", 24), ("reselectThresholdDb50", 25), ("reselectThresholdDb52", 26), ("reselectThresholdDb54", 27), ("reselectThresholdDb56", 28), ("reselectThresholdDb58", 29), ("reselectThresholdDb60", 30), ("reselectThresholdDb62", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqIntraSearchP.setStatus('current')
cellReselIntraFreqIntraSearchQ = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("reselectThresholdDb0", 0), ("reselectThresholdDb1", 1), ("reselectThresholdDb2", 2), ("reselectThresholdDb3", 3), ("reselectThresholdDb4", 4), ("reselectThresholdDb5", 5), ("reselectThresholdDb6", 6), ("reselectThresholdDb7", 7), ("reselectThresholdDb8", 8), ("reselectThresholdDb9", 9), ("reselectThresholdDb10", 10), ("reselectThresholdDb11", 11), ("reselectThresholdDb12", 12), ("reselectThresholdDb13", 13), ("reselectThresholdDb14", 14), ("reselectThresholdDb15", 15), ("reselectThresholdDb16", 16), ("reselectThresholdDb17", 17), ("reselectThresholdDb18", 18), ("reselectThresholdDb19", 19), ("reselectThresholdDb20", 20), ("reselectThresholdDb21", 21), ("reselectThresholdDb22", 22), ("reselectThresholdDb23", 23), ("reselectThresholdDb24", 24), ("reselectThresholdDb25", 25), ("reselectThresholdDb26", 26), ("reselectThresholdDb27", 27), ("reselectThresholdDb28", 28), ("reselectThresholdDb29", 29), ("reselectThresholdDb30", 30), ("reselectThresholdDb31", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqIntraSearchQ.setStatus('current')
cellReselIntraFreqQualMinFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqQualMinFlag.setStatus('current')
cellReselIntraFreqQualMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)).clone(namedValues=NamedValues(("qualMinMinusDb34", 0), ("qualMinMinusDb33", 1), ("qualMinMinusDb32", 2), ("qualMinMinusDb31", 3), ("qualMinMinusDb30", 4), ("qualMinMinusDb29", 5), ("qualMinMinusDb28", 6), ("qualMinMinusDb27", 7), ("qualMinMinusDb26", 8), ("qualMinMinusDb25", 9), ("qualMinMinusDb24", 10), ("qualMinMinusDb23", 11), ("qualMinMinusDb22", 12), ("qualMinMinusDb21", 13), ("qualMinMinusDb20", 14), ("qualMinMinusDb19", 15), ("qualMinMinusDb18", 16), ("qualMinMinusDb17", 17), ("qualMinMinusDb16", 18), ("qualMinMinusDb15", 19), ("qualMinMinusDb14", 20), ("qualMinMinusDb13", 21), ("qualMinMinusDb12", 22), ("qualMinMinusDb11", 23), ("qualMinMinusDb10", 24), ("qualMinMinusDb9", 25), ("qualMinMinusDb8", 26), ("qualMinMinusDb7", 27), ("qualMinMinusDb6", 28), ("qualMinMinusDb5", 29), ("qualMinMinusDb4", 30), ("qualMinMinusDb3", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellReselIntraFreqQualMin.setStatus('current')
cellReselectionInterRatTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4), )
if mibBuilder.loadTexts: cellReselectionInterRatTable.setStatus('current')
cellReselectionInterRatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellInterRatLcId"))
if mibBuilder.loadTexts: cellReselectionInterRatEntry.setStatus('current')
cellInterRatLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellInterRatLcId.setStatus('current')
cellInterRatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatRowStatus.setStatus('current')
cellInterRatTreselectionUtra = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatTreselectionUtra.setStatus('current')
cellInterRatTreselectionUtraSfFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatTreselectionUtraSfFlag.setStatus('current')
cellInterRatUtraSfHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDot25", 0), ("oDot5", 1), ("oDot75", 2), ("lDot0", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatUtraSfHigh.setStatus('current')
cellInterRatUtraSfMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDot25", 0), ("oDot5", 1), ("oDot75", 2), ("lDot0", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatUtraSfMedium.setStatus('current')
cellInterRatTreselectionGeran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatTreselectionGeran.setStatus('current')
cellInterRatTreselectionGeranSfFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatTreselectionGeranSfFlag.setStatus('current')
cellInterRatGeranSfHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDot25", 0), ("oDot5", 1), ("oDot75", 2), ("lDot0", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatGeranSfHigh.setStatus('current')
cellInterRatGeranSfMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDot25", 0), ("oDot5", 1), ("oDot75", 2), ("lDot0", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatGeranSfMedium.setStatus('current')
cellInterRatCDMA2000HRPDFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatCDMA2000HRPDFlag.setStatus('current')
cellInterRatCDMA20001xRTTFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatCDMA20001xRTTFlag.setStatus('current')
cellInterRatTreselectionCdmaHRPD = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatTreselectionCdmaHRPD.setStatus('current')
cellInterRatTreselectionCdmaHRPDSfFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatTreselectionCdmaHRPDSfFlag.setStatus('current')
cellInterRatCdmaHRPDSfHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDot25", 0), ("oDot5", 1), ("oDot75", 2), ("lDot0", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatCdmaHRPDSfHigh.setStatus('current')
cellInterRatCdmaHRPDSfMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDot25", 0), ("oDot5", 1), ("oDot75", 2), ("lDot0", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatCdmaHRPDSfMedium.setStatus('current')
cellInterRatTreselectionCdma1xRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatTreselectionCdma1xRTT.setStatus('current')
cellInterRatTreselectionCdma1xRTTSfFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatTreselectionCdma1xRTTSfFlag.setStatus('current')
cellInterRatCdma1xRTTSfHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDot25", 0), ("oDot5", 1), ("oDot75", 2), ("lDot0", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatCdma1xRTTSfHigh.setStatus('current')
cellInterRatCdma1xRTTSfMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 4, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDot25", 0), ("oDot5", 1), ("oDot75", 2), ("lDot0", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellInterRatCdma1xRTTSfMedium.setStatus('current')
cellCdmaBandClassInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 5), )
if mibBuilder.loadTexts: cellCdmaBandClassInfoTable.setStatus('current')
cellCdmaBandClassInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellCdmaBandClassInfoLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellCdmaBandClassInfoIndex"))
if mibBuilder.loadTexts: cellCdmaBandClassInfoEntry.setStatus('current')
cellCdmaBandClassInfoLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellCdmaBandClassInfoLcId.setStatus('current')
cellCdmaBandClassInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: cellCdmaBandClassInfoIndex.setStatus('current')
cellCdmaBandClassInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdmaBandClassInfoRowStatus.setStatus('current')
cellCdmaBandClassInfoFreqType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("type1XRTT", 0), ("typeHRPD", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdmaBandClassInfoFreqType.setStatus('current')
cellCdmaBandClassInfoBandClass = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -1)).clone(namedValues=NamedValues(("bc0", 0), ("bc1", 1), ("bc2", 2), ("bc3", 3), ("bc4", 4), ("bc5", 5), ("bc6", 6), ("bc7", 7), ("bc8", 8), ("bc9", 9), ("bc10", 10), ("bc11", 11), ("bc12", 12), ("bc13", 13), ("bc14", 14), ("bc15", 15), ("bc16", 16), ("bc17", 17), ("invalid", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdmaBandClassInfoBandClass.setStatus('current')
cellCdmaBandClassInfoPriorityFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdmaBandClassInfoPriorityFlag.setStatus('current')
cellCdmaBandClassInfoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdmaBandClassInfoPriority.setStatus('current')
cellCdmaBandClassInfoThreshxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdmaBandClassInfoThreshxHigh.setStatus('current')
cellCdmaBandClassInfoThreshxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdmaBandClassInfoThreshxLow.setStatus('current')
cellSysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5))
cellSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1), )
if mibBuilder.loadTexts: cellSchedulingTable.setStatus('current')
cellSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellShedLcId"))
if mibBuilder.loadTexts: cellSchedulingEntry.setStatus('current')
cellShedLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellShedLcId.setStatus('current')
cellShedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedRowStatus.setStatus('current')
cellShedSiTransferTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSiTransferTime.setStatus('current')
cellShedSiWindowLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("ms1", 0), ("ms2", 1), ("ms5", 2), ("ms10", 3), ("ms15", 4), ("ms20", 5), ("ms40", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSiWindowLen.setStatus('current')
cellShedRrModifyPeriodCoeff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("n2", 0), ("n4", 1), ("n8", 2), ("n16", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedRrModifyPeriodCoeff.setStatus('current')
cellShedSib2Period = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("rf8", 0), ("rf16", 1), ("rf32", 2), ("rf64", 3), ("rf128", 4), ("rf256", 5), ("rf512", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSib2Period.setStatus('current')
cellShedSib3Period = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("rf8", 0), ("rf16", 1), ("rf32", 2), ("rf64", 3), ("rf128", 4), ("rf256", 5), ("rf512", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSib3Period.setStatus('current')
cellShedSib4Period = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("rf8", 0), ("rf16", 1), ("rf32", 2), ("rf64", 3), ("rf128", 4), ("rf256", 5), ("rf512", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSib4Period.setStatus('current')
cellShedSib5Period = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("rf8", 0), ("rf16", 1), ("rf32", 2), ("rf64", 3), ("rf128", 4), ("rf256", 5), ("rf512", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSib5Period.setStatus('current')
cellShedSib6Period = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("rf8", 0), ("rf16", 1), ("rf32", 2), ("rf64", 3), ("rf128", 4), ("rf256", 5), ("rf512", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSib6Period.setStatus('current')
cellShedSib7Period = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("rf8", 0), ("rf16", 1), ("rf32", 2), ("rf64", 3), ("rf128", 4), ("rf256", 5), ("rf512", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSib7Period.setStatus('current')
cellShedSib10Period = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("rf8", 0), ("rf16", 1), ("rf32", 2), ("rf64", 3), ("rf128", 4), ("rf256", 5), ("rf512", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSib10Period.setStatus('current')
cellShedSib11Period = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("rf8", 0), ("rf16", 1), ("rf32", 2), ("rf64", 3), ("rf128", 4), ("rf256", 5), ("rf512", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSib11Period.setStatus('current')
cellShedSib8Period = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("rf8", 0), ("rf16", 1), ("rf32", 2), ("rf64", 3), ("rf128", 4), ("rf256", 5), ("rf512", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSib8Period.setStatus('current')
cellShedSib6Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSib6Flag.setStatus('current')
cellShedSib7Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSib7Flag.setStatus('current')
cellShedSib8Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellShedSib8Flag.setStatus('current')
cellAccessRestrict = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6))
cellAccessRestrictTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1), )
if mibBuilder.loadTexts: cellAccessRestrictTable.setStatus('current')
cellAccessRestrictEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellAcLcId"))
if mibBuilder.loadTexts: cellAccessRestrictEntry.setStatus('current')
cellAcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellAcLcId.setStatus('current')
cellAcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcRowStatus.setStatus('current')
cellAcBarFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarFlag.setStatus('current')
cellAcAcBarForEmergcyCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcAcBarForEmergcyCalls.setStatus('current')
cellAcBarForSingalFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarForSingalFlag.setStatus('current')
cellAcProbFactorForSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("p00", 0), ("p05", 1), ("p10", 2), ("p15", 3), ("p20", 4), ("p25", 5), ("p30", 6), ("p40", 7), ("p50", 8), ("p60", 9), ("p70", 10), ("p75", 11), ("p80", 12), ("p85", 13), ("p90", 14), ("p95", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcProbFactorForSignal.setStatus('current')
cellAcBarTimeForSigalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("s4", 0), ("s8", 1), ("s16", 2), ("s32", 3), ("s64", 4), ("s128", 5), ("s256", 6), ("s512", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarTimeForSigalling.setStatus('current')
cellAcBarList1ForSigalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList1ForSigalling.setStatus('current')
cellAcBarList2ForSigalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList2ForSigalling.setStatus('current')
cellAcBarList3ForSigalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList3ForSigalling.setStatus('current')
cellAcBarList4ForSigalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList4ForSigalling.setStatus('current')
cellAcBarList5ForSigalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList5ForSigalling.setStatus('current')
cellAcBarForMocFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarForMocFlag.setStatus('current')
cellAcProbFactorForMoc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("p00", 0), ("p05", 1), ("p10", 2), ("p15", 3), ("p20", 4), ("p25", 5), ("p30", 6), ("p40", 7), ("p50", 8), ("p60", 9), ("p70", 10), ("p75", 11), ("p80", 12), ("p85", 13), ("p90", 14), ("p95", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcProbFactorForMoc.setStatus('current')
cellAcBarTimeForOrigiCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("s4", 0), ("s8", 1), ("s16", 2), ("s32", 3), ("s64", 4), ("s128", 5), ("s256", 6), ("s512", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarTimeForOrigiCalls.setStatus('current')
cellAcBarList1ForOrigiCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList1ForOrigiCalls.setStatus('current')
cellAcBarList2ForOrigiCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList2ForOrigiCalls.setStatus('current')
cellAcBarList3ForOrigiCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList3ForOrigiCalls.setStatus('current')
cellAcBarList4ForOrigiCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList4ForOrigiCalls.setStatus('current')
cellAcBarList5ForOrigiCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList5ForOrigiCalls.setStatus('current')
cellAcBarForVoiceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarForVoiceFlag.setStatus('current')
cellAcProbFactorForVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("p00", 0), ("p05", 1), ("p10", 2), ("p15", 3), ("p20", 4), ("p25", 5), ("p30", 6), ("p40", 7), ("p50", 8), ("p60", 9), ("p70", 10), ("p75", 11), ("p80", 12), ("p85", 13), ("p90", 14), ("p95", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcProbFactorForVoice.setStatus('current')
cellAcBarTimeForVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("s4", 0), ("s8", 1), ("s16", 2), ("s32", 3), ("s64", 4), ("s128", 5), ("s256", 6), ("s512", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarTimeForVoice.setStatus('current')
cellAcBarList1ForVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList1ForVoice.setStatus('current')
cellAcBarList2ForVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList2ForVoice.setStatus('current')
cellAcBarList3ForVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList3ForVoice.setStatus('current')
cellAcBarList4ForVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList4ForVoice.setStatus('current')
cellAcBarList5ForVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList5ForVoice.setStatus('current')
cellAcBarForVideoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarForVideoFlag.setStatus('current')
cellAcProbFactorForVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("p00", 0), ("p05", 1), ("p10", 2), ("p15", 3), ("p20", 4), ("p25", 5), ("p30", 6), ("p40", 7), ("p50", 8), ("p60", 9), ("p70", 10), ("p75", 11), ("p80", 12), ("p85", 13), ("p90", 14), ("p95", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcProbFactorForVideo.setStatus('current')
cellAcBarTimeForVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("s4", 0), ("s8", 1), ("s16", 2), ("s32", 3), ("s64", 4), ("s128", 5), ("s256", 6), ("s512", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarTimeForVideo.setStatus('current')
cellAcBarList1ForVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList1ForVideo.setStatus('current')
cellAcBarList2ForVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList2ForVideo.setStatus('current')
cellAcBarList3ForVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList3ForVideo.setStatus('current')
cellAcBarList4ForVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList4ForVideo.setStatus('current')
cellAcBarList5ForVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 6, 1, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAcBarList5ForVideo.setStatus('current')
chandPrCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7))
phichTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 1), )
if mibBuilder.loadTexts: phichTable.setStatus('current')
phichEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "phichLcId"))
if mibBuilder.loadTexts: phichEntry.setStatus('current')
phichLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: phichLcId.setStatus('current')
phichRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phichRowStatus.setStatus('current')
phichDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("extended", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phichDuration.setStatus('current')
phichResource = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oneSixth", 0), ("half", 1), ("one", 2), ("two", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phichResource.setStatus('current')
pdschTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 2), )
if mibBuilder.loadTexts: pdschTable.setStatus('current')
pdschEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdschLcId"))
if mibBuilder.loadTexts: pdschEntry.setStatus('current')
pdschLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdschLcId.setStatus('current')
pdschRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdschRowStatus.setStatus('current')
pdschPb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdschPb.setStatus('current')
pdschPa = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("n6dB", 0), ("n4dot77dB", 1), ("n3dB", 2), ("n1dot77dB", 3), ("p0dB", 4), ("p1dB", 5), ("p2dB", 6), ("p3dB", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdschPa.setStatus('current')
puschTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3), )
if mibBuilder.loadTexts: puschTable.setStatus('current')
puschEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "puschLcId"))
if mibBuilder.loadTexts: puschEntry.setStatus('current')
puschLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: puschLcId.setStatus('current')
puschRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschRowStatus.setStatus('current')
puschNsb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschNsb.setStatus('current')
puschRrHopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("interSubFrame", 0), ("interIntraSubFrame", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschRrHopMode.setStatus('current')
puschHoppingOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 98))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschHoppingOffset.setStatus('current')
puschEnable64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschEnable64QAM.setStatus('current')
puschRrSeqGroupHopFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschRrSeqGroupHopFlag.setStatus('current')
puschRrGroupAssignPusch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschRrGroupAssignPusch.setStatus('current')
puschRrSeqHopFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschRrSeqHopFlag.setStatus('current')
puschRrCycShift = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschRrCycShift.setStatus('current')
puschTtiBundling = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschTtiBundling.setStatus('current')
puschbetaOffsetACKIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschbetaOffsetACKIndex.setStatus('current')
puschbetaOffsetRIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschbetaOffsetRIIndex.setStatus('current')
puschbetaOffsetCQIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschbetaOffsetCQIIndex.setStatus('current')
puschdmrsWithOCCActivedR10Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschdmrsWithOCCActivedR10Flag.setStatus('current')
puschbetaOffsetACKIndexMC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschbetaOffsetACKIndexMC.setStatus('current')
puschbetaOffsetRIIndexMC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschbetaOffsetRIIndexMC.setStatus('current')
puschbetaOffsetCQIIndexMC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: puschbetaOffsetCQIIndexMC.setStatus('current')
pucchTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4), )
if mibBuilder.loadTexts: pucchTable.setStatus('current')
pucchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pucchLcId"))
if mibBuilder.loadTexts: pucchEntry.setStatus('current')
pucchLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pucchLcId.setStatus('current')
pucchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucchRowStatus.setStatus('current')
pucchRrDeltaShift = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("ds1", 0), ("ds2", 1), ("ds3", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucchRrDeltaShift.setStatus('current')
pucchRrANCS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucchRrANCS.setStatus('current')
pucchRrN1PucchAN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucchRrN1PucchAN.setStatus('current')
pucchAckNackFeedbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("bundling", 0), ("multiplexing", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucchAckNackFeedbackMode.setStatus('current')
pucchReptFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("n2", 0), ("n4", 1), ("n6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucchReptFactor.setStatus('current')
pucch3ResSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucch3ResSize.setStatus('current')
pucch2AntePortActivatedPUCCHFormat1a1bR10Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucch2AntePortActivatedPUCCHFormat1a1bR10Flag.setStatus('current')
pucch2AntePortActivatedPUCCHFormat3R10Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucch2AntePortActivatedPUCCHFormat3R10Flag.setStatus('current')
pucchFormatR10Choice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("pucch1a1b", 0), ("pucch3", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucchFormatR10Choice.setStatus('current')
pucch2AntePortActivatedPUCCH2Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucch2AntePortActivatedPUCCH2Flag.setStatus('current')
pucchSimUlPucchAndPusch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucchSimUlPucchAndPusch.setStatus('current')
pucchCellSrPucchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucchCellSrPucchNum.setStatus('current')
pucchCellSpsAckPucchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucchCellSpsAckPucchNum.setStatus('current')
pucchCellPucch1bcsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucchCellPucch1bcsNum.setStatus('current')
pucchSrPucchNumPerPRB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 4, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("num12", 0), ("num18", 1), ("num36", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pucchSrPucchNumPerPRB.setStatus('current')
raTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5), )
if mibBuilder.loadTexts: raTable.setStatus('current')
raEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "raLcId"))
if mibBuilder.loadTexts: raEntry.setStatus('current')
raLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: raLcId.setStatus('current')
raRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raRowStatus.setStatus('current')
raPreamblesNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("n4", 0), ("n8", 1), ("n12", 2), ("n16", 3), ("n20", 4), ("n24", 5), ("n28", 6), ("n32", 7), ("n36", 8), ("n40", 9), ("n44", 10), ("n48", 11), ("n52", 12), ("n56", 13), ("n60", 14), ("n64", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raPreamblesNum.setStatus('current')
raSizeofPreamblesAFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raSizeofPreamblesAFlag.setStatus('current')
raSizeofPreamblesGroupA = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("n4", 0), ("n8", 1), ("n12", 2), ("n16", 3), ("n20", 4), ("n24", 5), ("n28", 6), ("n32", 7), ("n36", 8), ("n40", 9), ("n44", 10), ("n48", 11), ("n52", 12), ("n56", 13), ("n60", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raSizeofPreamblesGroupA.setStatus('current')
raMessageSizeGroupA = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("b56", 0), ("b144", 1), ("b208", 2), ("b256", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raMessageSizeGroupA.setStatus('current')
raMessagePowerOffsetGroupB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("minusinfinity", 0), ("dB0", 1), ("dB5", 2), ("dB8", 3), ("dB10", 4), ("dB12", 5), ("dB15", 6), ("dB18", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raMessagePowerOffsetGroupB.setStatus('current')
raPowerRampStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("dB0", 0), ("dB2", 1), ("dB4", 2), ("dB6", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raPowerRampStep.setStatus('current')
raPreambleInitRcvTargetPow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("n120dBm", 0), ("n118dBm", 1), ("n116dBm", 2), ("n114dBm", 3), ("n112dBm", 4), ("n110dBm", 5), ("n108dBm", 6), ("n106dBm", 7), ("n104dBm", 8), ("n102dBm", 9), ("n100dBm", 10), ("n98dBm", 11), ("n96dBm", 12), ("n94dBm", 13), ("n92dBm", 14), ("n90dBm", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raPreambleInitRcvTargetPow.setStatus('current')
raPreambleTrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)).clone(namedValues=NamedValues(("n3", 0), ("n4", 1), ("n5", 2), ("n6", 3), ("n7", 4), ("n8", 5), ("n10", 6), ("n20", 7), ("n50", 8), ("n100", 9), ("n200", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raPreambleTrMax.setStatus('current')
raRspWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("sf2", 0), ("sf3", 1), ("sf4", 2), ("sf5", 3), ("sf6", 4), ("sf7", 5), ("sf8", 6), ("sf10", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raRspWindowSize.setStatus('current')
raMaxContentRslutTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("sf8", 0), ("sf16", 1), ("sf24", 2), ("sf32", 3), ("sf40", 4), ("sf48", 5), ("sf56", 6), ("sf64", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raMaxContentRslutTimer.setStatus('current')
raMaxMsg3Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raMaxMsg3Tx.setStatus('current')
raRootSeqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 837))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raRootSeqIndex.setStatus('current')
raPrachCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raPrachCfgIndex.setStatus('current')
raHiSpeedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raHiSpeedFlag.setStatus('current')
raZeroCorrelatZoneCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raZeroCorrelatZoneCfg.setStatus('current')
raPrachFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 94))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raPrachFreqOffset.setStatus('current')
soundingRSTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6), )
if mibBuilder.loadTexts: soundingRSTable.setStatus('current')
soundingRSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "srsLcId"))
if mibBuilder.loadTexts: soundingRSEntry.setStatus('current')
srsLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: srsLcId.setStatus('current')
srsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsRowStatus.setStatus('current')
srsSimTXAckNackAndSRS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsSimTXAckNackAndSRS.setStatus('current')
srsMaxUpPtsFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsMaxUpPtsFlag.setStatus('current')
srsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("once", 0), ("forever", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsDuration.setStatus('current')
srsHoppingBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("bw0", 0), ("bw1", 1), ("bw2", 2), ("bw3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsHoppingBandWidth.setStatus('current')
srsBandWidthCenter = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("bw0", 0), ("bw1", 1), ("bw2", 2), ("bw3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsBandWidthCenter.setStatus('current')
srsBandWidthEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("bw0", 0), ("bw1", 1), ("bw2", 2), ("bw3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsBandWidthEdge.setStatus('current')
srsValidNofCycShift = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsValidNofCycShift.setStatus('current')
srsCycshift0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("cs0", 0), ("cs1", 1), ("cs2", 2), ("cs3", 3), ("cs4", 4), ("cs5", 5), ("cs6", 6), ("cs7", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsCycshift0.setStatus('current')
srsCycshift1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("cs0", 0), ("cs1", 1), ("cs2", 2), ("cs3", 3), ("cs4", 4), ("cs5", 5), ("cs6", 6), ("cs7", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsCycshift1.setStatus('current')
srsCycshift2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("cs0", 0), ("cs1", 1), ("cs2", 2), ("cs3", 3), ("cs4", 4), ("cs5", 5), ("cs6", 6), ("cs7", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsCycshift2.setStatus('current')
srsCycshift3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("cs0", 0), ("cs1", 1), ("cs2", 2), ("cs3", 3), ("cs4", 4), ("cs5", 5), ("cs6", 6), ("cs7", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsCycshift3.setStatus('current')
srsCycshift4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("cs0", 0), ("cs1", 1), ("cs2", 2), ("cs3", 3), ("cs4", 4), ("cs5", 5), ("cs6", 6), ("cs7", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsCycshift4.setStatus('current')
srsCycshift5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("cs0", 0), ("cs1", 1), ("cs2", 2), ("cs3", 3), ("cs4", 4), ("cs5", 5), ("cs6", 6), ("cs7", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsCycshift5.setStatus('current')
srsCycshift6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("cs0", 0), ("cs1", 1), ("cs2", 2), ("cs3", 3), ("cs4", 4), ("cs5", 5), ("cs6", 6), ("cs7", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsCycshift6.setStatus('current')
srsCycshift7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("cs0", 0), ("cs1", 1), ("cs2", 2), ("cs3", 3), ("cs4", 4), ("cs5", 5), ("cs6", 6), ("cs7", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsCycshift7.setStatus('current')
srsSubFrmCfgChoice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("onlyUppts", 0), ("onlyNormalSubFrame", 1), ("notLimit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsSubFrmCfgChoice.setStatus('current')
srsAntannePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("an0", 0), ("an1", 1), ("an2", 2), ("an4", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsAntannePort.setStatus('current')
srsDci4AntannePortAp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("an0", 0), ("an1", 1), ("an2", 2), ("an4", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsDci4AntannePortAp.setStatus('current')
srsDci0AntannePortAp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("an0", 0), ("an1", 1), ("an2", 2), ("an4", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsDci0AntannePortAp.setStatus('current')
srsDci1a2b2cAntannePortAp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 6, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("an0", 0), ("an1", 1), ("an2", 2), ("an4", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srsDci1a2b2cAntannePortAp.setStatus('current')
schedulingRequestTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 7), )
if mibBuilder.loadTexts: schedulingRequestTable.setStatus('current')
schedulingRequestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "srLcId"))
if mibBuilder.loadTexts: schedulingRequestEntry.setStatus('current')
srLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: srLcId.setStatus('current')
srRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srRowStatus.setStatus('current')
srPeriodicity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 7, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("ms5", 0), ("ms10", 1), ("ms20", 2), ("ms40", 3), ("ms80", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srPeriodicity.setStatus('current')
srDsrTransMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 7, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("n4", 0), ("n8", 1), ("n16", 2), ("n32", 3), ("n64", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srDsrTransMax.setStatus('current')
srTestSwitchsrAdaptive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 7, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srTestSwitchsrAdaptive.setStatus('current')
srShortPeriodicity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 7, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("ms5", 0), ("ms10", 1), ("ms20", 2), ("ms40", 3), ("ms80", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srShortPeriodicity.setStatus('current')
srLargePeriodicityTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srLargePeriodicityTh.setStatus('current')
srShortPeriodicityTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srShortPeriodicityTh.setStatus('current')
srVolteMaxPeriodicity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 7, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("ms5", 0), ("ms10", 1), ("ms20", 2), ("ms40", 3), ("ms80", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srVolteMaxPeriodicity.setStatus('current')
srVoltePucchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srVoltePucchNum.setStatus('current')
cqiCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8), )
if mibBuilder.loadTexts: cqiCfgTable.setStatus('current')
cqiCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cqiLcId"))
if mibBuilder.loadTexts: cqiCfgEntry.setStatus('current')
cqiLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cqiLcId.setStatus('current')
cqiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiRowStatus.setStatus('current')
cqiRbNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 98))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiRbNum.setStatus('current')
cqiFormatIndicatorAPeriodic = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("cqiAperiodicWideband", 0), ("cqiAperiodicUeselected", 1), ("cqiAperiodicHighlayerConfigured", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiFormatIndicatorAPeriodic.setStatus('current')
cqiNp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("ms1", 0), ("ms5", 1), ("ms10", 2), ("ms20", 3), ("ms40", 4), ("ms80", 5), ("ms160", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiNp.setStatus('current')
cqiNomPdschRsEpreOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("nompdschRsepreOffsetDbn2", 0), ("nompdschRsepreOffsetDb0", 1), ("nompdschRsepreOffsetDb2", 2), ("nompdschRsepreOffsetDb4", 3), ("nompdschRsepreOffsetDb6", 4), ("nompdschRsepreOffsetDb8", 5), ("nompdschRsepreOffsetDb10", 6), ("nompdschRsepreOffsetDb12", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiNomPdschRsEpreOffset.setStatus('current')
cqiFormatIndicatorPeriodic = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("wideband", 0), ("subband", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiFormatIndicatorPeriodic.setStatus('current')
cqiK = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiK.setStatus('current')
cqiM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("t1", 0), ("t2", 1), ("t4", 2), ("t8", 3), ("t16", 4), ("t32", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiM.setStatus('current')
cqiRiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-160, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiRiOffset.setStatus('current')
cqiSimultaneousAckNackAndCqi = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiSimultaneousAckNackAndCqi.setStatus('current')
cqiValidNofPucch2PerPrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiValidNofPucch2PerPrb.setStatus('current')
cqiPucch2Index0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiPucch2Index0.setStatus('current')
cqiPucch2Index1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiPucch2Index1.setStatus('current')
cqiPucch2Index2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiPucch2Index2.setStatus('current')
cqiPucch2Index3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiPucch2Index3.setStatus('current')
cqiPucch2Index4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiPucch2Index4.setStatus('current')
cqiPucch2Index5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiPucch2Index5.setStatus('current')
cqiPucch2Index6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiPucch2Index6.setStatus('current')
cqiPucch2Index7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiPucch2Index7.setStatus('current')
cqiPucch2Index8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiPucch2Index8.setStatus('current')
cqiPucch2Index9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiPucch2Index9.setStatus('current')
cqiPucch2Index10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiPucch2Index10.setStatus('current')
cqiPucch2Index11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiPucch2Index11.setStatus('current')
cqiTm9format1to1Submode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("mode1", 0), ("mode2", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiTm9format1to1Submode.setStatus('current')
cqiTm8PmiRiReport = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 8, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("tm8NoPmiRiReport", 0), ("tm8PmiRiReport", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cqiTm8PmiRiReport.setStatus('current')
spsCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9), )
if mibBuilder.loadTexts: spsCfgTable.setStatus('current')
spsCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "spsLcId"))
if mibBuilder.loadTexts: spsCfgEntry.setStatus('current')
spsLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: spsLcId.setStatus('current')
spsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsRowStatus.setStatus('current')
spsIntervalDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("sf10", 0), ("sf20", 1), ("sf32", 2), ("sf40", 3), ("sf64", 4), ("sf80", 5), ("sf128", 6), ("sf160", 7), ("sf320", 8), ("sf640", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsIntervalDl.setStatus('current')
spsProcNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsProcNum.setStatus('current')
spsIntervalUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("sf10", 0), ("sf20", 1), ("sf32", 2), ("sf40", 3), ("sf64", 4), ("sf80", 5), ("sf128", 6), ("sf160", 7), ("sf320", 8), ("sf640", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsIntervalUl.setStatus('current')
spsImplicitRelAfter = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("e2", 0), ("e3", 1), ("e4", 2), ("e8", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsImplicitRelAfter.setStatus('current')
spsP0NominalPuschPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-126, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsP0NominalPuschPersist.setStatus('current')
spsP0UePuschPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-8, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsP0UePuschPersist.setStatus('current')
spsTwoIntervalsCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsTwoIntervalsCfg.setStatus('current')
spsSwitchFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsSwitchFlag.setStatus('current')
spsPucchAnPersistent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsPucchAnPersistent.setStatus('current')
spsUeNumAnPersistent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsUeNumAnPersistent.setStatus('current')
harqTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 10), )
if mibBuilder.loadTexts: harqTable.setStatus('current')
harqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 10, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "harqLcId"))
if mibBuilder.loadTexts: harqEntry.setStatus('current')
harqLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: harqLcId.setStatus('current')
harqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: harqRowStatus.setStatus('current')
harqRb0TxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: harqRb0TxNum.setStatus('current')
harqMaxUlTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)).clone(namedValues=NamedValues(("n1", 0), ("n2", 1), ("n3", 2), ("n4", 3), ("n5", 4), ("n6", 5), ("n7", 6), ("n8", 7), ("n10", 8), ("n12", 9), ("n16", 10), ("n20", 11), ("n24", 12), ("n28", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: harqMaxUlTx.setStatus('current')
harqMaxDlTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: harqMaxDlTx.setStatus('current')
harqMaxUlTxTtiBundling = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 10, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(3, 7, 9, 10)).clone(namedValues=NamedValues(("n4", 3), ("n8", 7), ("n12", 9), ("n16", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: harqMaxUlTxTtiBundling.setStatus('current')
phrTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 12), )
if mibBuilder.loadTexts: phrTable.setStatus('current')
phrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 12, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "phrLcId"))
if mibBuilder.loadTexts: phrEntry.setStatus('current')
phrLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: phrLcId.setStatus('current')
phrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phrRowStatus.setStatus('current')
phrPeriodicimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 12, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("sf10", 0), ("sf20", 1), ("sf50", 2), ("sf100", 3), ("sf200", 4), ("sf500", 5), ("sf1000", 6), ("sfInfinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phrPeriodicimer.setStatus('current')
phrProhibitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 12, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("sf0", 0), ("sf10", 1), ("sf20", 2), ("sf50", 3), ("sf100", 4), ("sf200", 5), ("sf500", 6), ("sf1000", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phrProhibitTimer.setStatus('current')
phrDlPathlossChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 12, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("dB1", 0), ("dB3", 1), ("dB6", 2), ("infinity", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phrDlPathlossChange.setStatus('current')
taTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 13), )
if mibBuilder.loadTexts: taTable.setStatus('current')
taEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 13, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "taLcId"))
if mibBuilder.loadTexts: taEntry.setStatus('current')
taLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: taLcId.setStatus('current')
taRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: taRowStatus.setStatus('current')
tatimerCommon = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 13, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("sf500", 0), ("sf750", 1), ("sf1280", 2), ("sf1920", 3), ("sf2560", 4), ("sf5120", 5), ("sf10240", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tatimerCommon.setStatus('current')
tatimerDedicated = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 13, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("sf500", 0), ("sf750", 1), ("sf1280", 2), ("sf1920", 3), ("sf2560", 4), ("sf5120", 5), ("sf10240", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tatimerDedicated.setStatus('current')
bsrTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 14), )
if mibBuilder.loadTexts: bsrTable.setStatus('current')
bsrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 14, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "bsrLcId"))
if mibBuilder.loadTexts: bsrEntry.setStatus('current')
bsrLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: bsrLcId.setStatus('current')
bsrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsrRowStatus.setStatus('current')
bsrReTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 14, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("sf320", 0), ("sf640", 1), ("sf1280", 2), ("sf2560", 3), ("sf5120", 4), ("sf10240", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsrReTx.setStatus('current')
bsrPeriodicTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 14, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("sf5", 0), ("sf10", 1), ("sf16", 2), ("sf20", 3), ("sf32", 4), ("sf40", 5), ("sf64", 6), ("sf80", 7), ("sf128", 8), ("sf160", 9), ("sf320", 10), ("sf640", 11), ("sf1280", 12), ("sf2560", 13), ("infinity", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsrPeriodicTimer.setStatus('current')
pagingTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 15), )
if mibBuilder.loadTexts: pagingTable.setStatus('current')
pagingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 15, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pagingLcId"))
if mibBuilder.loadTexts: pagingEntry.setStatus('current')
pagingLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pagingLcId.setStatus('current')
pagingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 15, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pagingRowStatus.setStatus('current')
pagingNB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 15, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("fourT", 0), ("twoT", 1), ("oneT", 2), ("halfT", 3), ("quarterT", 4), ("oneEightT", 5), ("onSixteenthT", 6), ("oneThirtySecondT", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pagingNB.setStatus('current')
anteTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 16), )
if mibBuilder.loadTexts: anteTable.setStatus('current')
anteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 16, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "anteLcId"))
if mibBuilder.loadTexts: anteEntry.setStatus('current')
anteLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: anteLcId.setStatus('current')
anteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 16, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: anteRowStatus.setStatus('current')
anteTransmissionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 16, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("tm1", 0), ("tm2", 1), ("tm3", 2), ("tm4", 3), ("tm5", 4), ("tm6", 5), ("tm7", 6), ("tm8", 7), ("tm9", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: anteTransmissionMode.setStatus('current')
anteCodeBookSubsetRestrictLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 16, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: anteCodeBookSubsetRestrictLow.setStatus('current')
anteCodeBookSubsetRestrictHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 16, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: anteCodeBookSubsetRestrictHigh.setStatus('current')
anteInfoDediFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 16, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("explicit", 0), ("default", 1), ("notPresent", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: anteInfoDediFlag.setStatus('current')
anteTransAntennaSel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 16, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("release", -1), ("closedLoop", 0), ("openLoop", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: anteTransAntennaSel.setStatus('current')
anteTransmissionModeUL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 16, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("tm1", 0), ("tm2", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: anteTransmissionModeUL.setStatus('current')
mbmsTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 17), )
if mibBuilder.loadTexts: mbmsTable.setStatus('current')
mbmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 17, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "mbmsLcId"))
if mibBuilder.loadTexts: mbmsEntry.setStatus('current')
mbmsLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: mbmsLcId.setStatus('current')
mbmsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 17, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mbmsRowStatus.setStatus('current')
mbmssfnFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 17, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mbmssfnFlag.setStatus('current')
mbmsRadioFrmAllcPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 17, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("n1", 0), ("n2", 1), ("n4", 2), ("n8", 3), ("n16", 4), ("n32", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mbmsRadioFrmAllcPeriod.setStatus('current')
mbmsRadioFrmAllcOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mbmsRadioFrmAllcOffset.setStatus('current')
mbmsSubFrmAllc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mbmsSubFrmAllc.setStatus('current')
mbmsSubFrmAllcChoice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 17, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("oneframe", 0), ("fourframes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mbmsSubFrmAllcChoice.setStatus('current')
mbmsSubFrmAllcOneFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 17, 1, 8), Bits().clone(namedValues=NamedValues(("sfn9", 1), ("sfn8", 2), ("sfn7", 3), ("sfn4", 4), ("sfn3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mbmsSubFrmAllcOneFrame.setStatus('current')
mbmsSubFrmAllcFourFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 17, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mbmsSubFrmAllcFourFrames.setStatus('current')
drxQciTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18), )
if mibBuilder.loadTexts: drxQciTable.setStatus('current')
drxQciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "drxQciLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "drxQciQci"))
if mibBuilder.loadTexts: drxQciEntry.setStatus('current')
drxQciLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: drxQciLcId.setStatus('current')
drxQciQci = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: drxQciQci.setStatus('current')
drxQciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drxQciRowStatus.setStatus('current')
drxQciFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drxQciFlag.setStatus('current')
drxQciOnDurationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("psf1", 0), ("psf2", 1), ("psf3", 2), ("psf4", 3), ("psf5", 4), ("psf6", 5), ("psf8", 6), ("psf10", 7), ("psf20", 8), ("psf30", 9), ("psf40", 10), ("psf50", 11), ("psf60", 12), ("psf80", 13), ("psf100", 14), ("psf200", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drxQciOnDurationTimer.setStatus('current')
drxQciInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)).clone(namedValues=NamedValues(("psf1", 0), ("psf2", 1), ("psf3", 2), ("psf4", 3), ("psf5", 4), ("psf6", 5), ("psf8", 6), ("psf10", 7), ("psf20", 8), ("psf30", 9), ("psf40", 10), ("psf50", 11), ("psf60", 12), ("psf80", 13), ("psf100", 14), ("psf200", 15), ("psf300", 16), ("psf500", 17), ("psf750", 18), ("psf1280", 19), ("psf1920", 20), ("psf2560", 21)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drxQciInactivityTimer.setStatus('current')
drxQciRetransmissionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("psf1", 0), ("psf2", 1), ("psf4", 2), ("psf6", 3), ("psf8", 4), ("psf16", 5), ("psf24", 6), ("psf33", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drxQciRetransmissionTimer.setStatus('current')
drxQciLongCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("sf10", 0), ("sf20", 1), ("sf32", 2), ("sf40", 3), ("sf64", 4), ("sf80", 5), ("sf128", 6), ("sf160", 7), ("sf256", 8), ("sf320", 9), ("sf512", 10), ("sf640", 11), ("sf1024", 12), ("sf1280", 13), ("sf2048", 14), ("sf2560", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drxQciLongCycle.setStatus('current')
drxQciShortCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("sf2", 0), ("sf5", 1), ("sf8", 2), ("sf10", 3), ("sf16", 4), ("sf20", 5), ("sf32", 6), ("sf40", 7), ("sf64", 8), ("sf80", 9), ("sf128", 10), ("sf160", 11), ("sf256", 12), ("sf512", 13), ("sf640", 14), ("sf320", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drxQciShortCycle.setStatus('current')
drxQciShortCycleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drxQciShortCycleTimer.setStatus('current')
drxQciShortFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drxQciShortFlag.setStatus('current')
drxQciOnDurationTimerB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("psf1", 0), ("psf2", 1), ("psf3", 2), ("psf4", 3), ("psf5", 4), ("psf6", 5), ("psf8", 6), ("psf10", 7), ("psf20", 8), ("psf30", 9), ("psf40", 10), ("psf50", 11), ("psf60", 12), ("psf80", 13), ("psf100", 14), ("psf200", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drxQciOnDurationTimerB.setStatus('current')
drxQciInactivityTimerB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)).clone(namedValues=NamedValues(("psf1", 0), ("psf2", 1), ("psf3", 2), ("psf4", 3), ("psf5", 4), ("psf6", 5), ("psf8", 6), ("psf10", 7), ("psf20", 8), ("psf30", 9), ("psf40", 10), ("psf50", 11), ("psf60", 12), ("psf80", 13), ("psf100", 14), ("psf200", 15), ("psf300", 16), ("psf500", 17), ("psf750", 18), ("psf1280", 19), ("psf1920", 20), ("psf2560", 21)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drxQciInactivityTimerB.setStatus('current')
drxQciRetransmissionTimerB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("psf1", 0), ("psf2", 1), ("psf4", 2), ("psf6", 3), ("psf8", 4), ("psf16", 5), ("psf24", 6), ("psf33", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drxQciRetransmissionTimerB.setStatus('current')
drxQciLongCycleB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 18, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("sf10", 0), ("sf20", 1), ("sf32", 2), ("sf40", 3), ("sf64", 4), ("sf80", 5), ("sf128", 6), ("sf160", 7), ("sf256", 8), ("sf320", 9), ("sf512", 10), ("sf640", 11), ("sf1024", 12), ("sf1280", 13), ("sf2048", 14), ("sf2560", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drxQciLongCycleB.setStatus('current')
csirsTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 19), )
if mibBuilder.loadTexts: csirsTable.setStatus('current')
csirsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 19, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "csirsLcId"))
if mibBuilder.loadTexts: csirsEntry.setStatus('current')
csirsLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: csirsLcId.setStatus('current')
csirsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csirsRowStatus.setStatus('current')
csirsInfoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 19, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("lmtConfig", 0), ("algorithm", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csirsInfoSwitch.setStatus('current')
csirsPortnum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 19, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("pnum1", 0), ("pnum2", 1), ("pnum4", 2), ("pnum8", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csirsPortnum.setStatus('current')
csirsSignalConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csirsSignalConfig.setStatus('current')
csirsSubsfnConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 19, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 154))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csirsSubsfnConfig.setStatus('current')
csirsPc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 19, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-8, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csirsPc.setStatus('current')
csirsZeropowerConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 19, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csirsZeropowerConfig.setStatus('current')
csirsZeropowersubsfnConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 19, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 154))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csirsZeropowersubsfnConfig.setStatus('current')
csirsTransmitFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 19, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csirsTransmitFlag.setStatus('current')
csirstm9PmiRiReportFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 19, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csirstm9PmiRiReportFlag.setStatus('current')
cacPositionTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 20), )
if mibBuilder.loadTexts: cacPositionTable.setStatus('current')
cacPositionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 20, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cacPositionLcId"))
if mibBuilder.loadTexts: cacPositionEntry.setStatus('current')
cacPositionLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cacPositionLcId.setStatus('current')
cacPositionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 20, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacPositionRowStatus.setStatus('current')
cacPositionSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 20, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacPositionSwitch.setStatus('current')
cacPositionTAMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 20, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("tatype1", 0), ("tatype2", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacPositionTAMeasType.setStatus('current')
cacPositionTA1MeasNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacPositionTA1MeasNum.setStatus('current')
cacPositionAoAStartTreshhold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacPositionAoAStartTreshhold.setStatus('current')
cacPositionAoAEndTreshhold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 20, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacPositionAoAEndTreshhold.setStatus('current')
cacPositionDistanceTreshhold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 20, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacPositionDistanceTreshhold.setStatus('current')
cacPositionRedirectionSwith = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 20, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacPositionRedirectionSwith.setStatus('current')
cacPositionRedirectionNet = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 20, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("geran", 0), ("utraTdd", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacPositionRedirectionNet.setStatus('current')
cacPositionReaccesNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 7, 20, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacPositionReaccesNum.setStatus('current')
cellAlgorithm = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8))
cac = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1))
cacTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1), )
if mibBuilder.loadTexts: cacTable.setStatus('current')
cacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cacLcId"))
if mibBuilder.loadTexts: cacEntry.setStatus('current')
cacLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cacLcId.setStatus('current')
cacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacRowStatus.setStatus('current')
cacAlgorithmTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacAlgorithmTag.setStatus('current')
cacType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("uePositionUnconcern", 1), ("uePositionConcerned", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacType.setStatus('current')
cacUlPrbTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacUlPrbTh.setStatus('current')
cacDlPrbTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacDlPrbTh.setStatus('current')
cacUlHcReservePrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacUlHcReservePrb.setStatus('current')
cacDlHcReservePrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacDlHcReservePrb.setStatus('current')
cacArpTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacArpTag.setStatus('current')
cacTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("cacTestModeOpen", 0), ("cacTestModeClose", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacTestMode.setStatus('current')
cacMaxActiveUeNumPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacMaxActiveUeNumPerCell.setStatus('current')
cacMaxActiveBearNumPerUe = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacMaxActiveBearNumPerUe.setStatus('current')
cacGbrThFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacGbrThFlag.setStatus('current')
cacUlGbrPrbTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacUlGbrPrbTh.setStatus('current')
cacDlGbrPrbTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacDlGbrPrbTh.setStatus('current')
cacNgbrThFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacNgbrThFlag.setStatus('current')
cacUlNgbrPrbTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacUlNgbrPrbTh.setStatus('current')
cacDlNgbrPrbTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacDlNgbrPrbTh.setStatus('current')
cacS1BandwidthTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacS1BandwidthTag.setStatus('current')
cacPriForReestablishUe = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("high", 0), ("low", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacPriForReestablishUe.setStatus('current')
cacMaxActiveUeNumTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacMaxActiveUeNumTag.setStatus('current')
cacMaxActiveBearNumPerCellTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacMaxActiveBearNumPerCellTag.setStatus('current')
cacMaxActiveBearNumPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacMaxActiveBearNumPerCell.setStatus('current')
cacPrbThFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacPrbThFlag.setStatus('current')
cacEmergencyPriorTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacEmergencyPriorTag.setStatus('current')
cacNominalActiveUeNumPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacNominalActiveUeNumPerCell.setStatus('current')
cacMaxQci1NumTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacMaxQci1NumTag.setStatus('current')
cacMaxQci1BearNumPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacMaxQci1BearNumPerCell.setStatus('current')
cacQci1LicenseFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cacQci1LicenseFlag.setStatus('current')
chacTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2), )
if mibBuilder.loadTexts: chacTable.setStatus('current')
chacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "chacLcId"))
if mibBuilder.loadTexts: chacEntry.setStatus('current')
chacLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: chacLcId.setStatus('current')
chacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacRowStatus.setStatus('current')
chacPrbTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacPrbTag.setStatus('current')
chacUlPrbTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacUlPrbTh.setStatus('current')
chacDlPrbTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacDlPrbTh.setStatus('current')
chacPrbThTimeToTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacPrbThTimeToTrig.setStatus('current')
chacUlPrbRBTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacUlPrbRBTh.setStatus('current')
chacDlPrbRBTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacDlPrbRBTh.setStatus('current')
chacRBThTimeToTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacRBThTimeToTrig.setStatus('current')
chacActiveUeTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacActiveUeTag.setStatus('current')
chacActiveUeHighLoadTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacActiveUeHighLoadTh.setStatus('current')
chacActiveUeSuperHighLoadTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacActiveUeSuperHighLoadTh.setStatus('current')
chacActiveUeUltraLoadTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacActiveUeUltraLoadTh.setStatus('current')
chacActiveUeRBTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacActiveUeRBTh.setStatus('current')
chacHighLoadT302 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacHighLoadT302.setStatus('current')
chacAcBarTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacAcBarTag.setStatus('current')
chacHighLoadAcBarFactorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacHighLoadAcBarFactorRate.setStatus('current')
chacHighLoadAcBarTimeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacHighLoadAcBarTimeRate.setStatus('current')
chacAcBarActInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacAcBarActInterval.setStatus('current')
chacCpuLoadTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacCpuLoadTag.setStatus('current')
chacRejectdepriType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("frequency", 0), ("eutra", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacRejectdepriType.setStatus('current')
chacRejectdepriTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("min5", 0), ("min10", 1), ("min15", 2), ("min30", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chacRejectdepriTimer.setStatus('current')
hc = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2))
hcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1), )
if mibBuilder.loadTexts: hcTable.setStatus('current')
hcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hcLcId"))
if mibBuilder.loadTexts: hcEntry.setStatus('current')
hcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: hcLcId.setStatus('current')
hcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcRowStatus.setStatus('current')
hcTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcTag.setStatus('current')
hcJudgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("l3HcTypeRsrpTh", 1), ("l3HcTypeRsrqTh", 2), ("l3HcTypeRsrqRsrqTh", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcJudgeType.setStatus('current')
hcCellSelectType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("atLeastOneErabAdmit", 0), ("mustAllGbrErabAdmit", 1), ("mustAllErabAdmit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcCellSelectType.setStatus('current')
hcServRsrpTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 97))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcServRsrpTh.setStatus('current')
hcServRsrqTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcServRsrqTh.setStatus('current')
hcAdjRsrpTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 97))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcAdjRsrpTh.setStatus('current')
hcAdjRsrqTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcAdjRsrqTh.setStatus('current')
hcAdjCellNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcAdjCellNum.setStatus('current')
hcFreqEffCqiTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcFreqEffCqiTh.setStatus('current')
hcPcellScellRsrpTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("rsrpTh0", 0), ("rsrpThPoint5", 1), ("rsrpTh1", 2), ("rsrpTh1point5", 3), ("rsrpTh2", 4), ("rsrpTh2point5", 5), ("rsrpTh3", 6), ("rsrpTh3point5", 7), ("rsrpTh4", 8), ("rsrpTh4point5", 9), ("rsrpTh5", 10), ("rsrpTh5point5", 11), ("rsrpTh6", 12), ("rsrpTh6point5", 13), ("rsrpTh7", 14), ("rsrpTh7point5", 15), ("rsrpTh8", 16), ("rsrpTh8point5", 17), ("rsrpTh9", 18), ("rsrpTh9point5", 19), ("rsrpTh10", 20), ("rsrpTh10point5", 21), ("rsrpTh11", 22), ("rsrpTh11point5", 23), ("rsrpTh12", 24), ("rsrpTh12point5", 25), ("rsrpTh13", 26), ("rsrpTh13point5", 27), ("rsrpTh14", 28), ("rsrpTh14point5", 29), ("rsrpTh15", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcPcellScellRsrpTh.setStatus('current')
hcDirectedHCTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcDirectedHCTag.setStatus('current')
hcTimeAntiShake = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcTimeAntiShake.setStatus('current')
hcTagBasedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("lowSpeedUserOut", 1), ("highSpeedUserOut", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcTagBasedSpeed.setStatus('current')
hcPubAlgorithmParaHSpdCellStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("lowSpeedCell", 0), ("highSpeedCell", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcPubAlgorithmParaHSpdCellStatus.setStatus('current')
hcLowSpeedUeShiftType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("redirect", 0), ("handover", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcLowSpeedUeShiftType.setStatus('current')
hcBlerHcIotTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcBlerHcIotTh.setStatus('current')
hcBlerHcRsrqTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcBlerHcRsrqTh.setStatus('current')
hcCSHoCfgSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcCSHoCfgSwitch.setStatus('current')
hcBlerWaitA4Time = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcBlerWaitA4Time.setStatus('current')
hcBlerBasedHcTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("sRVCC", 0), ("intraLteHcAndSRVCC", 1), ("intraLteHc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcBlerBasedHcTag.setStatus('current')
interRatHcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2), )
if mibBuilder.loadTexts: interRatHcTable.setStatus('current')
interRatHcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "interRatHcLcId"))
if mibBuilder.loadTexts: interRatHcEntry.setStatus('current')
interRatHcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: interRatHcLcId.setStatus('current')
interRatHcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatHcRowStatus.setStatus('current')
interRatCsfbSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatCsfbSwitch.setStatus('current')
interRatCsfbMeasFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatCsfbMeasFlag.setStatus('current')
interRatCsHandleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("notSpecific", 0), ("utraFdd", 1), ("utraTdd", 2), ("geran", 3), ("cdma20001XRTT", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatCsHandleNetwork.setStatus('current')
interRatSrvccTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatSrvccTag.setStatus('current')
interRatSrvccLackOfConditionStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("cs", 0), ("ps", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatSrvccLackOfConditionStrategy.setStatus('current')
interRatPsHandleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("utraFdd", 1), ("utraTdd", 2), ("geran", 3), ("cdma2000HRPD", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatPsHandleNetwork.setStatus('current')
interRatPsHandleSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatPsHandleSwitch.setStatus('current')
interRatCsfbHandlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("ho", 0), ("redirect", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatCsfbHandlePattern.setStatus('current')
interRatPsHandlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("ho", 0), ("redirect", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatPsHandlePattern.setStatus('current')
interRatPsR8R9FinalNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("utraFdd", 1), ("utraTdd", 2), ("geran", 3), ("cdma2000HRPD", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatPsR8R9FinalNetwork.setStatus('current')
interRatPsR10FinalNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("utraFdd", 1), ("utraTdd", 2), ("geran", 3), ("cdma2000HRPD", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatPsR10FinalNetwork.setStatus('current')
interRatPsMeasCtrlSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatPsMeasCtrlSwitch.setStatus('current')
interRatDelInterMeasSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatDelInterMeasSwitch.setStatus('current')
interRatBlindSrvccSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatBlindSrvccSwitch.setStatus('current')
ppHcAlgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 3), )
if mibBuilder.loadTexts: ppHcAlgTable.setStatus('current')
ppHcAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ppHcAlgLcId"))
if mibBuilder.loadTexts: ppHcAlgEntry.setStatus('current')
ppHcAlgLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: ppHcAlgLcId.setStatus('current')
ppHcAlgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppHcAlgRowStatus.setStatus('current')
ppHcAlgTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppHcAlgTag.setStatus('current')
ppHcUeStayTimeTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppHcUeStayTimeTh.setStatus('current')
ppHcPunishStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppHcPunishStep.setStatus('current')
ppHcPunishMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppHcPunishMax.setStatus('current')
ppHcPunishFreeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 2, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppHcPunishFreeTimer.setStatus('current')
icic = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3))
icicTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1), )
if mibBuilder.loadTexts: icicTable.setStatus('current')
icicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "icicLcId"))
if mibBuilder.loadTexts: icicEntry.setStatus('current')
icicLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: icicLcId.setStatus('current')
icicRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicRowStatus.setStatus('current')
icicTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicTag.setStatus('current')
icicAlgoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("icicAlgoTypeSaticType", 0), ("icicAlgoTypeSemiStaticType", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicAlgoType.setStatus('current')
icicCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("icicCellTypeOne", 0), ("icicCellTypeTwo", 1), ("icicCellTypeThree", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicCellType.setStatus('current')
icicUlPmax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 33))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicUlPmax.setStatus('current')
icicDlPamax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("db3", 0), ("db2", 1), ("db1", 2), ("db0", 3), ("dbn1", 4), ("dbn2", 5), ("dbn3", 6), ("dbn6", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicDlPamax.setStatus('current')
icicHiiSetPriA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicHiiSetPriA1.setStatus('current')
icicHiiSetPriA2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicHiiSetPriA2.setStatus('current')
icicEdgeUeUlPrbSchedPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicEdgeUeUlPrbSchedPri1.setStatus('current')
icicEdgeUeUlPrbSchedPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicEdgeUeUlPrbSchedPri2.setStatus('current')
icicEdgeUeUlPrbSchedPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicEdgeUeUlPrbSchedPri3.setStatus('current')
icicEdgeUeUlPrbSchedPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicEdgeUeUlPrbSchedPri4.setStatus('current')
icicCenterUeUlPrbSchedPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicCenterUeUlPrbSchedPri1.setStatus('current')
icicCenterUeUlPrbSchedPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicCenterUeUlPrbSchedPri2.setStatus('current')
icicCenterUeUlPrbSchedPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicCenterUeUlPrbSchedPri3.setStatus('current')
icicCenterUeUlPrbSchedPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicCenterUeUlPrbSchedPri4.setStatus('current')
icicOiThresholed1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicOiThresholed1.setStatus('current')
icicOiThresholed2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicOiThresholed2.setStatus('current')
icicEdgeUeDlPrbSchedPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicEdgeUeDlPrbSchedPri1.setStatus('current')
icicEdgeUeDlPrbSchedPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicEdgeUeDlPrbSchedPri2.setStatus('current')
icicCenterUeDlPrbSchedPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicCenterUeDlPrbSchedPri1.setStatus('current')
icicCenterUeDlPrbSchedPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicCenterUeDlPrbSchedPri2.setStatus('current')
icicRntpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicRntpTimer.setStatus('current')
icicTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("icicTestModeOpen", 0), ("icicTestModeClose", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicTestMode.setStatus('current')
icicUlStartPrbNoForEdgeUe = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicUlStartPrbNoForEdgeUe.setStatus('current')
icicDlStartPrbNoForEdgeUe = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicDlStartPrbNoForEdgeUe.setStatus('current')
icicUlPrbLenForEdgeUe = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicUlPrbLenForEdgeUe.setStatus('current')
icicDlPrbLenForEdgeUe = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicDlPrbLenForEdgeUe.setStatus('current')
icicMacStaticConfM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicMacStaticConfM1.setStatus('current')
icicMacStaticConfM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicMacStaticConfM2.setStatus('current')
icicMacSemiStaticConfUlM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicMacSemiStaticConfUlM1.setStatus('current')
icicMacSemiStaticConfDlM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicMacSemiStaticConfDlM1.setStatus('current')
icicMacSemiStaticConfM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicMacSemiStaticConfM2.setStatus('current')
icicEdgeUeDlPrbSchedTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: icicEdgeUeDlPrbSchedTag.setStatus('current')
lbc = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4))
lbcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1), )
if mibBuilder.loadTexts: lbcTable.setStatus('current')
lbcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "lbcLcId"))
if mibBuilder.loadTexts: lbcEntry.setStatus('current')
lbcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: lbcLcId.setStatus('current')
lbcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcRowStatus.setStatus('current')
lbcAdjCellBlanceAlgoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("balanceFixThresholdAlgoType", 0), ("balanceDeltaThresholdAlgoType", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellBlanceAlgoType.setStatus('current')
lbcAdjCellBlanceRecoverAlgoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("balanceRecoverFixThresholdAlgoType", 0), ("balanceRecoverDeltaThresholdAlgoType", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellBlanceRecoverAlgoType.setStatus('current')
lbcUlHardwardTh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcUlHardwardTh1.setStatus('current')
lbcDlHardwardTh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcDlHardwardTh1.setStatus('current')
lbcUlS1TnlTh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcUlS1TnlTh1.setStatus('current')
lbcDlS1TnlTh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcDlS1TnlTh1.setStatus('current')
lbcUlHardwardTh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcUlHardwardTh2.setStatus('current')
lbcDlHardwardTh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcDlHardwardTh2.setStatus('current')
lbcUlS1TnlTh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcUlS1TnlTh2.setStatus('current')
lbcDlS1TnlTh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcDlS1TnlTh2.setStatus('current')
lbcAdjCellUlHardwardTh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellUlHardwardTh3.setStatus('current')
lbcAdjCellDlHardwardTh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellDlHardwardTh3.setStatus('current')
lbcAdjCellUlS1TnlTh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellUlS1TnlTh3.setStatus('current')
lbcAdjCellDlS1TnlTh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellDlS1TnlTh3.setStatus('current')
lbcAdjCellUlPrbUsageTh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellUlPrbUsageTh3.setStatus('current')
lbcAdjCellDlPrbUsageTh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellDlPrbUsageTh3.setStatus('current')
lbcAdjCellUlHardwardTh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellUlHardwardTh4.setStatus('current')
lbcAdjCellDlHardwardTh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellDlHardwardTh4.setStatus('current')
lbcAdjCellUlS1TnlTh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellUlS1TnlTh4.setStatus('current')
lbcAdjCellDlS1TnlTh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lbcLowLoad", 0), ("lbcMediumLoad", 1), ("lbcHighLoad", 2), ("lbcOverLoad", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellDlS1TnlTh4.setStatus('current')
lbcAdjCellUlPrbUsageTh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellUlPrbUsageTh4.setStatus('current')
lbcAdjCellDlPrbUsageTh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcAdjCellDlPrbUsageTh4.setStatus('current')
lbcRedirectionFreqBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 61, 62)).clone(namedValues=NamedValues(("band1", 1), ("band2", 2), ("band3", 3), ("band4", 4), ("band5", 5), ("band7", 7), ("band8", 8), ("band9", 9), ("band10", 10), ("band11", 11), ("band12", 12), ("band13", 13), ("band14", 14), ("band17", 17), ("band18", 18), ("band19", 19), ("band20", 20), ("band21", 21), ("band22", 22), ("band23", 23), ("band24", 24), ("band25", 25), ("band26", 26), ("band33", 33), ("band34", 34), ("band35", 35), ("band36", 36), ("band37", 37), ("band38", 38), ("band39", 39), ("band40", 40), ("band41", 41), ("band44", 44), ("band61", 61), ("band62", 62)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcRedirectionFreqBand.setStatus('current')
lbcRedirectionCenterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcRedirectionCenterFreq.setStatus('current')
lbcEveryMigrationTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcEveryMigrationTh.setStatus('current')
lbcRedirectionMultiBandInfoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 42), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcRedirectionMultiBandInfoFlag.setStatus('current')
lbcRedirectionMultiBandInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(38, 38), ValueRangeConstraint(41, 41), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcRedirectionMultiBandInfo.setStatus('current')
lbcRedirectionEARFCN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 4, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbcRedirectionEARFCN.setStatus('current')
ulPowerControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5))
ulPowerControlTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1), )
if mibBuilder.loadTexts: ulPowerControlTable.setStatus('current')
ulPowerControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ulPwrLcId"))
if mibBuilder.loadTexts: ulPowerControlEntry.setStatus('current')
ulPwrLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: ulPwrLcId.setStatus('current')
ulPwrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrRowStatus.setStatus('current')
ulPwrPucchSinrTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrPucchSinrTarget.setStatus('current')
ulPwrAlpha = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("al0", 0), ("al04", 1), ("al05", 2), ("al06", 3), ("al07", 4), ("al08", 5), ("al09", 6), ("al1", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrAlpha.setStatus('current')
ulPwrP0NominalPusch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-126, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrP0NominalPusch.setStatus('current')
ulPwrP0NominalPucch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, -96))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrP0NominalPucch.setStatus('current')
ulPwrDeltaFPucchFormat1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("deltaFn2", 0), ("deltaF0", 1), ("deltaF2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrDeltaFPucchFormat1.setStatus('current')
ulPwrDeltaFPucchFormat1b = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("deltaF1", 0), ("deltaF3", 1), ("deltaF5", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrDeltaFPucchFormat1b.setStatus('current')
ulPwrDeltaFPucchFormat2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("deltaFn2", 0), ("deltaF0", 1), ("deltaF1", 2), ("deltaF2", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrDeltaFPucchFormat2.setStatus('current')
ulPwrDeltaFPucchFormat2a = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("deltaFn2", 0), ("deltaF0", 1), ("deltaF2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrDeltaFPucchFormat2a.setStatus('current')
ulPwrDeltaFPucchFormat2b = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("deltaFn2", 0), ("deltaF0", 1), ("deltaF2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrDeltaFPucchFormat2b.setStatus('current')
ulPwrDeltaPreambleMsg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("deltaPreambleMsg3DbN2", 0), ("deltaPreambleMsg3Db0", 1), ("deltaPreambleMsg3Db2", 2), ("deltaPreambleMsg3Db4", 3), ("deltaPreambleMsg3Db6", 4), ("deltaPreambleMsg3Db8", 5), ("deltaPreambleMsg3Db10", 6), ("deltaPreambleMsg3Db12", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrDeltaPreambleMsg3.setStatus('current')
ulPwrP0UePuschNonPersistantSched = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-8, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrP0UePuschNonPersistantSched.setStatus('current')
ulPwrDeltaMcsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("en0", 0), ("en1", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrDeltaMcsEnabled.setStatus('current')
ulPwrAccumulationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 0)).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrAccumulationEnabled.setStatus('current')
ulPwrP0uePucch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-8, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrP0uePucch.setStatus('current')
ulPwrSrsOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrSrsOffset.setStatus('current')
ulPwrFilterCoeff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("fc0", 0), ("fc1", 1), ("fc2", 2), ("fc3", 3), ("fc4", 4), ("fc5", 5), ("fc6", 6), ("fc7", 7), ("fc8", 8), ("fc9", 9), ("fc11", 10), ("fc13", 11), ("fc15", 12), ("fc17", 13), ("fc19", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrFilterCoeff.setStatus('current')
ulPwrPuschTpcFormatChoice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("format3", 0), ("format3A", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrPuschTpcFormatChoice.setStatus('current')
ulPwrPucchTpcFormatChoice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("format3", 0), ("format3A", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrPucchTpcFormatChoice.setStatus('current')
ulPwrPuschPowerSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrPuschPowerSwitch.setStatus('current')
ulPwrPucchPowerSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrPucchPowerSwitch.setStatus('current')
ulPwrMsg3PowerCtrlSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrMsg3PowerCtrlSwitch.setStatus('current')
ulPwrPowerCtrlDci3Switch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrPowerCtrlDci3Switch.setStatus('current')
ulPwrPHRSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrPHRSwitch.setStatus('current')
ulPwrDeltaFPUCCHFormat3R10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("deltaFn1", 0), ("delataF0", 1), ("delataF1", 2), ("delataF2", 3), ("delataF3", 4), ("delataF4", 5), ("delataF5", 6), ("delataF6", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrDeltaFPUCCHFormat3R10.setStatus('current')
ulPwrDeltaFPUCCHFormat1bCSR10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("delataF1", 0), ("delataF2", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrDeltaFPUCCHFormat1bCSR10.setStatus('current')
ulPwrDeltaTXDoffsetPUCCHFormat3R10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("db0", 0), ("dbn2", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrDeltaTXDoffsetPUCCHFormat3R10.setStatus('current')
ulPwrDeltaTXDoffsetPUCCHFormat22a2bR10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("db0", 0), ("dbn2", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrDeltaTXDoffsetPUCCHFormat22a2bR10.setStatus('current')
ulPwrDeltaTXDoffsetPUCCHFormat1a1bR10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("db0", 0), ("dbn2", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrDeltaTXDoffsetPUCCHFormat1a1bR10.setStatus('current')
ulPwrDeltaTXDoffsetPUCCHFormat1R10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("db0", 0), ("dbn2", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrDeltaTXDoffsetPUCCHFormat1R10.setStatus('current')
ulPwrSrsOffsetAp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrSrsOffsetAp.setStatus('current')
ulPwrPuschDci3or3aMinPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrPuschDci3or3aMinPeriod.setStatus('current')
ulPwrPucchDci3or3aMinPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrPucchDci3or3aMinPeriod.setStatus('current')
ulPwrCtrlOptSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulPwrCtrlOptSwitch.setStatus('current')
mroTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2), )
if mibBuilder.loadTexts: mroTable.setStatus('current')
mroEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "mroLcId"))
if mibBuilder.loadTexts: mroEntry.setStatus('current')
mroLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: mroLcId.setStatus('current')
mroRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroRowStatus.setStatus('current')
mroSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroSwitch.setStatus('current')
mroTooEarlyHoTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroTooEarlyHoTh.setStatus('current')
mroTooLateHoTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroTooLateHoTh.setStatus('current')
mroWrongHoTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroWrongHoTh.setStatus('current')
mroPingPangHoTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroPingPangHoTh.setStatus('current')
mroTotalSucHoTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroTotalSucHoTh.setStatus('current')
mroOffsetStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("offsetStepPoint5", 0), ("offsetStep1", 1), ("offsetStep1Point5", 2), ("offsetStep2", 3), ("offsetStep2Point5", 4), ("offsetStep3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroOffsetStep.setStatus('current')
mroHysteresisStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("hysteresisStepPoint5", 0), ("hysteresisStep1", 1), ("hysteresisStep1Point5", 2), ("hysteresisStep2", 3), ("hysteresisStep2Point5", 4), ("hysteresisStep3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroHysteresisStep.setStatus('current')
mroStage = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("optimizeTrig", 0), ("pmEvaluate", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroStage.setStatus('current')
mroRsrpTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 97))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroRsrpTh.setStatus('current')
mroRsrqTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroRsrqTh.setStatus('current')
mroHoTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroHoTh.setStatus('current')
mroRollBackTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mroRollBackTrigger.setStatus('current')
mroPingPangTimeTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroPingPangTimeTh.setStatus('current')
mroTotalPingPangTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroTotalPingPangTh.setStatus('current')
mroPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroPeriod.setStatus('current')
mroTooEarlyHoNumTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroTooEarlyHoNumTh.setStatus('current')
mroTooLateHoNumTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroTooLateHoNumTh.setStatus('current')
mroWrongHoNumTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroWrongHoNumTh.setStatus('current')
mroPingPangHoNumTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroPingPangHoNumTh.setStatus('current')
mroHoNumRatioRelation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("and", 0), ("or", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroHoNumRatioRelation.setStatus('current')
mroEventRsrpStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("rsrpStep1", 1), ("rsrpStep2", 2), ("rsrpStep3", 3), ("rsrpStep4", 4), ("rsrpStep5", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroEventRsrpStep.setStatus('current')
mroA2ThBaseHighTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA2ThBaseHighTh.setStatus('current')
mroA2ThBaseLowTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA2ThBaseLowTh.setStatus('current')
mroA3OffsetThBaseHighTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60)).clone(namedValues=NamedValues(("a3OffsetMinus15", 0), ("a3OffsetMinus14Point5", 1), ("a3OffsetMinus14", 2), ("a3OffsetMinus13Point5", 3), ("a3OffsetMinus13", 4), ("a3OffsetMinus12Point5", 5), ("a3OffsetMinus12", 6), ("a3OffsetMinus11Point5", 7), ("a3OffsetMinus11", 8), ("a3OffsetMinus10Point5", 9), ("a3OffsetMinus10", 10), ("a3OffsetMinus9Point5", 11), ("a3OffsetMinus9", 12), ("a3OffsetMinus8Point5", 13), ("a3OffsetMinus8", 14), ("a3OffsetMinus7Point5", 15), ("a3OffsetMinus7", 16), ("a3OffsetMinus6Point5", 17), ("a3OffsetMinus6", 18), ("a3OffsetMinus5Point5", 19), ("a3OffsetMinus5", 20), ("a3OffsetMinus4Point5", 21), ("a3OffsetMinus4", 22), ("a3OffsetMinus3Point5", 23), ("a3OffsetMinus3", 24), ("a3OffsetMinus2Point5", 25), ("a3OffsetMinus2", 26), ("a3OffsetMinus1Point5", 27), ("a3OffsetMinus1", 28), ("a3OffsetMinusPoint5", 29), ("a3Offset0", 30), ("a3OffsetPoint5", 31), ("a3Offset1", 32), ("a3Offset1Point5", 33), ("a3Offset2", 34), ("a3Offset2Point5", 35), ("a3Offset3", 36), ("a3Offset3Point5", 37), ("a3Offset4", 38), ("a3Offset4Point5", 39), ("a3Offset5", 40), ("a3Offset5Point5", 41), ("a3Offset6", 42), ("a3Offset6Point5", 43), ("a3Offset7", 44), ("a3Offset7Point5", 45), ("a3Offset8", 46), ("a3Offset8Point5", 47), ("a3Offset9", 48), ("a3Offset9Point5", 49), ("a3Offset10", 50), ("a3Offset10Point5", 51), ("a3Offset11", 52), ("a3Offset11Point5", 53), ("a3Offset12", 54), ("a3Offset12Point5", 55), ("a3Offset13", 56), ("a3Offset13Point5", 57), ("a3Offset14", 58), ("a3Offset14Point5", 59), ("a3Offset15", 60)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA3OffsetThBaseHighTh.setStatus('current')
mroA3OffsetThBaseLowTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60)).clone(namedValues=NamedValues(("a3OffsetMinus15", 0), ("a3OffsetMinus14Point5", 1), ("a3OffsetMinus14", 2), ("a3OffsetMinus13Point5", 3), ("a3OffsetMinus13", 4), ("a3OffsetMinus12Point5", 5), ("a3OffsetMinus12", 6), ("a3OffsetMinus11Point5", 7), ("a3OffsetMinus11", 8), ("a3OffsetMinus10Point5", 9), ("a3OffsetMinus10", 10), ("a3OffsetMinus9Point5", 11), ("a3OffsetMinus9", 12), ("a3OffsetMinus8Point5", 13), ("a3OffsetMinus8", 14), ("a3OffsetMinus7Point5", 15), ("a3OffsetMinus7", 16), ("a3OffsetMinus6Point5", 17), ("a3OffsetMinus6", 18), ("a3OffsetMinus5Point5", 19), ("a3OffsetMinus5", 20), ("a3OffsetMinus4Point5", 21), ("a3OffsetMinus4", 22), ("a3OffsetMinus3Point5", 23), ("a3OffsetMinus3", 24), ("a3OffsetMinus2Point5", 25), ("a3OffsetMinus2", 26), ("a3OffsetMinus1Point5", 27), ("a3OffsetMinus1", 28), ("a3OffsetMinusPoint5", 29), ("a3Offset0", 30), ("a3OffsetPoint5", 31), ("a3Offset1", 32), ("a3Offset1Point5", 33), ("a3Offset2", 34), ("a3Offset2Point5", 35), ("a3Offset3", 36), ("a3Offset3Point5", 37), ("a3Offset4", 38), ("a3Offset4Point5", 39), ("a3Offset5", 40), ("a3Offset5Point5", 41), ("a3Offset6", 42), ("a3Offset6Point5", 43), ("a3Offset7", 44), ("a3Offset7Point5", 45), ("a3Offset8", 46), ("a3Offset8Point5", 47), ("a3Offset9", 48), ("a3Offset9Point5", 49), ("a3Offset10", 50), ("a3Offset10Point5", 51), ("a3Offset11", 52), ("a3Offset11Point5", 53), ("a3Offset12", 54), ("a3Offset12Point5", 55), ("a3Offset13", 56), ("a3Offset13Point5", 57), ("a3Offset14", 58), ("a3Offset14Point5", 59), ("a3Offset15", 60)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA3OffsetThBaseLowTh.setStatus('current')
mroA3TTTThBaseHighTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("ms0", 0), ("ms40", 1), ("ms64", 2), ("ms80", 3), ("ms100", 4), ("ms128", 5), ("ms160", 6), ("ms256", 7), ("ms320", 8), ("ms480", 9), ("ms512", 10), ("ms640", 11), ("ms1024", 12), ("ms1280", 13), ("ms2560", 14), ("ms5120", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA3TTTThBaseHighTh.setStatus('current')
mroA3TTTThBaseLowTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("ms0", 0), ("ms40", 1), ("ms64", 2), ("ms80", 3), ("ms100", 4), ("ms128", 5), ("ms160", 6), ("ms256", 7), ("ms320", 8), ("ms480", 9), ("ms512", 10), ("ms640", 11), ("ms1024", 12), ("ms1280", 13), ("ms2560", 14), ("ms5120", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA3TTTThBaseLowTh.setStatus('current')
mroA3HysBaseHighTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("hysteresis0", 0), ("hysteresisPoint5", 1), ("hysteresis1", 2), ("hysteresis1point5", 3), ("hysteresis2", 4), ("hysteresis2point5", 5), ("hysteresis3", 6), ("hysteresis3point5", 7), ("hysteresis4", 8), ("hysteresis4point5", 9), ("hysteresis5", 10), ("hysteresis5point5", 11), ("hysteresis6", 12), ("hysteresis6point5", 13), ("hysteresis7", 14), ("hysteresis7point5", 15), ("hysteresis8", 16), ("hysteresis8point5", 17), ("hysteresis9", 18), ("hysteresis9point5", 19), ("hysteresis10", 20), ("hysteresis10point5", 21), ("hysteresis11", 22), ("hysteresis11point5", 23), ("hysteresis12", 24), ("hysteresis12point5", 25), ("hysteresis13", 26), ("hysteresis13point5", 27), ("hysteresis14", 28), ("hysteresis14point5", 29), ("hysteresis15", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA3HysBaseHighTh.setStatus('current')
mroA3HysBaseLowTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("hysteresis0", 0), ("hysteresisPoint5", 1), ("hysteresis1", 2), ("hysteresis1point5", 3), ("hysteresis2", 4), ("hysteresis2point5", 5), ("hysteresis3", 6), ("hysteresis3point5", 7), ("hysteresis4", 8), ("hysteresis4point5", 9), ("hysteresis5", 10), ("hysteresis5point5", 11), ("hysteresis6", 12), ("hysteresis6point5", 13), ("hysteresis7", 14), ("hysteresis7point5", 15), ("hysteresis8", 16), ("hysteresis8point5", 17), ("hysteresis9", 18), ("hysteresis9point5", 19), ("hysteresis10", 20), ("hysteresis10point5", 21), ("hysteresis11", 22), ("hysteresis11point5", 23), ("hysteresis12", 24), ("hysteresis12point5", 25), ("hysteresis13", 26), ("hysteresis13point5", 27), ("hysteresis14", 28), ("hysteresis14point5", 29), ("hysteresis15", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA3HysBaseLowTh.setStatus('current')
mroA4ThBaseHighTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA4ThBaseHighTh.setStatus('current')
mroA4ThBaseLowTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA4ThBaseLowTh.setStatus('current')
mroA5Th1BaseHighTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA5Th1BaseHighTh.setStatus('current')
mroA5Th1BaseLowTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA5Th1BaseLowTh.setStatus('current')
mroA5Th2BaseHighTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA5Th2BaseHighTh.setStatus('current')
mroA5Th2BaseLowTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroA5Th2BaseLowTh.setStatus('current')
mroCellParaAdjRatioTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 5, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mroCellParaAdjRatioTh.setStatus('current')
optionalFunction = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6))
opFuncTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 1), )
if mibBuilder.loadTexts: opFuncTable.setStatus('current')
opFuncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "opFuncLcId"))
if mibBuilder.loadTexts: opFuncEntry.setStatus('current')
opFuncLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: opFuncLcId.setStatus('current')
opFuncRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opFuncRowStatus.setStatus('current')
opFuncFeatureGroupFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opFuncFeatureGroupFlag.setStatus('current')
opFuncRedirectionFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opFuncRedirectionFlag.setStatus('current')
opFuncDrxFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opFuncDrxFlag.setStatus('current')
opFuncCdma2000Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opFuncCdma2000Flag.setStatus('current')
opFuncDrxDelayFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opFuncDrxDelayFlag.setStatus('current')
opFuncDrxDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opFuncDrxDelayTimer.setStatus('current')
opFuncRueJudgeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opFuncRueJudgeFlag.setStatus('current')
opFuncDrxDelayFlagForConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opFuncDrxDelayFlagForConnect.setStatus('current')
opFuncDrxDelayTimerForConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opFuncDrxDelayTimerForConnect.setStatus('current')
hlTestSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2), )
if mibBuilder.loadTexts: hlTestSwitchTable.setStatus('current')
hlTestSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hlTestSwitchLcId"))
if mibBuilder.loadTexts: hlTestSwitchEntry.setStatus('current')
hlTestSwitchLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: hlTestSwitchLcId.setStatus('current')
hlTestSwitchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchRowStatus.setStatus('current')
hlTestSwitchIcicTestSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchIcicTestSwitch.setStatus('current')
hlTestSwitchUlStartPrbNoForEdgeUe = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchUlStartPrbNoForEdgeUe.setStatus('current')
hlTestSwitchDlStartPrbNoForEdgeUe = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchDlStartPrbNoForEdgeUe.setStatus('current')
hlTestSwitchUlPrbLenForEdgeUe = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchUlPrbLenForEdgeUe.setStatus('current')
hlTestSwitchDlPrbLenForEdgeUe = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchDlPrbLenForEdgeUe.setStatus('current')
hlTestSwitchSrsTestSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchSrsTestSwitch.setStatus('current')
hlTestSwitchSrsBandwidthCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("bw0", 0), ("bw1", 1), ("bw2", 2), ("bw3", 3), ("bw4", 4), ("bw5", 5), ("bw6", 6), ("bw7", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchSrsBandwidthCfg.setStatus('current')
hlTestSwitchSrsSubfrmCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("sc0", 0), ("sc1", 1), ("sc2", 2), ("sc3", 3), ("sc4", 4), ("sc5", 5), ("sc6", 6), ("sc7", 7), ("sc8", 8), ("sc9", 9), ("sc10", 10), ("sc11", 11), ("sc12", 12), ("sc13", 13), ("sc14", 14), ("sc15", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchSrsSubfrmCfg.setStatus('current')
hlTestSwitchSrsPeriodicity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("ms2", 0), ("ms5", 1), ("ms10", 2), ("ms20", 3), ("ms40", 4), ("ms80", 5), ("ms160", 6), ("ms320", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchSrsPeriodicity.setStatus('current')
hlTestSwitchSrsUpptsOneSymbol = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchSrsUpptsOneSymbol.setStatus('current')
hlTestSwitchPeriodMeasForRptStrongestCellCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchPeriodMeasForRptStrongestCellCfg.setStatus('current')
hlTestSwitchApSrsPeriodicity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("ms2", 0), ("ms5", 1), ("ms10", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchApSrsPeriodicity.setStatus('current')
hlTestSwitchApSrsTestSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchApSrsTestSwitch.setStatus('current')
hlTestSwitchTm9PrecodingSrsSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchTm9PrecodingSrsSwitch.setStatus('current')
hlTestSwitchSrsShortPeriodicity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("ms2", 0), ("ms5", 1), ("ms10", 2), ("ms20", 3), ("ms40", 4), ("ms80", 5), ("ms160", 6), ("ms320", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchSrsShortPeriodicity.setStatus('current')
hlTestSwitchUplinkMimoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchUplinkMimoSwitch.setStatus('current')
hlTestSwitchVIPScheAlgorithmSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("close", 0), ("absolutVIP", 1), ("relativeVIP", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchVIPScheAlgorithmSwitch.setStatus('current')
hlTestSwitchLbLogProtectedSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("offlog", 0), ("openlog", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchLbLogProtectedSwitch.setStatus('current')
hlTestSwitchLbLogRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("once", 0), ("recycle", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchLbLogRecordType.setStatus('current')
hlTestSwitchDrxUeNumSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchDrxUeNumSwitch.setStatus('current')
hlTestSwitchDrxUeNumTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchDrxUeNumTh.setStatus('current')
hlTestSwitchDlReceiveDataCore = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("core2", 0), ("core4", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchDlReceiveDataCore.setStatus('current')
hlTestSwitcErabTimeDelayRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitcErabTimeDelayRatio.setStatus('current')
hlTestBadCoverageRejectQci1Setup = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestBadCoverageRejectQci1Setup.setStatus('current')
hlTestSwitchPdschPa = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("n6dB", 0), ("n4dot77dB", 1), ("n3dB", 2), ("n1dot77dB", 3), ("p0dB", 4), ("p1dB", 5), ("p2dB", 6), ("p3dB", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchPdschPa.setStatus('current')
hlTestSwitchVipUePa = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("n6dB", 0), ("n4dot77dB", 1), ("n3dB", 2), ("n1dot77dB", 3), ("p0dB", 4), ("p1dB", 5), ("p2dB", 6), ("p3dB", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchVipUePa.setStatus('current')
hlTestSwitchcellAdjCellPwrchgduration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchcellAdjCellPwrchgduration.setStatus('current')
hlTestSwitchcellAdjCellReducePowerSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 38), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchcellAdjCellReducePowerSwitch.setStatus('current')
hlTestSwitchcellAdjCellRsrpDifferTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchcellAdjCellRsrpDifferTh.setStatus('current')
hlTestSwitchcellAdjCellCheckStart = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchcellAdjCellCheckStart.setStatus('current')
hlTestSwitchcellAdjCellCheckNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchcellAdjCellCheckNum.setStatus('current')
hlTestSwitchcellUpIoTupOffsetSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 44), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchcellUpIoTupOffsetSwitch.setStatus('current')
hlTestSwitchsourceCellPowerDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchsourceCellPowerDelta.setStatus('current')
hlTestSwitchAdjCellRecoverRsrpOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchAdjCellRecoverRsrpOffset.setStatus('current')
hlTestSwitchVolteAppointFre = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 48), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchVolteAppointFre.setStatus('current')
hlTestSwitchVolteCarrierFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchVolteCarrierFreq.setStatus('current')
hlTestSwitchVolteAppointBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 50), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 3, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 61)).clone(namedValues=NamedValues(("band1", 1), ("band3", 3), ("band32", 32), ("band33", 33), ("band34", 34), ("band35", 35), ("band36", 36), ("band37", 37), ("band38", 38), ("band39", 39), ("band40", 40), ("band41", 41), ("band61", 61)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchVolteAppointBand.setStatus('current')
hlTestBadCoverageHoDelaySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 51), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestBadCoverageHoDelaySwitch.setStatus('current')
hlTestSRVCCDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSRVCCDelayTimer.setStatus('current')
hlTestSwitchSCellRsrpThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchSCellRsrpThr.setStatus('current')
hlTestSwitchAdjCellPowerReducedStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchAdjCellPowerReducedStep.setStatus('current')
hlTestSwitchAdjCellPowerReducedNumThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchAdjCellPowerReducedNumThr.setStatus('current')
hlTestSwitchTENDA1RSRP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchTENDA1RSRP.setStatus('current')
hlTestSwitchTENDA2RSRP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchTENDA2RSRP.setStatus('current')
hlTestSwitchA1RSRP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchA1RSRP.setStatus('current')
hlTestSwitchA2RSRP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchA2RSRP.setStatus('current')
hlTestSwitchVipDRXSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 60), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchVipDRXSwitch.setStatus('current')
hlTestSwitchCommonUserMRDelSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 61), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchCommonUserMRDelSwitch.setStatus('current')
hlTestSwitchUeLostTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 67), Bits().clone(namedValues=NamedValues(("ui", 0), ("rlc", 1), ("ack", 2), ("ta", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchUeLostTag.setStatus('current')
hlTestSwitchVolteUIProportion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 70), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchVolteUIProportion.setStatus('current')
hlTestSwitchNormalUIProportion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 71), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchNormalUIProportion.setStatus('current')
hlTestSwitchMeasOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchMeasOffset.setStatus('current')
hlTestSwitchQciAppointFre = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 73), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchQciAppointFre.setStatus('current')
hlTestSwitchQciCarrierFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 74), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchQciCarrierFreq.setStatus('current')
hlTestSwitchQciAppointBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 75), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 3, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 61)).clone(namedValues=NamedValues(("band1", 1), ("band3", 3), ("band32", 32), ("band33", 33), ("band34", 34), ("band35", 35), ("band36", 36), ("band37", 37), ("band38", 38), ("band39", 39), ("band40", 40), ("band41", 41), ("band61", 61)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchQciAppointBand.setStatus('current')
hlTestSwitchcellUpIoTupOffsetUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 76), Bits().clone(namedValues=NamedValues(("ul", 0), ("dl", 1), ("voice", 2), ("video", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchcellUpIoTupOffsetUserType.setStatus('current')
hlTestSwitchQRxLevMinOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 79), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("minusDbm30", 0), ("minusDbm28", 1), ("minusDbm26", 2), ("minusDbm24", 3), ("minusDbm22", 4), ("minusDbm20", 5), ("minusDbm18", 6), ("minusDbm16", 7), ("minusDbm14", 8), ("minusDbm12", 9), ("minusDbm10", 10), ("minusDbm8", 11), ("minusDbm6", 12), ("minusDbm4", 13), ("minusDbm2", 14), ("dbm0", 15), ("dbm2", 16), ("dbm4", 17), ("dbm6", 18), ("dbm8", 19), ("dbm10", 20), ("dbm12", 21), ("dbm14", 22), ("dbm16", 23), ("dbm18", 24), ("dbm20", 25), ("dbm22", 26), ("dbm24", 27), ("dbm26", 28), ("dbm28", 29), ("dbm30", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchQRxLevMinOffset.setStatus('current')
hlTestSwitchMrCfgPriSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 80), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchMrCfgPriSwitch.setStatus('current')
hlTestSwitch256QAMSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 81), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitch256QAMSwitch.setStatus('current')
hlTestSwitchcaDownlinkSwitchTLS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 84), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchcaDownlinkSwitchTLS.setStatus('current')
hlTestSwitchcaUplinkSwitchTLS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 85), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchcaUplinkSwitchTLS.setStatus('current')
hlTestSwitchlmcMlbAlgorithmTagTLS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 86), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchlmcMlbAlgorithmTagTLS.setStatus('current')
hlTestSwitchmroSwitchTLS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 6, 2, 1, 87), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlTestSwitchmroSwitchTLS.setStatus('current')
schedule = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7))
macAlgorithmNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1))
macUpAlgBaseParaTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1), )
if mibBuilder.loadTexts: macUpAlgBaseParaTable.setStatus('current')
macUpAlgBaseParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "macUpAlgorithmLcId"))
if mibBuilder.loadTexts: macUpAlgBaseParaEntry.setStatus('current')
macUpAlgorithmLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: macUpAlgorithmLcId.setStatus('current')
macUpAlgorithmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmRowStatus.setStatus('current')
macUpAlgorithmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("rr", 0), ("maxci", 1), ("pf", 2), ("irr", 3), ("newpf", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmType.setStatus('current')
macUpAlgorithmDeltaCqiMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmDeltaCqiMax.setStatus('current')
macUpAlgorithmUlT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmUlT.setStatus('current')
macUpAlgorithmUlPfScaleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmUlPfScaleRate.setStatus('current')
macUpAlgorithmUlPfScaleMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmUlPfScaleMcs.setStatus('current')
macUpAlgorithmCqiModifyP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmCqiModifyP.setStatus('current')
macUpAlgorithmCqiModifyVaddMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmCqiModifyVaddMax.setStatus('current')
macUpAlgorithmCqiModifyVaddMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmCqiModifyVaddMin.setStatus('current')
macUpAlgorithmCqiModifySnrDefaultDec = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmCqiModifySnrDefaultDec.setStatus('current')
macUpAlgorithmCqiFirstBler = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmCqiFirstBler.setStatus('current')
macUpAlgorithmUlAntSelectThresSinrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmUlAntSelectThresSinrHigh.setStatus('current')
macUpAlgorithmUlAntSelectThresSinrMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmUlAntSelectThresSinrMedium.setStatus('current')
macUpAlgorithmUlAntSelectThresSinrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmUlAntSelectThresSinrLow.setStatus('current')
macUpAlgorithmFilterFactorForPuschSINR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmFilterFactorForPuschSINR.setStatus('current')
macUpAlgorithmIoTup = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmIoTup.setStatus('current')
macUpAlgorithmRecvPowerMaxPerPrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, -50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmRecvPowerMaxPerPrb.setStatus('current')
macUpAlgorithm16QAMPUSCHTargetSinrUpLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithm16QAMPUSCHTargetSinrUpLimit.setStatus('current')
macUpAlgorithmTTIbndlngSwtch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmTTIbndlngSwtch.setStatus('current')
macUpAlgorithmMCSStsfyCndtnNm = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmMCSStsfyCndtnNm.setStatus('current')
macUpAlgorithmTTIbndlngMnPrbNm = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmTTIbndlngMnPrbNm.setStatus('current')
macUpAlgorithmMCSThrshldfrEnblTTIbndlng = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmMCSThrshldfrEnblTTIbndlng.setStatus('current')
macUpAlgorithmMCSThrshldfrDsblTTIbndlng = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmMCSThrshldfrDsblTTIbndlng.setStatus('current')
macUpAlgorithmTTIbndlngSnrAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmTTIbndlngSnrAdd.setStatus('current')
macUpAlgorithmRiSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("adaptive", 0), ("rank1", 1), ("rank2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmRiSwitch.setStatus('current')
macUpAlgorithmPmiSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmPmiSwitch.setStatus('current')
macUpAlgorithmPucchRsrpHighThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, -60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmPucchRsrpHighThr.setStatus('current')
macUpAlgorithmPucchRsrpLowThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-130, -100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmPucchRsrpLowThr.setStatus('current')
macUpAlgorithmMcsBackforSimuPuxch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmMcsBackforSimuPuxch.setStatus('current')
macUpAlgorithmMcsThrforSimuPuxch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmMcsThrforSimuPuxch.setStatus('current')
macUpAlgorithmUlQCI1FirstBler = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmUlQCI1FirstBler.setStatus('current')
macUpAlgorithmUlQCI2FirstBler = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmUlQCI2FirstBler.setStatus('current')
macUpAlgorithmTargetMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmTargetMcs.setStatus('current')
macUpAlgorithmMcsDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmMcsDiff.setStatus('current')
macUpAlgorithmRandomLimitScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmRandomLimitScale.setStatus('current')
macUpAlgorithmRandomPrbStartScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmRandomPrbStartScale.setStatus('current')
macUpAlgorithmQci6NewPfScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmQci6NewPfScale.setStatus('current')
macUpAlgorithmQci7NewPfScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmQci7NewPfScale.setStatus('current')
macUpAlgorithmQci8NewPfScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmQci8NewPfScale.setStatus('current')
macUpAlgorithmQci9NewPfScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmQci9NewPfScale.setStatus('current')
macUpAlgorithmPuschInitSinrTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmPuschInitSinrTarget.setStatus('current')
macUpAlgorithmUlCqiModifyStepDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmUlCqiModifyStepDelta.setStatus('current')
macUpAlgorithmUlCqiModifyCrcHalfSfnDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmUlCqiModifyCrcHalfSfnDiff.setStatus('current')
macUpAlgorithmSRSRxPowThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmSRSRxPowThr.setStatus('current')
macUpAlgorithmUlAntSelectNumProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("num1", 0), ("num2", 1), ("num3", 2), ("num4", 3), ("num5", 4), ("num6", 5), ("num7", 6), ("num8", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmUlAntSelectNumProtect.setStatus('current')
macUplinkHighSpeedNewPfScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUplinkHighSpeedNewPfScale.setStatus('current')
macUplinkLowSpeedNewPfScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUplinkLowSpeedNewPfScale.setStatus('current')
macUpAlgorithmIoTupMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmIoTupMax.setStatus('current')
macUpAlgorithmIoTupMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmIoTupMin.setStatus('current')
macUpAlgorithmRecvPowerMaxPerPrbNei = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, -60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmRecvPowerMaxPerPrbNei.setStatus('current')
macUpAlgorithmPlThrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 140))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmPlThrMax.setStatus('current')
macUpAlgorithmPlThrMid = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 140))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmPlThrMid.setStatus('current')
macUpAlgorithmSrsPowerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmSrsPowerTimer.setStatus('current')
macUpAlgorithmSrsPowerP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmSrsPowerP.setStatus('current')
macUpAlgorithmSrsPowerSinrThLower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmSrsPowerSinrThLower.setStatus('current')
macUpAlgorithmSrsPowerSinrThUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmSrsPowerSinrThUpper.setStatus('current')
macUpAlgorithmSrsPowerSinrThTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmSrsPowerSinrThTarget.setStatus('current')
macUpAlgorithmSrsPowerSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 67), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmSrsPowerSwitch.setStatus('current')
macUpAlgorithmSrsTaP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmSrsTaP.setStatus('current')
macUpAlgorithmSrsTaSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmSrsTaSwitch.setStatus('current')
macUpAlgorithmPRBSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmPRBSwitch.setStatus('current')
macUpAlgorithm64QAMPUSCHTargetSinrUpLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithm64QAMPUSCHTargetSinrUpLimit.setStatus('current')
macUpAlgorithmSrsWideBandSinrFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmSrsWideBandSinrFactor.setStatus('current')
macUpAlgorithmIoTupOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmIoTupOffset.setStatus('current')
macUpAlgorithmRSSIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, -30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmRSSIMax.setStatus('current')
macUpAlgorithmSINRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmSINRMax.setStatus('current')
macUpAlgorithmMuMiMoPairChannelCorr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmMuMiMoPairChannelCorr.setStatus('current')
macUpAlgorithmUlEdgeUserMcsTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-18, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmUlEdgeUserMcsTh.setStatus('current')
macUpAlgorithmVolteMaxSchMcsTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 78), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmVolteMaxSchMcsTag.setStatus('current')
macUpAlgorithmVolteMaxSchMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 79), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmVolteMaxSchMcs.setStatus('current')
macUpAlgorithmVolteFixCce8Tag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 80), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmVolteFixCce8Tag.setStatus('current')
macUpAlgorithmVoltePuschTargetSinrShift = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 81), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmVoltePuschTargetSinrShift.setStatus('current')
macUpAlgorithmCqiMaxModifyFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 82), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmCqiMaxModifyFlag.setStatus('current')
macUpAlgorithmMCSHighLevelOptFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 83), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmMCSHighLevelOptFlag.setStatus('current')
macUpAlgorithmMCSN64QAMDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmMCSN64QAMDiff.setStatus('current')
macUpAlgorithmMCS64QAMDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmMCS64QAMDiff.setStatus('current')
macUpAlgorithmNoPhrAdaptOptFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 86), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmNoPhrAdaptOptFlag.setStatus('current')
macUpAlgorithmUeNumThreForPrbLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmUeNumThreForPrbLimit.setStatus('current')
macUpAlgorithmPrbLimitMcsThre1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmPrbLimitMcsThre1.setStatus('current')
macUpAlgorithmPrbLimitMcsThre2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmPrbLimitMcsThre2.setStatus('current')
macUpAlgorithmNearPointUePrbNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmNearPointUePrbNum.setStatus('current')
macUpAlgorithmMidPointUePrbNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmMidPointUePrbNum.setStatus('current')
macUpAlgorithmFarPointUePrbNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmFarPointUePrbNum.setStatus('current')
macUpAlgorithmVolteUeMuMimoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 1, 1, 93), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpAlgorithmVolteUeMuMimoSwitch.setStatus('current')
macDownAlgBaseParaTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2), )
if mibBuilder.loadTexts: macDownAlgBaseParaTable.setStatus('current')
macDownAlgBaseParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "macDownlinkAlgorithmLcId"))
if mibBuilder.loadTexts: macDownAlgBaseParaEntry.setStatus('current')
macDownlinkAlgorithmLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: macDownlinkAlgorithmLcId.setStatus('current')
macDownlinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkRowStatus.setStatus('current')
macDownlinkMacResType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2)).clone(namedValues=NamedValues(("adaptive", -1), ("type0", 0), ("type1", 1), ("type2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMacResType.setStatus('current')
macDownlinkAlgType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("rr", 0), ("maxci", 1), ("pf", 2), ("irr", 3), ("newpf", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkAlgType.setStatus('current')
macDownlinkRetransMCScanbeChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notSupport", 0), ("support", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkRetransMCScanbeChanged.setStatus('current')
macDownlinkDlPfScaleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkDlPfScaleRate.setStatus('current')
macDownlinkDlPfScaleMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkDlPfScaleMcs.setStatus('current')
macDownlinkDlT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkDlT.setStatus('current')
macDownlinkCqiFixM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkCqiFixM.setStatus('current')
macDownlinkCqiFixP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkCqiFixP.setStatus('current')
macDownlinkCqiFixVaddSumMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkCqiFixVaddSumMin.setStatus('current')
macDownlinkCqiFixVaddSumMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkCqiFixVaddSumMax.setStatus('current')
macDownlinkRi1Times = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkRi1Times.setStatus('current')
macDownlinkRi2Times = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkRi2Times.setStatus('current')
macDownlinkCqiFirstBler = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkCqiFirstBler.setStatus('current')
macDownlinkDecEff11Tm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkDecEff11Tm3.setStatus('current')
macDownlinkDecEff12Tm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkDecEff12Tm3.setStatus('current')
macDownlinkAddEff21Tm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkAddEff21Tm3.setStatus('current')
macDownlinkDecEff22Tm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkDecEff22Tm3.setStatus('current')
macDownlinkBler122 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkBler122.setStatus('current')
macDownlinkBler221 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkBler221.setStatus('current')
macDownlinkCqi12Tm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkCqi12Tm3.setStatus('current')
macDownlinkCqi22Tm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkCqi22Tm3.setStatus('current')
macDownlinkDlAntSelectThresCqiHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkDlAntSelectThresCqiHigh.setStatus('current')
macDownlinkDlAntSelectThresCqiMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkDlAntSelectThresCqiMedium.setStatus('current')
macDownlinkDlAntSelectThresCqiLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkDlAntSelectThresCqiLow.setStatus('current')
macDownlinkEff12Tm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEff12Tm3.setStatus('current')
macDownlinkEff22Tm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEff22Tm3.setStatus('current')
macDownlinkN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkN1.setStatus('current')
macDownlinkN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkN2.setStatus('current')
macDownlinkEffTm73 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEffTm73.setStatus('current')
macDownlinkEffTm37 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEffTm37.setStatus('current')
macDownlinkp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkp.setStatus('current')
macDownlinkEffTm38 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEffTm38.setStatus('current')
macDownlinkEffTm83 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEffTm83.setStatus('current')
macDownlinkEff12Tm8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEff12Tm8.setStatus('current')
macDownlinkEff21Tm8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEff21Tm8.setStatus('current')
macDownlinklamdathreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinklamdathreshold.setStatus('current')
macDownlinkTm7SfbcPort5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkTm7SfbcPort5.setStatus('current')
macDownlinkSrcFreqEffGap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkSrcFreqEffGap.setStatus('current')
macDownlinkFsPrbMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 36))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkFsPrbMax.setStatus('current')
macDownlinkSubCqiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkSubCqiOffset.setStatus('current')
macMimoFirstPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(80, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macMimoFirstPeriod.setStatus('current')
macMimoSecondPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(80, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macMimoSecondPeriod.setStatus('current')
macDownlinkCqiPeriondMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkCqiPeriondMin.setStatus('current')
macDownlinkCqiPeriondMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkCqiPeriondMax.setStatus('current')
macDownlinkCqi12SfbcTm4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkCqi12SfbcTm4.setStatus('current')
macDownlinkCqi22SfbcTm4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 60), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkCqi22SfbcTm4.setStatus('current')
macDownlinkEffAveFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEffAveFactor.setStatus('current')
macMimoSdmSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 62), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macMimoSdmSwitch.setStatus('current')
macMimoNewCqi12Tm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 63), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macMimoNewCqi12Tm3.setStatus('current')
macDownlinkAckInactReleaseUeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 64), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkAckInactReleaseUeSwitch.setStatus('current')
macDownlinkAckInactiveNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 65), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkAckInactiveNum.setStatus('current')
macDownlinkAckActiveNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 66), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkAckActiveNum.setStatus('current')
macDownlinkTm9MuSuMimoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 67), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("mumimo", 0), ("sumimo", 1), ("forbidtm9", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkTm9MuSuMimoSwitch.setStatus('current')
macDownlinkGapOptimizationDlDataScheCqiFixM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 68), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkGapOptimizationDlDataScheCqiFixM.setStatus('current')
macDownlinkPDCCHOrderTransTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 69), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkPDCCHOrderTransTimes.setStatus('current')
macDownlinkEffTm39 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 70), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEffTm39.setStatus('current')
macDownlinkEffTm93 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 71), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEffTm93.setStatus('current')
macDownlinkEffTm9Pre = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 72), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEffTm9Pre.setStatus('current')
macDownlinkEffTm9Srs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 73), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEffTm9Srs.setStatus('current')
macDownlinkCsiRsLimitMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 75), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkCsiRsLimitMcs.setStatus('current')
macDownlinkCsiRsDecMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 76), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkCsiRsDecMcs.setStatus('current')
macDownlinkVolteInitBler = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 77), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkVolteInitBler.setStatus('current')
macDownlinkQci2InitBler = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 78), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkQci2InitBler.setStatus('current')
macDownlinkDlStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 79), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkDlStep.setStatus('current')
macDownlinkQci6NewPfScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 80), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkQci6NewPfScale.setStatus('current')
macDownlinkQci7NewPfScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 81), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkQci7NewPfScale.setStatus('current')
macDownlinkQci8NewPfScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 82), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkQci8NewPfScale.setStatus('current')
macDownlinkQci9NewPfScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 83), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkQci9NewPfScale.setStatus('current')
macQci1DownlinkDlStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 84), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macQci1DownlinkDlStep.setStatus('current')
macTestPmiWeightMean = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 85), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestPmiWeightMean.setStatus('current')
macTestPmiWeightFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestPmiWeightFactor.setStatus('current')
macTestPmiWeightFactor2ed = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestPmiWeightFactor2ed.setStatus('current')
macTestPmiFindError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestPmiFindError.setStatus('current')
macTestPmiReportErrorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestPmiReportErrorNum.setStatus('current')
macSrbNumLimitSf1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSrbNumLimitSf1.setStatus('current')
macSrbNumLimitSf3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSrbNumLimitSf3.setStatus('current')
macRetxLimitFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 92), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macRetxLimitFlag.setStatus('current')
macMaxBoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 93), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("off", 0), ("sf16", 1), ("sf1368", 2), ("sf38", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macMaxBoSwitch.setStatus('current')
macDownlinkHighSpeedNewPfScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 94), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkHighSpeedNewPfScale.setStatus('current')
macDownlinkLowSpeedNewPfScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 95), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkLowSpeedNewPfScale.setStatus('current')
macDownAlgorithmVolteMaxSchMcsTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 96), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownAlgorithmVolteMaxSchMcsTag.setStatus('current')
macDownAlgorithmVolteMaxSchMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 97), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownAlgorithmVolteMaxSchMcs.setStatus('current')
macDownlink256QamSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 100), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlink256QamSwitch.setStatus('current')
macDownlinkEffTableSwitchFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 101), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEffTableSwitchFlag.setStatus('current')
macDownlinkEffTableSwitchPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 102), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(80, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEffTableSwitchPeriod.setStatus('current')
macDownlinkEff1TableOToN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEff1TableOToN.setStatus('current')
macDownlinkEff1TableNToO = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEff1TableNToO.setStatus('current')
macDownlinkEff2TableOToN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEff2TableOToN.setStatus('current')
macDownlinkEff2TableNToO = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 2, 1, 106), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkEff2TableNToO.setStatus('current')
macDownMuMiMoAlgBaseParaTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3), )
if mibBuilder.loadTexts: macDownMuMiMoAlgBaseParaTable.setStatus('current')
macDownMuMiMoAlgBaseParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "macDownlinkMuMiMoAlgorithmLcId"))
if mibBuilder.loadTexts: macDownMuMiMoAlgBaseParaEntry.setStatus('current')
macDownlinkMuMiMoAlgorithmLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: macDownlinkMuMiMoAlgorithmLcId.setStatus('current')
macDownlinkMuMiMoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoRowStatus.setStatus('current')
macDownlinkMuMiMoUePairEffThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1523, 55547))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoUePairEffThr.setStatus('current')
macDownlinkMuMiMoUePairEffDiffThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1523, 55547))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoUePairEffDiffThr.setStatus('current')
macDonwlinkMuMiMoUePairAoADiffThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDonwlinkMuMiMoUePairAoADiffThr.setStatus('current')
macDownlinkMuMiMoEffAdjustDlMuMimo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoEffAdjustDlMuMimo.setStatus('current')
macDownlinkMuMiMoPowerDeductFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoPowerDeductFactor.setStatus('current')
macDownlinkMuMiMoResPreestamateFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoResPreestamateFactor.setStatus('current')
macDownlinkMuMiMoMcsBackoff0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff0.setStatus('current')
macDownlinkMuMiMoMcsBackoff1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff1.setStatus('current')
macDownlinkMuMiMoMcsBackoff2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff2.setStatus('current')
macDownlinkMuMiMoMcsBackoff3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff3.setStatus('current')
macDownlinkMuMiMoMcsBackoff4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff4.setStatus('current')
macDownlinkMuMiMoMcsBackoff5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff5.setStatus('current')
macDownlinkMuMiMoMcsBackoff6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff6.setStatus('current')
macDownlinkMuMiMoMcsBackoff7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff7.setStatus('current')
macDownlinkMuMiMoMcsBackoff8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff8.setStatus('current')
macDownlinkMuMiMoMcsBackoff9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff9.setStatus('current')
macDownlinkMuMiMoMcsBackoff10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff10.setStatus('current')
macDownlinkMuMiMoMcsBackoff11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff11.setStatus('current')
macDownlinkMuMiMoMcsBackoff12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff12.setStatus('current')
macDownlinkMuMiMoMcsBackoff13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff13.setStatus('current')
macDownlinkMuMiMoMcsBackoff14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff14.setStatus('current')
macDownlinkMuMiMoMcsBackoff15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff15.setStatus('current')
macDownlinkMuMiMoMcsBackoff16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff16.setStatus('current')
macDownlinkMuMiMoMcsBackoff17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff17.setStatus('current')
macDownlinkMuMiMoMcsBackoff18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff18.setStatus('current')
macDownlinkMuMiMoMcsBackoff19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff19.setStatus('current')
macDownlinkMuMiMoMcsBackoff20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff20.setStatus('current')
macDownlinkMuMiMoMcsBackoff21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff21.setStatus('current')
macDownlinkMuMiMoMcsBackoff22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff22.setStatus('current')
macDownlinkMuMiMoMcsBackoff23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff23.setStatus('current')
macDownlinkMuMiMoMcsBackoff24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff24.setStatus('current')
macDownlinkMuMiMoMcsBackoff25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff25.setStatus('current')
macDownlinkMuMiMoMcsBackoff26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff26.setStatus('current')
macDownlinkMuMiMoMcsBackoff27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDownlinkMuMiMoMcsBackoff27.setStatus('current')
macUpMuMiMoAlgBaseParaTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4), )
if mibBuilder.loadTexts: macUpMuMiMoAlgBaseParaTable.setStatus('current')
macUpMuMiMoAlgBaseParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "macUpMuMiMoAlgorithmLcId"))
if mibBuilder.loadTexts: macUpMuMiMoAlgBaseParaEntry.setStatus('current')
macUpMuMiMoAlgorithmLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: macUpMuMiMoAlgorithmLcId.setStatus('current')
macUpMuMiMoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoRowStatus.setStatus('current')
macUpMuMiMoPairDeltaDOAThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoPairDeltaDOAThr.setStatus('current')
macUpMuMiMoPairSNRThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoPairSNRThr.setStatus('current')
macUpMuMiMoPairDeltaRecPwrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoPairDeltaRecPwrThr.setStatus('current')
macUpMuMiMoMuMimoBackSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMuMimoBackSnr.setStatus('current')
macUpMuMiMoMcsBackOff0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff0.setStatus('current')
macUpMuMiMoMcsBackOff1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff1.setStatus('current')
macUpMuMiMoMcsBackOff2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff2.setStatus('current')
macUpMuMiMoMcsBackOff3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff3.setStatus('current')
macUpMuMiMoMcsBackOff4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff4.setStatus('current')
macUpMuMiMoMcsBackOff5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff5.setStatus('current')
macUpMuMiMoMcsBackOff6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff6.setStatus('current')
macUpMuMiMoMcsBackOff7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff7.setStatus('current')
macUpMuMiMoMcsBackOff8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff8.setStatus('current')
macUpMuMiMoMcsBackOff9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff9.setStatus('current')
macUpMuMiMoMcsBackOff10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff10.setStatus('current')
macUpMuMiMoMcsBackOff11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff11.setStatus('current')
macUpMuMiMoMcsBackOff12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff12.setStatus('current')
macUpMuMiMoMcsBackOff13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff13.setStatus('current')
macUpMuMiMoMcsBackOff14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff14.setStatus('current')
macUpMuMiMoMcsBackOff15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff15.setStatus('current')
macUpMuMiMoMcsBackOff16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff16.setStatus('current')
macUpMuMiMoMcsBackOff17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff17.setStatus('current')
macUpMuMiMoMcsBackOff18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff18.setStatus('current')
macUpMuMiMoMcsBackOff19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff19.setStatus('current')
macUpMuMiMoMcsBackOff20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff20.setStatus('current')
macUpMuMiMoMcsBackOff21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff21.setStatus('current')
macUpMuMiMoMcsBackOff22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff22.setStatus('current')
macUpMuMiMoMcsBackOff23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff23.setStatus('current')
macUpMuMiMoMcsBackOff24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff24.setStatus('current')
macUpMuMiMoMcsBackOff25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff25.setStatus('current')
macUpMuMiMoMcsBackOff26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff26.setStatus('current')
macUpMuMiMoMcsBackOff27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff27.setStatus('current')
macUpMuMiMoMcsBackOff28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMiMoMcsBackOff28.setStatus('current')
macUpMuMimoPairPrbThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macUpMuMimoPairPrbThr.setStatus('current')
videoActiveTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5), )
if mibBuilder.loadTexts: videoActiveTable.setStatus('current')
videoActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "videoActiveLcId"))
if mibBuilder.loadTexts: videoActiveEntry.setStatus('current')
videoActiveLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: videoActiveLcId.setStatus('current')
videoActiveRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoActiveRowStatus.setStatus('current')
videoScheduleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoScheduleMode.setStatus('current')
videoInitScheduleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoInitScheduleTime.setStatus('current')
videoDlMAXPRBUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoDlMAXPRBUsed.setStatus('current')
videoDlOverMAXPRBUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoDlOverMAXPRBUsed.setStatus('current')
videoMinBRSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoMinBRSwitch.setStatus('current')
videoMinBR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)).clone(namedValues=NamedValues(("kB0", 0), ("kB8", 1), ("kB16", 2), ("kB32", 3), ("kB64", 4), ("kB128", 5), ("kB256", 6), ("infinity", 7), ("kB640", 8), ("kB512", 9), ("kB768", 10), ("kB896", 11), ("kB1024", 12), ("kB1152", 13), ("kB1280", 14), ("kB1408", 15), ("kB1536", 16), ("kB1664", 17), ("kB1792", 18), ("kB1920", 19), ("kB2048", 20), ("kB2176", 21), ("kB2304", 22), ("kB2432", 23), ("kB2560", 24), ("kB5120", 25)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoMinBR.setStatus('current')
videoDlBucketSizeDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("bsdMs5", 0), ("bsdMs50", 1), ("bsdMs100", 2), ("bsdMs250", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoDlBucketSizeDuration.setStatus('current')
videoUlBoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoUlBoSwitch.setStatus('current')
videoUlPreschePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoUlPreschePriority.setStatus('current')
videoUlBOSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoUlBOSize.setStatus('current')
videoUlPrescheTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("ms100", 0), ("ms200", 1), ("ms500", 2), ("s1", 3), ("s2", 4), ("s5", 5), ("s10", 6), ("infinity", 7), ("ms10", 8), ("ms20", 9), ("ms40", 10), ("ms50", 11), ("ms80", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoUlPrescheTimeLimit.setStatus('current')
pdcpVideoParamTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6), )
if mibBuilder.loadTexts: pdcpVideoParamTable.setStatus('current')
pdcpVideoParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpVideoParamLcId"))
if mibBuilder.loadTexts: pdcpVideoParamEntry.setStatus('current')
pdcpVideoParamLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcpVideoParamLcId.setStatus('current')
pdcpVideoParamRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoParamRowStatus.setStatus('current')
pdcpVideoJudgeSche = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoJudgeSche.setStatus('current')
pdcpVideoCpuMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoCpuMaxThreshold.setStatus('current')
pdcpVideoPkgPeriodNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoPkgPeriodNum.setStatus('current')
pdcpVideoPkgPeriodT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("ms100", 0), ("ms200", 1), ("ms500", 2), ("ms1000", 3), ("ms2000", 4), ("ms5000", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoPkgPeriodT.setStatus('current')
pdcpVideoLargePkgNumTH = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoLargePkgNumTH.setStatus('current')
pdcpVideoLargePkgTH = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(800, 1500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoLargePkgTH.setStatus('current')
pdcpVideoUtcpkgMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoUtcpkgMinSize.setStatus('current')
pdcpVideoUtcpkgMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoUtcpkgMaxSize.setStatus('current')
pdcpVideoRBMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoRBMaxNum.setStatus('current')
pdcpVideoQQVideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoQQVideoActive.setStatus('current')
pdcpVideoIQiYiVideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoIQiYiVideoActive.setStatus('current')
pdcpVideoYouKuVideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoYouKuVideoActive.setStatus('current')
pdcpVideoLeTVVideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoLeTVVideoActive.setStatus('current')
pdcpVideoMiGuVideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoMiGuVideoActive.setStatus('current')
pdcpVideoKuaiShouVideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoKuaiShouVideoActive.setStatus('current')
pdcpVideoMgTVVideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoMgTVVideoActive.setStatus('current')
pdcpVideoReserver1VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver1VideoActive.setStatus('current')
pdcpVideoReserver2VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver2VideoActive.setStatus('current')
pdcpVideoReserver3VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver3VideoActive.setStatus('current')
pdcpVideoReserver4VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver4VideoActive.setStatus('current')
pdcpVideoReserver5VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver5VideoActive.setStatus('current')
pdcpVideoReserver6VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver6VideoActive.setStatus('current')
pdcpVideoReserver7VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver7VideoActive.setStatus('current')
pdcpVideoReserver8VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver8VideoActive.setStatus('current')
pdcpVideoReserver9VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver9VideoActive.setStatus('current')
pdcpVideoReserver10VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver10VideoActive.setStatus('current')
pdcpVideoReserver11VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver11VideoActive.setStatus('current')
pdcpVideoReserver12VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver12VideoActive.setStatus('current')
pdcpVideoReserver13VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver13VideoActive.setStatus('current')
pdcpVideoReserver14VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver14VideoActive.setStatus('current')
pdcpVideoReserver15VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver15VideoActive.setStatus('current')
pdcpVideoReserver16VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver16VideoActive.setStatus('current')
pdcpVideoReserver17VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver17VideoActive.setStatus('current')
pdcpVideoReserver18VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver18VideoActive.setStatus('current')
pdcpVideoReserver19VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 37), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver19VideoActive.setStatus('current')
pdcpVideoReserver20VideoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 6, 1, 38), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("ture", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoReserver20VideoActive.setStatus('current')
pdcpVideoKeyWordsTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 7), )
if mibBuilder.loadTexts: pdcpVideoKeyWordsTable.setStatus('current')
pdcpVideoKeyWordsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpVideoKeyWordsLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpVideoKeyWordsCfgId"))
if mibBuilder.loadTexts: pdcpVideoKeyWordsEntry.setStatus('current')
pdcpVideoKeyWordsLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcpVideoKeyWordsLcId.setStatus('current')
pdcpVideoKeyWordsCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: pdcpVideoKeyWordsCfgId.setStatus('current')
pdcpVideoKeyWordsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoKeyWordsRowStatus.setStatus('current')
pdcpVideoKeyWordsVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26)).clone(namedValues=NamedValues(("vendor0", 0), ("vendor1", 1), ("vendor2", 2), ("vendor3", 3), ("vendor4", 4), ("vendor5", 5), ("vendor6", 6), ("vendor7", 7), ("vendor8", 8), ("vendor9", 9), ("vendor10", 10), ("vendor11", 11), ("vendor12", 12), ("vendor13", 13), ("vendor14", 14), ("vendor15", 15), ("vendor16", 16), ("vendor17", 17), ("vendor18", 18), ("vendor19", 19), ("vendor20", 20), ("vendor21", 21), ("vendor22", 22), ("vendor23", 23), ("vendor24", 24), ("vendor25", 25), ("vendor26", 26)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoKeyWordsVendor.setStatus('current')
pdcpVideoKeyWords = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoKeyWords.setStatus('current')
pdcpVideoKeyWordsOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoKeyWordsOffset.setStatus('current')
pdcpVideoKeyWordsLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpVideoKeyWordsLength.setStatus('current')
macSwitchNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2))
macSwitchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1), )
if mibBuilder.loadTexts: macSwitchInfoTable.setStatus('current')
macSwitchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "macSwitchInfoLcId"))
if mibBuilder.loadTexts: macSwitchInfoEntry.setStatus('current')
macSwitchInfoLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: macSwitchInfoLcId.setStatus('current')
macSwitchInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoRowStatus.setStatus('current')
macSwitchInfoUeInactiveSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoUeInactiveSwitch.setStatus('current')
macSwitchInfoUeInactivePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoUeInactivePeriod.setStatus('current')
macSwitchInfoDlHoppingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoDlHoppingFlag.setStatus('current')
macSwitchInfoDlHopGap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1)).clone(namedValues=NamedValues(("adaptive", -1), ("gap1", 0), ("gap2", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoDlHopGap.setStatus('current')
macSwitchInfoUlHoppingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoUlHoppingFlag.setStatus('current')
macSwitchInfoUlHoppingType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2, 3)).clone(namedValues=NamedValues(("adaptive", -1), ("hopbit0", 0), ("hopbit1", 1), ("hopbit2", 2), ("hopbit11", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoUlHoppingType.setStatus('current')
macSwitchInfoUlMuMIMOSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoUlMuMIMOSwitch.setStatus('current')
macSwitchInfoUlFreqSelectScheduleSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoUlFreqSelectScheduleSwitch.setStatus('current')
macSwitchInfoTm8MuSuMimoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("mumimo", 0), ("sumimo", 1), ("forbidtm8", 2), ("sumuadapter", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoTm8MuSuMimoSwitch.setStatus('current')
macSwitchInfoCellCombinedUlSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoCellCombinedUlSwitch.setStatus('current')
macSwitchInfoCellCombinedDlSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoCellCombinedDlSwitch.setStatus('current')
macSwitchInfoDlFsSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("srson", 1), ("cqion", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoDlFsSwitch.setStatus('current')
macSwitchInfoCclrSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoCclrSwitch.setStatus('current')
macSwitchInfoCclrPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoCclrPercent.setStatus('current')
macSwitchInfoNewRbPriorityScheTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoNewRbPriorityScheTime.setStatus('current')
macSwitchInfoCellCombineAntOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoCellCombineAntOffset.setStatus('current')
macSwitchInfoSignalConMsg2BISwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoSignalConMsg2BISwitch.setStatus('current')
macSwitchInfoSignalConTimerPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoSignalConTimerPeriod.setStatus('current')
macSwitchInfoSignalConThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoSignalConThr.setStatus('current')
macSwitchInfoSignalConBIValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoSignalConBIValue.setStatus('current')
macSwitchInfoReserveTimeForMsg4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoReserveTimeForMsg4.setStatus('current')
macSwitchInfoRlcUeInactiveSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoRlcUeInactiveSwitch.setStatus('current')
macSwitchInfoCaUeNumLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoCaUeNumLimit.setStatus('current')
macSwitchInfoVoIPUeInactiveProhibitSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoVoIPUeInactiveProhibitSwitch.setStatus('current')
macSwitchInfoVoIPUeInactivePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoVoIPUeInactivePeriod.setStatus('current')
macSwitchInfoTrafficeInactiveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoTrafficeInactiveTimer.setStatus('current')
macSwitchInfoHighSpeedUeInactivePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoHighSpeedUeInactivePeriod.setStatus('current')
macSwitchInfoextendRrcReestablishSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoextendRrcReestablishSwitch.setStatus('current')
macSwitchInfoReserveTimeForContentReslut = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoReserveTimeForContentReslut.setStatus('current')
macSwitchInfoUlCceReserveFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoUlCceReserveFlag.setStatus('current')
macSwitchInfoUlCceRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoUlCceRatio.setStatus('current')
macSwitchInfoMcsDiffFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoMcsDiffFlag.setStatus('current')
macSwitchInfoMcsDiffValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 18))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoMcsDiffValue.setStatus('current')
macSwitchInfoL2UpAdaptSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoL2UpAdaptSwitch.setStatus('current')
macSwitchInfoUeInactivePeriodOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoUeInactivePeriodOffset.setStatus('current')
macSwitchInfoDlEdgeUserMcsTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-18, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoDlEdgeUserMcsTh.setStatus('current')
macSwitchInfoCceOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoCceOffset.setStatus('current')
macSwitchInfoCceOffsetRatioCfi1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoCceOffsetRatioCfi1.setStatus('current')
macSwitchInfoCceOffsetRatioCfi2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchInfoCceOffsetRatioCfi2.setStatus('current')
macTestSwitchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2), )
if mibBuilder.loadTexts: macTestSwitchInfoTable.setStatus('current')
macTestSwitchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "macTestSwitchInfoLcId"))
if mibBuilder.loadTexts: macTestSwitchInfoEntry.setStatus('current')
macTestSwitchInfoLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: macTestSwitchInfoLcId.setStatus('current')
macTestSwitchInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoRowStatus.setStatus('current')
macTestSwitchInfoDlAmcSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlAmcSwitch.setStatus('current')
macTestSwitchInfoUlAmcSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlAmcSwitch.setStatus('current')
macTestSwitchInfoDlMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlMcs.setStatus('current')
macTestSwitchInfoUlMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlMcs.setStatus('current')
macTestSwitchInfoDlHarqSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlHarqSwitch.setStatus('current')
macTestSwitchInfoUlHarqSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlHarqSwitch.setStatus('current')
macTestSwitchInfoDlCqiFixSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlCqiFixSwitch.setStatus('current')
macTestSwitchInfoUlCqiFixSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlCqiFixSwitch.setStatus('current')
macTestSwitchInfoDlMimoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("interMode", -2), ("off", -1), ("sfbc", 0), ("oneLayerSdm", 1), ("largeCddSdm", 2), ("zeroCddSdm", 3), ("tm7oneStreamBf", 4), ("tm8oneStreamBf", 5), ("twoStreamBf", 6), ("tm9oneStreamBf", 7), ("tm9twoStreamBf", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlMimoSwitch.setStatus('current')
macTestSwitchInfoUlPrbNumMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlPrbNumMin.setStatus('current')
macTestSwitchInfoDlScrambleSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlScrambleSwitch.setStatus('current')
macTestSwitchInfoScramblePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoScramblePeriod.setStatus('current')
macTestSwitchInfoRandomScrambleSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoRandomScrambleSwitch.setStatus('current')
macTestSwitchInfoScrambleStartPrbPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoScrambleStartPrbPosition.setStatus('current')
macTestSwitchInfoPdschScrambleProp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoPdschScrambleProp.setStatus('current')
macTestSwitchInfoPdcchScrambleProp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoPdcchScrambleProp.setStatus('current')
macTestSwitchInfoCchRamScrambleSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoCchRamScrambleSwitch.setStatus('current')
macTestSwitchInfoCchScramblePrbStartPos = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 87))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoCchScramblePrbStartPos.setStatus('current')
macTestSwitchInfoCchScramblePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoCchScramblePeriod.setStatus('current')
macTestSwitchInfoPrbLimitSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoPrbLimitSwitch.setStatus('current')
macTestSwitchInfoSibPrbAddSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoSibPrbAddSwitch.setStatus('current')
macTestSwitchInfoDediCceSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDediCceSwitch.setStatus('current')
macTestSwitchInfoDediCceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4, 8)).clone(namedValues=NamedValues(("val1", 1), ("val2", 2), ("val4", 4), ("val8", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDediCceNum.setStatus('current')
macTestSwitchInfoPcfichSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoPcfichSwitch.setStatus('current')
macTestSwitchInfoCchCfiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoCchCfiNum.setStatus('current')
macTestSwitchInfoMeasSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoMeasSwitch.setStatus('current')
macTestSwitchInfoDlCodeWordSwapSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlCodeWordSwapSwitch.setStatus('current')
macTestSwitchInfoTaScheSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("off", 0), ("ms500", 1), ("ms750", 2), ("ms1280", 3), ("ms1920", 4), ("ms2560", 5), ("ms5120", 6), ("ms10240", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoTaScheSwitch.setStatus('current')
macTestSwitchInfoTaCheckSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoTaCheckSwitch.setStatus('current')
macTestSwitchInfoDlFlowCtrlSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlFlowCtrlSwitch.setStatus('current')
macTestSwitchInfoMacBfWbFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 37), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoMacBfWbFlag.setStatus('current')
macTestSwitchInfoMacBfLamdaFromTableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoMacBfLamdaFromTableFlag.setStatus('current')
macTestSwitchInfoUlNonAdaptiveReTxSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlNonAdaptiveReTxSwitch.setStatus('current')
macTestSwitchInfoUlFlowCtrlSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlFlowCtrlSwitch.setStatus('current')
macTestSwitchInfoUlUciOnlySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlUciOnlySwitch.setStatus('current')
macTestSwitchInfoUlDelAckPrbSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 43), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlDelAckPrbSwitch.setStatus('current')
macTestSwitchInfoUlLimitSrbMcsSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 44), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlLimitSrbMcsSwitch.setStatus('current')
macTestSwitchInfoUlMaxScheUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlMaxScheUeNum.setStatus('current')
macTestSwitchInfoDlMaxScheUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlMaxScheUeNum.setStatus('current')
macTestSwitchInfoAccessStubSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 47), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoAccessStubSwitch.setStatus('current')
macTestSwitchInfoRNTPMsgSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 48), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoRNTPMsgSwitch.setStatus('current')
macTestSwitchInfoScrambleMimo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 49), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 4)).clone(namedValues=NamedValues(("sfbc", 0), ("tm7oneStreamBf", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoScrambleMimo.setStatus('current')
macTestSwitchInfoScraWithRealUeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 50), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoScraWithRealUeSwitch.setStatus('current')
macTestSwitchInfolimitUlPrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfolimitUlPrb.setStatus('current')
macTestSwitchInfolimitDlPrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfolimitDlPrb.setStatus('current')
macTestSwitchInfoMcslimitSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 53), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoMcslimitSwitch.setStatus('current')
macTestSwitchInfolimitUlMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfolimitUlMcs.setStatus('current')
macTestSwitchInfolimitDlMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfolimitDlMcs.setStatus('current')
macTestSwitchInfoScrambleDeltaPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoScrambleDeltaPower.setStatus('current')
macTestSwitchInfoScramblePowerMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoScramblePowerMargin.setStatus('current')
macTestSwitchInfoCommUePdcchCceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 58), Integer32().subtype(subtypeSpec=SingleValueConstraint(4, 8)).clone(namedValues=NamedValues(("val4", 4), ("val8", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoCommUePdcchCceNum.setStatus('current')
macTestSwitchInfoPowerProtectSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 59), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoPowerProtectSwitch.setStatus('current')
macTestSwitchInfoSpsFirstTBSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoSpsFirstTBSize.setStatus('current')
macTestSwitchInfoSpsActiveHoldFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 61), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoSpsActiveHoldFlag.setStatus('current')
macTestSwitchLogTypeTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 62), Integer32().subtype(subtypeSpec=SingleValueConstraint(-3, -2, -1, 51, 52, 53, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 47, 70, 71, 72, 73)).clone(namedValues=NamedValues(("offlog", -3), ("accesslog", -2), ("pinglog", -1), ("ulconfig", 51), ("dlconfig", 52), ("reestabish", 53), ("uplinkschedule", 0), ("uplinkscheexception", 1), ("uplinkresourceassignment", 2), ("uplinkuplinkresourceassignmenterror", 3), ("uplinkdata", 4), ("uplinkdatacrc", 5), ("downlinkschedule", 6), ("downlinkscheduleprocess", 7), ("downlinkresourceassignment", 8), ("downlinkresourceassignmenterror", 9), ("downlinkdata", 10), ("downlinkdataexception", 11), ("harqstate", 12), ("harqfeedbackvalue", 13), ("accessmsg1msg2", 14), ("accessprocessexception", 15), ("mimoexchange", 16), ("drxprocess", 17), ("tfrcexception", 18), ("registerunregister", 19), ("dlsps", 20), ("cchpower", 21), ("error", 22), ("ulharqstate", 23), ("celllicence", 24), ("ta", 25), ("ulinfofrompl", 26), ("dlspecialelement", 27), ("dma", 28), ("cqimodify", 29), ("srb", 30), ("drc", 32), ("ca", 33), ("ttibundling", 34), ("fs", 35), ("dci", 36), ("uci", 37), ("ulsps", 38), ("keyulsps", 39), ("rlcdata", 40), ("dcicch", 45), ("sendcch", 46), ("srcqiack", 47), ("pdcpdata", 70), ("pdcpdatasec", 71), ("pdcpdataho", 72), ("pdcprohc", 73)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchLogTypeTrigger.setStatus('current')
macTestSwitchLogRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 63), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("once", 0), ("recycle", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchLogRecordType.setStatus('current')
macTestSwitchInfoDlCchCfiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlCchCfiNum.setStatus('current')
macTestSwitchInfoVIPScheduleSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 65), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoVIPScheduleSwitch.setStatus('current')
macTestSwitchInfoMaxARPLevelForVIPSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoMaxARPLevelForVIPSchedule.setStatus('current')
macTestSwitchInfoMinARPLevelForVIPSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoMinARPLevelForVIPSchedule.setStatus('current')
macTestSwitchInfoPdschPwrProtectSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoPdschPwrProtectSwitch.setStatus('current')
macTestSwitchInfoHoPdcchPowerIncrease = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoHoPdcchPowerIncrease.setStatus('current')
macTestSwitchInfoMsg2HoPdcchPowerIncrease = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoMsg2HoPdcchPowerIncrease.setStatus('current')
macTestSwitchInfoMACIcicEdgeUserCriterion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 71), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoMACIcicEdgeUserCriterion.setStatus('current')
macTestSwitchInfoHoMsg2ICIC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 72), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoHoMsg2ICIC.setStatus('current')
macTestSwitchInfoHoPdschPromotion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoHoPdschPromotion.setStatus('current')
macTestSwitchInfoHoMsg2Promotion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 74), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("o", 0), ("oDot5", 1), ("one", 2), ("oneDot5", 3), ("two", 4), ("twoDot5", 5), ("three", 6), ("threeDot5", 7), ("four", 8), ("fourDot5", 9), ("five", 10), ("fiveDot5", 11), ("six", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoHoMsg2Promotion.setStatus('current')
macTestSwitchInfoHoMsg2PRBThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoHoMsg2PRBThreshold.setStatus('current')
macTestSwitchInfoDlPdbScheFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 76), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlPdbScheFlag.setStatus('current')
macTestSwitchInfoUlPdbScheFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 77), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlPdbScheFlag.setStatus('current')
macTestSwitchInfoDlSfbcResType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 78), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("type0ortype1", 0), ("type2", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlSfbcResType.setStatus('current')
macTestSwitchInfoUlPrbSelectLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 79), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("limitfirst50", 1), ("limitlast50", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlPrbSelectLimit.setStatus('current')
macTestSwitchInfoSrsType1Switch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 80), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoSrsType1Switch.setStatus('current')
macTestSwitchInfoUlMimoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 81), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 0, 1, 2)).clone(namedValues=NamedValues(("interMode", -1), ("singleAntennaPort", 0), ("closeLoopRank1", 1), ("closeLoopRank2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlMimoSwitch.setStatus('current')
macTestSwitchInfoSchePrbControlSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 82), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoSchePrbControlSwitch.setStatus('current')
macTestSwitchInfoSchePrbControlSub = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoSchePrbControlSub.setStatus('current')
macTestSwitchInfoSchePrbStart = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoSchePrbStart.setStatus('current')
macTestSwitchInfoSchePrbNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoSchePrbNum.setStatus('current')
macTestSwitchInfoMbsfnCfiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoMbsfnCfiNum.setStatus('current')
macTestSwitchInfoSpsFirstTBSizeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 90), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoSpsFirstTBSizeSwitch.setStatus('current')
macTestSwitchInfoGapScheOptimizationSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 91), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoGapScheOptimizationSwitch.setStatus('current')
macTestSwitchInfoDlOneStreamBfUsePort8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 92), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("port7", 0), ("port8", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlOneStreamBfUsePort8.setStatus('current')
macTestSwitchInfoPagingSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 93), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoPagingSwitch.setStatus('current')
macTestSwitchInfoNeighCellPagingSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 94), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoNeighCellPagingSwitch.setStatus('current')
macTestSwitchInfoSelPriScheSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 95), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoSelPriScheSwitch.setStatus('current')
macTestSwitchInfoMbsfnSchTm9Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 96), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoMbsfnSchTm9Flag.setStatus('current')
macTestSwitchInfoMaxMsg3Mcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoMaxMsg3Mcs.setStatus('current')
macTestSwitchInfoMaxMsg4Mcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoMaxMsg4Mcs.setStatus('current')
macTestSwitchInfoUlMaxSrbMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlMaxSrbMcs.setStatus('current')
macTestSwitchInfoDlMaxSrbMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlMaxSrbMcs.setStatus('current')
macTestSwitchInfoTm9CBSelfAdaptSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 101), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoTm9CBSelfAdaptSwitch.setStatus('current')
macTestSwitchInfoComEnhancedAllTxSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 103), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoComEnhancedAllTxSwitch.setStatus('current')
macTestSwitchInfoUpAdaptAdvanceSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 104), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUpAdaptAdvanceSwitch.setStatus('current')
macTestSwitchInfoUpTfrcRandomSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 105), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUpTfrcRandomSwitch.setStatus('current')
macTestSwitchInfoDlTfrcRandomSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 106), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlTfrcRandomSwitch.setStatus('current')
macTestSwitchInfoCqiMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 107), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)).clone(namedValues=NamedValues(("ms200", 0), ("ms400", 1), ("ms600", 2), ("ms800", 3), ("s1", 4), ("s2", 5), ("s4", 6), ("s6", 7), ("s8", 8), ("s10", 9), ("infinity", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoCqiMaxTime.setStatus('current')
macTestSwitchInfoBsrBoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 108), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoBsrBoSwitch.setStatus('current')
macTestSwitchInfoUlSrsSfnMcsDec = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 109), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlSrsSfnMcsDec.setStatus('current')
macTestSwitchInfoPucch1bcsPeakFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 110), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoPucch1bcsPeakFlag.setStatus('current')
macTestSwitchInfoVoipUlPrbNumMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoVoipUlPrbNumMin.setStatus('current')
macTestSwitchInfoUl2PrbMcsDec = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 112), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUl2PrbMcsDec.setStatus('current')
macTestSwitchInfoInitULPrbNumMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 113), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoInitULPrbNumMax.setStatus('current')
macTestSwitchInfoInitULPreScheFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 114), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoInitULPreScheFlag.setStatus('current')
macTestSwitchInfoInitULCQIModifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 115), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoInitULCQIModifFlag.setStatus('current')
macTestSwitchInfoInitDLCQIModifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 116), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoInitDLCQIModifFlag.setStatus('current')
macTestSwitchInfoInitULMaxPrbNumFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 117), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoInitULMaxPrbNumFlag.setStatus('current')
macTestSwitchInfoLogUeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 118), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoLogUeIndex.setStatus('current')
macTestSwitchInfoAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 119), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoAlarmIndex.setStatus('current')
macTestSwitchInfoLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 120), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoLogIndex.setStatus('current')
macTestSwitchInfoUpQueEstimateMaxPrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 121), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUpQueEstimateMaxPrb.setStatus('current')
macTestSwitchInfoDownQueEstimateMaxPrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 122), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDownQueEstimateMaxPrb.setStatus('current')
macTestSwitchInfoUpTfrcMaxPrbInPrachSubfram = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 123), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUpTfrcMaxPrbInPrachSubfram.setStatus('current')
macTestSwitchInfoUpDownSubFramLimitDownUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 124), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUpDownSubFramLimitDownUeNum.setStatus('current')
macTestSwitchCsiRsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 125), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchCsiRsPriority.setStatus('current')
macTestSwitchTaDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 126), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchTaDelta.setStatus('current')
macTestSwitchInfoVoIPOneWayDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 127), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoVoIPOneWayDelay.setStatus('current')
macTestSwitchInfoVoIPOneWayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 128), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoVoIPOneWayThreshold.setStatus('current')
macTestSwitchInfoResiBLERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 129), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoResiBLERThreshold.setStatus('current')
macTestSwitchUpScheOptMcsSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 130), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchUpScheOptMcsSwitch.setStatus('current')
macTestSwitchUpScheOptMcsThred = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 131), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchUpScheOptMcsThred.setStatus('current')
macTestSwitchUpScheOptMcsStaticsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 132), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchUpScheOptMcsStaticsNum.setStatus('current')
macTestSwitchQci1ScwSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 133), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchQci1ScwSwitch.setStatus('current')
macTestSwitchQci2ScwSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 134), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchQci2ScwSwitch.setStatus('current')
macTestSwitchQci1Qci2ScwSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 135), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchQci1Qci2ScwSwitch.setStatus('current')
macTestSwitchDlAtuUlAckFirstBler = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 136), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchDlAtuUlAckFirstBler.setStatus('current')
macTestSwitchUlRetxPrbSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 137), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchUlRetxPrbSwitch.setStatus('current')
macTestSwitchSrbDlScheNumSub0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 138), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchSrbDlScheNumSub0.setStatus('current')
macTestSwitchSrbDlScheNumSub1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 139), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchSrbDlScheNumSub1.setStatus('current')
macTestSwitchSrbDlScheNumSub3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 140), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchSrbDlScheNumSub3.setStatus('current')
macTestSwitchSrbDlScheNumSub4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 141), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchSrbDlScheNumSub4.setStatus('current')
macTestSwitchUlResConfSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 142), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchUlResConfSwitch.setStatus('current')
macTestSwitchInfoUpDownSubFLDownUeNumbpoi = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 143), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUpDownSubFLDownUeNumbpoi.setStatus('current')
macTestSwitchInfoDlCchCfiNumbpoi = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 144), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlCchCfiNumbpoi.setStatus('current')
macTestSwitchInfoUlMaxScheUeNumbpoi = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 145), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlMaxScheUeNumbpoi.setStatus('current')
macTestSwitchInfoDlMaxScheUeNumbpoi = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 146), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoDlMaxScheUeNumbpoi.setStatus('current')
macTestSwitchInfoCqiTm8RiTMSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 152), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoCqiTm8RiTMSwitch.setStatus('current')
macTestSwitchVolteAnsweredLimitMcsSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 154), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchVolteAnsweredLimitMcsSwitch.setStatus('current')
macTestSwitchVolteAnsweredPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 155), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchVolteAnsweredPeriod.setStatus('current')
macTestSwitchInfoUlVoipRetxFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 2, 1, 156), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("auto", 1), ("noAuto", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoUlVoipRetxFlag.setStatus('current')
macSwitchTestInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3), )
if mibBuilder.loadTexts: macSwitchTestInfoTable.setStatus('current')
macSwitchTestInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "macSwitchTestInfoLcId"))
if mibBuilder.loadTexts: macSwitchTestInfoEntry.setStatus('current')
macSwitchTestInfoLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: macSwitchTestInfoLcId.setStatus('current')
macSwitchTestInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoRowStatus.setStatus('current')
macSwitchTestInfoDlBoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("dataon", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoDlBoSwitch.setStatus('current')
macSwitchTestInfoUlBoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("off", 0), ("presche", 1), ("bo", 2), ("dltriggerpre", 3), ("preboth", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoUlBoSwitch.setStatus('current')
macSwitchTestInfoRbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoRbIndex.setStatus('current')
macSwitchTestInfoStartPos = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoStartPos.setStatus('current')
macSwitchTestInfoUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoUeNum.setStatus('current')
macSwitchTestInfoDlBoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoDlBoSize.setStatus('current')
macSwitchTestInfoUlBoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoUlBoSize.setStatus('current')
macSwitchTestInfoPdcpFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoPdcpFreq.setStatus('current')
macSwitchTestInfoPdcpPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoPdcpPktNum.setStatus('current')
macSwitchTestInfoPdcpPktLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoPdcpPktLen.setStatus('current')
macSwitchTestInfoPdcpDynamicPktLenSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoPdcpDynamicPktLenSwitch.setStatus('current')
macSwitchTestInfoPdcpDynamicMinPktLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoPdcpDynamicMinPktLen.setStatus('current')
macSwitchTestInfoUlPrescheBatConsumpRef = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoUlPrescheBatConsumpRef.setStatus('current')
macSwitchTestInfoUlPrescheTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("ms100", 0), ("ms200", 1), ("ms500", 2), ("s1", 3), ("s2", 4), ("s5", 5), ("s10", 6), ("infinity", 7), ("ms10", 8), ("ms20", 9), ("ms40", 10), ("ms50", 11), ("ms80", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoUlPrescheTimeLimit.setStatus('current')
macSwitchTestInfoUlPreschePrbLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoUlPreschePrbLimit.setStatus('current')
macSwitchTestInfoActiveRrcPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("ms100", 0), ("ms200", 1), ("ms500", 2), ("s1", 3), ("s2", 4), ("s5", 5), ("s10", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoActiveRrcPeriod.setStatus('current')
macTestSwitchInfoVoLTECdlStatPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macTestSwitchInfoVoLTECdlStatPeriod.setStatus('current')
macSwitchTestInfoRTPLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoRTPLossThreshold.setStatus('current')
macSwitchTestInfoRohcFBNackThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoRohcFBNackThreshold.setStatus('current')
macSwitchTestInfoAutoTransLog = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoAutoTransLog.setStatus('current')
macSwitchTestInfoPdcpAmOptimizeThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoPdcpAmOptimizeThr.setStatus('current')
macSwitchTestInfoVipCntLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoVipCntLmt.setStatus('current')
macSwitchTestInfoTAReviseThre = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoTAReviseThre.setStatus('current')
macSwitchTestInfoTAReviseLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoTAReviseLmt.setStatus('current')
macSwitchTestInfoTCPDelayOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoTCPDelayOpt.setStatus('current')
macSwitchTestInfoRohcOptSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoRohcOptSwitch.setStatus('current')
macSwitchTestInfoL2Reserve = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoL2Reserve.setStatus('current')
macSwitchTestInfoRohcThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoRohcThreshold.setStatus('current')
macSwitchTestInfoIpPacketThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoIpPacketThr.setStatus('current')
macSwitchTestInfoUlPrescheAllPrbLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoUlPrescheAllPrbLimit.setStatus('current')
macSwitchTestInfoUlPrescheTbSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 80000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoUlPrescheTbSizeLimit.setStatus('current')
macSwitchTestInfoUlPrescheInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoUlPrescheInterval.setStatus('current')
macSwitchTestInfoRlcMaxTransmitTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoRlcMaxTransmitTimes.setStatus('current')
macSwitchTestInfoTaPdcchOrderTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoTaPdcchOrderTimes.setStatus('current')
macSwitchTestInfoTaPdcchOrderTimerLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 38), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)).clone(namedValues=NamedValues(("ms200", 0), ("ms300", 1), ("ms500", 2), ("s1", 3), ("s2", 4), ("s3", 5), ("s4", 6), ("s5", 7), ("s6", 8), ("s7", 9), ("s8", 10), ("s9", 11)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoTaPdcchOrderTimerLen.setStatus('current')
macStopLogByType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macStopLogByType.setStatus('current')
macSwitchTestInfoUlPreschePrbNumMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoUlPreschePrbNumMin.setStatus('current')
macSwitchTestInfoTCPActiveAckSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 47), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoTCPActiveAckSwitch.setStatus('current')
macSwitchTestInfoTCPActiveAckNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoTCPActiveAckNumber.setStatus('current')
macSwitchTestInfoTm8MuSuMimoSwitchTLS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 51), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("mumimo", 0), ("sumimo", 1), ("forbidtm8", 2), ("sumuadapter", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoTm8MuSuMimoSwitchTLS.setStatus('current')
macSwitchTestInfoUlMuMIMOSwitchTLS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 52), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoUlMuMIMOSwitchTLS.setStatus('current')
macSwitchTestInfoDlFsSwitchTLS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 53), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("srson", 1), ("cqion", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoDlFsSwitchTLS.setStatus('current')
macSwitchTestInfoDl8BitsQamTls = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 54), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoDl8BitsQamTls.setStatus('current')
macSwitchTestInfoTm9MsmTLS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 55), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("mumimo", 0), ("sumimo", 1), ("forbidtm9", 2), ("mumimo4Stream2", 3), ("sumimoAndMumimo2StreamAdaptive", 4), ("mumimo4Stream1", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoTm9MsmTLS.setStatus('current')
macSwitchTestInfoRiaSwitchTLS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 3, 1, 56), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macSwitchTestInfoRiaSwitchTLS.setStatus('current')
spsOptmzTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4), )
if mibBuilder.loadTexts: spsOptmzTable.setStatus('current')
spsOptmzEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "spsOptmzLcId"))
if mibBuilder.loadTexts: spsOptmzEntry.setStatus('current')
spsOptmzLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: spsOptmzLcId.setStatus('current')
spsOptmzRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzRowStatus.setStatus('current')
spsOptmzVPMPSThode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 560))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzVPMPSThode.setStatus('current')
spsOptmzVPMCPcktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzVPMCPcktNum.setStatus('current')
spsOptmzModifyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzModifyTimer.setStatus('current')
spsOptmzVoIPStatTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzVoIPStatTimer.setStatus('current')
spsOptmzUpAlgExplctRlThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzUpAlgExplctRlThr.setStatus('current')
spsOptmzUpAlgActvThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzUpAlgActvThr.setStatus('current')
spsOptmzUpAlgPrsstDsThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzUpAlgPrsstDsThr.setStatus('current')
spsOptmzDlnkPrsstActvThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzDlnkPrsstActvThr.setStatus('current')
spsOptmzDlnkPrsstIntThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzDlnkPrsstIntThr.setStatus('current')
spsOptmzDlnkPrsstDsThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzDlnkPrsstDsThr.setStatus('current')
spsOptmzDlSpsUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzDlSpsUserNum.setStatus('current')
spsOptmzUpAlgPersistPrbLimitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzUpAlgPersistPrbLimitNum.setStatus('current')
spsOptmzQci1NoSpsFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzQci1NoSpsFlag.setStatus('current')
spsOptmzNoPktRptThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzNoPktRptThr.setStatus('current')
spsOptmzSrvccBlerThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzSrvccBlerThr.setStatus('current')
spsOptmzSrvccBlerTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzSrvccBlerTag.setStatus('current')
spsOptmzUpSpsActiveMcsLowThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzUpSpsActiveMcsLowThr.setStatus('current')
spsOptmzPacketLoseCopyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzPacketLoseCopyNum.setStatus('current')
spsOptmzDlLoseCopyFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzDlLoseCopyFlag.setStatus('current')
spsOptmzUlLoseCopyFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzUlLoseCopyFlag.setStatus('current')
spsOptmzPacketLoseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160, 320))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzPacketLoseTimer.setStatus('current')
spsOptmzPacketLoseCopyUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzPacketLoseCopyUeNum.setStatus('current')
spsOptmzAmrcSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzAmrcSwitch.setStatus('current')
spsOptmzAmrcAjustPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzAmrcAjustPeriod.setStatus('current')
spsOptmzAmrcRlcSegThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzAmrcRlcSegThr.setStatus('current')
spsOptmzAmrcTgtRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzAmrcTgtRate.setStatus('current')
spsOptmzRlcSegFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzRlcSegFlag.setStatus('current')
spsOptmzRlcSegLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzRlcSegLimit.setStatus('current')
spsOptmzUlPacketRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzUlPacketRatio.setStatus('current')
spsOptmzSidUlLoseCopyFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzSidUlLoseCopyFlag.setStatus('current')
spsOptmzActiveUlLoseCopyFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzActiveUlLoseCopyFlag.setStatus('current')
spsOptmzMaxCopyUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzMaxCopyUserNum.setStatus('current')
spsOptmzMaxCopyPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzMaxCopyPacketNum.setStatus('current')
spsOptmzAmrcRlcSegThr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 7, 2, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spsOptmzAmrcRlcSegThr1.setStatus('current')
dlCAPowerControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8))
dlCAPowerControTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1), )
if mibBuilder.loadTexts: dlCAPowerControTable.setStatus('current')
dlCAPowerControEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "dlCAPwrLcId"))
if mibBuilder.loadTexts: dlCAPowerControEntry.setStatus('current')
dlCAPwrLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: dlCAPwrLcId.setStatus('current')
dlCAPwrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrRowStatus.setStatus('current')
dlCAPwrPhichPowerCtrlSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrPhichPowerCtrlSwitch.setStatus('current')
dlCAPwrUePdcchPowerCtrlSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrUePdcchPowerCtrlSwitch.setStatus('current')
dlCAPwrDelta1Bf2Sfbc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrDelta1Bf2Sfbc.setStatus('current')
dlCAPwrDelta2Sdm2SfbcInTm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrDelta2Sdm2SfbcInTm3.setStatus('current')
dlCAPwrDelta3Sdm2SfbcInTm4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrDelta3Sdm2SfbcInTm4.setStatus('current')
dlCAPwrDelta4Bf2SfbcInTm8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrDelta4Bf2SfbcInTm8.setStatus('current')
dlCAPwrDeltaPowerMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrDeltaPowerMargin.setStatus('current')
dlCAPwrDeltaPowerPhichMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrDeltaPowerPhichMargin.setStatus('current')
dlCAPwrPhichPowerDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrPhichPowerDelta.setStatus('current')
dlCAPwrTargetSinrPhich = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrTargetSinrPhich.setStatus('current')
dlCAPwrTargetSinr1Cce1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrTargetSinr1Cce1.setStatus('current')
dlCAPwrTargetSinr1Cce2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrTargetSinr1Cce2.setStatus('current')
dlCAPwrTargetSinr1Cce3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrTargetSinr1Cce3.setStatus('current')
dlCAPwrTargetSinr2Cce1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrTargetSinr2Cce1.setStatus('current')
dlCAPwrTargetSinr2Cce2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrTargetSinr2Cce2.setStatus('current')
dlCAPwrTargetSinr2Cce3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrTargetSinr2Cce3.setStatus('current')
dlCAPwrTargetSinr4Cce1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrTargetSinr4Cce1.setStatus('current')
dlCAPwrTargetSinr4Cce2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrTargetSinr4Cce2.setStatus('current')
dlCAPwrTargetSinr4Cce3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrTargetSinr4Cce3.setStatus('current')
dlCAPwrTargetSinr8Cce1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrTargetSinr8Cce1.setStatus('current')
dlCAPwrTargetSinr8Cce2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrTargetSinr8Cce2.setStatus('current')
dlCAPwrTargetSinr8Cce3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrTargetSinr8Cce3.setStatus('current')
dlCAPwrPowerBoostCqi2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrPowerBoostCqi2.setStatus('current')
dlCAPwrCellPdcchCceNum1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(4, 8)).clone(namedValues=NamedValues(("val4", 4), ("val8", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCellPdcchCceNum1.setStatus('current')
dlCAPwrCellPdcchCceNum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(4, 8)).clone(namedValues=NamedValues(("val4", 4), ("val8", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCellPdcchCceNum2.setStatus('current')
dlCAPwrMaxPowerMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrMaxPowerMargin.setStatus('current')
dlCAPwrCce1CqiThreshHold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCce1CqiThreshHold.setStatus('current')
dlCAPwrCce2CqiThreshHold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCce2CqiThreshHold.setStatus('current')
dlCAPwrCce4CqiThreshHold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCce4CqiThreshHold.setStatus('current')
dlCAPwrCceUsageTh1Low = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCceUsageTh1Low.setStatus('current')
dlCAPwrCceUsageTh2Low = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCceUsageTh2Low.setStatus('current')
dlCAPwrCceUsageTh1High = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(70, 95))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCceUsageTh1High.setStatus('current')
dlCAPwrCceUsageTh2High = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(70, 95))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCceUsageTh2High.setStatus('current')
dlCAPwrCfiTh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCfiTh1.setStatus('current')
dlCAPwrMaxCfiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrMaxCfiNum.setStatus('current')
dlCAPwrMaxDlCfiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrMaxDlCfiNum.setStatus('current')
dlCAPwrCfiModT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(40, 400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCfiModT1.setStatus('current')
dlCAPwrCfiModT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(40, 400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCfiModT2.setStatus('current')
dlCAPwrCfiModT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(40, 400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCfiModT3.setStatus('current')
dlCAPwrCchChooseCceOptimizeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 42), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCchChooseCceOptimizeFlag.setStatus('current')
dlCAPwrCchChooseCceOptimizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCchChooseCceOptimizeLimit.setStatus('current')
dlCAPwrCchDownCCeUpPower8to4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCchDownCCeUpPower8to4.setStatus('current')
dlCAPwrCchDownCCeUpPower4to2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCchDownCCeUpPower4to2.setStatus('current')
dlCAPwrCchDownCCeUpPower2to1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 8, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCAPwrCchDownCCeUpPower2to1.setStatus('current')
softLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9))
softLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1), )
if mibBuilder.loadTexts: softLicenseTable.setStatus('current')
softLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "softLicenseLcId"))
if mibBuilder.loadTexts: softLicenseEntry.setStatus('current')
softLicenseLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: softLicenseLcId.setStatus('current')
softLicenseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softLicenseRowStatus.setStatus('current')
softLicenseDlPrbNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softLicenseDlPrbNum.setStatus('current')
softLicenseUlPrbNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softLicenseUlPrbNum.setStatus('current')
softLicenseDlThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5000, 200000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softLicenseDlThroughput.setStatus('current')
softLicenseUlThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5000, 200000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softLicenseUlThroughput.setStatus('current')
softLicenseDlBucketT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softLicenseDlBucketT.setStatus('current')
softLicenseUlBucketT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softLicenseUlBucketT.setStatus('current')
softLicenseDlSfBalanceCoeff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softLicenseDlSfBalanceCoeff.setStatus('current')
softLicenseUlSfBalanceCoeff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softLicenseUlSfBalanceCoeff.setStatus('current')
softLicenseDlSfBalanceT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softLicenseDlSfBalanceT.setStatus('current')
softLicenseUlSfBalanceT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softLicenseUlSfBalanceT.setStatus('current')
softLicenseDlBalanceSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softLicenseDlBalanceSwitch.setStatus('current')
softLicenseUlBalanceSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softLicenseUlBalanceSwitch.setStatus('current')
cellSoftLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 2), )
if mibBuilder.loadTexts: cellSoftLicenseTable.setStatus('current')
cellSoftLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellSoftLicenseLcId"))
if mibBuilder.loadTexts: cellSoftLicenseEntry.setStatus('current')
cellSoftLicenseLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellSoftLicenseLcId.setStatus('current')
cellSoftLicenseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSoftLicenseRowStatus.setStatus('current')
cellSoftLicenseCombineEnhancedCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSoftLicenseCombineEnhancedCell.setStatus('current')
cellSoftLicense932Fun = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSoftLicense932Fun.setStatus('current')
cellSoftLicenseRanSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellSoftLicenseRanSharing.setStatus('current')
lcc = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 10))
lccTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 10, 1), )
if mibBuilder.loadTexts: lccTable.setStatus('current')
lccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 10, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "lccLcId"))
if mibBuilder.loadTexts: lccEntry.setStatus('current')
lccLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: lccLcId.setStatus('current')
lccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 10, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lccRowStatus.setStatus('current')
lccFilterCoeff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("k0", 0), ("k1", 1), ("k2", 2), ("k3", 3), ("k4", 4), ("k5", 5), ("k6", 6), ("k7", 7), ("k8", 8), ("k9", 9), ("k11", 10), ("k13", 11), ("k15", 12), ("k17", 13), ("k19", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lccFilterCoeff.setStatus('current')
lccServeCellOff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("n24dB", 0), ("n22dB", 1), ("n20dB", 2), ("n18dB", 3), ("n16dB", 4), ("n14dB", 5), ("n12dB", 6), ("n10dB", 7), ("n8dB", 8), ("n6dB", 9), ("n5dB", 10), ("n4dB", 11), ("n3dB", 12), ("n2dB", 13), ("n1dB", 14), ("p0dB", 15), ("p1dB", 16), ("p2dB", 17), ("p3dB", 18), ("p4dB", 19), ("p5dB", 20), ("p6dB", 21), ("p8dB", 22), ("p10dB", 23), ("p12dB", 24), ("p14dB", 25), ("p16dB", 26), ("p18dB", 27), ("p20dB", 28), ("p22dB", 29), ("p24dB", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lccServeCellOff.setStatus('current')
lccNeighborCellQOff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("n24dB", 0), ("n22dB", 1), ("n20dB", 2), ("n18dB", 3), ("n16dB", 4), ("n14dB", 5), ("n12dB", 6), ("n10dB", 7), ("n8dB", 8), ("n6dB", 9), ("n5dB", 10), ("n4dB", 11), ("n3dB", 12), ("n2dB", 13), ("n1dB", 14), ("p0dB", 15), ("p1dB", 16), ("p2dB", 17), ("p3dB", 18), ("p4dB", 19), ("p5dB", 20), ("p6dB", 21), ("p8dB", 22), ("p10dB", 23), ("p12dB", 24), ("p14dB", 25), ("p16dB", 26), ("p18dB", 27), ("p20dB", 28), ("p22dB", 29), ("p24dB", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lccNeighborCellQOff.setStatus('current')
lccAdjustAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lccAdjustAC.setStatus('current')
lccProcessMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 7)).clone(namedValues=NamedValues(("hc", 0), ("deleteErab", 1), ("close", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lccProcessMethod1.setStatus('current')
lccProcessMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 7)).clone(namedValues=NamedValues(("hc", 0), ("deleteErab", 1), ("close", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lccProcessMethod2.setStatus('current')
lbc40Fc = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11))
lbc40FcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1), )
if mibBuilder.loadTexts: lbc40FcTable.setStatus('current')
lbc40FcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "lbc40FcLcId"))
if mibBuilder.loadTexts: lbc40FcEntry.setStatus('current')
lbc40FcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: lbc40FcLcId.setStatus('current')
lbc40FcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcRowStatus.setStatus('current')
lbc40FcUlPrbDifferTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcUlPrbDifferTh.setStatus('current')
lbc40FcDlPrbDifferTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcDlPrbDifferTh.setStatus('current')
lbc40FcCpuDifferTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcCpuDifferTh.setStatus('current')
lbc40FcCpuLoadTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcCpuLoadTag.setStatus('current')
lbc40FcFastHoDeltaTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcFastHoDeltaTh.setStatus('current')
lbc40FcHoUeChoseStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("a2AndA4", 0), ("a4only", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcHoUeChoseStrategy.setStatus('current')
lbc40FcUeListStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("prbUsageRate", 0), ("qciPriAndPrbUsageRate", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcUeListStrategy.setStatus('current')
lbc40FcUeListWithPrbUsageTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcUeListWithPrbUsageTag.setStatus('current')
lbc40FcUlLowestUePrbUsageTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcUlLowestUePrbUsageTh.setStatus('current')
lbc40FcDlLowestUePrbUsageTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcDlLowestUePrbUsageTh.setStatus('current')
lbcPpHcSuppressTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcPpHcSuppressTimer.setStatus('current')
lbc40FcStrategyRollbackTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcStrategyRollbackTag.setStatus('current')
lbc40FcHoUeChoseStrategyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcHoUeChoseStrategyPriority.setStatus('current')
lbc40FcUeListWithPrbUsageStrategyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcUeListWithPrbUsageStrategyPriority.setStatus('current')
lbc40FcFobiddenQciStrategyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcFobiddenQciStrategyPriority.setStatus('current')
lbcUserNumTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcUserNumTag.setStatus('current')
lbcUserNumThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcUserNumThreshold.setStatus('current')
lbcFastHoMaxUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcFastHoMaxUserNum.setStatus('current')
lbcUserNumDifferTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcUserNumDifferTh.setStatus('current')
lbc40FcFobiddenQciBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 31), Bits().clone(namedValues=NamedValues(("qci1", 0), ("qci2", 1), ("qci3", 2), ("qci4", 3), ("qci5", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbc40FcFobiddenQciBitMap.setStatus('current')
lbcUsernodebswitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcUsernodebswitch.setStatus('current')
lbcUserReDirectTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcUserReDirectTag.setStatus('current')
lbcCacUserNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 11, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lbcCacUserNumber.setStatus('current')
dlPowerAlgorithmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12))
dlPATTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1), )
if mibBuilder.loadTexts: dlPATTable.setStatus('current')
dlPATEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "dlPATLcId"))
if mibBuilder.loadTexts: dlPATEntry.setStatus('current')
dlPATLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: dlPATLcId.setStatus('current')
dlPATRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlPATRowStatus.setStatus('current')
dlPATPadynschuSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlPATPadynschuSwitch.setStatus('current')
dlPATPaDrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("n6dB", 0), ("n4dot77dB", 1), ("n3dB", 2), ("n1dot77dB", 3), ("p0dB", 4), ("p1dB", 5), ("p2dB", 6), ("p3dB", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlPATPaDrb.setStatus('current')
dlPATPaSrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("n6dB", 0), ("n4dot77dB", 1), ("n3dB", 2), ("n1dot77dB", 3), ("p0dB", 4), ("p1dB", 5), ("p2dB", 6), ("p3dB", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlPATPaSrb.setStatus('current')
dlPATTimerupdatepower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlPATTimerupdatepower.setStatus('current')
dlPATFilterfactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlPATFilterfactor.setStatus('current')
dlPATSpeeffthred1TM7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlPATSpeeffthred1TM7.setStatus('current')
dlPATSpeeffthred2TM7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlPATSpeeffthred2TM7.setStatus('current')
dlPATSpeeffthred1TM8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlPATSpeeffthred1TM8.setStatus('current')
dlPATSpeeffthred2TM8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlPATSpeeffthred2TM8.setStatus('current')
dlPATSpeeffthred1QPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlPATSpeeffthred1QPSK.setStatus('current')
dlPATSpeeffthred2QPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlPATSpeeffthred2QPSK.setStatus('current')
dlPATDeltapowerup = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 12, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("dB0", 0), ("dB1", 1), ("dB2", 2), ("dB3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlPATDeltapowerup.setStatus('current')
lmc = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13))
lmcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1), )
if mibBuilder.loadTexts: lmcTable.setStatus('current')
lmcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "lmcLcId"))
if mibBuilder.loadTexts: lmcEntry.setStatus('current')
lmcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: lmcLcId.setStatus('current')
lmcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcRowStatus.setStatus('current')
lmclccAlgorithmTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmclccAlgorithmTag.setStatus('current')
lmclbc40FcAlgorithmTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmclbc40FcAlgorithmTag.setStatus('current')
lmcUlCongestionTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcUlCongestionTh.setStatus('current')
lmcDlCongestionTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcDlCongestionTh.setStatus('current')
lmcUlCongestRestoreTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcUlCongestRestoreTh.setStatus('current')
lmcDlCongestRestoreTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcDlCongestRestoreTh.setStatus('current')
lmcUlPrbHighLoadTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcUlPrbHighLoadTh.setStatus('current')
lmcDlPrbHighLoadTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcDlPrbHighLoadTh.setStatus('current')
lmcCpuHighLoadTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcCpuHighLoadTh.setStatus('current')
lmcUlPrbPreAlarmTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcUlPrbPreAlarmTh.setStatus('current')
lmcDlPrbPreAlarmTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcDlPrbPreAlarmTh.setStatus('current')
lmcUlPrbRestoreTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcUlPrbRestoreTh.setStatus('current')
lmcDlPrbRestroeTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcDlPrbRestroeTh.setStatus('current')
lmcLccLoadDetectPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcLccLoadDetectPrd.setStatus('current')
lmcScLoadDetectPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcScLoadDetectPrd.setStatus('current')
lmcResStateUpdatePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("lmcOneThousandMs", 0), ("lmcTwoThousandMs", 1), ("lmcFiveThousandMs", 2), ("lmcTenThousandMs", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcResStateUpdatePeriod.setStatus('current')
lmcAdjCellNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcAdjCellNum.setStatus('current')
lmcInterRatLoadBalanceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcInterRatLoadBalanceTag.setStatus('current')
lmcVoiceNumTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcVoiceNumTag.setStatus('current')
lmcVoiceNumThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcVoiceNumThreshold.setStatus('current')
lmcVoiceNumRestoreTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcVoiceNumRestoreTh.setStatus('current')
lmcIntraVoiceLbTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcIntraVoiceLbTag.setStatus('current')
lmcIntreVoiceLbTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcIntreVoiceLbTag.setStatus('current')
lmcPrbCongestionTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcPrbCongestionTag.setStatus('current')
lmcPrbUlCongestionTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcPrbUlCongestionTh.setStatus('current')
lmcPrbDlCongestionTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcPrbDlCongestionTh.setStatus('current')
lmcPrbUlCongestRestoreTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcPrbUlCongestRestoreTh.setStatus('current')
lmcPrbDlCongestRestoreTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcPrbDlCongestRestoreTh.setStatus('current')
lmcPrbCongestionDetectDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcPrbCongestionDetectDuration.setStatus('current')
lmcPrbCongestionRestoreDetectDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcPrbCongestionRestoreDetectDuration.setStatus('current')
lmcCongestionExecutePrd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcCongestionExecutePrd.setStatus('current')
lmcMlbAlgorithmTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 37), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbAlgorithmTag.setStatus('current')
lmcMlbLoadDetectPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbLoadDetectPrd.setStatus('current')
lmcMlbOcnAdjustUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-24, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbOcnAdjustUpperLimit.setStatus('current')
lmcMlbOcnAdjustLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-24, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbOcnAdjustLowerLimit.setStatus('current')
lmcMlbOcnAdjustMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbOcnAdjustMaxNum.setStatus('current')
lmcMlbHighLoadThDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbHighLoadThDl.setStatus('current')
lmcMlbHighLoadThUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbHighLoadThUl.setStatus('current')
lmcMlbLoadRestoreThDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbLoadRestoreThDl.setStatus('current')
lmcMlbLoadRestoreThUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbLoadRestoreThUl.setStatus('current')
lmcMlbAdjCellJudgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbAdjCellJudgeTimer.setStatus('current')
lmcMlbParaBackoffTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 47), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbParaBackoffTag.setStatus('current')
lmcMlbBackoffMonitorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbBackoffMonitorTime.setStatus('current')
lmcMlbAdjustProtectTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbAdjustProtectTh.setStatus('current')
lmcMlbTrueAdjCellJudge = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 50), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("a3", 0), ("mr", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbTrueAdjCellJudge.setStatus('current')
lmcMlbMrDeltaRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbMrDeltaRsrp.setStatus('current')
lmcMlbMrDeltaRsrpRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbMrDeltaRsrpRatio.setStatus('current')
lmcMlbMrEstimatePrd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcMlbMrEstimatePrd.setStatus('current')
lmcPucchTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 54), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcPucchTag.setStatus('current')
lmcPucchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcPucchThreshold.setStatus('current')
lmcCacUlPrbLoadTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcCacUlPrbLoadTh.setStatus('current')
lmcCacDlPrbLoadTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 13, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lmcCacDlPrbLoadTh.setStatus('current')
cellCAPara = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14))
cellCAParaTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1), )
if mibBuilder.loadTexts: cellCAParaTable.setStatus('current')
cellCAParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "caLcId"))
if mibBuilder.loadTexts: cellCAParaEntry.setStatus('current')
caLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: caLcId.setStatus('current')
caRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caRowStatus.setStatus('current')
caUplinkSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caUplinkSwitch.setStatus('current')
caDownlinkSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caDownlinkSwitch.setStatus('current')
caSCellSINRAbsThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caSCellSINRAbsThr.setStatus('current')
caSCellSINRRelativeThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caSCellSINRRelativeThr.setStatus('current')
caSCellDeactivationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("rf0", 0), ("rf2", 1), ("rf4", 2), ("rf8", 3), ("rf16", 4), ("rf32", 5), ("rf64", 6), ("rf128", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caSCellDeactivationTimer.setStatus('current')
caSCellConfigAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("caRelation", 0), ("relativeRSRP", 1), ("sinr", 2), ("absoluteRSRP", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caSCellConfigAlgorithm.setStatus('current')
caCrossCarrierSchedulingSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caCrossCarrierSchedulingSwitch.setStatus('current')
caDectWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(80, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caDectWindow.setStatus('current')
caActiveDataThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caActiveDataThr.setStatus('current')
caDeActiveDataThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caDeActiveDataThr.setStatus('current')
caRetioThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caRetioThr.setStatus('current')
caMacScellActSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("dataflow", 1), ("qos", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caMacScellActSwitch.setStatus('current')
caMacScellHiddenDeActSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caMacScellHiddenDeActSwitch.setStatus('current')
caActiveNumThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caActiveNumThr.setStatus('current')
caScellActiveAlgoPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("ms100", 0), ("ms200", 1), ("ms400", 2), ("ms600", 3), ("ms800", 4), ("ms1000", 5), ("ms2000", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caScellActiveAlgoPeriod.setStatus('current')
caRlcOveloadThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caRlcOveloadThr.setStatus('current')
caScellActiveRlcOveloadThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caScellActiveRlcOveloadThr.setStatus('current')
caMcsDeActPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("ms10", 0), ("ms20", 1), ("ms40", 2), ("ms80", 3), ("ms100", 4), ("ms200", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caMcsDeActPeriod.setStatus('current')
caMcsDeActiveThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caMcsDeActiveThr.setStatus('current')
caScellActiveThroughputThrforUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caScellActiveThroughputThrforUl.setStatus('current')
caScellDeActiveThroughputThrforUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caScellDeActiveThroughputThrforUl.setStatus('current')
caMcsDeActiveThrUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caMcsDeActiveThrUl.setStatus('current')
caScellQosPrbActiveThrDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caScellQosPrbActiveThrDl.setStatus('current')
caScellQosPrbActiveThrUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caScellQosPrbActiveThrUl.setStatus('current')
caScellActualPrbActiveThrDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caScellActualPrbActiveThrDl.setStatus('current')
caScellActualPrbActiveThrUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caScellActualPrbActiveThrUl.setStatus('current')
caRlcBoAllocAlgN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("ms500", 0), ("s1", 1), ("s2", 2), ("s3", 3), ("s5", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caRlcBoAllocAlgN.setStatus('current')
caRlcBoAllocAlgAlpha = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("val4", 0), ("val8", 1), ("val16", 2), ("val32", 3), ("val64", 4), ("val128", 5), ("val256", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caRlcBoAllocAlgAlpha.setStatus('current')
caRlcBoAllocSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caRlcBoAllocSwitch.setStatus('current')
caRlcNonOverloadThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caRlcNonOverloadThr.setStatus('current')
caScellDeactiveRlcOverloadThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caScellDeactiveRlcOverloadThr.setStatus('current')
caBsrActOverloadThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caBsrActOverloadThr.setStatus('current')
caBsrDeactOverloadThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caBsrDeactOverloadThr.setStatus('current')
caQosSatisfyProportionThrUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caQosSatisfyProportionThrUl.setStatus('current')
caQosSatisfyProportionThrDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caQosSatisfyProportionThrDl.setStatus('current')
caBoAllocPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caBoAllocPeriod.setStatus('current')
caPrbThrforBoReAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caPrbThrforBoReAlloc.setStatus('current')
caBoProportionAdjustStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caBoProportionAdjustStep.setStatus('current')
caDRXActSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 44), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caDRXActSwitch.setStatus('current')
caUlBsrAllocSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 45), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caUlBsrAllocSwitch.setStatus('current')
caUlBsrProportionAdjustStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caUlBsrProportionAdjustStep.setStatus('current')
caPrbThrforUlBsrReAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caPrbThrforUlBsrReAlloc.setStatus('current')
caUlBsrRlcAllocAlgoT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 48), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("ms500", 0), ("s1", 1), ("s2", 2), ("s3", 3), ("s5", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caUlBsrRlcAllocAlgoT.setStatus('current')
caUlRlcBsrAllocAlgoAlpha = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 49), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("val4", 0), ("val8", 1), ("val16", 2), ("val32", 3), ("val64", 4), ("val128", 5), ("val256", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caUlRlcBsrAllocAlgoAlpha.setStatus('current')
caUlBsrAllocPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caUlBsrAllocPeriod.setStatus('current')
caUserLimitSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 51), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caUserLimitSwitch.setStatus('current')
caUserLimitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 1, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caUserLimitNum.setStatus('current')
cellCARelationTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 2), )
if mibBuilder.loadTexts: cellCARelationTable.setStatus('current')
cellCARelationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellCACellLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellCACellIndex"))
if mibBuilder.loadTexts: cellCARelationEntry.setStatus('current')
cellCACellLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellCACellLcId.setStatus('current')
cellCACellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cellCACellIndex.setStatus('current')
cellCACellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCACellRowStatus.setStatus('current')
cellCACellLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCACellLocalId.setStatus('current')
comp = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15))
ulCompTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 1), )
if mibBuilder.loadTexts: ulCompTable.setStatus('current')
ulCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ulCompLcId"))
if mibBuilder.loadTexts: ulCompEntry.setStatus('current')
ulCompLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: ulCompLcId.setStatus('current')
ulCompRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulCompRowStatus.setStatus('current')
ulCompMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("sujr", 0), ("mujr", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulCompMode.setStatus('current')
ulCompConfigSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulCompConfigSwitch.setStatus('current')
ulCompNonCoBandPrbEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulCompNonCoBandPrbEnd.setStatus('current')
ulCompFuncSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulCompFuncSwitch.setStatus('current')
ulCompForceSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulCompForceSwitch.setStatus('current')
ulCompMcsThres = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 27))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulCompMcsThres.setStatus('current')
ulCompMcsOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 27))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulCompMcsOffset.setStatus('current')
ulCompJrJeqInd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("send", 0), ("no", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulCompJrJeqInd.setStatus('current')
ulCompFuncTestSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ulCompFuncTestSwitch.setStatus('current')
dlCompTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 2), )
if mibBuilder.loadTexts: dlCompTable.setStatus('current')
dlCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "dlCompLcId"))
if mibBuilder.loadTexts: dlCompEntry.setStatus('current')
dlCompLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: dlCompLcId.setStatus('current')
dlCompRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCompRowStatus.setStatus('current')
dlCompMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("sujt", 0), ("mujt", 1), ("cs", 2), ("njtcs", 3), ("cb", 4), ("ncbcs", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCompMode.setStatus('current')
dlCompConfigSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCompConfigSwitch.setStatus('current')
dlCompFuncSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCompFuncSwitch.setStatus('current')
dlCompCoBandPrbNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCompCoBandPrbNum.setStatus('current')
dlCompCqiThres = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCompCqiThres.setStatus('current')
dlCompCqiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCompCqiOffset.setStatus('current')
dlCompSrsMeaSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCompSrsMeaSwitch.setStatus('current')
dlCompPrbConflictThres = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCompPrbConflictThres.setStatus('current')
dlCompCsPrbThres = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dlCompCsPrbThres.setStatus('current')
sdc = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 16))
sdcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 16, 1), )
if mibBuilder.loadTexts: sdcTable.setStatus('current')
sdcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 16, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sdcLcId"))
if mibBuilder.loadTexts: sdcEntry.setStatus('current')
sdcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sdcLcId.setStatus('current')
sdcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 16, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdcRowStatus.setStatus('current')
sdcDlTransMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 3)).clone(namedValues=NamedValues(("single8ante", 1), ("double8anteNew", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdcDlTransMode.setStatus('current')
sdcRru1TdlMaxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 16, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 550))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdcRru1TdlMaxPwr.setStatus('current')
sdcRru2TdlMaxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 16, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 550))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdcRru2TdlMaxPwr.setStatus('current')
interRatLbPara = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 17))
interRatLbParaTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 17, 1), )
if mibBuilder.loadTexts: interRatLbParaTable.setStatus('current')
interRatLbParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 17, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "interRatLbParaLcId"))
if mibBuilder.loadTexts: interRatLbParaEntry.setStatus('current')
interRatLbParaLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: interRatLbParaLcId.setStatus('current')
interRatLbParaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 17, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatLbParaRowStatus.setStatus('current')
interRatLoadBalanceVoiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interRatLoadBalanceVoiceTag.setStatus('current')
atu = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18))
atuParaTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1), )
if mibBuilder.loadTexts: atuParaTable.setStatus('current')
atuParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "atuLcId"))
if mibBuilder.loadTexts: atuParaEntry.setStatus('current')
atuLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: atuLcId.setStatus('current')
atuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuRowStatus.setStatus('current')
atuDlSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuDlSwitch.setStatus('current')
atuDlDataRateThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuDlDataRateThr.setStatus('current')
atuUlBoTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUlBoTime.setStatus('current')
atuVIPTransferFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuVIPTransferFlag.setStatus('current')
atuUlFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUlFlag.setStatus('current')
atuUlDataRateThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUlDataRateThr.setStatus('current')
atuUlBoTforUL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUlBoTforUL.setStatus('current')
atuSrRestrictFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuSrRestrictFlag.setStatus('current')
atuSmallPrbNumUsedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuSmallPrbNumUsedFlag.setStatus('current')
atuVIPInactivePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuVIPInactivePeriod.setStatus('current')
atuDLQuitFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuDLQuitFlag.setStatus('current')
atuDLQuitRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuDLQuitRateThreshold.setStatus('current')
atuDLQuitPeriodThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuDLQuitPeriodThreshold.setStatus('current')
atuDlPeriodThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuDlPeriodThr.setStatus('current')
atuULQuitFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuULQuitFlag.setStatus('current')
atuULQuitRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuULQuitRateThreshold.setStatus('current')
atuULQuitPeriodThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuULQuitPeriodThreshold.setStatus('current')
atuUlPeriodThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUlPeriodThr.setStatus('current')
atuUeIdentityRequestSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("imsi", 1), ("imei", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUeIdentityRequestSwitch.setStatus('current')
atuUeUlPowerAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUeUlPowerAdd.setStatus('current')
atuUlAndDlScheSRLmint = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUlAndDlScheSRLmint.setStatus('current')
atuUlOrDlScheSRLmint = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUlOrDlScheSRLmint.setStatus('current')
atuDlImsiOrIpAtuUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuDlImsiOrIpAtuUeNum.setStatus('current')
atuUlImsiOrIpAtuUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUlImsiOrIpAtuUeNum.setStatus('current')
atuVolteRecDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuVolteRecDelayTime.setStatus('current')
atuDldataTendcellBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 61, 62)).clone(namedValues=NamedValues(("band1", 1), ("band2", 2), ("band3", 3), ("band4", 4), ("band5", 5), ("band7", 7), ("band8", 8), ("band9", 9), ("band10", 10), ("band11", 11), ("band12", 12), ("band13", 13), ("band14", 14), ("band17", 17), ("band18", 18), ("band19", 19), ("band20", 20), ("band21", 21), ("band22", 22), ("band23", 23), ("band24", 24), ("band25", 25), ("band33", 33), ("band34", 34), ("band35", 35), ("band36", 36), ("band37", 37), ("band38", 38), ("band39", 39), ("band40", 40), ("band41", 41), ("band44", 44), ("band61", 61), ("band62", 62)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuDldataTendcellBand.setStatus('current')
atuDldataTendcellFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuDldataTendcellFreq.setStatus('current')
atuUldataTendcellBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 61, 62)).clone(namedValues=NamedValues(("band1", 1), ("band2", 2), ("band3", 3), ("band4", 4), ("band5", 5), ("band7", 7), ("band8", 8), ("band9", 9), ("band10", 10), ("band11", 11), ("band12", 12), ("band13", 13), ("band14", 14), ("band17", 17), ("band18", 18), ("band19", 19), ("band20", 20), ("band21", 21), ("band22", 22), ("band23", 23), ("band24", 24), ("band25", 25), ("band33", 33), ("band34", 34), ("band35", 35), ("band36", 36), ("band37", 37), ("band38", 38), ("band39", 39), ("band40", 40), ("band41", 41), ("band44", 44), ("band61", 61), ("band62", 62)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUldataTendcellBand.setStatus('current')
atuUldataTendcellFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUldataTendcellFreq.setStatus('current')
atuVoiceTendcellBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 61, 62)).clone(namedValues=NamedValues(("band1", 1), ("band2", 2), ("band3", 3), ("band4", 4), ("band5", 5), ("band7", 7), ("band8", 8), ("band9", 9), ("band10", 10), ("band11", 11), ("band12", 12), ("band13", 13), ("band14", 14), ("band17", 17), ("band18", 18), ("band19", 19), ("band20", 20), ("band21", 21), ("band22", 22), ("band23", 23), ("band24", 24), ("band25", 25), ("band33", 33), ("band34", 34), ("band35", 35), ("band36", 36), ("band37", 37), ("band38", 38), ("band39", 39), ("band40", 40), ("band41", 41), ("band44", 44), ("band61", 61), ("band62", 62)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuVoiceTendcellBand.setStatus('current')
atuVoiceTendcellFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuVoiceTendcellFreq.setStatus('current')
atuVideoTendcellBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 61, 62)).clone(namedValues=NamedValues(("band1", 1), ("band2", 2), ("band3", 3), ("band4", 4), ("band5", 5), ("band7", 7), ("band8", 8), ("band9", 9), ("band10", 10), ("band11", 11), ("band12", 12), ("band13", 13), ("band14", 14), ("band17", 17), ("band18", 18), ("band19", 19), ("band20", 20), ("band21", 21), ("band22", 22), ("band23", 23), ("band24", 24), ("band25", 25), ("band33", 33), ("band34", 34), ("band35", 35), ("band36", 36), ("band37", 37), ("band38", 38), ("band39", 39), ("band40", 40), ("band41", 41), ("band44", 44), ("band61", 61), ("band62", 62)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuVideoTendcellBand.setStatus('current')
atuVideoTendcellFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuVideoTendcellFreq.setStatus('current')
atuVipUserAppointFreqTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuVipUserAppointFreqTag.setStatus('current')
atuRetxCfgSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 38), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuRetxCfgSwitch.setStatus('current')
atuRlcMaxRetxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 39), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("t1", 0), ("t2", 1), ("t3", 2), ("t4", 3), ("t6", 4), ("t8", 5), ("t16", 6), ("t32", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuRlcMaxRetxThreshold.setStatus('current')
atuHarqMaxUlTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 40), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)).clone(namedValues=NamedValues(("n1", 0), ("n2", 1), ("n3", 2), ("n4", 3), ("n5", 4), ("n6", 5), ("n7", 6), ("n8", 7), ("n10", 8), ("n12", 9), ("n16", 10), ("n20", 11), ("n24", 12), ("n28", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuHarqMaxUlTx.setStatus('current')
atuHarqMaxDlTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuHarqMaxDlTx.setStatus('current')
atuQRxlevMinCfgSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 42), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuQRxlevMinCfgSwitch.setStatus('current')
atuQRxlevMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 43), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)).clone(namedValues=NamedValues(("rxLevMinMinusDbm140", 0), ("rxLevMinMinusDbm138", 1), ("rxLevMinMinusDbm136", 2), ("rxLevMinMinusDbm134", 3), ("rxLevMinMinusDbm132", 4), ("rxLevMinMinusDbm130", 5), ("rxLevMinMinusDbm128", 6), ("rxLevMinMinusDbm126", 7), ("rxLevMinMinusDbm124", 8), ("rxLevMinMinusDbm122", 9), ("rxLevMinMinusDbm120", 10), ("rxLevMinMinusDbm118", 11), ("rxLevMinMinusDbm116", 12), ("rxLevMinMinusDbm114", 13), ("rxLevMinMinusDbm112", 14), ("rxLevMinMinusDbm110", 15), ("rxLevMinMinusDbm108", 16), ("rxLevMinMinusDbm106", 17), ("rxLevMinMinusDbm104", 18), ("rxLevMinMinusDbm102", 19), ("rxLevMinMinusDbm100", 20), ("rxLevMinMinusDbm98", 21), ("rxLevMinMinusDbm96", 22), ("rxLevMinMinusDbm94", 23), ("rxLevMinMinusDbm92", 24), ("rxLevMinMinusDbm90", 25), ("rxLevMinMinusDbm88", 26), ("rxLevMinMinusDbm86", 27), ("rxLevMinMinusDbm84", 28), ("rxLevMinMinusDbm82", 29), ("rxLevMinMinusDbm80", 30), ("rxLevMinMinusDbm78", 31), ("rxLevMinMinusDbm76", 32), ("rxLevMinMinusDbm74", 33), ("rxLevMinMinusDbm72", 34), ("rxLevMinMinusDbm70", 35), ("rxLevMinMinusDbm68", 36), ("rxLevMinMinusDbm66", 37), ("rxLevMinMinusDbm64", 38), ("rxLevMinMinusDbm62", 39), ("rxLevMinMinusDbm60", 40), ("rxLevMinMinusDbm58", 41), ("rxLevMinMinusDbm56", 42), ("rxLevMinMinusDbm54", 43), ("rxLevMinMinusDbm52", 44), ("rxLevMinMinusDbm50", 45), ("rxLevMinMinusDbm48", 46), ("rxLevMinMinusDbm46", 47), ("rxLevMinMinusDbm44", 48)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuQRxlevMin.setStatus('current')
atuMrRecoverDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuMrRecoverDelayTime.setStatus('current')
atuAdjCellMrStopSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 61), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuAdjCellMrStopSwitch.setStatus('current')
atu16QAMPUSCHTargetSinrUpLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atu16QAMPUSCHTargetSinrUpLimit.setStatus('current')
atuSrUserUlPrbLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuSrUserUlPrbLimit.setStatus('current')
atuVipUserIoTup = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuVipUserIoTup.setStatus('current')
atuHoInterFrqCfgSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 66), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuHoInterFrqCfgSwitch.setStatus('current')
atuGoldUeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 67), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeSwitch.setStatus('current')
atuGoldUserAppointFrqTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 68), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUserAppointFrqTag.setStatus('current')
atuGoldVoiceTendcellFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldVoiceTendcellFreq.setStatus('current')
atuGoldVoiceTendcellBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 70), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 3, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 61)).clone(namedValues=NamedValues(("band1", 1), ("band3", 3), ("band32", 32), ("band33", 33), ("band34", 34), ("band35", 35), ("band36", 36), ("band37", 37), ("band38", 38), ("band39", 39), ("band40", 40), ("band41", 41), ("band61", 61)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldVoiceTendcellBand.setStatus('current')
atuGoldUserMRStopInd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 71), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unstop", 0), ("stopMR", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUserMRStopInd.setStatus('current')
atuGoldUserIoTup = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUserIoTup.setStatus('current')
atuGoldUserCfiFixSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 73), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUserCfiFixSwitch.setStatus('current')
atuCommonUserMRDelSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 90), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuCommonUserMRDelSwitch.setStatus('current')
atuVipMROptSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 91), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuVipMROptSwitch.setStatus('current')
atuVipUserAppointFreqUserTypeInd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 92), Bits().clone(namedValues=NamedValues(("ul", 0), ("dl", 1), ("voice", 2), ("video", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuVipUserAppointFreqUserTypeInd.setStatus('current')
atucellUserBasedAdjCellReducePowerUserThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atucellUserBasedAdjCellReducePowerUserThr.setStatus('current')
atuSrNormalVolteLimitSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 94), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuSrNormalVolteLimitSwitch.setStatus('current')
atuAdjCellPrbLimitSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 95), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuAdjCellPrbLimitSwitch.setStatus('current')
atuAdjCellUlPrbLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuAdjCellUlPrbLimit.setStatus('current')
atuAdjCellDlPrbLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuAdjCellDlPrbLimit.setStatus('current')
atuAdjCellUlPrbPerUserLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuAdjCellUlPrbPerUserLimit.setStatus('current')
atuAdjCellDlPrbPerUserLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuAdjCellDlPrbPerUserLimit.setStatus('current')
atuUserGapScheOptimizationSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 100), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUserGapScheOptimizationSwitch.setStatus('current')
atuNormalUserFirstPrbLimitSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 101), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("open", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuNormalUserFirstPrbLimitSwitch.setStatus('current')
atuNormalUserDlFirstPrbLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 1, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuNormalUserDlFirstPrbLimit.setStatus('current')
atuByIpTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2), )
if mibBuilder.loadTexts: atuByIpTable.setStatus('current')
atuByIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "atuByIpLcId"))
if mibBuilder.loadTexts: atuByIpEntry.setStatus('current')
atuByIpLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35)))
if mibBuilder.loadTexts: atuByIpLcId.setStatus('current')
atuByIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuByIpRowStatus.setStatus('current')
atuByIpFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuByIpFlag.setStatus('current')
atuByIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuByIpAddrType.setStatus('current')
atuByIpAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuByIpAddr1.setStatus('current')
atuByIpAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 6), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuByIpAddr2.setStatus('current')
atuByIpAddr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuByIpAddr3.setStatus('current')
atuByIpAddr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuByIpAddr4.setStatus('current')
atuByIpAddr5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuByIpAddr5.setStatus('current')
atuByIpAddr6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 10), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuByIpAddr6.setStatus('current')
atuByIpAddr7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 11), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuByIpAddr7.setStatus('current')
atuByIpAddr8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 12), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuByIpAddr8.setStatus('current')
atuByIpAddr9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 13), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuByIpAddr9.setStatus('current')
atuByIpAddr10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 2, 1, 14), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuByIpAddr10.setStatus('current')
atuUeIMSI = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 3))
atuUeIMSISwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuUeIMSISwitch.setStatus('current')
atuImsiGetTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 3, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuImsiGetTimer.setStatus('current')
atuUeIMSI1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUeIMSI1.setStatus('current')
atuUeIMSI2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUeIMSI2.setStatus('current')
atuUeIMSI3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUeIMSI3.setStatus('current')
atuUeIMSI4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUeIMSI4.setStatus('current')
atuUeIMSI5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUeIMSI5.setStatus('current')
atuUeIMSI6 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUeIMSI6.setStatus('current')
atuUeIMSI7 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUeIMSI7.setStatus('current')
atuUeIMSI8 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUeIMSI8.setStatus('current')
atuUeIMSI9 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUeIMSI9.setStatus('current')
atuUeIMSI10 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuUeIMSI10.setStatus('current')
atuHoBasedRec = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 4))
atuDataHoBasedVolteRecFlag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuDataHoBasedVolteRecFlag.setStatus('current')
atuVolteDataUserTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuVolteDataUserTimeInterval.setStatus('current')
atuHoBasedVolteRecNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuHoBasedVolteRecNum.setStatus('current')
atuGoldUeIMSI = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5))
atuGoldUeIMSISwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atuGoldUeIMSISwitch.setStatus('current')
atuGoldUeIMSI1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI1.setStatus('current')
atuGoldUeIMSI2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI2.setStatus('current')
atuGoldUeIMSI3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI3.setStatus('current')
atuGoldUeIMSI4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI4.setStatus('current')
atuGoldUeIMSI5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI5.setStatus('current')
atuGoldUeIMSI6 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI6.setStatus('current')
atuGoldUeIMSI7 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI7.setStatus('current')
atuGoldUeIMSI8 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI8.setStatus('current')
atuGoldUeIMSI9 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI9.setStatus('current')
atuGoldUeIMSI10 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI10.setStatus('current')
atuGoldUeIMSI11 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI11.setStatus('current')
atuGoldUeIMSI12 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI12.setStatus('current')
atuGoldUeIMSI13 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI13.setStatus('current')
atuGoldUeIMSI14 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI14.setStatus('current')
atuGoldUeIMSI15 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI15.setStatus('current')
atuGoldUeIMSI16 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI16.setStatus('current')
atuGoldUeIMSI17 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI17.setStatus('current')
atuGoldUeIMSI18 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI18.setStatus('current')
atuGoldUeIMSI19 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI19.setStatus('current')
atuGoldUeIMSI20 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI20.setStatus('current')
atuGoldUeIMSI21 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI21.setStatus('current')
atuGoldUeIMSI22 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI22.setStatus('current')
atuGoldUeIMSI23 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI23.setStatus('current')
atuGoldUeIMSI24 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI24.setStatus('current')
atuGoldUeIMSI25 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI25.setStatus('current')
atuGoldUeIMSI26 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI26.setStatus('current')
atuGoldUeIMSI27 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI27.setStatus('current')
atuGoldUeIMSI28 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI28.setStatus('current')
atuGoldUeIMSI29 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI29.setStatus('current')
atuGoldUeIMSI30 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI30.setStatus('current')
atuGoldUeIMSI31 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI31.setStatus('current')
atuGoldUeIMSI32 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI32.setStatus('current')
atuGoldUeIMSI33 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI33.setStatus('current')
atuGoldUeIMSI34 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI34.setStatus('current')
atuGoldUeIMSI35 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI35.setStatus('current')
atuGoldUeIMSI36 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI36.setStatus('current')
atuGoldUeIMSI37 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI37.setStatus('current')
atuGoldUeIMSI38 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI38.setStatus('current')
atuGoldUeIMSI39 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI39.setStatus('current')
atuGoldUeIMSI40 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 18, 5, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atuGoldUeIMSI40.setStatus('current')
pubAlgorithmPara = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 19))
pubAlgorithmParaTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 19, 1), )
if mibBuilder.loadTexts: pubAlgorithmParaTable.setStatus('current')
pubAlgorithmParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 19, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pubAlgorithmParaLcId"))
if mibBuilder.loadTexts: pubAlgorithmParaEntry.setStatus('current')
pubAlgorithmParaLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pubAlgorithmParaLcId.setStatus('current')
pubAlgorithmParaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 19, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pubAlgorithmParaRowStatus.setStatus('current')
pubAlgorithmParaHSpdSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pubAlgorithmParaHSpdSwitch.setStatus('current')
pubAlgorithmParaHSpucchSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pubAlgorithmParaHSpucchSwitch.setStatus('current')
pubAlgorithmParaHSpdInactiveSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pubAlgorithmParaHSpdInactiveSwitch.setStatus('current')
pubAlgorithmParaHSpdDlFreqShiftSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 19, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pubAlgorithmParaHSpdDlFreqShiftSwitch.setStatus('current')
gsmCell = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 20))
gsmCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 20, 1), )
if mibBuilder.loadTexts: gsmCellTable.setStatus('current')
gsmCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 20, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "gsmCellRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "gsmCellShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "gsmCellSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "gsmCellOptIndex"))
if mibBuilder.loadTexts: gsmCellEntry.setStatus('current')
gsmCellRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: gsmCellRackNo.setStatus('current')
gsmCellShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: gsmCellShelfNo.setStatus('current')
gsmCellSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: gsmCellSlotNo.setStatus('current')
gsmCellOptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: gsmCellOptIndex.setStatus('current')
gsmCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 20, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gsmCellRowStatus.setStatus('current')
gsmCellCenterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gsmCellCenterFreq.setStatus('current')
gsmCellSignalTxRxSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 8, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gsmCellSignalTxRxSwitch.setStatus('current')
cellMeasure = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9))
eueMeasCellCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 1), )
if mibBuilder.loadTexts: eueMeasCellCfgTable.setStatus('current')
eueMeasCellCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "eueMeasCellCfgLcId"))
if mibBuilder.loadTexts: eueMeasCellCfgEntry.setStatus('current')
eueMeasCellCfgLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: eueMeasCellCfgLcId.setStatus('current')
eueMeasCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueMeasCellRowStatus.setStatus('current')
eueMeasCellTimeEvalution = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("s30", 0), ("s60", 1), ("s120", 2), ("s180", 3), ("s240", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueMeasCellTimeEvalution.setStatus('current')
eueMeasCellTimeHystNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("s30", 0), ("s60", 1), ("s120", 2), ("s180", 3), ("s240", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueMeasCellTimeHystNormal.setStatus('current')
eueMeasCellNumCellChangeMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueMeasCellNumCellChangeMedium.setStatus('current')
eueMeasCellNumCellChangeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueMeasCellNumCellChangeHigh.setStatus('current')
eueMeasCellsfMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDt25", 0), ("oDot5", 1), ("oDot75", 2), ("one", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueMeasCellsfMedium.setStatus('current')
eueMeasCellsfHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("oDot25", 0), ("oDot5", 1), ("oDot75", 2), ("one", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueMeasCellsfHigh.setStatus('current')
eueMeasCellSMeasureRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueMeasCellSMeasureRsrp.setStatus('current')
eueMeasCellRsrpFilterCoeff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("k0", 0), ("k1", 1), ("k2", 2), ("k3", 3), ("k4", 4), ("k5", 5), ("k6", 6), ("k7", 7), ("k8", 8), ("k9", 9), ("k11", 10), ("k13", 11), ("k15", 12), ("k17", 13), ("k19", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueMeasCellRsrpFilterCoeff.setStatus('current')
eueMeasCellRsrqFilterCoeff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("k0", 0), ("k1", 1), ("k2", 2), ("k3", 3), ("k4", 4), ("k5", 5), ("k6", 6), ("k7", 7), ("k8", 8), ("k9", 9), ("k11", 10), ("k13", 11), ("k15", 12), ("k17", 13), ("k19", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueMeasCellRsrqFilterCoeff.setStatus('current')
eventA1Table = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2), )
if mibBuilder.loadTexts: eventA1Table.setStatus('current')
eventA1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "a1LcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "a1CfgId"))
if mibBuilder.loadTexts: eventA1Entry.setStatus('current')
a1LcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: a1LcId.setStatus('current')
a1CfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: a1CfgId.setStatus('current')
a1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a1RowStatus.setStatus('current')
a1TrigQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("rsrp", 0), ("rsrq", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a1TrigQuantity.setStatus('current')
a1RptQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("trigQuant", 0), ("both", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a1RptQuantity.setStatus('current')
a1Hysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("hysteresis0", 0), ("hysteresisPoint5", 1), ("hysteresis1", 2), ("hysteresis1point5", 3), ("hysteresis2", 4), ("hysteresis2point5", 5), ("hysteresis3", 6), ("hysteresis3point5", 7), ("hysteresis4", 8), ("hysteresis4point5", 9), ("hysteresis5", 10), ("hysteresis5point5", 11), ("hysteresis6", 12), ("hysteresis6point5", 13), ("hysteresis7", 14), ("hysteresis7point5", 15), ("hysteresis8", 16), ("hysteresis8point5", 17), ("hysteresis9", 18), ("hysteresis9point5", 19), ("hysteresis10", 20), ("hysteresis10point5", 21), ("hysteresis11", 22), ("hysteresis11point5", 23), ("hysteresis12", 24), ("hysteresis12point5", 25), ("hysteresis13", 26), ("hysteresis13point5", 27), ("hysteresis14", 28), ("hysteresis14point5", 29), ("hysteresis15", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a1Hysteresis.setStatus('current')
a1TimetoTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("ms0", 0), ("ms40", 1), ("ms64", 2), ("ms80", 3), ("ms100", 4), ("ms128", 5), ("ms160", 6), ("ms256", 7), ("ms320", 8), ("ms480", 9), ("ms512", 10), ("ms640", 11), ("ms1024", 12), ("ms1280", 13), ("ms2560", 14), ("ms5120", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a1TimetoTrig.setStatus('current')
a1MaxReportCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a1MaxReportCell.setStatus('current')
a1RptInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("ms120", 0), ("ms240", 1), ("ms480", 2), ("ms640", 3), ("ms1024", 4), ("ms2048", 5), ("ms65120", 6), ("ms10240", 7), ("min1", 8), ("min6", 9), ("min12", 10), ("min30", 11), ("min60", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a1RptInterval.setStatus('current')
a1RptAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("r1", 0), ("r2", 1), ("r4", 2), ("r8", 3), ("r16", 4), ("r32", 5), ("r64", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a1RptAmount.setStatus('current')
a1RptThresholdRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a1RptThresholdRsrp.setStatus('current')
a1RptThresholdRsrq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)).clone(namedValues=NamedValues(("rsrqLessMinus19point5", 0), ("rsrqMinus19point5", 1), ("rsrqMinus19", 2), ("rsrqMinus18point5", 3), ("rsrqMinus18", 4), ("rsrqMinus17point5", 5), ("rsrqMinus17", 6), ("rsrqMinus16point5", 7), ("rsrqMinus16", 8), ("rsrqMinus15point5", 9), ("rsrqMinus15", 10), ("rsrqMinus14point5", 11), ("rsrqMinus14", 12), ("rsrqMinus13point5", 13), ("rsrqMinus13", 14), ("rsrqMinus12point5", 15), ("rsrqMinus12", 16), ("rsrqMinus11point5", 17), ("rsrqMinus11", 18), ("rsrqMinus10poing5", 19), ("rsrqMinus10", 20), ("rsrqMinus9point5", 21), ("rsrqMinus9", 22), ("rsrqMinus8point5", 23), ("rsrqMinus8", 24), ("rsrqMinus7point5", 25), ("rsrqMinus7", 26), ("rsrqMinus6point5", 27), ("rsrqMinus6", 28), ("rsrqMinus5point5", 29), ("rsrqMinus5", 30), ("rsrqMinus4point5", 31), ("rsrqMinus4", 32), ("rsrqMinus3point5", 33), ("rsrqMinus3", 34)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a1RptThresholdRsrq.setStatus('current')
a1MeasPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("csStopInterFreqMeas", 0), ("tendFreqGoldUserStopInterFreqMeas", 1), ("untendFreqGoldUserStopInterFreqMeas", 2), ("tendFreqStopInterFreqMeas", 3), ("untendFreqStopInterFreqMeas", 4), ("stopInterratPSServiceMeas", 5), ("stopInterratCSServiceMeas", 6), ("stopInterFreqMeas", 7), ("invalid", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a1MeasPurpose.setStatus('current')
a1MeasAlgoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 5)).clone(namedValues=NamedValues(("handover", 0), ("invalid", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a1MeasAlgoType.setStatus('current')
eventA2Table = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3), )
if mibBuilder.loadTexts: eventA2Table.setStatus('current')
eventA2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "a2LcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "a2CfgId"))
if mibBuilder.loadTexts: eventA2Entry.setStatus('current')
a2LcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: a2LcId.setStatus('current')
a2CfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: a2CfgId.setStatus('current')
a2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2RowStatus.setStatus('current')
a2TrigQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("rsrp", 0), ("rsrq", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2TrigQuantity.setStatus('current')
a2RptQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("trigQuant", 0), ("both", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2RptQuantity.setStatus('current')
a2Hysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("hysteresis0", 0), ("hysteresisPoint5", 1), ("hysteresis1", 2), ("hysteresis1point5", 3), ("hysteresis2", 4), ("hysteresis2point5", 5), ("hysteresis3", 6), ("hysteresis3point5", 7), ("hysteresis4", 8), ("hysteresis4point5", 9), ("hysteresis5", 10), ("hysteresis5point5", 11), ("hysteresis6", 12), ("hysteresis6point5", 13), ("hysteresis7", 14), ("hysteresis7point5", 15), ("hysteresis8", 16), ("hysteresis8point5", 17), ("hysteresis9", 18), ("hysteresis9point5", 19), ("hysteresis10", 20), ("hysteresis10point5", 21), ("hysteresis11", 22), ("hysteresis11point5", 23), ("hysteresis12", 24), ("hysteresis12point5", 25), ("hysteresis13", 26), ("hysteresis13point5", 27), ("hysteresis14", 28), ("hysteresis14point5", 29), ("hysteresis15", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2Hysteresis.setStatus('current')
a2TimetoTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("ms0", 0), ("ms40", 1), ("ms64", 2), ("ms80", 3), ("ms100", 4), ("ms128", 5), ("ms160", 6), ("ms256", 7), ("ms320", 8), ("ms480", 9), ("ms512", 10), ("ms640", 11), ("ms1024", 12), ("ms1280", 13), ("ms2560", 14), ("ms5120", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2TimetoTrig.setStatus('current')
a2MaxReportCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2MaxReportCell.setStatus('current')
a2RptInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("ms120", 0), ("ms240", 1), ("ms480", 2), ("ms640", 3), ("ms1024", 4), ("ms2048", 5), ("ms65120", 6), ("ms10240", 7), ("min1", 8), ("min6", 9), ("min12", 10), ("min30", 11), ("min60", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2RptInterval.setStatus('current')
a2RptAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("r1", 0), ("r2", 1), ("r4", 2), ("r8", 3), ("r16", 4), ("r32", 5), ("r64", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2RptAmount.setStatus('current')
a2RptThresholdRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2RptThresholdRsrp.setStatus('current')
a2RptThresholdRsrq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)).clone(namedValues=NamedValues(("rsrqLessMinus19point5", 0), ("rsrqMinus19point5", 1), ("rsrqMinus19", 2), ("rsrqMinus18point5", 3), ("rsrqMinus18", 4), ("rsrqMinus17point5", 5), ("rsrqMinus17", 6), ("rsrqMinus16point5", 7), ("rsrqMinus16", 8), ("rsrqMinus15point5", 9), ("rsrqMinus15", 10), ("rsrqMinus14point5", 11), ("rsrqMinus14", 12), ("rsrqMinus13point5", 13), ("rsrqMinus13", 14), ("rsrqMinus12point5", 15), ("rsrqMinus12", 16), ("rsrqMinus11point5", 17), ("rsrqMinus11", 18), ("rsrqMinus10poing5", 19), ("rsrqMinus10", 20), ("rsrqMinus9point5", 21), ("rsrqMinus9", 22), ("rsrqMinus8point5", 23), ("rsrqMinus8", 24), ("rsrqMinus7point5", 25), ("rsrqMinus7", 26), ("rsrqMinus6point5", 27), ("rsrqMinus6", 28), ("rsrqMinus5point5", 29), ("rsrqMinus5", 30), ("rsrqMinus4point5", 31), ("rsrqMinus4", 32), ("rsrqMinus3point5", 33), ("rsrqMinus3", 34)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2RptThresholdRsrq.setStatus('current')
a2MeasPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("csStartInterFreqMeas", 0), ("rejectQci1Setup", 1), ("startInterRatMeasfordata", 2), ("mdt", 3), ("blindRedirectHO", 4), ("startInterRatMeasforspeech", 5), ("startInterFreqMeas", 6), ("disActiveScell", 7), ("invalid", 8), ("tendFreqStartInterFreqMeas", 9), ("untendFreqStartInterFreqMeas", 10), ("tendFreqGoldUserStartInterFreqMeas", 11), ("untendFreqGoldUserStartInterFreqMeas", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2MeasPurpose.setStatus('current')
a2MeasAlgoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 5)).clone(namedValues=NamedValues(("handover", 0), ("casCellConfig", 1), ("mdt", 2), ("invalid", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2MeasAlgoType.setStatus('current')
a2MdtRptThresholdRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2MdtRptThresholdRsrp.setStatus('current')
a2MdtRptThresholdRsrq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 3, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)).clone(namedValues=NamedValues(("rsrqLessMinus19point5", 0), ("rsrqMinus19point5", 1), ("rsrqMinus19", 2), ("rsrqMinus18point5", 3), ("rsrqMinus18", 4), ("rsrqMinus17point5", 5), ("rsrqMinus17", 6), ("rsrqMinus16point5", 7), ("rsrqMinus16", 8), ("rsrqMinus15point5", 9), ("rsrqMinus15", 10), ("rsrqMinus14point5", 11), ("rsrqMinus14", 12), ("rsrqMinus13point5", 13), ("rsrqMinus13", 14), ("rsrqMinus12point5", 15), ("rsrqMinus12", 16), ("rsrqMinus11point5", 17), ("rsrqMinus11", 18), ("rsrqMinus10poing5", 19), ("rsrqMinus10", 20), ("rsrqMinus9point5", 21), ("rsrqMinus9", 22), ("rsrqMinus8point5", 23), ("rsrqMinus8", 24), ("rsrqMinus7point5", 25), ("rsrqMinus7", 26), ("rsrqMinus6point5", 27), ("rsrqMinus6", 28), ("rsrqMinus5point5", 29), ("rsrqMinus5", 30), ("rsrqMinus4point5", 31), ("rsrqMinus4", 32), ("rsrqMinus3point5", 33), ("rsrqMinus3", 34)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a2MdtRptThresholdRsrq.setStatus('current')
eventA3Table = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4), )
if mibBuilder.loadTexts: eventA3Table.setStatus('current')
eventA3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "a3LcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "a3CfgId"))
if mibBuilder.loadTexts: eventA3Entry.setStatus('current')
a3LcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: a3LcId.setStatus('current')
a3CfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: a3CfgId.setStatus('current')
a3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a3RowStatus.setStatus('current')
a3TrigQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("rsrp", 0), ("rsrq", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a3TrigQuantity.setStatus('current')
a3RptQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("trigQuant", 0), ("both", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a3RptQuantity.setStatus('current')
a3Hysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("hysteresis0", 0), ("hysteresisPoint5", 1), ("hysteresis1", 2), ("hysteresis1point5", 3), ("hysteresis2", 4), ("hysteresis2point5", 5), ("hysteresis3", 6), ("hysteresis3point5", 7), ("hysteresis4", 8), ("hysteresis4point5", 9), ("hysteresis5", 10), ("hysteresis5point5", 11), ("hysteresis6", 12), ("hysteresis6point5", 13), ("hysteresis7", 14), ("hysteresis7point5", 15), ("hysteresis8", 16), ("hysteresis8point5", 17), ("hysteresis9", 18), ("hysteresis9point5", 19), ("hysteresis10", 20), ("hysteresis10point5", 21), ("hysteresis11", 22), ("hysteresis11point5", 23), ("hysteresis12", 24), ("hysteresis12point5", 25), ("hysteresis13", 26), ("hysteresis13point5", 27), ("hysteresis14", 28), ("hysteresis14point5", 29), ("hysteresis15", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a3Hysteresis.setStatus('current')
a3TimetoTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("ms0", 0), ("ms40", 1), ("ms64", 2), ("ms80", 3), ("ms100", 4), ("ms128", 5), ("ms160", 6), ("ms256", 7), ("ms320", 8), ("ms480", 9), ("ms512", 10), ("ms640", 11), ("ms1024", 12), ("ms1280", 13), ("ms2560", 14), ("ms5120", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a3TimetoTrig.setStatus('current')
a3MaxReportCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a3MaxReportCell.setStatus('current')
a3RptInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("ms120", 0), ("ms240", 1), ("ms480", 2), ("ms640", 3), ("ms1024", 4), ("ms2048", 5), ("ms5120", 6), ("ms10240", 7), ("min1", 8), ("min6", 9), ("min12", 10), ("min30", 11), ("min60", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a3RptInterval.setStatus('current')
a3RptAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("r1", 0), ("r2", 1), ("r4", 2), ("r8", 3), ("r16", 4), ("r32", 5), ("r64", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a3RptAmount.setStatus('current')
a3Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60)).clone(namedValues=NamedValues(("a3OffsetMinus15", 0), ("a3OffsetMinus14Point5", 1), ("a3OffsetMinus14", 2), ("a3OffsetMinus13Point5", 3), ("a3OffsetMinus13", 4), ("a3OffsetMinus12Point5", 5), ("a3OffsetMinus12", 6), ("a3OffsetMinus11Point5", 7), ("a3OffsetMinus11", 8), ("a3OffsetMinus10Point5", 9), ("a3OffsetMinus10", 10), ("a3OffsetMinus9Point5", 11), ("a3OffsetMinus9", 12), ("a3OffsetMinus8Point5", 13), ("a3OffsetMinus8", 14), ("a3OffsetMinus7Point5", 15), ("a3OffsetMinus7", 16), ("a3OffsetMinus6Point5", 17), ("a3OffsetMinus6", 18), ("a3OffsetMinus5Point5", 19), ("a3OffsetMinus5", 20), ("a3OffsetMinus4Point5", 21), ("a3OffsetMinus4", 22), ("a3OffsetMinus3Point5", 23), ("a3OffsetMinus3", 24), ("a3OffsetMinus2Point5", 25), ("a3OffsetMinus2", 26), ("a3OffsetMinus1Point5", 27), ("a3OffsetMinus1", 28), ("a3OffsetMinusPoint5", 29), ("a3Offset0", 30), ("a3OffsetPoint5", 31), ("a3Offset1", 32), ("a3Offset1Point5", 33), ("a3Offset2", 34), ("a3Offset2Point5", 35), ("a3Offset3", 36), ("a3Offset3Point5", 37), ("a3Offset4", 38), ("a3Offset4Point5", 39), ("a3Offset5", 40), ("a3Offset5Point5", 41), ("a3Offset6", 42), ("a3Offset6Point5", 43), ("a3Offset7", 44), ("a3Offset7Point5", 45), ("a3Offset8", 46), ("a3Offset8Point5", 47), ("a3Offset9", 48), ("a3Offset9Point5", 49), ("a3Offset10", 50), ("a3Offset10Point5", 51), ("a3Offset11", 52), ("a3Offset11Point5", 53), ("a3Offset12", 54), ("a3Offset12Point5", 55), ("a3Offset13", 56), ("a3Offset13Point5", 57), ("a3Offset14", 58), ("a3Offset14Point5", 59), ("a3Offset15", 60)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a3Offset.setStatus('current')
a3MeasPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("intraFreqPriHc", 0), ("volteHc", 1), ("icic", 3), ("sCellConfig", 4), ("coMP", 5), ("anrFindAdjCell", 6), ("mLB", 7), ("invalid", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a3MeasPurpose.setStatus('current')
a3MeasAlgoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 4, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("handover", 0), ("icic", 1), ("coMP", 2), ("anr", 3), ("sCellConfig", 4), ("invalid", 5), ("mLB", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a3MeasAlgoType.setStatus('current')
eventA4Table = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5), )
if mibBuilder.loadTexts: eventA4Table.setStatus('current')
eventA4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "a4LcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "a4CfgId"))
if mibBuilder.loadTexts: eventA4Entry.setStatus('current')
a4LcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: a4LcId.setStatus('current')
a4CfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: a4CfgId.setStatus('current')
a4RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a4RowStatus.setStatus('current')
a4TrigQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("rsrp", 0), ("rsrq", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a4TrigQuantity.setStatus('current')
a4RptQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("trigQuant", 0), ("both", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a4RptQuantity.setStatus('current')
a4Hysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("hysteresis0", 0), ("hysteresisPoint5", 1), ("hysteresis1", 2), ("hysteresis1point5", 3), ("hysteresis2", 4), ("hysteresis2point5", 5), ("hysteresis3", 6), ("hysteresis3point5", 7), ("hysteresis4", 8), ("hysteresis4point5", 9), ("hysteresis5", 10), ("hysteresis5point5", 11), ("hysteresis6", 12), ("hysteresis6point5", 13), ("hysteresis7", 14), ("hysteresis7point5", 15), ("hysteresis8", 16), ("hysteresis8point5", 17), ("hysteresis9", 18), ("hysteresis9point5", 19), ("hysteresis10", 20), ("hysteresis10point5", 21), ("hysteresis11", 22), ("hysteresis11point5", 23), ("hysteresis12", 24), ("hysteresis12point5", 25), ("hysteresis13", 26), ("hysteresis13point5", 27), ("hysteresis14", 28), ("hysteresis14point5", 29), ("hysteresis15", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a4Hysteresis.setStatus('current')
a4TimetoTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("ms0", 0), ("ms40", 1), ("ms64", 2), ("ms80", 3), ("ms100", 4), ("ms128", 5), ("ms160", 6), ("ms256", 7), ("ms320", 8), ("ms480", 9), ("ms512", 10), ("ms640", 11), ("ms1024", 12), ("ms1280", 13), ("ms2560", 14), ("ms5120", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a4TimetoTrig.setStatus('current')
a4MaxReportCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a4MaxReportCell.setStatus('current')
a4RptInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("ms120", 0), ("ms240", 1), ("ms480", 2), ("ms640", 3), ("ms1024", 4), ("ms2048", 5), ("ms5120", 6), ("ms10240", 7), ("min1", 8), ("min6", 9), ("min12", 10), ("min30", 11), ("min60", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a4RptInterval.setStatus('current')
a4RptAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("r1", 0), ("r2", 1), ("r4", 2), ("r8", 3), ("r16", 4), ("r32", 5), ("r64", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a4RptAmount.setStatus('current')
a4RptThresholdRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a4RptThresholdRsrp.setStatus('current')
a4RptThresholdRsrq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)).clone(namedValues=NamedValues(("rsrqLessMinus19point5", 0), ("rsrqMinus19point5", 1), ("rsrqMinus19", 2), ("rsrqMinus18point5", 3), ("rsrqMinus18", 4), ("rsrqMinus17point5", 5), ("rsrqMinus17", 6), ("rsrqMinus16point5", 7), ("rsrqMinus16", 8), ("rsrqMinus15point5", 9), ("rsrqMinus15", 10), ("rsrqMinus14point5", 11), ("rsrqMinus14", 12), ("rsrqMinus13point5", 13), ("rsrqMinus13", 14), ("rsrqMinus12point5", 15), ("rsrqMinus12", 16), ("rsrqMinus11point5", 17), ("rsrqMinus11", 18), ("rsrqMinus10poing5", 19), ("rsrqMinus10", 20), ("rsrqMinus9point5", 21), ("rsrqMinus9", 22), ("rsrqMinus8point5", 23), ("rsrqMinus8", 24), ("rsrqMinus7point5", 25), ("rsrqMinus7", 26), ("rsrqMinus6point5", 27), ("rsrqMinus6", 28), ("rsrqMinus5point5", 29), ("rsrqMinus5", 30), ("rsrqMinus4point5", 31), ("rsrqMinus4", 32), ("rsrqMinus3point5", 33), ("rsrqMinus3", 34)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a4RptThresholdRsrq.setStatus('current')
a4MeasPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13)).clone(namedValues=NamedValues(("qciAppointFreHc", 0), ("highFreqPriHc", 1), ("shuttingdown", 2), ("loadBalance", 3), ("activeScell", 4), ("hcBasedSpeed", 5), ("anrFindAdjCell", 6), ("volteAppointFreHc", 7), ("invalid", 8), ("volteHc", 9), ("appointFreHc", 10), ("goldUserAppointFreHc", 11), ("hcBasedVoQuality", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a4MeasPurpose.setStatus('current')
a4MeasAlgoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 5, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 5)).clone(namedValues=NamedValues(("handover", 0), ("casCellConfig", 1), ("hcBasedSpeed", 2), ("anr", 3), ("invalid", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a4MeasAlgoType.setStatus('current')
eventA5Table = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6), )
if mibBuilder.loadTexts: eventA5Table.setStatus('current')
eventA5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "a5LcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "a5CfgId"))
if mibBuilder.loadTexts: eventA5Entry.setStatus('current')
a5LcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: a5LcId.setStatus('current')
a5CfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: a5CfgId.setStatus('current')
a5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5RowStatus.setStatus('current')
a5TrigQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("rsrp", 0), ("rsrq", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5TrigQuantity.setStatus('current')
a5RptQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("trigQuant", 0), ("both", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5RptQuantity.setStatus('current')
a5Hysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("hysteresis0", 0), ("hysteresisPoint5", 1), ("hysteresis1", 2), ("hysteresis1point5", 3), ("hysteresis2", 4), ("hysteresis2point5", 5), ("hysteresis3", 6), ("hysteresis3point5", 7), ("hysteresis4", 8), ("hysteresis4point5", 9), ("hysteresis5", 10), ("hysteresis5point5", 11), ("hysteresis6", 12), ("hysteresis6point5", 13), ("hysteresis7", 14), ("hysteresis7point5", 15), ("hysteresis8", 16), ("hysteresis8point5", 17), ("hysteresis9", 18), ("hysteresis9point5", 19), ("hysteresis10", 20), ("hysteresis10point5", 21), ("hysteresis11", 22), ("hysteresis11point5", 23), ("hysteresis12", 24), ("hysteresis12point5", 25), ("hysteresis13", 26), ("hysteresis13point5", 27), ("hysteresis14", 28), ("hysteresis14point5", 29), ("hysteresis15", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5Hysteresis.setStatus('current')
a5TimetoTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("ms0", 0), ("ms40", 1), ("ms64", 2), ("ms80", 3), ("ms100", 4), ("ms128", 5), ("ms160", 6), ("ms256", 7), ("ms320", 8), ("ms480", 9), ("ms512", 10), ("ms640", 11), ("ms1024", 12), ("ms1280", 13), ("ms2560", 14), ("ms5120", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5TimetoTrig.setStatus('current')
a5MaxReportCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5MaxReportCell.setStatus('current')
a5RptInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("ms120", 0), ("ms240", 1), ("ms480", 2), ("ms640", 3), ("ms1024", 4), ("ms2048", 5), ("ms5120", 6), ("ms10240", 7), ("min1", 8), ("min6", 9), ("min12", 10), ("min30", 11), ("min60", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5RptInterval.setStatus('current')
a5RptAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("r1", 0), ("r2", 1), ("r4", 2), ("r8", 3), ("r16", 4), ("r32", 5), ("r64", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5RptAmount.setStatus('current')
a5RptThreshold1Rsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5RptThreshold1Rsrp.setStatus('current')
a5RptThreshold1Rsrq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)).clone(namedValues=NamedValues(("rsrqLessMinus19point5", 0), ("rsrqMinus19point5", 1), ("rsrqMinus19", 2), ("rsrqMinus18point5", 3), ("rsrqMinus18", 4), ("rsrqMinus17point5", 5), ("rsrqMinus17", 6), ("rsrqMinus16point5", 7), ("rsrqMinus16", 8), ("rsrqMinus15point5", 9), ("rsrqMinus15", 10), ("rsrqMinus14point5", 11), ("rsrqMinus14", 12), ("rsrqMinus13point5", 13), ("rsrqMinus13", 14), ("rsrqMinus12point5", 15), ("rsrqMinus12", 16), ("rsrqMinus11point5", 17), ("rsrqMinus11", 18), ("rsrqMinus10poing5", 19), ("rsrqMinus10", 20), ("rsrqMinus9point5", 21), ("rsrqMinus9", 22), ("rsrqMinus8point5", 23), ("rsrqMinus8", 24), ("rsrqMinus7point5", 25), ("rsrqMinus7", 26), ("rsrqMinus6point5", 27), ("rsrqMinus6", 28), ("rsrqMinus5point5", 29), ("rsrqMinus5", 30), ("rsrqMinus4point5", 31), ("rsrqMinus4", 32), ("rsrqMinus3point5", 33), ("rsrqMinus3", 34)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5RptThreshold1Rsrq.setStatus('current')
a5RptThreshold2Rsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5RptThreshold2Rsrp.setStatus('current')
a5RptThreshold2Rsrq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)).clone(namedValues=NamedValues(("rsrqLessMinus19point5", 0), ("rsrqMinus19point5", 1), ("rsrqMinus19", 2), ("rsrqMinus18point5", 3), ("rsrqMinus18", 4), ("rsrqMinus17point5", 5), ("rsrqMinus17", 6), ("rsrqMinus16point5", 7), ("rsrqMinus16", 8), ("rsrqMinus15point5", 9), ("rsrqMinus15", 10), ("rsrqMinus14point5", 11), ("rsrqMinus14", 12), ("rsrqMinus13point5", 13), ("rsrqMinus13", 14), ("rsrqMinus12point5", 15), ("rsrqMinus12", 16), ("rsrqMinus11point5", 17), ("rsrqMinus11", 18), ("rsrqMinus10poing5", 19), ("rsrqMinus10", 20), ("rsrqMinus9point5", 21), ("rsrqMinus9", 22), ("rsrqMinus8point5", 23), ("rsrqMinus8", 24), ("rsrqMinus7point5", 25), ("rsrqMinus7", 26), ("rsrqMinus6point5", 27), ("rsrqMinus6", 28), ("rsrqMinus5point5", 29), ("rsrqMinus5", 30), ("rsrqMinus4point5", 31), ("rsrqMinus4", 32), ("rsrqMinus3point5", 33), ("rsrqMinus3", 34)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5RptThreshold2Rsrq.setStatus('current')
a5MeasPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10)).clone(namedValues=NamedValues(("qciAppointFrePPsuppression", 0), ("lowFreqPriHc", 2), ("loadBlancePPsuppression", 3), ("frePPsuppression", 4), ("volteHc", 5), ("anrFindAdjCell", 6), ("volteFrePPsuppression", 7), ("invalid", 8), ("goldUserFrePPsuppression", 9), ("hcBasedVoQualityPPsuppression", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5MeasPurpose.setStatus('current')
a5MeasAlgoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 6, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 3, 5)).clone(namedValues=NamedValues(("handover", 0), ("anr", 3), ("invalid", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a5MeasAlgoType.setStatus('current')
euePeriodReportTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7), )
if mibBuilder.loadTexts: euePeriodReportTable.setStatus('current')
euePeriodReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "euePeriodRptLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "euePeriodRptCfgId"))
if mibBuilder.loadTexts: euePeriodReportEntry.setStatus('current')
euePeriodRptLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: euePeriodRptLcId.setStatus('current')
euePeriodRptCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: euePeriodRptCfgId.setStatus('current')
euePeriodRptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: euePeriodRptRowStatus.setStatus('current')
euePeriodRptNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("measNetworkEutra", 0), ("measNetworkUtra", 1), ("measNetworkGeran", 2), ("measNetworkCdma2000", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: euePeriodRptNetworkType.setStatus('current')
euePeriodRptType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("reportstrongestcell", 0), ("reportCGI", 1), ("reportstrongestcellforSon", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: euePeriodRptType.setStatus('current')
euePeriodRptMaxReportCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: euePeriodRptMaxReportCell.setStatus('current')
euePeriodRptRptQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 65535)).clone(namedValues=NamedValues(("trigQuant", 0), ("both", 1), ("invalid", 65535)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: euePeriodRptRptQuantity.setStatus('current')
euePeriodRptRptInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("ms120", 0), ("ms240", 1), ("ms480", 2), ("ms640", 3), ("ms1024", 4), ("ms2048", 5), ("ms5120", 6), ("ms10240", 7), ("min1", 8), ("min6", 9), ("min12", 10), ("min30", 11), ("min60", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: euePeriodRptRptInterval.setStatus('current')
euePeriodRptTrigQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("rsrp", 0), ("rsrq", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: euePeriodRptTrigQuantity.setStatus('current')
euePeriodRptRptAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("r1", 0), ("r2", 1), ("r4", 2), ("r8", 3), ("r16", 4), ("r32", 5), ("r64", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: euePeriodRptRptAmount.setStatus('current')
euePeriodRptPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 4, 5, 8, 9)).clone(namedValues=NamedValues(("strongestCell", 0), ("ueRxTxTimeDiff", 2), ("anr", 4), ("anrFindAdjCell", 5), ("invalid", 8), ("reduceAdjCellPower", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: euePeriodRptPurpose.setStatus('current')
euePeriodRptAlgoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 7, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("handover", 0), ("mr", 1), ("anr", 2), ("mdt", 3), ("reducePower", 4), ("invalid", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: euePeriodRptAlgoType.setStatus('current')
measGapTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 8), )
if mibBuilder.loadTexts: measGapTable.setStatus('current')
measGapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "measGapLcId"))
if mibBuilder.loadTexts: measGapEntry.setStatus('current')
measGapLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: measGapLcId.setStatus('current')
measGapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: measGapRowStatus.setStatus('current')
measGapCfgFlagForRrcConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 8, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("measGapInfoOff", 0), ("measGapInfoOn", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: measGapCfgFlagForRrcConnect.setStatus('current')
measGapPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: measGapPattern.setStatus('current')
measGapOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 79))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: measGapOffset.setStatus('current')
eventB1Table = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12), )
if mibBuilder.loadTexts: eventB1Table.setStatus('current')
eventB1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "b1LcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "b1CfgId"))
if mibBuilder.loadTexts: eventB1Entry.setStatus('current')
b1LcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: b1LcId.setStatus('current')
b1CfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: b1CfgId.setStatus('current')
b1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1RowStatus.setStatus('current')
b1NetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("utraFdd", 0), ("utraTdd", 1), ("geran", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1NetworkType.setStatus('current')
b1MeasQuantityUtraFdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("cpichRSCP", 0), ("cpichEcN0", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1MeasQuantityUtraFdd.setStatus('current')
b1MeasQuantityUtraTdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0)).clone(namedValues=NamedValues(("pccpchRSCP", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1MeasQuantityUtraTdd.setStatus('current')
b1MeasFilterCoeffUtra = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("k0", 0), ("k1", 1), ("k2", 2), ("k3", 3), ("k4", 4), ("k5", 5), ("k6", 6), ("k7", 7), ("k8", 8), ("k9", 9), ("k11", 10), ("k13", 11), ("k15", 12), ("k17", 13), ("k19", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1MeasFilterCoeffUtra.setStatus('current')
b1MeasQuantityGeran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0)).clone(namedValues=NamedValues(("rssi", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1MeasQuantityGeran.setStatus('current')
b1MeasFilterCoeffGeran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("k0", 0), ("k1", 1), ("k2", 2), ("k3", 3), ("k4", 4), ("k5", 5), ("k6", 6), ("k7", 7), ("k8", 8), ("k9", 9), ("k11", 10), ("k13", 11), ("k15", 12), ("k17", 13), ("k19", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1MeasFilterCoeffGeran.setStatus('current')
b1Hysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("hysteresis0", 0), ("hysteresisPoint5", 1), ("hysteresis1", 2), ("hysteresis1point5", 3), ("hysteresis2", 4), ("hysteresis2point5", 5), ("hysteresis3", 6), ("hysteresis3point5", 7), ("hysteresis4", 8), ("hysteresis4point5", 9), ("hysteresis5", 10), ("hysteresis5point5", 11), ("hysteresis6", 12), ("hysteresis6point5", 13), ("hysteresis7", 14), ("hysteresis7point5", 15), ("hysteresis8", 16), ("hysteresis8point5", 17), ("hysteresis9", 18), ("hysteresis9point5", 19), ("hysteresis10", 20), ("hysteresis10point5", 21), ("hysteresis11", 22), ("hysteresis11point5", 23), ("hysteresis12", 24), ("hysteresis12point5", 25), ("hysteresis13", 26), ("hysteresis13point5", 27), ("hysteresis14", 28), ("hysteresis14point5", 29), ("hysteresis15", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1Hysteresis.setStatus('current')
b1TimetoTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("ms0", 0), ("ms40", 1), ("ms64", 2), ("ms80", 3), ("ms100", 4), ("ms128", 5), ("ms160", 6), ("ms256", 7), ("ms320", 8), ("ms480", 9), ("ms512", 10), ("ms640", 11), ("ms1024", 12), ("ms1280", 13), ("ms2560", 14), ("ms5120", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1TimetoTrig.setStatus('current')
b1MaxReportCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1MaxReportCell.setStatus('current')
b1RptInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("ms120", 0), ("ms240", 1), ("ms480", 2), ("ms640", 3), ("ms1024", 4), ("ms2048", 5), ("ms5120", 6), ("ms10240", 7), ("min1", 8), ("min6", 9), ("min12", 10), ("min30", 11), ("min60", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1RptInterval.setStatus('current')
b1RptAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("r1", 0), ("r2", 1), ("r4", 2), ("r8", 3), ("r16", 4), ("r32", 5), ("r64", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1RptAmount.setStatus('current')
b1ThresholdRscpUtra = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, -24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1ThresholdRscpUtra.setStatus('current')
b1ThresholdEcnoUtra = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)).clone(namedValues=NamedValues(("ecnoMinus24point5", 0), ("ecnoMinus24", 1), ("ecnoMinus23point5", 2), ("ecnoMinus23", 3), ("ecnoMinus22point5", 4), ("ecnoMinus22", 5), ("ecnoMinus21point5", 6), ("ecnoMinus21", 7), ("ecnoMinus20point5", 8), ("ecnoMinus20", 9), ("ecnoMinus19point5", 10), ("ecnoMinus19", 11), ("ecnoMinus18point5", 12), ("ecnoMinus18", 13), ("ecnoMinus17point5", 14), ("ecnoMinus17", 15), ("ecnoMinus16point5", 16), ("ecnoMinus16", 17), ("ecnoMinus15point5", 18), ("ecnoMinus15", 19), ("ecnoMinus14point5", 20), ("ecnoMinus14", 21), ("ecnoMinus13point5", 22), ("ecnoMinus13", 23), ("ecnoMinus12point5", 24), ("ecnoMinus12", 25), ("ecnoMinus11point5", 26), ("ecnoMinus11", 27), ("ecnoMinus10point5", 28), ("ecnoMinus10", 29), ("ecnoMinus9point5", 30), ("ecnoMinus9", 31), ("ecnoMinus8point5", 32), ("ecnoMinus8", 33), ("ecnoMinus7point5", 34), ("ecnoMinus7", 35), ("ecnoMinus6point5", 36), ("ecnoMinus6", 37), ("ecnoMinus5point5", 38), ("ecnoMinus5", 39), ("ecnoMinus4point5", 40), ("ecnoMinus4", 41), ("ecnoMinus3point5", 42), ("ecnoMinus3", 43), ("ecnoMinus2point5", 44), ("ecnoMinus2", 45), ("ecnoMinus1point5", 46), ("ecnoMinus1", 47), ("ecnoMinuspoint5", 48), ("ecnoMinus0", 49)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1ThresholdEcnoUtra.setStatus('current')
b1ThresholdRssiGeran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, -47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1ThresholdRssiGeran.setStatus('current')
b1MeasPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 8)).clone(namedValues=NamedValues(("interRatHc", 0), ("csfb", 1), ("loadBlance", 2), ("invalid", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1MeasPurpose.setStatus('current')
b1MeasAlgoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 12, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 5)).clone(namedValues=NamedValues(("handover", 0), ("invalid", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b1MeasAlgoType.setStatus('current')
eventB2Table = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13), )
if mibBuilder.loadTexts: eventB2Table.setStatus('current')
eventB2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "b2LcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "b2CfgId"))
if mibBuilder.loadTexts: eventB2Entry.setStatus('current')
b2LcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: b2LcId.setStatus('current')
b2CfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: b2CfgId.setStatus('current')
b2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2RowStatus.setStatus('current')
b2NetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("utraFdd", 0), ("utraTdd", 1), ("geran", 2), ("cdma2000", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2NetworkType.setStatus('current')
b2MeasQuantityUtraFdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("cpichRSCP", 0), ("cpichEcN0", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2MeasQuantityUtraFdd.setStatus('current')
b2MeasQuantityUtraTdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0)).clone(namedValues=NamedValues(("pccpchRSCP", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2MeasQuantityUtraTdd.setStatus('current')
b2MeasFilterCoeffUtra = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("k0", 0), ("k1", 1), ("k2", 2), ("k3", 3), ("k4", 4), ("k5", 5), ("k6", 6), ("k7", 7), ("k8", 8), ("k9", 9), ("k11", 10), ("k13", 11), ("k15", 12), ("k17", 13), ("k19", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2MeasFilterCoeffUtra.setStatus('current')
b2MeasQuantityGeran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0)).clone(namedValues=NamedValues(("rssi", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2MeasQuantityGeran.setStatus('current')
b2MeasFilterCoeffGeran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("k0", 0), ("k1", 1), ("k2", 2), ("k3", 3), ("k4", 4), ("k5", 5), ("k6", 6), ("k7", 7), ("k8", 8), ("k9", 9), ("k11", 10), ("k13", 11), ("k15", 12), ("k17", 13), ("k19", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2MeasFilterCoeffGeran.setStatus('current')
b2Hysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("hysteresis0", 0), ("hysteresisPoint5", 1), ("hysteresis1", 2), ("hysteresis1point5", 3), ("hysteresis2", 4), ("hysteresis2point5", 5), ("hysteresis3", 6), ("hysteresis3point5", 7), ("hysteresis4", 8), ("hysteresis4point5", 9), ("hysteresis5", 10), ("hysteresis5point5", 11), ("hysteresis6", 12), ("hysteresis6point5", 13), ("hysteresis7", 14), ("hysteresis7point5", 15), ("hysteresis8", 16), ("hysteresis8point5", 17), ("hysteresis9", 18), ("hysteresis9point5", 19), ("hysteresis10", 20), ("hysteresis10point5", 21), ("hysteresis11", 22), ("hysteresis11point5", 23), ("hysteresis12", 24), ("hysteresis12point5", 25), ("hysteresis13", 26), ("hysteresis13point5", 27), ("hysteresis14", 28), ("hysteresis14point5", 29), ("hysteresis15", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2Hysteresis.setStatus('current')
b2TimetoTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("ms0", 0), ("ms40", 1), ("ms64", 2), ("ms80", 3), ("ms100", 4), ("ms128", 5), ("ms160", 6), ("ms256", 7), ("ms320", 8), ("ms480", 9), ("ms512", 10), ("ms640", 11), ("ms1024", 12), ("ms1280", 13), ("ms2560", 14), ("ms5120", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2TimetoTrig.setStatus('current')
b2MaxReportCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2MaxReportCell.setStatus('current')
b2RptInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("ms120", 0), ("ms240", 1), ("ms480", 2), ("ms640", 3), ("ms1024", 4), ("ms2048", 5), ("ms5120", 6), ("ms10240", 7), ("min1", 8), ("min6", 9), ("min12", 10), ("min30", 11), ("min60", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2RptInterval.setStatus('current')
b2RptAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("r1", 0), ("r2", 1), ("r4", 2), ("r8", 3), ("r16", 4), ("r32", 5), ("r64", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2RptAmount.setStatus('current')
b2Threshold1Quantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("rsrp", 0), ("rsrq", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2Threshold1Quantity.setStatus('current')
b2ThresholdRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2ThresholdRsrp.setStatus('current')
b2ThresholdRsrq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)).clone(namedValues=NamedValues(("rsrqLessMinus19point5", 0), ("rsrqMinus19point5", 1), ("rsrqMinus19", 2), ("rsrqMinus18point5", 3), ("rsrqMinus18", 4), ("rsrqMinus17point5", 5), ("rsrqMinus17", 6), ("rsrqMinus16point5", 7), ("rsrqMinus16", 8), ("rsrqMinus15point5", 9), ("rsrqMinus15", 10), ("rsrqMinus14point5", 11), ("rsrqMinus14", 12), ("rsrqMinus13point5", 13), ("rsrqMinus13", 14), ("rsrqMinus12point5", 15), ("rsrqMinus12", 16), ("rsrqMinus11point5", 17), ("rsrqMinus11", 18), ("rsrqMinus10poing5", 19), ("rsrqMinus10", 20), ("rsrqMinus9point5", 21), ("rsrqMinus9", 22), ("rsrqMinus8point5", 23), ("rsrqMinus8", 24), ("rsrqMinus7point5", 25), ("rsrqMinus7", 26), ("rsrqMinus6point5", 27), ("rsrqMinus6", 28), ("rsrqMinus5point5", 29), ("rsrqMinus5", 30), ("rsrqMinus4point5", 31), ("rsrqMinus4", 32), ("rsrqMinus3point5", 33), ("rsrqMinus3", 34)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2ThresholdRsrq.setStatus('current')
b2Threshold2RscpUtra = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, -24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2Threshold2RscpUtra.setStatus('current')
b2Threshold2EcnoUtra = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)).clone(namedValues=NamedValues(("ecnoMinus24point5", 0), ("ecnoMinus24", 1), ("ecnoMinus23point5", 2), ("ecnoMinus23", 3), ("ecnoMinus22point5", 4), ("ecnoMinus22", 5), ("ecnoMinus21point5", 6), ("ecnoMinus21", 7), ("ecnoMinus20point5", 8), ("ecnoMinus20", 9), ("ecnoMinus19point5", 10), ("ecnoMinus19", 11), ("ecnoMinus18point5", 12), ("ecnoMinus18", 13), ("ecnoMinus17point5", 14), ("ecnoMinus17", 15), ("ecnoMinus16point5", 16), ("ecnoMinus16", 17), ("ecnoMinus15point5", 18), ("ecnoMinus15", 19), ("ecnoMinus14point5", 20), ("ecnoMinus14", 21), ("ecnoMinus13point5", 22), ("ecnoMinus13", 23), ("ecnoMinus12point5", 24), ("ecnoMinus12", 25), ("ecnoMinus11point5", 26), ("ecnoMinus11", 27), ("ecnoMinus10point5", 28), ("ecnoMinus10", 29), ("ecnoMinus9point5", 30), ("ecnoMinus9", 31), ("ecnoMinus8point5", 32), ("ecnoMinus8", 33), ("ecnoMinus7point5", 34), ("ecnoMinus7", 35), ("ecnoMinus6point5", 36), ("ecnoMinus6", 37), ("ecnoMinus5point5", 38), ("ecnoMinus5", 39), ("ecnoMinus4point5", 40), ("ecnoMinus4", 41), ("ecnoMinus3point5", 42), ("ecnoMinus3", 43), ("ecnoMinus2point5", 44), ("ecnoMinus2", 45), ("ecnoMinus1point5", 46), ("ecnoMinus1", 47), ("ecnoMinuspoint5", 48), ("ecnoMinus0", 49)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2Threshold2EcnoUtra.setStatus('current')
b2Threshold2RssiGeran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, -47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2Threshold2RssiGeran.setStatus('current')
b2MeasPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 8)).clone(namedValues=NamedValues(("interRatCsHc", 0), ("interRatPsHc", 1), ("invalid", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2MeasPurpose.setStatus('current')
b2MeasAlgoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 5)).clone(namedValues=NamedValues(("handover", 0), ("invalid", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2MeasAlgoType.setStatus('current')
b2MeasQuantityCdma2000 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0)).clone(namedValues=NamedValues(("pipilotStrength", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2MeasQuantityCdma2000.setStatus('current')
b2MeasFilterCoeffCdma2000 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("k0", 0), ("k1", 1), ("k2", 2), ("k3", 3), ("k4", 4), ("k5", 5), ("k6", 6), ("k7", 7), ("k8", 8), ("k9", 9), ("k11", 10), ("k13", 11), ("k15", 12), ("k17", 13), ("k19", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2MeasFilterCoeffCdma2000.setStatus('current')
b2ThresholdpilotStrengthCdma2000 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 13, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, -47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: b2ThresholdpilotStrengthCdma2000.setStatus('current')
eventA6Table = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14), )
if mibBuilder.loadTexts: eventA6Table.setStatus('current')
eventA6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "a6LcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "a6CfgId"))
if mibBuilder.loadTexts: eventA6Entry.setStatus('current')
a6LcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: a6LcId.setStatus('current')
a6CfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: a6CfgId.setStatus('current')
a6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a6RowStatus.setStatus('current')
a6TrigQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("rsrp", 0), ("rsrq", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a6TrigQuantity.setStatus('current')
a6RptQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("trigQuant", 0), ("both", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a6RptQuantity.setStatus('current')
a6Hysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("hysteresis0", 0), ("hysteresisPoint5", 1), ("hysteresis1", 2), ("hysteresis1point5", 3), ("hysteresis2", 4), ("hysteresis2point5", 5), ("hysteresis3", 6), ("hysteresis3point5", 7), ("hysteresis4", 8), ("hysteresis4point5", 9), ("hysteresis5", 10), ("hysteresis5point5", 11), ("hysteresis6", 12), ("hysteresis6point5", 13), ("hysteresis7", 14), ("hysteresis7point5", 15), ("hysteresis8", 16), ("hysteresis8point5", 17), ("hysteresis9", 18), ("hysteresis9point5", 19), ("hysteresis10", 20), ("hysteresis10point5", 21), ("hysteresis11", 22), ("hysteresis11point5", 23), ("hysteresis12", 24), ("hysteresis12point5", 25), ("hysteresis13", 26), ("hysteresis13point5", 27), ("hysteresis14", 28), ("hysteresis14point5", 29), ("hysteresis15", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a6Hysteresis.setStatus('current')
a6TimetoTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("ms0", 0), ("ms40", 1), ("ms64", 2), ("ms80", 3), ("ms100", 4), ("ms128", 5), ("ms160", 6), ("ms256", 7), ("ms320", 8), ("ms480", 9), ("ms512", 10), ("ms640", 11), ("ms1024", 12), ("ms1280", 13), ("ms2560", 14), ("ms5120", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a6TimetoTrig.setStatus('current')
a6MaxReportCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a6MaxReportCell.setStatus('current')
a6RptInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)).clone(namedValues=NamedValues(("ms120", 0), ("ms240", 1), ("ms480", 2), ("ms640", 3), ("ms1024", 4), ("ms2048", 5), ("ms5120", 6), ("ms10240", 7), ("min1", 8), ("min6", 9), ("min12", 10), ("min30", 11), ("min60", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a6RptInterval.setStatus('current')
a6RptAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("r1", 0), ("r2", 1), ("r4", 2), ("r8", 3), ("r16", 4), ("r32", 5), ("r64", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a6RptAmount.setStatus('current')
a6Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60)).clone(namedValues=NamedValues(("a6OffsetMinus15", 0), ("a6OffsetMinus14Point5", 1), ("a6OffsetMinus14", 2), ("a6OffsetMinus13Point5", 3), ("a6OffsetMinus13", 4), ("a6OffsetMinus12Point5", 5), ("a6OffsetMinus12", 6), ("a6OffsetMinus11Point5", 7), ("a6OffsetMinus11", 8), ("a6OffsetMinus10Point5", 9), ("a6OffsetMinus10", 10), ("a6OffsetMinus9Point5", 11), ("a6OffsetMinus9", 12), ("a6OffsetMinus8Point5", 13), ("a6OffsetMinus8", 14), ("a6OffsetMinus7Point5", 15), ("a6OffsetMinus7", 16), ("a6OffsetMinus6Point5", 17), ("a6OffsetMinus6", 18), ("a6OffsetMinus5Point5", 19), ("a6OffsetMinus5", 20), ("a6OffsetMinus4Point5", 21), ("a6OffsetMinus4", 22), ("a6OffsetMinus3Point5", 23), ("a6OffsetMinus3", 24), ("a6OffsetMinus2Point5", 25), ("a6OffsetMinus2", 26), ("a6OffsetMinus1Point5", 27), ("a6OffsetMinus1", 28), ("a6OffsetMinusPoint5", 29), ("a6Offset0", 30), ("a6OffsetPoint5", 31), ("a6Offset1", 32), ("a6Offset1Point5", 33), ("a6Offset2", 34), ("a6Offset2Point5", 35), ("a6Offset3", 36), ("a6Offset3Point5", 37), ("a6Offset4", 38), ("a6Offset4Point5", 39), ("a6Offset5", 40), ("a6Offset5Point5", 41), ("a6Offset6", 42), ("a6Offset6Point5", 43), ("a6Offset7", 44), ("a6Offset7Point5", 45), ("a6Offset8", 46), ("a6Offset8Point5", 47), ("a6Offset9", 48), ("a6Offset9Point5", 49), ("a6Offset10", 50), ("a6Offset10Point5", 51), ("a6Offset11", 52), ("a6Offset11Point5", 53), ("a6Offset12", 54), ("a6Offset12Point5", 55), ("a6Offset13", 56), ("a6Offset13Point5", 57), ("a6Offset14", 58), ("a6Offset14Point5", 59), ("a6Offset15", 60)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a6Offset.setStatus('current')
a6MeasPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 8)).clone(namedValues=NamedValues(("sCellSubstitution", 0), ("invalid", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a6MeasPurpose.setStatus('current')
a6MeasAlgoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 9, 14, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 5)).clone(namedValues=NamedValues(("ca", 0), ("invalid", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: a6MeasAlgoType.setStatus('current')
ueTimerConstants = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10))
eueTimerConstantsTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1), )
if mibBuilder.loadTexts: eueTimerConstantsTable.setStatus('current')
eueTimerConstantsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "eueTimerLcId"))
if mibBuilder.loadTexts: eueTimerConstantsEntry.setStatus('current')
eueTimerLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: eueTimerLcId.setStatus('current')
eueTimerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueTimerRowStatus.setStatus('current')
eueTimerT300 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("ms100", 0), ("ms200", 1), ("ms300", 2), ("ms400", 3), ("ms600", 4), ("ms1000", 5), ("ms1500", 6), ("ms2000", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueTimerT300.setStatus('current')
eueTimerT301 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("ms100", 0), ("ms200", 1), ("ms300", 2), ("ms400", 3), ("ms600", 4), ("ms1000", 5), ("ms1500", 6), ("ms2000", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueTimerT301.setStatus('current')
eueTimerT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("ms0", 0), ("ms50", 1), ("ms100", 2), ("ms200", 3), ("ms500", 4), ("ms1000", 5), ("ms2000", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueTimerT310.setStatus('current')
eueTimerT311 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("ms1000", 0), ("ms3000", 1), ("ms5000", 2), ("ms10000", 3), ("ms15000", 4), ("ms20000", 5), ("ms30000", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueTimerT311.setStatus('current')
eueTimerN310 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("n1", 0), ("n2", 1), ("n3", 2), ("n4", 3), ("n6", 4), ("n8", 5), ("n10", 6), ("n20", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueTimerN310.setStatus('current')
eueTimerN311 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("n1", 0), ("n2", 1), ("n3", 2), ("n4", 3), ("n5", 4), ("n6", 5), ("n8", 6), ("n10", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueTimerN311.setStatus('current')
eueTimerT304 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("ms50", 0), ("ms100", 1), ("ms150", 2), ("ms200", 3), ("ms500", 4), ("ms1000", 5), ("ms2000", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueTimerT304.setStatus('current')
eueTimerT320 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("min5", 0), ("min10", 1), ("min20", 2), ("min30", 3), ("min60", 4), ("min120", 5), ("min180", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueTimerT320.setStatus('current')
eueTimerT304ForCco = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("ms100", 0), ("ms200", 1), ("ms500", 2), ("ms1000", 3), ("ms2000", 4), ("ms4000", 5), ("ms8000", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueTimerT304ForCco.setStatus('current')
eueTimerT302 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 10, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eueTimerT302.setStatus('current')
cellRelation = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11))
cellAdjRelationTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1), )
if mibBuilder.loadTexts: cellAdjRelationTable.setStatus('current')
cellAdjRelationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellAdjCellLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellAdjCellIndex"))
if mibBuilder.loadTexts: cellAdjRelationEntry.setStatus('current')
cellAdjCellLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellAdjCellLcId.setStatus('current')
cellAdjCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: cellAdjCellIndex.setStatus('current')
cellAdjCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellRowStatus.setStatus('current')
cellAdjCellEnbGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellEnbGlobalId.setStatus('current')
cellAdjCellLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellLocalId.setStatus('current')
cellAdjCellX2Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellX2Flag.setStatus('current')
cellAdjCellHCFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellHCFlag.setStatus('current')
cellAdjCellRemoveFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellRemoveFlag.setStatus('current')
cellAdjCellQOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("n24dB", 0), ("n22dB", 1), ("n20dB", 2), ("n18dB", 3), ("n16dB", 4), ("n14dB", 5), ("n12dB", 6), ("n10dB", 7), ("n8dB", 8), ("n6dB", 9), ("n5dB", 10), ("n4dB", 11), ("n3dB", 12), ("n2dB", 13), ("n1dB", 14), ("p0dB", 15), ("p1dB", 16), ("p2dB", 17), ("p3dB", 18), ("p4dB", 19), ("p5dB", 20), ("p6dB", 21), ("p8dB", 22), ("p10dB", 23), ("p12dB", 24), ("p14dB", 25), ("p16dB", 26), ("p18dB", 27), ("p20dB", 28), ("p22dB", 29), ("p24dB", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellQOffset.setStatus('current')
cellAdjCellNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("eutra", 0), ("utraFdd", 1), ("utraTdd", 2), ("geran", 3), ("cdma2000", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellNetworkType.setStatus('current')
cellAdjCellCdma2000Bandclass = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -1)).clone(namedValues=NamedValues(("bc0", 0), ("bc1", 1), ("bc2", 2), ("bc3", 3), ("bc4", 4), ("bc5", 5), ("bc6", 6), ("bc7", 7), ("bc8", 8), ("bc9", 9), ("bc10", 10), ("bc11", 11), ("bc12", 12), ("bc13", 13), ("bc14", 14), ("bc15", 15), ("bc16", 16), ("bc17", 17), ("invalid", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellCdma2000Bandclass.setStatus('current')
cellAdjCellPlmnMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 18), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellPlmnMcc.setStatus('current')
cellAdjCellPlmnMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 19), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellPlmnMnc.setStatus('current')
cellAdjCellRncIdUtra = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellRncIdUtra.setStatus('current')
cellAdjCellIdUtra = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellIdUtra.setStatus('current')
cellAdjCellLac = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellLac.setStatus('current')
cellAdjCellIdGeran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellIdGeran.setStatus('current')
cellAdjCell40MLayeredFrameWorkCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, -1)).clone(namedValues=NamedValues(("noLayerOver", 0), ("wholeLayerOver", 1), ("partLayerOver", 2), ("invalid", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCell40MLayeredFrameWorkCfg.setStatus('current')
cellAdjCellCdmaPhyCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellCdmaPhyCellId.setStatus('current')
cellAdjCellCdmaFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellCdmaFreq.setStatus('current')
cellAdjCellIndividualOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("n24dB", 0), ("n22dB", 1), ("n20dB", 2), ("n18dB", 3), ("n16dB", 4), ("n14dB", 5), ("n12dB", 6), ("n10dB", 7), ("n8dB", 8), ("n6dB", 9), ("n5dB", 10), ("n4dB", 11), ("n3dB", 12), ("n2dB", 13), ("n1dB", 14), ("p0dB", 15), ("p1dB", 16), ("p2dB", 17), ("p3dB", 18), ("p4dB", 19), ("p5dB", 20), ("p6dB", 21), ("p8dB", 22), ("p10dB", 23), ("p12dB", 24), ("p14dB", 25), ("p16dB", 26), ("p18dB", 27), ("p20dB", 28), ("p22dB", 29), ("p24dB", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellIndividualOffset.setStatus('current')
cellAdjCellSpeedType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 1, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("highSpeedCell", 0), ("lowSpeedCell", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCellSpeedType.setStatus('current')
cellAdjRelationDelInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2))
cellAdjDelLcId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAdjDelLcId.setStatus('current')
cellAdjDelCellNetworkType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("eutra", 0), ("utraFdd", 1), ("utraTdd", 2), ("geran", 3), ("cdma2000", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAdjDelCellNetworkType.setStatus('current')
cellAdjDelCellPlmnMcc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2, 3), MncMccType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAdjDelCellPlmnMcc.setStatus('current')
cellAdjDelCellPlmnMnc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2, 4), MncMccType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAdjDelCellPlmnMnc.setStatus('current')
cellAdjDelEnbGlobalId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAdjDelEnbGlobalId.setStatus('current')
cellAdjDelAdjCellLocalId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAdjDelAdjCellLocalId.setStatus('current')
cellAdjDelCellRncIdUtra = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAdjDelCellRncIdUtra.setStatus('current')
cellAdjDelCellIdUtra = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAdjDelCellIdUtra.setStatus('current')
cellAdjDelCellLac = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAdjDelCellLac.setStatus('current')
cellAdjDelCellIdGeran = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAdjDelCellIdGeran.setStatus('current')
cellAdjDelCellCdma2000Bandclass = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -1)).clone(namedValues=NamedValues(("bc0", 0), ("bc1", 1), ("bc2", 2), ("bc3", 3), ("bc4", 4), ("bc5", 5), ("bc6", 6), ("bc7", 7), ("bc8", 8), ("bc9", 9), ("bc10", 10), ("bc11", 11), ("bc12", 12), ("bc13", 13), ("bc14", 14), ("bc15", 15), ("bc16", 16), ("bc17", 17), ("invalid", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAdjDelCellCdma2000Bandclass.setStatus('current')
cellAdjDelCellCdmaPhyCellId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAdjDelCellCdmaPhyCellId.setStatus('current')
cellAdjDelCellCdmaFreq = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 11, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellAdjDelCellCdmaFreq.setStatus('current')
pl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12))
sdCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 1), )
if mibBuilder.loadTexts: sdCfgTable.setStatus('current')
sdCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sdCfgLcId"))
if mibBuilder.loadTexts: sdCfgEntry.setStatus('current')
sdCfgLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sdCfgLcId.setStatus('current')
sdCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdCfgRowStatus.setStatus('current')
sdCfgThresholdDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdCfgThresholdDetection.setStatus('current')
sdCfgThresholdCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdCfgThresholdCollision.setStatus('current')
phyCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2), )
if mibBuilder.loadTexts: phyCfgTable.setStatus('current')
phyCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "phyCfgLcId"))
if mibBuilder.loadTexts: phyCfgEntry.setStatus('current')
phyCfgLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: phyCfgLcId.setStatus('current')
phyCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgRowStatus.setStatus('current')
phyCfgBFGranuleSinglePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgBFGranuleSinglePort.setStatus('current')
phyCfgBFGranuleDoublePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgBFGranuleDoublePort.setStatus('current')
phyCfgTimeValidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgTimeValidThreshold.setStatus('current')
phyCfgFreqValidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgFreqValidThreshold.setStatus('current')
phyCfgIterStopThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIterStopThreshold.setStatus('current')
phyCfgIterMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIterMaxNum.setStatus('current')
phyCfgRxxFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgRxxFactor.setStatus('current')
phyCfgSRSSamplePerPrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 192))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSRSSamplePerPrb.setStatus('current')
phyCfgWBFCalFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("noBandWeight", 0), ("gobAlg", 1), ("ebbAlg", 2), ("autoSelecAlg", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgWBFCalFlag.setStatus('current')
phyCfgAoaWeightFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgAoaWeightFactor.setStatus('current')
phyCfgBFInterleaveFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgBFInterleaveFlag.setStatus('current')
phyCfgBFOnSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgBFOnSwitch.setStatus('current')
phyCfgPVSPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(2, 4, 6, 8)).clone(namedValues=NamedValues(("val2", 2), ("val4", 4), ("val6", 6), ("val8", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPVSPeriod.setStatus('current')
phyCfgBFScramPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("val1", 1), ("val2", 2), ("val3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgBFScramPeriod.setStatus('current')
phyCfgBFAngleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgBFAngleNum.setStatus('current')
phyCfgScramUePower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgScramUePower.setStatus('current')
phyCfgIrcSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("mrc", 0), ("irc", 1), ("autoSele", 2), ("enhancedIRC", 3), ("enhancedAutoSele", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIrcSwitch.setStatus('current')
phyCfgMultiBeamFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("singleBeam", 0), ("sultiBeam", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgMultiBeamFlag.setStatus('current')
phyCfgIrcAdaptiveThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 40960))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIrcAdaptiveThreshold.setStatus('current')
phyCfgMmseSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("zf", 0), ("mmse", 1), ("zfAndMmse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgMmseSwitch.setStatus('current')
phyCfgSrsCqiMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("nofreqSel", 0), ("ulfreqSel", 1), ("dlfreqSel", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSrsCqiMeasType.setStatus('current')
phyCfgPuschAckActiveSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPuschAckActiveSwitch.setStatus('current')
phyCfgRxChanDelayCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-160, 160))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgRxChanDelayCfg.setStatus('current')
phyCfgIotScSmartAlarmThresholdL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-16, 77))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotScSmartAlarmThresholdL.setStatus('current')
phyCfgIotScSmartAlarmThresholdH = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-16, 77))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotScSmartAlarmThresholdH.setStatus('current')
phyCfgIotScSmartAlarmPRBnumR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotScSmartAlarmPRBnumR.setStatus('current')
phyCfgIotScNotSmartAlarmThresholdL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-16, 77))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotScNotSmartAlarmThresholdL.setStatus('current')
phyCfgIotScNotSmartAlarmThresholdH = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-16, 77))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotScNotSmartAlarmThresholdH.setStatus('current')
phyCfgIotScNotSmartAlarmPRBnumR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotScNotSmartAlarmPRBnumR.setStatus('current')
phyCfgDlTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgDlTestMode.setStatus('current')
phyCfgDlTestOfdm = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgDlTestOfdm.setStatus('current')
phyCfgDlTestAmp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgDlTestAmp1.setStatus('current')
phyCfgDlTestAmp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgDlTestAmp2.setStatus('current')
phyCfgDlTestAmp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgDlTestAmp3.setStatus('current')
phyCfgContinIotMeasPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgContinIotMeasPeriod.setStatus('current')
phyCfgContinIotMeasTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 3000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgContinIotMeasTimes.setStatus('current')
phyCfgContinIotManualMeasSubfnTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 40), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgContinIotManualMeasSubfnTrigger.setStatus('current')
phyCfgContinIotAlarmRelateSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 41), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgContinIotAlarmRelateSwitch.setStatus('current')
phyCfgIotRalativeHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotRalativeHighAlarmThreshold.setStatus('current')
phyCfgIotRelativeHighAlarmPRBnumR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotRelativeHighAlarmPRBnumR.setStatus('current')
phyCfgIotChanAlarmRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotChanAlarmRate.setStatus('current')
phyCfgIotChanNormalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotChanNormalRate.setStatus('current')
phyCfgTm9BfType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 46), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("pm", 0), ("bf", 1), ("pmAndBf", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgTm9BfType.setStatus('current')
phyCfgIotSmartAlarmPartLowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotSmartAlarmPartLowRate.setStatus('current')
phyCfgIotSmartAlarmPartHighRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotSmartAlarmPartHighRate.setStatus('current')
phyCfgIotNotSmartAlarmPartLowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotNotSmartAlarmPartLowRate.setStatus('current')
phyCfgIotNotSmartAlarmPartHighRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgIotNotSmartAlarmPartHighRate.setStatus('current')
phyCfgRipPMReportDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgRipPMReportDelta.setStatus('current')
phyCfgUlIterSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 52), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgUlIterSwitch.setStatus('current')
phyCfgUlIterNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgUlIterNum.setStatus('current')
phyCfgCrsStepupSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 54), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgCrsStepupSwitch.setStatus('current')
phyCfgCrsStepupPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgCrsStepupPeriod.setStatus('current')
phyCfgPucchSrStubSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 56), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchSrStubSwitch.setStatus('current')
phyCfgPucchSrStubPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchSrStubPeriod.setStatus('current')
phyCfgPucchFilterFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchFilterFactor.setStatus('current')
phyCfgUncertainCQISwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 59), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgUncertainCQISwitch.setStatus('current')
phyCfgUncertainCQIUeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1249), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgUncertainCQIUeIndex.setStatus('current')
phyCfgSpeedDetectSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 61), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSpeedDetectSwitch.setStatus('current')
phyCfgSpeedDetectShortT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 62), Integer32().subtype(subtypeSpec=SingleValueConstraint(4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("time500", 4), ("time600", 5), ("time700", 6), ("time800", 7), ("time900", 9), ("time1000", 10), ("time2000", 11), ("time3000", 12), ("time4000", 13), ("time5000", 14), ("time6000", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSpeedDetectShortT.setStatus('current')
phyCfgSpeedDetectP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 63), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("p1", 0), ("p2", 1), ("p3", 2), ("p4", 3), ("p5", 4), ("p6", 5), ("p7", 6), ("p8", 7), ("p9", 8), ("p10", 9), ("p11", 10), ("p12", 11), ("p13", 12), ("p14", 13), ("p15", 14), ("p16", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSpeedDetectP.setStatus('current')
phyCfgSpeedDetectLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSpeedDetectLowThreshold.setStatus('current')
phyCfgSpeedDetectHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSpeedDetectHighThreshold.setStatus('current')
phyCfgSpeedDetectLowTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSpeedDetectLowTimes.setStatus('current')
phyCfgSpeedDetectHighTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSpeedDetectHighTimes.setStatus('current')
phyCfgHighSpeedFreqShiftThr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgHighSpeedFreqShiftThr.setStatus('current')
phyCfgHighSpeedDlModifyFreqShiftPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgHighSpeedDlModifyFreqShiftPeriod.setStatus('current')
phyCfgPucchDataSrStubSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 70), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchDataSrStubSwitch.setStatus('current')
phyCfgPucchDataSrStubPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchDataSrStubPeriod.setStatus('current')
phyCfgPucchNormalCpFmt1ActiveThred1Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchNormalCpFmt1ActiveThred1Ant.setStatus('current')
phyCfgPucchNormalCpFmt1ActiveThred2Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchNormalCpFmt1ActiveThred2Ant.setStatus('current')
phyCfgPucchNormalCpFmt1ActiveThred3Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchNormalCpFmt1ActiveThred3Ant.setStatus('current')
phyCfgPucchNormalCpFmt1ActiveThred4Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchNormalCpFmt1ActiveThred4Ant.setStatus('current')
phyCfgPucchNormalCpFmt1ActiveThred5Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchNormalCpFmt1ActiveThred5Ant.setStatus('current')
phyCfgPucchNormalCpFmt1ActiveThred6Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchNormalCpFmt1ActiveThred6Ant.setStatus('current')
phyCfgPucchNormalCpFmt1ActiveThred7Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchNormalCpFmt1ActiveThred7Ant.setStatus('current')
phyCfgPucchNormalCpFmt1ActiveThred8Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchNormalCpFmt1ActiveThred8Ant.setStatus('current')
phyCfgPucchExTendCpFmt1ActiveThred1Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchExTendCpFmt1ActiveThred1Ant.setStatus('current')
phyCfgPucchExTendCpFmt1ActiveThred2Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchExTendCpFmt1ActiveThred2Ant.setStatus('current')
phyCfgPucchExTendCpFmt1ActiveThred3Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchExTendCpFmt1ActiveThred3Ant.setStatus('current')
phyCfgPucchExTendCpFmt1ActiveThred4Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchExTendCpFmt1ActiveThred4Ant.setStatus('current')
phyCfgPucchExTendCpFmt1ActiveThred5Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchExTendCpFmt1ActiveThred5Ant.setStatus('current')
phyCfgPucchExTendCpFmt1ActiveThred6Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchExTendCpFmt1ActiveThred6Ant.setStatus('current')
phyCfgPucchExTendCpFmt1ActiveThred7Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchExTendCpFmt1ActiveThred7Ant.setStatus('current')
phyCfgPucchExTendCpFmt1ActiveThred8Ant = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchExTendCpFmt1ActiveThred8Ant.setStatus('current')
phyCfgPucchSrAckCollideSelectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 88), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("useSRthre", 0), ("useACKthre", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchSrAckCollideSelectFlag.setStatus('current')
phyCfgPucchSrThrePara = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchSrThrePara.setStatus('current')
phyCfgPucchAckThrePara = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchAckThrePara.setStatus('current')
phyCfgPucchSingleAntAlgorithmFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 91), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchSingleAntAlgorithmFlag.setStatus('current')
phyCfgPucchNormalCpFmt1ActiveThredSingleAnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchNormalCpFmt1ActiveThredSingleAnt.setStatus('current')
phyCfgRipPMReportDeltaSSF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgRipPMReportDeltaSSF.setStatus('current')
phyCfgPlTestPara = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 94), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPlTestPara.setStatus('current')
phyCfgPucchVolteSrStubPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 320))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgPucchVolteSrStubPeriod.setStatus('current')
phyCfgRipPMReportDeltaSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 96), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgRipPMReportDeltaSwitch.setStatus('current')
phyCfgCrsStepupStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgCrsStepupStep.setStatus('current')
phyCfgCrsStepdownStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgCrsStepdownStep.setStatus('current')
phyCfgSrsUePowerCqiThre = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, -40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSrsUePowerCqiThre.setStatus('current')
phyCfgSrsUePowerBfThre = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, -40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSrsUePowerBfThre.setStatus('current')
phyCfgSrsUePowerTaThre = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, -40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSrsUePowerTaThre.setStatus('current')
phyCfgSrsUePowerAnteSelectThre = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, -40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSrsUePowerAnteSelectThre.setStatus('current')
phyCfgSrsSnrCqiThre = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSrsSnrCqiThre.setStatus('current')
phyCfgSrsSnrBfThre = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSrsSnrBfThre.setStatus('current')
phyCfgSrsSnrTaThre = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSrsSnrTaThre.setStatus('current')
phyCfgSrsSnrAnteSelectThre = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 106), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgSrsSnrAnteSelectThre.setStatus('current')
phyPuschPowerControlSnrThre = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyPuschPowerControlSnrThre.setStatus('current')
phyCfgRipIotShifter = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 2, 1, 108), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phyCfgRipIotShifter.setStatus('current')
acCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3), )
if mibBuilder.loadTexts: acCfgTable.setStatus('current')
acCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "acCfgLcId"))
if mibBuilder.loadTexts: acCfgEntry.setStatus('current')
acCfgLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: acCfgLcId.setStatus('current')
acCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCfgRowStatus.setStatus('current')
acCfgPowAttenuRange = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCfgPowAttenuRange.setStatus('current')
acCfgAvePowAttenuRange = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCfgAvePowAttenuRange.setStatus('current')
acCfgPeakposShiftThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCfgPeakposShiftThreshold.setStatus('current')
acCfgAvePeakposShiftThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCfgAvePeakposShiftThreshold.setStatus('current')
acCfgSNRCalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCfgSNRCalThreshold.setStatus('current')
acCfgAveSNRCalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCfgAveSNRCalThreshold.setStatus('current')
acCfgPowLowThresholdSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCfgPowLowThresholdSwitch.setStatus('current')
acCfgPowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, -25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCfgPowLowThreshold.setStatus('current')
acCfgInterferenceSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCfgInterferenceSwitch.setStatus('current')
acCfgInterferenceThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, -50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCfgInterferenceThreshold.setStatus('current')
plSwitchNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4))
plUsrLogCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1), )
if mibBuilder.loadTexts: plUsrLogCfgTable.setStatus('current')
plUsrLogCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "plUsrLogLcId"))
if mibBuilder.loadTexts: plUsrLogCfgEntry.setStatus('current')
plUsrLogLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: plUsrLogLcId.setStatus('current')
plUsrLogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogRowStatus.setStatus('current')
plUsrLogFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogFlag.setStatus('current')
plUsrLogReportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("designteRNTI", 0), ("designteUsrIndex", 1), ("alternation", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogReportType.setStatus('current')
plUsrLogUlReportUeId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogUlReportUeId.setStatus('current')
plUsrLogUlReportDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogUlReportDuration.setStatus('current')
plUsrLogUlBlerThreshlod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogUlBlerThreshlod.setStatus('current')
plUsrLogUlDataLargePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogUlDataLargePeriod.setStatus('current')
plUsrLogUlDataSmallPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogUlDataSmallPeriod.setStatus('current')
plUsrLogUlDataSaveTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogUlDataSaveTimes.setStatus('current')
plUsrLogUlInstanInfoPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogUlInstanInfoPeriod.setStatus('current')
plUsrLogDlReportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("designteRNTI", 0), ("designteUsrIndex", 1), ("alternation", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogDlReportType.setStatus('current')
plUsrLogDlReportUeId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogDlReportUeId.setStatus('current')
plUsrLogDlReportDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogDlReportDuration.setStatus('current')
plUsrLogDlBlerThreshlod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogDlBlerThreshlod.setStatus('current')
plUsrLogDlDataLargePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogDlDataLargePeriod.setStatus('current')
plUsrLogDlDataSmallPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogDlDataSmallPeriod.setStatus('current')
plUsrLogDlDataSaveTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogDlDataSaveTimes.setStatus('current')
plUsrLogDlLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogDlLogLevel.setStatus('current')
plUsrLogPucchCatchDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("bler", 0), ("ackunactive", 1), ("ackactive", 2), ("ackequal", 3), ("ackunequal", 4), ("cqiequal", 5), ("cqiunequal", 6), ("fmt2ackequal", 7), ("fmt2ackunequal", 8), ("snrlower", 9), ("snrhigher", 10), ("rsrplower", 11), ("rsrphigher", 12), ("fmt3ackequal", 13), ("fmt3ackunequal", 14), ("srstubsrmiss", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogPucchCatchDataType.setStatus('current')
plUsrLogPucchCatchDataUeindex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogPucchCatchDataUeindex.setStatus('current')
plUsrLogPucchCatchDataSfn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogPucchCatchDataSfn.setStatus('current')
plUsrLogPucchCatchDataAckValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogPucchCatchDataAckValue.setStatus('current')
plUsrLogPucchCatchDataResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogPucchCatchDataResourceIndex.setStatus('current')
plUsrLogPucchCatchDataCqiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogPucchCatchDataCqiValue.setStatus('current')
plUsrLogPucchSnrOrRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogPucchSnrOrRsrp.setStatus('current')
plUsrLogMsg5CatchSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogMsg5CatchSwitch.setStatus('current')
plUsrLogPucchCatchDataHarqProcNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogPucchCatchDataHarqProcNum.setStatus('current')
plUsrLogPucchCatchDataServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("servicetypedata", 0), ("servicetypevolte", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogPucchCatchDataServiceType.setStatus('current')
plUsrLogPucchCatchDataVolteActiveFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("volteunactive", 0), ("volteactive", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogPucchCatchDataVolteActiveFlag.setStatus('current')
plUsrLogPucchCatchDataCQIorRI = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("catchri", 0), ("catchcqi", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogPucchCatchDataCQIorRI.setStatus('current')
plUsrLogPucchPlLogFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plUsrLogPucchPlLogFlag.setStatus('current')
plReportFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plReportFlag.setStatus('current')
plReportUeType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plReportUeType.setStatus('current')
plReportUeId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plReportUeId.setStatus('current')
plReportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 1, 1, 36), Bits().clone(namedValues=NamedValues(("iotlogflag", 0), ("bflogflag", 1), ("sdlogflag", 2), ("pucchccmacpowerlogflag", 3), ("pucchccmacacklogflag", 4), ("pucchmacdelogflag", 5), ("srslogflag", 6), ("puschackcqilogflag", 7), ("puschcrclogflag", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plReportType.setStatus('current')
plIotLogServerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 2))
plIotLogServerInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 2, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plIotLogServerInetAddrType.setStatus('current')
plIotLogServerInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 2, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plIotLogServerInetAddr.setStatus('current')
plIotLogFileDirectory = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plIotLogFileDirectory.setStatus('current')
plIotLogFtpServerLoginName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plIotLogFtpServerLoginName.setStatus('current')
plIotLogFtpServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plIotLogFtpServerPassword.setStatus('current')
plRipCellCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 3), )
if mibBuilder.loadTexts: plRipCellCfgTable.setStatus('current')
plRipCellCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "plRipCellLcId"))
if mibBuilder.loadTexts: plRipCellCfgEntry.setStatus('current')
plRipCellLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: plRipCellLcId.setStatus('current')
plRipCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plRipCellRowStatus.setStatus('current')
plRipCellUpIotSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("off", 0), ("ripIot", 1), ("prbIot", 2), ("prbIotAndschedSilent", 3), ("schedSilent", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plRipCellUpIotSwitch.setStatus('current')
plRipCellGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("slot", 0), ("symbol", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plRipCellGranularity.setStatus('current')
plRipCellSchedSilentPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("ms1280", 0), ("ms2560", 1), ("ms5120", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plRipCellSchedSilentPeriod.setStatus('current')
plRipLogConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 4))
plRipLogInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 4, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRipLogInetAddrType.setStatus('current')
plRipLogInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 4, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRipLogInetAddr.setStatus('current')
plRipLogFileDirectory = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRipLogFileDirectory.setStatus('current')
plRipLogFtpServerLoginName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRipLogFtpServerLoginName.setStatus('current')
plRipLogFtpServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRipLogFtpServerPassword.setStatus('current')
plRipLogStatisticPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plRipLogStatisticPeriod.setStatus('current')
plRipLogReportPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plRipLogReportPeriod.setStatus('current')
plADICfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5), )
if mibBuilder.loadTexts: plADICfgTable.setStatus('current')
plADICfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "plADILcId"))
if mibBuilder.loadTexts: plADICfgEntry.setStatus('current')
plADILcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: plADILcId.setStatus('current')
plADIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIRowStatus.setStatus('current')
plADIFeatureSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIFeatureSwitch.setStatus('current')
plADIIoTThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIIoTThresh.setStatus('current')
plADIIoThighThreshoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIIoThighThreshoffset.setStatus('current')
plADIIoTLowThreshoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIIoTLowThreshoffset.setStatus('current')
plADIDetectPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIDetectPeriod.setStatus('current')
plADIDetectNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIDetectNum.setStatus('current')
plADIDetectRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIDetectRatio.setStatus('current')
plADICurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("normal", 0), ("middle", 1), ("high", 2), ("higher", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plADICurrentStatus.setStatus('current')
plADIUlPwrPuschPowerSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIUlPwrPuschPowerSwitch.setStatus('current')
plADIUlPwrAlpha = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("al0", 0), ("al04", 1), ("al05", 2), ("al06", 3), ("al07", 4), ("al08", 5), ("al09", 6), ("al1", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIUlPwrAlpha.setStatus('current')
plADIUlPwrPucchPowerSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIUlPwrPucchPowerSwitch.setStatus('current')
plADIUlPwrP0NominalPucch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, -96))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIUlPwrP0NominalPucch.setStatus('current')
plADIRaPreambleInitRcvTargetPow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("n120dBm", 0), ("n118dBm", 1), ("n116dBm", 2), ("n114dBm", 3), ("n112dBm", 4), ("n110dBm", 5), ("n108dBm", 6), ("n106dBm", 7), ("n104dBm", 8), ("n102dBm", 9), ("n100dBm", 10), ("n98dBm", 11), ("n96dBm", 12), ("n94dBm", 13), ("n92dBm", 14), ("n90dBm", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIRaPreambleInitRcvTargetPow.setStatus('current')
plADICellSelectQRxlevMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)).clone(namedValues=NamedValues(("rxLevMinMinusDbm140", 0), ("rxLevMinMinusDbm138", 1), ("rxLevMinMinusDbm136", 2), ("rxLevMinMinusDbm134", 3), ("rxLevMinMinusDbm132", 4), ("rxLevMinMinusDbm130", 5), ("rxLevMinMinusDbm128", 6), ("rxLevMinMinusDbm126", 7), ("rxLevMinMinusDbm124", 8), ("rxLevMinMinusDbm122", 9), ("rxLevMinMinusDbm120", 10), ("rxLevMinMinusDbm118", 11), ("rxLevMinMinusDbm116", 12), ("rxLevMinMinusDbm114", 13), ("rxLevMinMinusDbm112", 14), ("rxLevMinMinusDbm110", 15), ("rxLevMinMinusDbm108", 16), ("rxLevMinMinusDbm106", 17), ("rxLevMinMinusDbm104", 18), ("rxLevMinMinusDbm102", 19), ("rxLevMinMinusDbm100", 20), ("rxLevMinMinusDbm98", 21), ("rxLevMinMinusDbm96", 22), ("rxLevMinMinusDbm94", 23), ("rxLevMinMinusDbm92", 24), ("rxLevMinMinusDbm90", 25), ("rxLevMinMinusDbm88", 26), ("rxLevMinMinusDbm86", 27), ("rxLevMinMinusDbm84", 28), ("rxLevMinMinusDbm82", 29), ("rxLevMinMinusDbm80", 30), ("rxLevMinMinusDbm78", 31), ("rxLevMinMinusDbm76", 32), ("rxLevMinMinusDbm74", 33), ("rxLevMinMinusDbm72", 34), ("rxLevMinMinusDbm70", 35), ("rxLevMinMinusDbm68", 36), ("rxLevMinMinusDbm66", 37), ("rxLevMinMinusDbm64", 38), ("rxLevMinMinusDbm62", 39), ("rxLevMinMinusDbm60", 40), ("rxLevMinMinusDbm58", 41), ("rxLevMinMinusDbm56", 42), ("rxLevMinMinusDbm54", 43), ("rxLevMinMinusDbm52", 44), ("rxLevMinMinusDbm50", 45), ("rxLevMinMinusDbm48", 46), ("rxLevMinMinusDbm46", 47), ("rxLevMinMinusDbm44", 48)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADICellSelectQRxlevMin.setStatus('current')
plADICellReselIntraFreqQrxLevMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)).clone(namedValues=NamedValues(("rxLevMinMinusDbm140", 0), ("rxLevMinMinusDbm138", 1), ("rxLevMinMinusDbm136", 2), ("rxLevMinMinusDbm134", 3), ("rxLevMinMinusDbm132", 4), ("rxLevMinMinusDbm130", 5), ("rxLevMinMinusDbm128", 6), ("rxLevMinMinusDbm126", 7), ("rxLevMinMinusDbm124", 8), ("rxLevMinMinusDbm122", 9), ("rxLevMinMinusDbm120", 10), ("rxLevMinMinusDbm118", 11), ("rxLevMinMinusDbm116", 12), ("rxLevMinMinusDbm114", 13), ("rxLevMinMinusDbm112", 14), ("rxLevMinMinusDbm110", 15), ("rxLevMinMinusDbm108", 16), ("rxLevMinMinusDbm106", 17), ("rxLevMinMinusDbm104", 18), ("rxLevMinMinusDbm102", 19), ("rxLevMinMinusDbm100", 20), ("rxLevMinMinusDbm98", 21), ("rxLevMinMinusDbm96", 22), ("rxLevMinMinusDbm94", 23), ("rxLevMinMinusDbm92", 24), ("rxLevMinMinusDbm90", 25), ("rxLevMinMinusDbm88", 26), ("rxLevMinMinusDbm86", 27), ("rxLevMinMinusDbm84", 28), ("rxLevMinMinusDbm82", 29), ("rxLevMinMinusDbm80", 30), ("rxLevMinMinusDbm78", 31), ("rxLevMinMinusDbm76", 32), ("rxLevMinMinusDbm74", 33), ("rxLevMinMinusDbm72", 34), ("rxLevMinMinusDbm70", 35), ("rxLevMinMinusDbm68", 36), ("rxLevMinMinusDbm66", 37), ("rxLevMinMinusDbm64", 38), ("rxLevMinMinusDbm62", 39), ("rxLevMinMinusDbm60", 40), ("rxLevMinMinusDbm58", 41), ("rxLevMinMinusDbm56", 42), ("rxLevMinMinusDbm54", 43), ("rxLevMinMinusDbm52", 44), ("rxLevMinMinusDbm50", 45), ("rxLevMinMinusDbm48", 46), ("rxLevMinMinusDbm46", 47), ("rxLevMinMinusDbm44", 48)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADICellReselIntraFreqQrxLevMin.setStatus('current')
plADIUlPwrP0NominalPusch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-126, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIUlPwrP0NominalPusch.setStatus('current')
plADIRaPowerRampStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("dB0", 0), ("dB2", 1), ("dB4", 2), ("dB6", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIRaPowerRampStep.setStatus('current')
plADIRaPreambleTrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)).clone(namedValues=NamedValues(("n3", 0), ("n4", 1), ("n5", 2), ("n6", 3), ("n7", 4), ("n8", 5), ("n10", 6), ("n20", 7), ("n50", 8), ("n100", 9), ("n200", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIRaPreambleTrMax.setStatus('current')
plADIUlPwrMsg3PowerCtrlSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIUlPwrMsg3PowerCtrlSwitch.setStatus('current')
plADIUlPwrDeltaPreambleMsg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("deltaPreambleMsg3DbN2", 0), ("deltaPreambleMsg3Db0", 1), ("deltaPreambleMsg3Db2", 2), ("deltaPreambleMsg3Db4", 3), ("deltaPreambleMsg3Db6", 4), ("deltaPreambleMsg3Db8", 5), ("deltaPreambleMsg3Db10", 6), ("deltaPreambleMsg3Db12", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIUlPwrDeltaPreambleMsg3.setStatus('current')
plADIMacTestSwitchInfoUlLimitSrbMcsSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIMacTestSwitchInfoUlLimitSrbMcsSwitch.setStatus('current')
plADIMacTestSwitchInfoUlMaxSrbMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIMacTestSwitchInfoUlMaxSrbMcs.setStatus('current')
plADIMacTestSwitchInfoMcslimitSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIMacTestSwitchInfoMcslimitSwitch.setStatus('current')
plADIMacTestSwitchInfolimitUlMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIMacTestSwitchInfolimitUlMcs.setStatus('current')
plADIMacTestSwitchInfolimitDlMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 5, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plADIMacTestSwitchInfolimitDlMcs.setStatus('current')
plRiaCellCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 6), )
if mibBuilder.loadTexts: plRiaCellCfgTable.setStatus('current')
plRiaCellCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "plRiaCellLcId"))
if mibBuilder.loadTexts: plRiaCellCfgEntry.setStatus('current')
plRiaCellLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: plRiaCellLcId.setStatus('current')
plRiaCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plRiaCellRowStatus.setStatus('current')
plRiaCellFuncSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plRiaCellFuncSwitch.setStatus('current')
plRiaCellSpecialTsCfgSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plRiaCellSpecialTsCfgSwitch.setStatus('current')
plRiaCellState = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("aversion", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRiaCellState.setStatus('current')
plRiaCellStateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("ripLwerCharSeqLst", 0), ("ripHgher", 1), ("detectCharSeq", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRiaCellStateReason.setStatus('current')
plRiaCharactSeqCheckPerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("n1", 0), ("n2", 1), ("n4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaCharactSeqCheckPerNum.setStatus('current')
plRiaCharactSeqSendSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 6, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaCharactSeqSendSwitch.setStatus('current')
plRiaNormalStaCheckPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaNormalStaCheckPeriod.setStatus('current')
plRiaParaCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7))
plRiaPrbThresh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaPrbThresh.setStatus('current')
plRiaPrbThreshOffset = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaPrbThreshOffset.setStatus('current')
plRiaInterferenceCheckPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaInterferenceCheckPeriod.setStatus('current')
plRiaInterferenceCheckPeriodNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaInterferenceCheckPeriodNum.setStatus('current')
plRiaInterferenceCheckRateThresh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaInterferenceCheckRateThresh.setStatus('current')
plRiaCharactSeqCheckPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaCharactSeqCheckPeriod.setStatus('current')
plRiaCharactSeqCheckNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaCharactSeqCheckNum.setStatus('current')
plRiaCharactSeqCheckNumUpThresh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaCharactSeqCheckNumUpThresh.setStatus('current')
plRiaCharactSeqCheckNumDownThresh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaCharactSeqCheckNumDownThresh.setStatus('current')
plRiaCharactSeqCheckThresh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaCharactSeqCheckThresh.setStatus('current')
plRiaLogServerInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 11), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaLogServerInetAddrType.setStatus('current')
plRiaLogServerInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 12), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaLogServerInetAddr.setStatus('current')
plRiaLogServerDirectory = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaLogServerDirectory.setStatus('current')
plRiaLogServerLoginName = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaLogServerLoginName.setStatus('current')
plRiaLogServerPassward = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaLogServerPassward.setStatus('current')
plRiaLogRptPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("min15", 0), ("min30", 1), ("min60", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaLogRptPeriod.setStatus('current')
plRiaCharactSeqRptSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 7, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plRiaCharactSeqRptSwitch.setStatus('current')
plRiaCellRptDataTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 8), )
if mibBuilder.loadTexts: plRiaCellRptDataTable.setStatus('current')
plRiaCellRptDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "plRiaCellRptLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "plRiaCharactSeqIDNo"))
if mibBuilder.loadTexts: plRiaCellRptDataEntry.setStatus('current')
plRiaCellRptLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: plRiaCellRptLcId.setStatus('current')
plRiaCharactSeqIDNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: plRiaCharactSeqIDNo.setStatus('current')
plRiaCellRptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 8, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRiaCellRptRowStatus.setStatus('current')
plRiaCharactSeqID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRiaCharactSeqID.setStatus('current')
plRiaRptCharactSeqCheckNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 12, 4, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRiaRptCharactSeqCheckNum.setStatus('current')
anrNotificationNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13))
anrNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 1))
anrNotification = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiResult"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiFailReason"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiLcIdx"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiAdjRelationIdx"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiAdjCellNetType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiAdjCellPlmnMcc"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiAdjCellPlmnMnc"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiAdjCellId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiTime"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiMmeUeS1apId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiLocalCellRsrp"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiAdjCellRsrp"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiMeasType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "anrNotiMeasEventType"))
if mibBuilder.loadTexts: anrNotification.setStatus('current')
anrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2))
anrNotiNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiNEType.setStatus('current')
anrNotiNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiNEID.setStatus('current')
anrNotiType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("nrAddReq", 0), ("nrDelReq", 1), ("nrAddDone", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiType.setStatus('current')
anrNotiResult = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("success", 0), ("failure", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiResult.setStatus('current')
anrNotiFailReason = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("fullRec", 0), ("invalid", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiFailReason.setStatus('current')
anrNotiLcIdx = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiLcIdx.setStatus('current')
anrNotiAdjRelationIdx = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiAdjRelationIdx.setStatus('current')
anrNotiAdjCellNetType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("eutra", 0), ("utraFdd", 1), ("utraTdd", 2), ("geran", 3), ("cdma2000", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiAdjCellNetType.setStatus('current')
anrNotiAdjCellPlmnMcc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 9), MncMccType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiAdjCellPlmnMcc.setStatus('current')
anrNotiAdjCellPlmnMnc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 10), MncMccType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiAdjCellPlmnMnc.setStatus('current')
anrNotiAdjCellId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 11), Unsigned32Array()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiAdjCellId.setStatus('current')
anrNotiTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 12), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiTime.setStatus('current')
anrNotiMmeUeS1apId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiMmeUeS1apId.setStatus('current')
anrNotiLocalCellRsrp = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 97))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiLocalCellRsrp.setStatus('current')
anrNotiAdjCellRsrp = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 97))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiAdjCellRsrp.setStatus('current')
anrNotiMeasType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("period", 1), ("event", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiMeasType.setStatus('current')
anrNotiMeasEventType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 13, 2, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(3, 4, 5)).clone(namedValues=NamedValues(("a3", 3), ("a4", 4), ("a5", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: anrNotiMeasEventType.setStatus('current')
mroNotificationNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14))
mroNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14, 1))
mroNotification = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "mroNotiNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mroNotiNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mroNotiType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mroNotiCellId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mroNotiAdjCellPlmnMcc"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mroNotiAdjCellPlmnMnc"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mroNotiAdjCellId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mroNotiTime"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mroNotiAdjCellPhyId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mroNotiAdjCellCenterFreq"))
if mibBuilder.loadTexts: mroNotification.setStatus('current')
mroObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14, 2))
mroNotiNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mroNotiNEType.setStatus('current')
mroNotiNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mroNotiNEID.setStatus('current')
mroNotiType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("hoTooEarly", 0), ("hoTooLate", 1), ("hoToWrong", 2), ("hoPingPang", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mroNotiType.setStatus('current')
mroNotiCellId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mroNotiCellId.setStatus('current')
mroNotiAdjCellPlmnMcc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14, 2, 5), MncMccType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mroNotiAdjCellPlmnMcc.setStatus('current')
mroNotiAdjCellPlmnMnc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14, 2, 6), MncMccType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mroNotiAdjCellPlmnMnc.setStatus('current')
mroNotiAdjCellId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14, 2, 7), Unsigned32Array()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mroNotiAdjCellId.setStatus('current')
mroNotiTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14, 2, 8), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mroNotiTime.setStatus('current')
mroNotiAdjCellPhyId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14, 2, 9), Unsigned32Array()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mroNotiAdjCellPhyId.setStatus('current')
mroNotiAdjCellCenterFreq = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 14, 2, 10), Unsigned32Array()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mroNotiAdjCellCenterFreq.setStatus('current')
fcNotificationNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 15))
fcNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 15, 1))
fcNotification = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 15, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "fcNotiNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fcNotiNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fcNotiType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fcNotiCellId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fcNotiAdjCellPlmnMcc"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fcNotiAdjCellPlmnMnc"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fcNotiAdjCellId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fcNotiAdjEnbGlobalId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "fcNotiTime"))
if mibBuilder.loadTexts: fcNotification.setStatus('current')
fcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 15, 2))
fcNotiNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 15, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcNotiNEType.setStatus('current')
fcNotiNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 15, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcNotiNEID.setStatus('current')
fcNotiType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 15, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0)).clone(namedValues=NamedValues(("lbc40fc", 0)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcNotiType.setStatus('current')
fcNotiCellId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 15, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcNotiCellId.setStatus('current')
fcNotiAdjCellPlmnMcc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 15, 2, 5), MncMccType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcNotiAdjCellPlmnMcc.setStatus('current')
fcNotiAdjCellPlmnMnc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 15, 2, 6), MncMccType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcNotiAdjCellPlmnMnc.setStatus('current')
fcNotiAdjCellId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 15, 2, 7), Unsigned32Array()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcNotiAdjCellId.setStatus('current')
fcNotiAdjEnbGlobalId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 15, 2, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcNotiAdjEnbGlobalId.setStatus('current')
fcNotiTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 15, 2, 9), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcNotiTime.setStatus('current')
cellCdma2000Para = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16))
cellCdma2000ParaTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1), )
if mibBuilder.loadTexts: cellCdma2000ParaTable.setStatus('current')
cellCdma2000ParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellCdma2000ParaLcId"))
if mibBuilder.loadTexts: cellCdma2000ParaEntry.setStatus('current')
cellCdma2000ParaLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellCdma2000ParaLcId.setStatus('current')
cellCdma2000ParaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaRowStatus.setStatus('current')
cellCdma2000ParaSystemTimeInfoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaSystemTimeInfoFlag.setStatus('current')
cellCdma2000ParaSystemTimeSynChr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaSystemTimeSynChr.setStatus('current')
cellCdma2000ParaSerWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaSerWindowSize.setStatus('current')
cellCdma2000ParaHRPDFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaHRPDFlag.setStatus('current')
cellCdma2000ParaPreRegZoneId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaPreRegZoneId1.setStatus('current')
cellCdma2000ParaSecondPreRegZoneIdFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaSecondPreRegZoneIdFlag.setStatus('current')
cellCdma2000ParaPreRegZoneId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaPreRegZoneId2.setStatus('current')
cellCdma2000ParaPreRegZoneId3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaPreRegZoneId3.setStatus('current')
cellCdma2000ParaPreRegAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaPreRegAllowed.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegCfgInd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegCfgInd.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegSid = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegSid.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegNid = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegNid.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegMultiSidInd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegMultiSidInd.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegMultiNidInd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegMultiNidInd.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegHomeRegInd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegHomeRegInd.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegFrgnSidRegInd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegFrgnSidRegInd.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegFrgnNidRegInd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegFrgnNidRegInd.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegParamRegInd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegParamRegInd.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegPowerUpRegInd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegPowerUpRegInd.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegRegPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegRegPeriod.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegRegZone = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegRegZone.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegTotalZone = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegTotalZone.setStatus('current')
cellCdma2000ParaCdma1XrttCsfbRegZoneTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCdma1XrttCsfbRegZoneTimer.setStatus('current')
cellCdma2000ParaCsfbRegPwrDownRegCfgInd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 16, 1, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellCdma2000ParaCsfbRegPwrDownRegCfgInd.setStatus('current')
multiBand = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 17))
multiBandTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 17, 1), )
if mibBuilder.loadTexts: multiBandTable.setStatus('current')
multiBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 17, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "multiBandLcId"))
if mibBuilder.loadTexts: multiBandEntry.setStatus('current')
multiBandLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: multiBandLcId.setStatus('current')
multiBandRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 17, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiBandRowStatus.setStatus('current')
multiBandAddtionlSpecEmis1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiBandAddtionlSpecEmis1.setStatus('current')
multiBandEnhanceSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiBandEnhanceSwitch.setStatus('current')
adjCellECGI = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 18))
adjCellECGITable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 18, 1), )
if mibBuilder.loadTexts: adjCellECGITable.setStatus('current')
adjCellECGIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 18, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "adjCellECGILcId"))
if mibBuilder.loadTexts: adjCellECGIEntry.setStatus('current')
adjCellECGILcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: adjCellECGILcId.setStatus('current')
adjCellECGIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 18, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjCellECGIRowStatus.setStatus('current')
adjCellECGIMeasSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adjCellECGIMeasSwitch.setStatus('current')
adjCellECGITimePerUE = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adjCellECGITimePerUE.setStatus('current')
adjCellECGIUENum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adjCellECGIUENum.setStatus('current')
mlbNotificationNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 19))
mlbNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 19, 1))
mlbNotification = NotificationType((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 19, 1, 1)).setObjects(("DTM-TD-LTE-ENODEB-ENBMIB", "mlbNotiNEType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mlbNotiNEID"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mlbNotiType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mlbNotiCellType"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mlbNotiCellId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mlbNotiAdjCellId"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mlbNotiOcnAdjust"), ("DTM-TD-LTE-ENODEB-ENBMIB", "mlbEventNotiTime"))
if mibBuilder.loadTexts: mlbNotification.setStatus('current')
mlbObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 19, 2))
mlbNotiNEType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 19, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 3, 4, 5, 21, 41)).clone(namedValues=NamedValues(("unknown", 0), ("tlb60a", 2), ("emb5116tdlte", 3), ("emb5132tdlte", 4), ("emb5116", 5), ("epc", 21), ("ims", 41)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mlbNotiNEType.setStatus('current')
mlbNotiNEID = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 19, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mlbNotiNEID.setStatus('current')
mlbNotiType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 19, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("fail", 0), ("reSelect", 1), ("back", 2), ("stop", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mlbNotiType.setStatus('current')
mlbNotiCellType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 19, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("srcCell", 0), ("goalCell", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mlbNotiCellType.setStatus('current')
mlbNotiCellId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 19, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mlbNotiCellId.setStatus('current')
mlbNotiAdjCellId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 19, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mlbNotiAdjCellId.setStatus('current')
mlbNotiOcnAdjust = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 19, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mlbNotiOcnAdjust.setStatus('current')
mlbEventNotiTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 5, 19, 2, 8), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mlbEventNotiTime.setStatus('current')
staticMeasurement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 6))
eNBMeasComCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 6, 1))
eNBMeasComPeriodicForPrbNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBMeasComPeriodicForPrbNum.setStatus('current')
eNBMeasComFilterCoeffForPrbNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("val0", 0), ("val1", 1), ("val2", 2), ("val3", 3), ("val4", 4), ("val5", 5), ("val6", 6), ("val7", 7), ("val8", 8), ("val9", 9), ("val11", 10), ("val13", 11), ("val15", 12), ("val17", 13), ("val19", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBMeasComFilterCoeffForPrbNum.setStatus('current')
eNBMeasComPeriodicForRate = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBMeasComPeriodicForRate.setStatus('current')
eNBMeasComFilterCoeffForRate = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 6, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("val0", 0), ("val1", 1), ("val2", 2), ("val3", 3), ("val4", 4), ("val5", 5), ("val6", 6), ("val7", 7), ("val8", 8), ("val9", 9), ("val11", 10), ("val13", 11), ("val15", 12), ("val17", 13), ("val19", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBMeasComFilterCoeffForRate.setStatus('current')
eNBMeasComPeriodicForIot = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBMeasComPeriodicForIot.setStatus('current')
eNBMeasComFilterCoeffForIot = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("val0", 0), ("val1", 1), ("val2", 2), ("val3", 3), ("val4", 4), ("val5", 5), ("val6", 6), ("val7", 7), ("val8", 8), ("val9", 9), ("val11", 10), ("val13", 11), ("val15", 12), ("val17", 13), ("val19", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBMeasComFilterCoeffForIot.setStatus('current')
timer = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7))
protocolTimerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 1))
timerS1RLOCpre = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerS1RLOCpre.setStatus('current')
timerS1RLOCoverall = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerS1RLOCoverall.setStatus('current')
timerS1TimeToWait = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("s1", 0), ("s2", 1), ("s5", 2), ("s10", 3), ("s20", 4), ("s60", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerS1TimeToWait.setStatus('current')
timerX2RLOCpre = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerX2RLOCpre.setStatus('current')
timerX2RLOCoverall = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerX2RLOCoverall.setStatus('current')
timerX2TimeToWait = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("s1", 0), ("s2", 1), ("s5", 2), ("s10", 3), ("s20", 4), ("s60", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerX2TimeToWait.setStatus('current')
eNBTimerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2))
timerRrcConnCmplt = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerRrcConnCmplt.setStatus('current')
timerUeCapaRsp = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerUeCapaRsp.setStatus('current')
timerRrcRecfgCmplt = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerRrcRecfgCmplt.setStatus('current')
timerRrcReestablishCmplt = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerRrcReestablishCmplt.setStatus('current')
timerWaitRrcReestablishReq = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerWaitRrcReestablishReq.setStatus('current')
timerWaitSecurityActCmplt = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerWaitSecurityActCmplt.setStatus('current')
timerWaitCountCheckRsp = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerWaitCountCheckRsp.setStatus('current')
timerRrcConnRel = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerRrcConnRel.setStatus('current')
timerAnrRptEutraTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerAnrRptEutraTimer.setStatus('current')
timerAnrRptInterRatTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerAnrRptInterRatTimer.setStatus('current')
timerAnrRemTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerAnrRemTimer.setStatus('current')
timerAnrUtraDetectTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerAnrUtraDetectTimer.setStatus('current')
timerAnrCdma2000DetectTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerAnrCdma2000DetectTimer.setStatus('current')
timerWaitOtherSfuRsp = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerWaitOtherSfuRsp.setStatus('current')
timerWaitS1Rsp = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerWaitS1Rsp.setStatus('current')
timerWaitX2Rsp = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerWaitX2Rsp.setStatus('current')
timerWaitEndMarker = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerWaitEndMarker.setStatus('current')
timerHcPrepare = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerHcPrepare.setStatus('current')
timerHcSrcHandover = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerHcSrcHandover.setStatus('current')
timerHcTarHandover = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerHcTarHandover.setStatus('current')
timerIcicHii = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerIcicHii.setStatus('current')
timerIcicOi = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerIcicOi.setStatus('current')
timerUeProtect = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 180000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerUeProtect.setStatus('current')
timerStoreUeCtx = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1800000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerStoreUeCtx.setStatus('current')
timerInterRatGeranCco = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerInterRatGeranCco.setStatus('current')
timerInterRatUtraPsHcPrepare = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerInterRatUtraPsHcPrepare.setStatus('current')
timerInterRatUtraPsHc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerInterRatUtraPsHc.setStatus('current')
timerMeasRptCsfb = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerMeasRptCsfb.setStatus('current')
timerWaitPdcpRsp = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerWaitPdcpRsp.setStatus('current')
timerS1Setup = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(30, 60, 300, 900, 1800)).clone(namedValues=NamedValues(("s30", 30), ("s60", 60), ("s300", 300), ("s900", 900), ("s1800", 1800)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerS1Setup.setStatus('current')
timerWaitOmRsp = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerWaitOmRsp.setStatus('current')
timerWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerWaitTime.setStatus('current')
timerInterRatGeranHcPrepare = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerInterRatGeranHcPrepare.setStatus('current')
timerInterRatGeranHc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerInterRatGeranHc.setStatus('current')
timerWatiProcAp = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerWatiProcAp.setStatus('current')
timerProtectReestablish = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerProtectReestablish.setStatus('current')
timerSearchUeContext = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerSearchUeContext.setStatus('current')
timerRrcReestablishUeContext = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerRrcReestablishUeContext.setStatus('current')
timerApDelaySendHoNotify = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 7, 2, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timerApDelaySendHoNotify.setStatus('current')
staticTrafficPara = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8))
sndRlcCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 1), )
if mibBuilder.loadTexts: sndRlcCfgTable.setStatus('current')
sndRlcCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sndRlcCfgId"))
if mibBuilder.loadTexts: sndRlcCfgEntry.setStatus('current')
sndRlcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)))
if mibBuilder.loadTexts: sndRlcCfgId.setStatus('current')
sndRlcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sndRlcRowStatus.setStatus('current')
sndRlcTPollRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54)).clone(namedValues=NamedValues(("ms5", 0), ("ms10", 1), ("ms15", 2), ("ms20", 3), ("ms25", 4), ("ms30", 5), ("ms35", 6), ("ms40", 7), ("ms45", 8), ("ms50", 9), ("ms55", 10), ("ms60", 11), ("ms65", 12), ("ms70", 13), ("ms75", 14), ("ms80", 15), ("ms85", 16), ("ms90", 17), ("ms95", 18), ("ms100", 19), ("ms105", 20), ("ms110", 21), ("ms115", 22), ("ms120", 23), ("ms125", 24), ("ms130", 25), ("ms135", 26), ("ms140", 27), ("ms145", 28), ("ms150", 29), ("ms155", 30), ("ms160", 31), ("ms165", 32), ("ms170", 33), ("ms175", 34), ("ms180", 35), ("ms185", 36), ("ms190", 37), ("ms195", 38), ("ms200", 39), ("ms205", 40), ("ms210", 41), ("ms215", 42), ("ms220", 43), ("ms225", 44), ("ms230", 45), ("ms235", 46), ("ms240", 47), ("ms245", 48), ("ms250", 49), ("ms300", 50), ("ms350", 51), ("ms400", 52), ("ms450", 53), ("ms500", 54)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sndRlcTPollRetransmit.setStatus('current')
sndRlcPollPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("p4", 0), ("p8", 1), ("p16", 2), ("p32", 3), ("p64", 4), ("p128", 5), ("p256", 6), ("pInfinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sndRlcPollPdu.setStatus('current')
sndRlcPollByte = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)).clone(namedValues=NamedValues(("kb25", 0), ("kb50", 1), ("kb75", 2), ("kb100", 3), ("kb125", 4), ("kb250", 5), ("kb375", 6), ("kb500", 7), ("kb750", 8), ("kb1000", 9), ("kb1250", 10), ("kb1500", 11), ("kb2000", 12), ("kb3000", 13), ("kbinfinity", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sndRlcPollByte.setStatus('current')
sndRlcMaxRetxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("t1", 0), ("t2", 1), ("t3", 2), ("t4", 3), ("t6", 4), ("t8", 5), ("t16", 6), ("t32", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sndRlcMaxRetxThreshold.setStatus('current')
sndRlcSnFieldLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("size5", 0), ("size10", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sndRlcSnFieldLength.setStatus('current')
recvRlcCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 2), )
if mibBuilder.loadTexts: recvRlcCfgTable.setStatus('current')
recvRlcCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "recvRlcCfgId"))
if mibBuilder.loadTexts: recvRlcCfgEntry.setStatus('current')
recvRlcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)))
if mibBuilder.loadTexts: recvRlcCfgId.setStatus('current')
recvRlcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: recvRlcRowStatus.setStatus('current')
recvRlcTAmReordering = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("ms0", 0), ("ms5", 1), ("ms10", 2), ("ms15", 3), ("ms20", 4), ("ms25", 5), ("ms30", 6), ("ms35", 7), ("ms40", 8), ("ms45", 9), ("ms50", 10), ("ms55", 11), ("ms60", 12), ("ms65", 13), ("ms70", 14), ("ms75", 15), ("ms80", 16), ("ms85", 17), ("ms90", 18), ("ms95", 19), ("ms100", 20), ("ms110", 21), ("ms120", 22), ("ms130", 23), ("ms140", 24), ("ms150", 25), ("ms160", 26), ("ms170", 27), ("ms180", 28), ("ms190", 29), ("ms200", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: recvRlcTAmReordering.setStatus('current')
recvRlcTUmReordering = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)).clone(namedValues=NamedValues(("ms0", 0), ("ms5", 1), ("ms10", 2), ("ms15", 3), ("ms20", 4), ("ms25", 5), ("ms30", 6), ("ms35", 7), ("ms40", 8), ("ms45", 9), ("ms50", 10), ("ms55", 11), ("ms60", 12), ("ms65", 13), ("ms70", 14), ("ms75", 15), ("ms80", 16), ("ms85", 17), ("ms90", 18), ("ms95", 19), ("ms100", 20), ("ms110", 21), ("ms120", 22), ("ms130", 23), ("ms140", 24), ("ms150", 25), ("ms160", 26), ("ms170", 27), ("ms180", 28), ("ms190", 29), ("ms200", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: recvRlcTUmReordering.setStatus('current')
recvRlcTStatusProhibit = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55)).clone(namedValues=NamedValues(("ms0", 0), ("ms5", 1), ("ms10", 2), ("ms15", 3), ("ms20", 4), ("ms25", 5), ("ms30", 6), ("ms35", 7), ("ms40", 8), ("ms45", 9), ("ms50", 10), ("ms55", 11), ("ms60", 12), ("ms65", 13), ("ms70", 14), ("ms75", 15), ("ms80", 16), ("ms85", 17), ("ms90", 18), ("ms95", 19), ("ms100", 20), ("ms105", 21), ("ms110", 22), ("ms115", 23), ("ms120", 24), ("ms125", 25), ("ms130", 26), ("ms135", 27), ("ms140", 28), ("ms145", 29), ("ms150", 30), ("ms155", 31), ("ms160", 32), ("ms165", 33), ("ms170", 34), ("ms175", 35), ("ms180", 36), ("ms185", 37), ("ms190", 38), ("ms195", 39), ("ms200", 40), ("ms205", 41), ("ms210", 42), ("ms215", 43), ("ms220", 44), ("ms225", 45), ("ms230", 46), ("ms235", 47), ("ms240", 48), ("ms245", 49), ("ms250", 50), ("ms300", 51), ("ms350", 52), ("ms400", 53), ("ms450", 54), ("ms500", 55)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: recvRlcTStatusProhibit.setStatus('current')
recvRlcSnFieldLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("size5", 0), ("size10", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: recvRlcSnFieldLength.setStatus('current')
pdcpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3), )
if mibBuilder.loadTexts: pdcpCfgTable.setStatus('current')
pdcpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpCfgId"))
if mibBuilder.loadTexts: pdcpCfgEntry.setStatus('current')
pdcpCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)))
if mibBuilder.loadTexts: pdcpCfgId.setStatus('current')
pdcpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpRowStatus.setStatus('current')
pdcpDiscardTimerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notExist", 0), ("exist", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpDiscardTimerFlag.setStatus('current')
pdcpDiscardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("ms50", 0), ("ms100", 1), ("ms150", 2), ("ms300", 3), ("ms500", 4), ("ms750", 5), ("ms1500", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpDiscardTimer.setStatus('current')
pdcpStatusReportRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpStatusReportRequired.setStatus('current')
pdcpSnSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("bits7", 0), ("bits12", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpSnSize.setStatus('current')
pdcpHeaderCompressionFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpHeaderCompressionFlag.setStatus('current')
pdcpMaxCid = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpMaxCid.setStatus('current')
pdcpProfile0x0001Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 0)).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpProfile0x0001Flag.setStatus('current')
pdcpProfile0x0002Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 0)).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpProfile0x0002Flag.setStatus('current')
pdcpProfile0x0003Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 0)).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpProfile0x0003Flag.setStatus('current')
pdcpProfile0x0004Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 0)).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpProfile0x0004Flag.setStatus('current')
pdcpProfile0x0006Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 0)).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpProfile0x0006Flag.setStatus('current')
pdcpProfile0x0101Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 0)).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpProfile0x0101Flag.setStatus('current')
pdcpProfile0x0102Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 0)).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpProfile0x0102Flag.setStatus('current')
pdcpProfile0x0103Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 0)).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpProfile0x0103Flag.setStatus('current')
pdcpProfile0x0104Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 0)).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpProfile0x0104Flag.setStatus('current')
pdcpDiscardTimerExCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpDiscardTimerExCfg.setStatus('current')
pdcpDiscardTimerExCfgQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpDiscardTimerExCfgQci9.setStatus('current')
srbTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 4), )
if mibBuilder.loadTexts: srbTable.setStatus('current')
srbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "srbId"))
if mibBuilder.loadTexts: srbEntry.setStatus('current')
srbId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: srbId.setStatus('current')
srbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srbRowStatus.setStatus('current')
srbRlcDefaultCfgFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("rlcDefaultCfg", 0), ("rlcExplicitCfg", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srbRlcDefaultCfgFlag.setStatus('current')
srbLochDefaultCfgFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("lochDefaultCfg", 0), ("lochExplicitCfg", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srbLochDefaultCfgFlag.setStatus('current')
srbSendRlcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srbSendRlcCfgId.setStatus('current')
srbRecvRlcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srbRecvRlcCfgId.setStatus('current')
srbUlLoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srbUlLoPriority.setStatus('current')
srbUlLoChGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srbUlLoChGroup.setStatus('current')
srbDlLoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srbDlLoPriority.setStatus('current')
drbTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5), )
if mibBuilder.loadTexts: drbTable.setStatus('current')
drbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "drbQci"))
if mibBuilder.loadTexts: drbEntry.setStatus('current')
drbQci = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: drbQci.setStatus('current')
drbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbRowStatus.setStatus('current')
drbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("am", 1), ("umBi", 2), ("umUniUl", 3), ("umUniDl", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbMode.setStatus('current')
drbPdcpCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbPdcpCfgId.setStatus('current')
drbSendRlcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbSendRlcCfgId.setStatus('current')
drbRecvRlcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbRecvRlcCfgId.setStatus('current')
drbUlLoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbUlLoPriority.setStatus('current')
drbPbr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("kB0", 0), ("kB8", 1), ("kB16", 2), ("kB32", 3), ("kB64", 4), ("kB128", 5), ("kB256", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbPbr.setStatus('current')
drbMinbr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)).clone(namedValues=NamedValues(("kB0", 0), ("kB8", 1), ("kB16", 2), ("kB32", 3), ("kB64", 4), ("kB128", 5), ("kB256", 6), ("infinity", 7), ("kB640", 8), ("kB512", 9), ("kB768", 10), ("kB896", 11), ("kB1024", 12), ("kB1152", 13), ("kB1280", 14), ("kB1408", 15), ("kB1536", 16), ("kB1664", 17), ("kB1792", 18), ("kB1920", 19), ("kB2048", 20), ("kB2176", 21), ("kB2304", 22), ("kB2432", 23), ("kB2560", 24)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbMinbr.setStatus('current')
drbBucketSizeDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("bsdMs50", 0), ("bsdMs100", 1), ("bsdMs150", 2), ("bsdMs300", 3), ("bsdMs500", 4), ("bsdMs1000", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbBucketSizeDuration.setStatus('current')
drbUlLoChGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbUlLoChGroup.setStatus('current')
drbDlLoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbDlLoPriority.setStatus('current')
drbDataforwardFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("dataforwardFalse", 0), ("dataforwardTrue", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbDataforwardFlag.setStatus('current')
drbSecondaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("am", 1), ("umBi", 2), ("umUniUl", 3), ("umUniDl", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbSecondaryMode.setStatus('current')
drbSecondaryPdcpCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbSecondaryPdcpCfgId.setStatus('current')
drbSecondarySendRlcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbSecondarySendRlcCfgId.setStatus('current')
drbSecondaryRecvRlcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbSecondaryRecvRlcCfgId.setStatus('current')
drbS1ResMapCoef = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbS1ResMapCoef.setStatus('current')
drbDlBucketSizeDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 5, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("bsdMs5", 0), ("bsdMs50", 1), ("bsdMs100", 2), ("bsdMs250", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drbDlBucketSizeDuration.setStatus('current')
pagingEnbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 6))
pagingEnbDeftCycle = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 6, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("ms320", 0), ("ms640", 1), ("ms1280", 2), ("ms2560", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagingEnbDeftCycle.setStatus('current')
extendDrbTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7), )
if mibBuilder.loadTexts: extendDrbTable.setStatus('current')
extendDrbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "extendDrbIndex"))
if mibBuilder.loadTexts: extendDrbEntry.setStatus('current')
extendDrbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: extendDrbIndex.setStatus('current')
extendDrbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbRowStatus.setStatus('current')
extendDrbQci = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbQci.setStatus('current')
extendDrbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("am", 1), ("umBi", 2), ("umUniUl", 3), ("umUniDl", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbMode.setStatus('current')
extendDrbPdcpCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbPdcpCfgId.setStatus('current')
extendDrbSendRlcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbSendRlcCfgId.setStatus('current')
extendDrbRecvRlcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbRecvRlcCfgId.setStatus('current')
extendDrbUlLoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbUlLoPriority.setStatus('current')
extendDrbPbr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("kb0", 0), ("kb8", 1), ("kb16", 2), ("kb32", 3), ("kb64", 4), ("kb128", 5), ("kb256", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbPbr.setStatus('current')
extendDrbMinbr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("kb0", 0), ("kb8", 1), ("kb16", 2), ("kb32", 3), ("kb64", 4), ("kb128", 5), ("kb256", 6), ("infinity", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbMinbr.setStatus('current')
extendDrbBucketSizeDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("bsdMs50", 0), ("bsdMs100", 1), ("bsdMs150", 2), ("bsdMs300", 3), ("bsdMs500", 4), ("bsdMs1000", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbBucketSizeDuration.setStatus('current')
extendDrbUlLoChGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbUlLoChGroup.setStatus('current')
extendDrbDlLoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbDlLoPriority.setStatus('current')
extendDrbDataforwardFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("dataforwardFalse", 0), ("dataforwardTrue", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbDataforwardFlag.setStatus('current')
extendDrbSecondaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("am", 1), ("umBi", 2), ("umUniUl", 3), ("umUniDl", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbSecondaryMode.setStatus('current')
extendDrbSecondaryPdcpCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbSecondaryPdcpCfgId.setStatus('current')
extendDrbSecondarySendRlcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbSecondarySendRlcCfgId.setStatus('current')
extendDrbSecondaryRecvRlcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbSecondaryRecvRlcCfgId.setStatus('current')
extendDrbS1ResMapCoef = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbS1ResMapCoef.setStatus('current')
extendDrbPER = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbPER.setStatus('current')
extendDrbPDB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbPDB.setStatus('current')
extendDrbPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbPriority.setStatus('current')
extendDrbDlBucketSizeDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 7, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("bsdMs5", 0), ("bsdMs50", 1), ("bsdMs100", 2), ("bsdMs250", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendDrbDlBucketSizeDuration.setStatus('current')
smallPacketAlgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8), )
if mibBuilder.loadTexts: smallPacketAlgTable.setStatus('current')
smallPacketAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "smallPacketAlgLcid"))
if mibBuilder.loadTexts: smallPacketAlgEntry.setStatus('current')
smallPacketAlgLcid = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: smallPacketAlgLcid.setStatus('current')
smallPacketAlgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smallPacketAlgRowStatus.setStatus('current')
smallPacketCheckSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smallPacketCheckSwitch.setStatus('current')
smallPacketStasticPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)).clone(namedValues=NamedValues(("ms300", 0), ("ms400", 1), ("ms500", 2), ("ms600", 3), ("ms700", 4), ("ms800", 5), ("ms900", 6), ("s1", 7), ("s2", 8), ("s3", 9), ("s4", 10), ("s5", 11), ("s6", 12), ("s7", 13), ("s8", 14), ("s9", 15), ("s10", 16)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smallPacketStasticPeriod.setStatus('current')
smallPacketDlPacketNumberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smallPacketDlPacketNumberThreshold.setStatus('current')
smallPacketUlPacketNumberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smallPacketUlPacketNumberThreshold.setStatus('current')
smallPacketPacketSizeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smallPacketPacketSizeThreshold.setStatus('current')
smallPacketStasticRatioThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smallPacketStasticRatioThreshold.setStatus('current')
smallPacketUlSmallPacketConfluxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smallPacketUlSmallPacketConfluxThreshold.setStatus('current')
smallPacketBSREnlargeCoeff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(110, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smallPacketBSREnlargeCoeff.setStatus('current')
smallPacketDlSmallPacketConfluxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smallPacketDlSmallPacketConfluxThreshold.setStatus('current')
smallPacketDlBoTimeroutReportThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smallPacketDlBoTimeroutReportThreshold.setStatus('current')
smallPacketPdcchCceUsedRatioThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 8, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smallPacketPdcchCceUsedRatioThreshold.setStatus('current')
adjeNBCell = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9))
cellAdjEutraCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1), )
if mibBuilder.loadTexts: cellAdjEutraCellTable.setStatus('current')
cellAdjEutraCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellAdjEutraCellIndex"))
if mibBuilder.loadTexts: cellAdjEutraCellEntry.setStatus('current')
cellAdjEutraCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 383)))
if mibBuilder.loadTexts: cellAdjEutraCellIndex.setStatus('current')
cellAdjEutraCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjEutraCellRowStatus.setStatus('current')
cellAdjEutraCellEnbGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjEutraCellEnbGlobalId.setStatus('current')
cellAdjEutraCellCellLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjEutraCellCellLocalId.setStatus('current')
cellAdjEutraCellPhyCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 504), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjEutraCellPhyCellId.setStatus('current')
cellAdjEutraCellFreqBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 61, 62)).clone(namedValues=NamedValues(("band1", 1), ("band2", 2), ("band3", 3), ("band4", 4), ("band5", 5), ("band7", 7), ("band8", 8), ("band9", 9), ("band10", 10), ("band11", 11), ("band12", 12), ("band13", 13), ("band14", 14), ("band17", 17), ("band18", 18), ("band19", 19), ("band20", 20), ("band21", 21), ("band22", 22), ("band23", 23), ("band24", 24), ("band25", 25), ("band26", 26), ("band33", 33), ("band34", 34), ("band35", 35), ("band36", 36), ("band37", 37), ("band38", 38), ("band39", 39), ("band40", 40), ("band41", 41), ("band44", 44), ("band61", 61), ("band62", 62)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjEutraCellFreqBand.setStatus('current')
cellAdjEutraCellFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjEutraCellFreq.setStatus('current')
cellAdjEutraCellTac = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjEutraCellTac.setStatus('current')
cellAdjEutraCellPlmnMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1, 9), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjEutraCellPlmnMcc.setStatus('current')
cellAdjEutraCellPlmnMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1, 10), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjEutraCellPlmnMnc.setStatus('current')
cellAdjEutraCellEARFCN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAdjEutraCellEARFCN.setStatus('current')
cellAdjEutranMultiBandEnhanceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("nobroadcaste", 0), ("broadcasted", 1), ("noSupport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAdjEutranMultiBandEnhanceFlag.setStatus('current')
cellAdjEutranMultiBandEnhanceManualFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("nobroadcaste", 0), ("broadcasted", 1), ("noSupport", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjEutranMultiBandEnhanceManualFlag.setStatus('current')
cellAdjUtraFddCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2), )
if mibBuilder.loadTexts: cellAdjUtraFddCellTable.setStatus('current')
cellAdjUtraFddCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellAdjUtraFddCellIndex"))
if mibBuilder.loadTexts: cellAdjUtraFddCellEntry.setStatus('current')
cellAdjUtraFddCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: cellAdjUtraFddCellIndex.setStatus('current')
cellAdjUtraFddCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraFddCellRowStatus.setStatus('current')
cellAdjUtraFddCellArfcn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraFddCellArfcn.setStatus('current')
cellAdjUtraFddCellPhyCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraFddCellPhyCellId.setStatus('current')
cellAdjUtraFddCellCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraFddCellCellId.setStatus('current')
cellAdjUtraFddCellLAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraFddCellLAC.setStatus('current')
cellAdjUtraFddCellRAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraFddCellRAC.setStatus('current')
cellAdjUtraFddCellPlmnMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1, 8), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraFddCellPlmnMcc.setStatus('current')
cellAdjUtraFddCellPlmnMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1, 9), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraFddCellPlmnMnc.setStatus('current')
cellAdjUtraFddCellRncId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraFddCellRncId.setStatus('current')
cellAdjUtraFddDirectTunnelFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraFddDirectTunnelFlag.setStatus('current')
cellAdjUtraFddCellRacFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraFddCellRacFlag.setStatus('current')
cellAdjUtraFddCellRim = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraFddCellRim.setStatus('current')
cellAdjUtraTddCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3), )
if mibBuilder.loadTexts: cellAdjUtraTddCellTable.setStatus('current')
cellAdjUtraTddCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellAdjUtraTddCellIndex"))
if mibBuilder.loadTexts: cellAdjUtraTddCellEntry.setStatus('current')
cellAdjUtraTddCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: cellAdjUtraTddCellIndex.setStatus('current')
cellAdjUtraTddCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraTddCellRowStatus.setStatus('current')
cellAdjUtraTddCellArfcn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraTddCellArfcn.setStatus('current')
cellAdjUtraTddCellPhyCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraTddCellPhyCellId.setStatus('current')
cellAdjUtraTddCellCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraTddCellCellId.setStatus('current')
cellAdjUtraTddCellLAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraTddCellLAC.setStatus('current')
cellAdjUtraTddCellRAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraTddCellRAC.setStatus('current')
cellAdjUtraTddCellPlmnMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1, 8), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraTddCellPlmnMcc.setStatus('current')
cellAdjUtraTddCellPlmnMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1, 9), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraTddCellPlmnMnc.setStatus('current')
cellAdjUtraTddCellRncId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraTddCellRncId.setStatus('current')
cellAdjUtraTddDirectTunnelFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraTddDirectTunnelFlag.setStatus('current')
cellAdjUtraTddCellRacFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraTddCellRacFlag.setStatus('current')
cellAdjUtraTddCellRim = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjUtraTddCellRim.setStatus('current')
cellAdjGeranCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4), )
if mibBuilder.loadTexts: cellAdjGeranCellTable.setStatus('current')
cellAdjGeranCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellAdjGeranCellIndex"))
if mibBuilder.loadTexts: cellAdjGeranCellEntry.setStatus('current')
cellAdjGeranCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: cellAdjGeranCellIndex.setStatus('current')
cellAdjGeranCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranCellRowStatus.setStatus('current')
cellAdjGeranCellNetworkColourCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranCellNetworkColourCode.setStatus('current')
cellAdjGeranCellBasestationColourCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranCellBasestationColourCode.setStatus('current')
cellAdjGeranCellLAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranCellLAC.setStatus('current')
cellAdjGeranCellCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranCellCellId.setStatus('current')
cellAdjGeranCellRAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranCellRAC.setStatus('current')
cellAdjGeranCellArfcn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranCellArfcn.setStatus('current')
cellAdjGeranBandIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("dcs1800", 0), ("pcs1900", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranBandIndicator.setStatus('current')
cellAdjGeranPlmnMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 10), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranPlmnMcc.setStatus('current')
cellAdjGeranPlmnMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 11), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranPlmnMnc.setStatus('current')
cellAdjGeranCellRimFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranCellRimFlag.setStatus('current')
cellAdjGeranPsHcFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranPsHcFlag.setStatus('current')
cellAdjGeranDirectTunnelFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranDirectTunnelFlag.setStatus('current')
cellAdjGeranCellRacFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranCellRacFlag.setStatus('current')
cellAdjGeranNetworkControlOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 4, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("nc0", 0), ("nc1", 1), ("nc2", 2), ("reset", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjGeranNetworkControlOrder.setStatus('current')
cellAdjCdma2000CellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 5), )
if mibBuilder.loadTexts: cellAdjCdma2000CellTable.setStatus('current')
cellAdjCdma2000CellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellAdjCdma2000CellIndex"))
if mibBuilder.loadTexts: cellAdjCdma2000CellEntry.setStatus('current')
cellAdjCdma2000CellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: cellAdjCdma2000CellIndex.setStatus('current')
cellAdjCdma2000CellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCdma2000CellRowStatus.setStatus('current')
cellAdjCdma2000CellArfcn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCdma2000CellArfcn.setStatus('current')
cellAdjCdma2000CellPhyCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCdma2000CellPhyCellId.setStatus('current')
cellAdjCdma2000CellType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("type1XRTT", 0), ("typeHRPD", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCdma2000CellType.setStatus('current')
cellAdjCdma2000CellBandclass = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 9, 5, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)).clone(namedValues=NamedValues(("bc0", 0), ("bc1", 1), ("bc2", 2), ("bc3", 3), ("bc4", 4), ("bc5", 5), ("bc6", 6), ("bc7", 7), ("bc8", 8), ("bc9", 9), ("bc10", 10), ("bc11", 11), ("bc12", 12), ("bc13", 13), ("bc14", 14), ("bc15", 15), ("bc16", 16), ("bc17", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cellAdjCdma2000CellBandclass.setStatus('current')
adjeNB = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10))
adjeNBTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1), )
if mibBuilder.loadTexts: adjeNBTable.setStatus('current')
adjeNBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "adjeNBIndex"))
if mibBuilder.loadTexts: adjeNBEntry.setStatus('current')
adjeNBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)))
if mibBuilder.loadTexts: adjeNBIndex.setStatus('current')
adjeNBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBRowStatus.setStatus('current')
adjeNBGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBGlobalId.setStatus('current')
adjeNBPlmnMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 4), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBPlmnMcc.setStatus('current')
adjeNBPlmnMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 5), MncMccType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBPlmnMnc.setStatus('current')
adjeNBMmeGroupId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId1.setStatus('current')
adjeNBMmeGroupId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId2.setStatus('current')
adjeNBMmeGroupId3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId3.setStatus('current')
adjeNBMmeGroupId4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId4.setStatus('current')
adjeNBMmeGroupId5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId5.setStatus('current')
adjeNBMmeGroupId6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId6.setStatus('current')
adjeNBMmeGroupId7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId7.setStatus('current')
adjeNBMmeGroupId8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId8.setStatus('current')
adjeNBMmeGroupId9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId9.setStatus('current')
adjeNBMmeGroupId10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId10.setStatus('current')
adjeNBMmeGroupId11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId11.setStatus('current')
adjeNBMmeGroupId12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId12.setStatus('current')
adjeNBMmeGroupId13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId13.setStatus('current')
adjeNBMmeGroupId14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId14.setStatus('current')
adjeNBMmeGroupId15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId15.setStatus('current')
adjeNBMmeGroupId16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adjeNBMmeGroupId16.setStatus('current')
adjeNBSctpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 10, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 81), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adjeNBSctpIndex.setStatus('current')
globalAlgorithm = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11))
encryptAlgorithmTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 1), )
if mibBuilder.loadTexts: encryptAlgorithmTable.setStatus('current')
encryptAlgorithmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "encryptAlgorithmIndex"))
if mibBuilder.loadTexts: encryptAlgorithmEntry.setStatus('current')
encryptAlgorithmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: encryptAlgorithmIndex.setStatus('current')
encryptAlgorithmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: encryptAlgorithmRowStatus.setStatus('current')
encryptAlgorithmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("eea0", 0), ("eea1", 1), ("eea2", 2), ("eea3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: encryptAlgorithmType.setStatus('current')
encryptAlgorithmPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: encryptAlgorithmPriority.setStatus('current')
integrityAlgorithmTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 2), )
if mibBuilder.loadTexts: integrityAlgorithmTable.setStatus('current')
integrityAlgorithmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "integrityAlgorithmIndex"))
if mibBuilder.loadTexts: integrityAlgorithmEntry.setStatus('current')
integrityAlgorithmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: integrityAlgorithmIndex.setStatus('current')
integrityAlgorithmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: integrityAlgorithmRowStatus.setStatus('current')
integrityAlgorithmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("eia0", 0), ("eia1", 1), ("eia2", 2), ("eia3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: integrityAlgorithmType.setStatus('current')
integrityAlgorithmPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: integrityAlgorithmPriority.setStatus('current')
anrAlgorithmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3))
anrAlgorithmSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrAlgorithmSwitch.setStatus('current')
anrRemoveSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrRemoveSwitch.setStatus('current')
anrMeasRsrpTh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 97))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrMeasRsrpTh.setStatus('current')
anrRemThForActiveTimes = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrRemThForActiveTimes.setStatus('current')
anrExUeNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrExUeNum.setStatus('current')
anrRemoveInterRatSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrRemoveInterRatSwitch.setStatus('current')
anrRemThForActiveTimesInterRat = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrRemThForActiveTimesInterRat.setStatus('current')
anrMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("controlled", 0), ("selfOpt", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrMode.setStatus('current')
anrMeasRscpTh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5, 91))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrMeasRscpTh.setStatus('current')
anrMeasEcnoTh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrMeasEcnoTh.setStatus('current')
anrMeasRssiTh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 76))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrMeasRssiTh.setStatus('current')
anrTestAdjrelationNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrTestAdjrelationNum.setStatus('current')
anrSonMeas2GSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrSonMeas2GSwitch.setStatus('current')
anrSonMeas3GSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrSonMeas3GSwitch.setStatus('current')
anrMode2G = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("controlled", 0), ("selfOpt", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrMode2G.setStatus('current')
anrMode3G = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("controlled", 0), ("selfOpt", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrMode3G.setStatus('current')
anr2GAdjrelationNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anr2GAdjrelationNum.setStatus('current')
anr3GAdjrelationNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anr3GAdjrelationNum.setStatus('current')
anrMeasPeriodSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrMeasPeriodSwitch.setStatus('current')
anrMeasEventSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 21), Bits().clone(namedValues=NamedValues(("a3", 0), ("a4", 1), ("a5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrMeasEventSwitch.setStatus('current')
anrInterFreqSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 3, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anrInterFreqSwitch.setStatus('current')
pciAlgorithmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 4))
pciAlgorithmSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 4, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pciAlgorithmSwitch.setStatus('current')
pciCheckTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 4, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pciCheckTrigger.setStatus('current')
selfStartupAlgorithmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 5))
selfStartupAlgorithmSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 5, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selfStartupAlgorithmSwitch.setStatus('current')
selfStartupIpSecSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 5, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selfStartupIpSecSwitch.setStatus('current')
s1Flex = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 6))
s1FlexSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 6, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s1FlexSwitch.setStatus('current')
s1FlexDefMmePlmnMcc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 6, 2), MncMccType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s1FlexDefMmePlmnMcc.setStatus('current')
s1FlexDefMmePlmnMnc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 6, 3), MncMccType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s1FlexDefMmePlmnMnc.setStatus('current')
s1FlexDefMmeGroupId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s1FlexDefMmeGroupId.setStatus('current')
s1FlexDefMmeCode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s1FlexDefMmeCode.setStatus('current')
s1FlexDefMmeExistStatus = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 6, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("invalid", 0), ("notMatched", 1), ("matched", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s1FlexDefMmeExistStatus.setStatus('current')
geranFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 7))
geranDtmFlag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 7, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geranDtmFlag.setStatus('current')
dummyMme = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 8))
dummyMmeFuncSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 8, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dummyMmeFuncSwitch.setStatus('current')
eNBTrafficTest = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 9))
eNBIotAlarmSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 9, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBIotAlarmSwitch.setStatus('current')
eNBIotAlarmPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 9, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(180, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBIotAlarmPeriod.setStatus('current')
eNBIotAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBIotAlarmThreshold.setStatus('current')
eNBIotAlarmPRBnum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 9, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBIotAlarmPRBnum.setStatus('current')
eNBMroAlarmSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 9, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBMroAlarmSwitch.setStatus('current')
eNBIotAlarmDelayNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 9, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBIotAlarmDelayNum.setStatus('current')
eNBEnergyConservationStrategy = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10))
eNBPathShutdownStrategySwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBPathShutdownStrategySwitch.setStatus('current')
eNBCellShutdownStrategySwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBCellShutdownStrategySwitch.setStatus('current')
eNBEnergyConservStartTimeHour = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBEnergyConservStartTimeHour.setStatus('current')
eNBEnergyConservStartTimeMinute = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBEnergyConservStartTimeMinute.setStatus('current')
eNBEnergyConservEndTimeHour = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBEnergyConservEndTimeHour.setStatus('current')
eNBEnergyConservEndTimeMinute = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBEnergyConservEndTimeMinute.setStatus('current')
eNBEnergyConservDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBEnergyConservDelayTime.setStatus('current')
eNBPathShutdownLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBPathShutdownLowThreshold.setStatus('current')
eNBPathShutdownHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBPathShutdownHighThreshold.setStatus('current')
eNBCellShutdownLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBCellShutdownLowThreshold.setStatus('current')
eNBCellShutdownHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBCellShutdownHighThreshold.setStatus('current')
eNBMBSFNSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("auto", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBMBSFNSwitch.setStatus('current')
eNBMBSFNShutdownLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBMBSFNShutdownLowThreshold.setStatus('current')
eNBMBSFNShutdownHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBMBSFNShutdownHighThreshold.setStatus('current')
eNBSymbolSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBSymbolSwitch.setStatus('current')
eNBSymbolShutdownLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBSymbolShutdownLowThreshold.setStatus('current')
eNBSymbolShutdownHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBSymbolShutdownHighThreshold.setStatus('current')
eNBCarrierSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBCarrierSwitch.setStatus('current')
eNBCarrierShutdownLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBCarrierShutdownLowThreshold.setStatus('current')
eNBCarrierShutdownHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBCarrierShutdownHighThreshold.setStatus('current')
eNBPRBRadioType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("autualPRB", 0), ("switchedPRB", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBPRBRadioType.setStatus('current')
eNBEightPathShutdownType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off1port4", 0), ("off2port2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBEightPathShutdownType.setStatus('current')
eNBPaReconfigSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBPaReconfigSwitch.setStatus('current')
eNBPathShutdownReceiveSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBPathShutdownReceiveSwitch.setStatus('current')
eNBPathShutdownPriority = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBPathShutdownPriority.setStatus('current')
eNBCellShutdownPriority = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBCellShutdownPriority.setStatus('current')
eNBMBSFNOrSymbolPriority = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBMBSFNOrSymbolPriority.setStatus('current')
eNBCarrierPriority = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBCarrierPriority.setStatus('current')
eNBMacSymbolShutSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBMacSymbolShutSwitch.setStatus('current')
eNBPathRecoverDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 10, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNBPathRecoverDelayTime.setStatus('current')
equipLicenseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 11))
equipMultiChannelBBUCarrierNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 11, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipMultiChannelBBUCarrierNum.setStatus('current')
equipDualChannelBBUCarrierNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 11, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipDualChannelBBUCarrierNum.setStatus('current')
equipMultiChannelRRUCarrierNumm = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 11, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipMultiChannelRRUCarrierNumm.setStatus('current')
equipDualChannelRRUCarrierNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 11, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipDualChannelRRUCarrierNum.setStatus('current')
equipConnectUeNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 11, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipConnectUeNum.setStatus('current')
hcPenaltyAlgorithm = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 12))
hcFailPenaltyTag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 12, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcFailPenaltyTag.setStatus('current')
hcFailMaxNumForLteCell = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 12, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcFailMaxNumForLteCell.setStatus('current')
hcFailPenaltyTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 12, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcFailPenaltyTime.setStatus('current')
hcSrvccFailPenaltyTag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 12, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcSrvccFailPenaltyTag.setStatus('current')
hcFailMaxNumForInterRat = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 12, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcFailMaxNumForInterRat.setStatus('current')
hcFailStaTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 12, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcFailStaTime.setStatus('current')
resourceCheck = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 13))
resChkHlGlobalTestSwitchCheckPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 13, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resChkHlGlobalTestSwitchCheckPeriod.setStatus('current')
resChkHlGlobalTestSwitchDeActiveSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 13, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resChkHlGlobalTestSwitchDeActiveSwitch.setStatus('current')
resChkHlGlobalTestResAuditSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 13, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resChkHlGlobalTestResAuditSwitch.setStatus('current')
resChkHlGlobalTestResExpDectSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 13, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resChkHlGlobalTestResExpDectSwitch.setStatus('current')
resChkL2GlobalTestResExpDectSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 13, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resChkL2GlobalTestResExpDectSwitch.setStatus('current')
resChkHlGlobalTestSwitchUeActiveLimit = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 13, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resChkHlGlobalTestSwitchUeActiveLimit.setStatus('current')
resChkHlGlobalTestUeTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 13, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resChkHlGlobalTestUeTimeOut.setStatus('current')
resChkHlGlobalTestL3ResChkSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 13, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resChkHlGlobalTestL3ResChkSwitch.setStatus('current')
resChkHlGlobalTestInstanceOccupyTimeThr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 13, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 6000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resChkHlGlobalTestInstanceOccupyTimeThr.setStatus('current')
largeCapacityProtect = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14))
lcAcSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcSwitch.setStatus('current')
lcAcUeCountTimerLen = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("s10", 0), ("s20", 1), ("s30", 2), ("s40", 3), ("s50", 4), ("s60", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcUeCountTimerLen.setStatus('current')
lcAcUeThForSignal1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcUeThForSignal1.setStatus('current')
lcAcUeThForSignal2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcUeThForSignal2.setStatus('current')
lcAcUeThForSignal3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcUeThForSignal3.setStatus('current')
lcAcProbFactorForSignal1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("p00", 0), ("p05", 1), ("p10", 2), ("p15", 3), ("p20", 4), ("p25", 5), ("p30", 6), ("p40", 7), ("p50", 8), ("p60", 9), ("p70", 10), ("p75", 11), ("p80", 12), ("p85", 13), ("p90", 14), ("p95", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcProbFactorForSignal1.setStatus('current')
lcAcProbFactorForSignal2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("p00", 0), ("p05", 1), ("p10", 2), ("p15", 3), ("p20", 4), ("p25", 5), ("p30", 6), ("p40", 7), ("p50", 8), ("p60", 9), ("p70", 10), ("p75", 11), ("p80", 12), ("p85", 13), ("p90", 14), ("p95", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcProbFactorForSignal2.setStatus('current')
lcAcProbFactorForSignal3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("p00", 0), ("p05", 1), ("p10", 2), ("p15", 3), ("p20", 4), ("p25", 5), ("p30", 6), ("p40", 7), ("p50", 8), ("p60", 9), ("p70", 10), ("p75", 11), ("p80", 12), ("p85", 13), ("p90", 14), ("p95", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcProbFactorForSignal3.setStatus('current')
lcAcBarTimeForSignal1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("s4", 0), ("s8", 1), ("s16", 2), ("s32", 3), ("s64", 4), ("s128", 5), ("s256", 6), ("s512", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcBarTimeForSignal1.setStatus('current')
lcAcBarTimeForSignal2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("s4", 0), ("s8", 1), ("s16", 2), ("s32", 3), ("s64", 4), ("s128", 5), ("s256", 6), ("s512", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcBarTimeForSignal2.setStatus('current')
lcAcBarTimeForSignal3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("s4", 0), ("s8", 1), ("s16", 2), ("s32", 3), ("s64", 4), ("s128", 5), ("s256", 6), ("s512", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcBarTimeForSignal3.setStatus('current')
lcAcUeThForMoc1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcUeThForMoc1.setStatus('current')
lcAcUeThForMoc2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcUeThForMoc2.setStatus('current')
lcAcUeThForMoc3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcUeThForMoc3.setStatus('current')
lcAcProbFactorForMoc1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("p00", 0), ("p05", 1), ("p10", 2), ("p15", 3), ("p20", 4), ("p25", 5), ("p30", 6), ("p40", 7), ("p50", 8), ("p60", 9), ("p70", 10), ("p75", 11), ("p80", 12), ("p85", 13), ("p90", 14), ("p95", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcProbFactorForMoc1.setStatus('current')
lcAcProbFactorForMoc2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("p00", 0), ("p05", 1), ("p10", 2), ("p15", 3), ("p20", 4), ("p25", 5), ("p30", 6), ("p40", 7), ("p50", 8), ("p60", 9), ("p70", 10), ("p75", 11), ("p80", 12), ("p85", 13), ("p90", 14), ("p95", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcProbFactorForMoc2.setStatus('current')
lcAcProbFactorForMoc3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("p00", 0), ("p05", 1), ("p10", 2), ("p15", 3), ("p20", 4), ("p25", 5), ("p30", 6), ("p40", 7), ("p50", 8), ("p60", 9), ("p70", 10), ("p75", 11), ("p80", 12), ("p85", 13), ("p90", 14), ("p95", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcProbFactorForMoc3.setStatus('current')
lcAcBarTimeForMoc1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("s4", 0), ("s8", 1), ("s16", 2), ("s32", 3), ("s64", 4), ("s128", 5), ("s256", 6), ("s512", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcBarTimeForMoc1.setStatus('current')
lcAcBarTimeForMoc2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("s4", 0), ("s8", 1), ("s16", 2), ("s32", 3), ("s64", 4), ("s128", 5), ("s256", 6), ("s512", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcBarTimeForMoc2.setStatus('current')
lcAcBarTimeForMoc3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("s4", 0), ("s8", 1), ("s16", 2), ("s32", 3), ("s64", 4), ("s128", 5), ("s256", 6), ("s512", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcBarTimeForMoc3.setStatus('current')
lcAcPreventPPNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcAcPreventPPNum.setStatus('current')
lcInsureHoInSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcInsureHoInSwitch.setStatus('current')
lcInsureHoOutSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 14, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcInsureHoOutSwitch.setStatus('current')
cpuLoadContrlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 15))
cpuMidLoadTh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 15, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuMidLoadTh.setStatus('current')
cpuHighLoadTh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 15, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuHighLoadTh.setStatus('current')
cpuOverLoadTh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 15, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuOverLoadTh.setStatus('current')
cpuLoadStateUpTimeToTrig = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 15, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuLoadStateUpTimeToTrig.setStatus('current')
cpuHigLoadThTimeToTrig = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 15, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuHigLoadThTimeToTrig.setStatus('current')
cpuOverloadControlTag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 15, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuOverloadControlTag.setStatus('current')
cpuContrlAlgorithmTag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 15, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuContrlAlgorithmTag.setStatus('current')
cpuCAPSTh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 11, 15, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuCAPSTh.setStatus('current')
ueStaticsInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12))
ueInfoStaticsTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 1), )
if mibBuilder.loadTexts: ueInfoStaticsTable.setStatus('current')
ueInfoStaticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ueInfoStatLcId"))
if mibBuilder.loadTexts: ueInfoStaticsEntry.setStatus('current')
ueInfoStatLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: ueInfoStatLcId.setStatus('current')
ueInfoStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueInfoStatRowStatus.setStatus('current')
ueInfoStatUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueInfoStatUeNum.setStatus('current')
ueInfoStatQciRbCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 1, 1, 4), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueInfoStatQciRbCnt.setStatus('current')
cellPrbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 2), )
if mibBuilder.loadTexts: cellPrbInfoTable.setStatus('current')
cellPrbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellPrbLcId"))
if mibBuilder.loadTexts: cellPrbInfoEntry.setStatus('current')
cellPrbLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellPrbLcId.setStatus('current')
cellPrbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellPrbRowStatus.setStatus('current')
cellPrbUlPrbInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 2, 1, 3), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellPrbUlPrbInfo.setStatus('current')
cellPrbDlPrbInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 2, 1, 4), Unsigned32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellPrbDlPrbInfo.setStatus('current')
ueAdaptiveIrcStatTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 3), )
if mibBuilder.loadTexts: ueAdaptiveIrcStatTable.setStatus('current')
ueAdaptiveIrcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ueAdaptiveLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ueAdaptiveIndex"))
if mibBuilder.loadTexts: ueAdaptiveIrcStatEntry.setStatus('current')
ueAdaptiveLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: ueAdaptiveLcId.setStatus('current')
ueAdaptiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200)))
if mibBuilder.loadTexts: ueAdaptiveIndex.setStatus('current')
ueAdaptiveRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 3, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueAdaptiveRowStatus.setStatus('current')
ueAdaptiveIrcNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 120000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueAdaptiveIrcNum.setStatus('current')
ueAdaptivePrbNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 120000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueAdaptivePrbNum.setStatus('current')
ueAdaptiveIrcRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueAdaptiveIrcRate.setStatus('current')
cellPrbRatioTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 4), )
if mibBuilder.loadTexts: cellPrbRatioTable.setStatus('current')
cellPrbRatioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellPrbRatioLcId"))
if mibBuilder.loadTexts: cellPrbRatioEntry.setStatus('current')
cellPrbRatioLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellPrbRatioLcId.setStatus('current')
cellPrbRatioRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 4, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellPrbRatioRowStatus.setStatus('current')
cellPrbRatioUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellPrbRatioUl.setStatus('current')
cellPrbRatioDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellPrbRatioDl.setStatus('current')
cellCompanyVideoNumTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5), )
if mibBuilder.loadTexts: cellCompanyVideoNumTable.setStatus('current')
cellCompanyVideoNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellCompanyVideoNumLcId"))
if mibBuilder.loadTexts: cellCompanyVideoNumEntry.setStatus('current')
cellCompanyVideoNumLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellCompanyVideoNumLcId.setStatus('current')
cellCompanyVideoNumRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoNumRowStatus.setStatus('current')
cellCompanyVideoTecentVideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoTecentVideoNum.setStatus('current')
cellCompanyVideoAiqiyiVideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoAiqiyiVideoNum.setStatus('current')
cellCompanyVideoYoukuVideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoYoukuVideoNum.setStatus('current')
cellCompanyVideoLeshiVideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoLeshiVideoNum.setStatus('current')
cellCompanyVideoMiguVideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoMiguVideoNum.setStatus('current')
cellCompanyVideoKuaishouVideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoKuaishouVideoNum.setStatus('current')
cellCompanyVideoMangguoVideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoMangguoVideoNum.setStatus('current')
cellCompanyVideoReserver1VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver1VideoNum.setStatus('current')
cellCompanyVideoReserver2VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver2VideoNum.setStatus('current')
cellCompanyVideoReserver3VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver3VideoNum.setStatus('current')
cellCompanyVideoReserver4VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver4VideoNum.setStatus('current')
cellCompanyVideoReserver5VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver5VideoNum.setStatus('current')
cellCompanyVideoReserver6VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver6VideoNum.setStatus('current')
cellCompanyVideoReserver7VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver7VideoNum.setStatus('current')
cellCompanyVideoReserver8VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver8VideoNum.setStatus('current')
cellCompanyVideoReserver9VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver9VideoNum.setStatus('current')
cellCompanyVideoReserver10VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver10VideoNum.setStatus('current')
cellCompanyVideoReserver11VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver11VideoNum.setStatus('current')
cellCompanyVideoReserver12VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver12VideoNum.setStatus('current')
cellCompanyVideoReserver13VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver13VideoNum.setStatus('current')
cellCompanyVideoReserver14VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver14VideoNum.setStatus('current')
cellCompanyVideoReserver15VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver15VideoNum.setStatus('current')
cellCompanyVideoReserver16VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver16VideoNum.setStatus('current')
cellCompanyVideoReserver17VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver17VideoNum.setStatus('current')
cellCompanyVideoReserver18VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver18VideoNum.setStatus('current')
cellCompanyVideoReserver19VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver19VideoNum.setStatus('current')
cellCompanyVideoReserver20VideoNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 12, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompanyVideoReserver20VideoNum.setStatus('current')
globalTestSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13))
hlGlobalTestSwitchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1))
hlGlobalTestSwitchSrsCfgSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchSrsCfgSwitch.setStatus('current')
hlGlobalTestSwitchMroSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchMroSwitch.setStatus('current')
hlGlobalTestSwitchEcidTag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchEcidTag.setStatus('current')
hlGlobalTestSwitchCapsControlFlag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchCapsControlFlag.setStatus('current')
hlGlobalTestSwitchCapsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchCapsThreshold.setStatus('current')
hlGlobalTestSwitchUeNumPeriodLpm = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchUeNumPeriodLpm.setStatus('current')
hlGlobalTestSwitchUeNumPeriodLpmProcessing = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchUeNumPeriodLpmProcessing.setStatus('current')
hlGlobalTestTaMeasT2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestTaMeasT2.setStatus('current')
hlGlobalTestSwitchR9R10IESwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchR9R10IESwitch.setStatus('current')
hlGlobalTestSwitcheNBUeContrlSwith = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitcheNBUeContrlSwith.setStatus('current')
hlGlobalTestSwitcheNBUeContrlPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitcheNBUeContrlPeriod.setStatus('current')
hlGlobalTestSwitcheNBUeContrlHighThresh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitcheNBUeContrlHighThresh.setStatus('current')
hlGlobalTestSwitcheNBUeContrlLowThresh = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitcheNBUeContrlLowThresh.setStatus('current')
hlGlobalTestPmInvalidValueSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("v2", 0), ("v3", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestPmInvalidValueSwitch.setStatus('current')
hlGlobalTestSwitchOverlapStd = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchOverlapStd.setStatus('current')
hlGlobalTestMaxCellProc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestMaxCellProc.setStatus('current')
hlGlobalTestMaxUeCell = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestMaxUeCell.setStatus('current')
hlGlobalTestDrbInteractionWithHcTag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestDrbInteractionWithHcTag.setStatus('current')
hlGlobalTestThodelay = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestThodelay.setStatus('current')
hlGlobalTestSwitchExtendRrcReestablishTag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchExtendRrcReestablishTag.setStatus('current')
hlGlobalTestSwitchL3InfoValueOnlyTag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchL3InfoValueOnlyTag.setStatus('current')
hlGlobalTestSwitchOldtoNewBSSValueOnlyTag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchOldtoNewBSSValueOnlyTag.setStatus('current')
hlGlobalTestSwitchUeCapabilityTransferFlag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchUeCapabilityTransferFlag.setStatus('current')
hlGlobalTestSwitchanrAlgorithmSwitchTLS = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchanrAlgorithmSwitchTLS.setStatus('current')
hlGlobalTestSwitchpciAlgorithmSwitchTLS = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlGlobalTestSwitchpciAlgorithmSwitchTLS.setStatus('current')
macGlobalTestSwitchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 2))
macGlobalTestSscSCAExternOptimizationSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macGlobalTestSscSCAExternOptimizationSwitch.setStatus('current')
ueMatchConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 3))
ueImsMatchConfigSrvccCapa = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ueImsMatchConfigSrvccCapa.setStatus('current')
ueImsMatchConfigVolteCapa = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("close", 0), ("tddFDD", 1), ("tdd", 2), ("fdd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ueImsMatchConfigVolteCapa.setStatus('current')
ueImsMatchConfigBandCapa = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 3, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ueImsMatchConfigBandCapa.setStatus('current')
ueImsMatchConfigBandList = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 13, 3, 4), Unsigned32Array()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ueImsMatchConfigBandList.setStatus('current')
cellUlAnteIot = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 14))
cellUlAnteIotTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 14, 1), )
if mibBuilder.loadTexts: cellUlAnteIotTable.setStatus('current')
cellUlAnteIotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 14, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellUlAnteIotLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellUlAnteIotSubSfn"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellUlAnteIotAntNo"))
if mibBuilder.loadTexts: cellUlAnteIotEntry.setStatus('current')
cellUlAnteIotLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellUlAnteIotLcId.setStatus('current')
cellUlAnteIotSubSfn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: cellUlAnteIotSubSfn.setStatus('current')
cellUlAnteIotAntNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: cellUlAnteIotAntNo.setStatus('current')
cellUlAnteIotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 14, 1, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellUlAnteIotRowStatus.setStatus('current')
cellUlAnteIotValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 14, 1, 1, 5), Integer32Array()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellUlAnteIotValue.setStatus('current')
reservedParaInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15))
reservedENBParaInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1))
reservedENBL1Para1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL1Para1.setStatus('current')
reservedENBL1Para2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL1Para2.setStatus('current')
reservedENBL1Para3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL1Para3.setStatus('current')
reservedENBL1Para4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL1Para4.setStatus('current')
reservedENBL1Para5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL1Para5.setStatus('current')
reservedENBL2Para1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL2Para1.setStatus('current')
reservedENBL2Para2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL2Para2.setStatus('current')
reservedENBL2Para3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL2Para3.setStatus('current')
reservedENBL2Para4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL2Para4.setStatus('current')
reservedENBL2Para5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL2Para5.setStatus('current')
reservedENBL3Para1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL3Para1.setStatus('current')
reservedENBL3Para2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL3Para2.setStatus('current')
reservedENBL3Para3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL3Para3.setStatus('current')
reservedENBL3Para4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL3Para4.setStatus('current')
reservedENBL3Para5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBL3Para5.setStatus('current')
reservedENBOmPara1 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBOmPara1.setStatus('current')
reservedENBOmPara2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBOmPara2.setStatus('current')
reservedENBOmPara3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBOmPara3.setStatus('current')
reservedENBOmPara4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBOmPara4.setStatus('current')
reservedENBOmPara5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedENBOmPara5.setStatus('current')
reservedCellParaTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2), )
if mibBuilder.loadTexts: reservedCellParaTable.setStatus('current')
reservedCellParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "reservedCellLcId"))
if mibBuilder.loadTexts: reservedCellParaEntry.setStatus('current')
reservedCellLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: reservedCellLcId.setStatus('current')
reservedCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellRowStatus.setStatus('current')
reservedCellL1Para1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL1Para1.setStatus('current')
reservedCellL1Para2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL1Para2.setStatus('current')
reservedCellL1Para3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL1Para3.setStatus('current')
reservedCellL1Para4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL1Para4.setStatus('current')
reservedCellL1Para5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL1Para5.setStatus('current')
reservedCellL1Para6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL1Para6.setStatus('current')
reservedCellL1Para7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL1Para7.setStatus('current')
reservedCellL1Para8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL1Para8.setStatus('current')
reservedCellL1Para9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL1Para9.setStatus('current')
reservedCellL1Para10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL1Para10.setStatus('current')
reservedCellL2Para1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL2Para1.setStatus('current')
reservedCellL2Para2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL2Para2.setStatus('current')
reservedCellL2Para3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL2Para3.setStatus('current')
reservedCellL2Para4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL2Para4.setStatus('current')
reservedCellL2Para5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL2Para5.setStatus('current')
reservedCellL2Para6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL2Para6.setStatus('current')
reservedCellL2Para7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL2Para7.setStatus('current')
reservedCellL2Para8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL2Para8.setStatus('current')
reservedCellL2Para9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL2Para9.setStatus('current')
reservedCellL2Para10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL2Para10.setStatus('current')
reservedCellL3Para1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL3Para1.setStatus('current')
reservedCellL3Para2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL3Para2.setStatus('current')
reservedCellL3Para3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL3Para3.setStatus('current')
reservedCellL3Para4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL3Para4.setStatus('current')
reservedCellL3Para5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL3Para5.setStatus('current')
reservedCellL3Para6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL3Para6.setStatus('current')
reservedCellL3Para7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL3Para7.setStatus('current')
reservedCellL3Para8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL3Para8.setStatus('current')
reservedCellL3Para9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL3Para9.setStatus('current')
reservedCellL3Para10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 15, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: reservedCellL3Para10.setStatus('current')
uplaneCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 16))
pdcpParaCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 16, 1), )
if mibBuilder.loadTexts: pdcpParaCfgTable.setStatus('current')
pdcpParaCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 16, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpParaCfgLcId"))
if mibBuilder.loadTexts: pdcpParaCfgEntry.setStatus('current')
pdcpParaCfgLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcpParaCfgLcId.setStatus('current')
pdcpParaCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 16, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpParaCfgRowStatus.setStatus('current')
pdcpParaWaitEndmarkerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpParaWaitEndmarkerTimer.setStatus('current')
pdcpParaSilenceCallThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdcpParaSilenceCallThreshold.setStatus('current')
tdsSuperNodeB = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100))
tdsConfigurationPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1))
tdsNodeBSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1))
tdsNodeBSysCellPerfReportSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBSysCellPerfReportSwitch.setStatus('current')
tdsNodeBSysRncIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsNodeBSysRncIpAddrType.setStatus('current')
tdsNodeBSysRncIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsNodeBSysRncIpAddr.setStatus('current')
tdsNodeBSysDwptsSendMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("continuous", 0), ("uncontinuous", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBSysDwptsSendMode.setStatus('current')
tdsNodeBSysUsedBRUNumSamplePeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBSysUsedBRUNumSamplePeriod.setStatus('current')
tdsNodeBTimeSlotClosedStatPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBTimeSlotClosedStatPeriod.setStatus('current')
tdsNodeBBRUStatisticType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("averageBruNum", 0), ("maxValSamplePeriodAverageBruNum", 1), ("maxTTIValAverageBruNum", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBBRUStatisticType.setStatus('current')
tdsNodeBBRUStatisticQuotiety = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBBRUStatisticQuotiety.setStatus('current')
tdsNodeBHsupaBRUStatisticType = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("averageBruNum", 0), ("maxValSamplePeriodAverageBruNum", 1), ("maxTTIValAverageBruNum", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBHsupaBRUStatisticType.setStatus('current')
tdsNodeBHsupaBRUStatisticQuotiety = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBHsupaBRUStatisticQuotiety.setStatus('current')
tdsNodeBIubSmoothCtrlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBIubSmoothCtrlSwitch.setStatus('current')
tdsNodeBIubSmoothConfigData = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 13), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBIubSmoothConfigData.setStatus('current')
tdsNodeBIubSmoothRandomData = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsNodeBIubSmoothRandomData.setStatus('current')
tdsNodeBSysUserTraceLogSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("onKpi", 1), ("onHspa", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBSysUserTraceLogSwitch.setStatus('current')
tdsNodeBRachAbnormalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBRachAbnormalThreshold.setStatus('current')
tdsNodeBBruStatisticAlgorithmSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBBruStatisticAlgorithmSwitch.setStatus('current')
tdsNodeBCODCHLoopSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("uuOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBCODCHLoopSwitch.setStatus('current')
tdsNodeBCODCHLoopUserId = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBCODCHLoopUserId.setStatus('current')
tdsNodeBSysE1LoopCheckSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("onKpi", 1), ("onHspa", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBSysE1LoopCheckSwitch.setStatus('current')
tdsNodeBSysRncDisaSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBSysRncDisaSwitch.setStatus('current')
tdsNodeBSysRncDisaCheckPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBSysRncDisaCheckPeriod.setStatus('current')
tdsNodeBSysRncDisaStatus = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("disasterhappened", 1), ("disasterunhappened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdsNodeBSysRncDisaStatus.setStatus('current')
tdsNodeBSysSwitchToMasterRncTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsNodeBSysSwitchToMasterRncTrigger.setStatus('current')
tdsSysStartMode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 2))
tdsSysBruReportMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notsdma", 0), ("sdma", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsSysBruReportMode.setStatus('current')
tdsSysISCPDetectPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 720), ValueRangeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsSysISCPDetectPeriod.setStatus('current')
tdsSysPolarAntDisaRecSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsSysPolarAntDisaRecSwitch.setStatus('current')
tdsSysBbuAssignMode = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("powerSavingFirst", 0), ("performanceFirst", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsSysBbuAssignMode.setStatus('current')
tdsSysCarrierSlotISCPDetectPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 60), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsSysCarrierSlotISCPDetectPeriod.setStatus('current')
tdsSysGpsShiftSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsSysGpsShiftSwitch.setStatus('current')
tdsSysnfdetect = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsSysnfdetect.setStatus('current')
tdsSysIscpabnormalthreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, -60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsSysIscpabnormalthreshold.setStatus('current')
tdsSysAbnormalSubsfnNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 2, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsSysAbnormalSubsfnNum.setStatus('current')
tdsSysGpsSnrThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsSysGpsSnrThreshold.setStatus('current')
tdsSysRruAcRxDelay = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsSysRruAcRxDelay.setStatus('current')
tdsSysBbuOmLogRecSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 2, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("off", 0), ("onDynCfg", 1), ("onPerfStat", 2), ("onDynCfgAndPerfStat", 3), ("onAlm", 4), ("onDynCfgAndAlm", 5), ("onPerfStatAndAlm", 6), ("onDynCfgAndPerfStatAndAlm", 7), ("onSfnCal", 8), ("onDynCfgAndSfnCal", 9), ("onPerfStatAndSfnCal", 10), ("onDynCfgAndPerfStatAndSfnCal", 11), ("onAlmAndSfnCal", 12), ("onDynCfgAndAlmAndSfnCal", 13), ("onPerfStatAndAlmAndSfnCal", 14), ("onAll", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdsSysBbuOmLogRecSwitch.setStatus('current')
closeCarrier = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 3))
closeBaseBandCarFrameNo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: closeBaseBandCarFrameNo.setStatus('current')
closeBaseBandCarSlotNo = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: closeBaseBandCarSlotNo.setStatus('current')
closeBaseBandCarStartIndex = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: closeBaseBandCarStartIndex.setStatus('current')
closeBaseBandCarEndIndex = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: closeBaseBandCarEndIndex.setStatus('current')
closeBaseBandCarState = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 1, 3, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("open", 0), ("close", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: closeBaseBandCarState.setStatus('current')
hl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2))
nbap = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1))
nbapCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 1))
nbapNodeBResetTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbapNodeBResetTrigger.setStatus('current')
nbapAuditTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbapAuditTrigger.setStatus('current')
nbapMutualCarrierNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 2))
nbapCarrierPriority = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("r4High", 0), ("r5High", 1), ("r4Equalr5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbapCarrierPriority.setStatus('current')
nbapCarrierPreemptTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbapCarrierPreemptTimer.setStatus('current')
nbapR4CarrierPriority = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(20, 30, 40, 50)).clone(namedValues=NamedValues(("classOne", 20), ("classTwo", 30), ("classThree", 40), ("classFour", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbapR4CarrierPriority.setStatus('current')
nbapHsdpaCarrierPriority = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(20, 30, 40, 50)).clone(namedValues=NamedValues(("classOne", 20), ("classTwo", 30), ("classThree", 40), ("classFour", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbapHsdpaCarrierPriority.setStatus('current')
nbapMBMSCarrierPriority = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(20, 30, 40, 50)).clone(namedValues=NamedValues(("classOne", 20), ("classTwo", 30), ("classThree", 40), ("classFour", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbapMBMSCarrierPriority.setStatus('current')
nbapHsupaCarrierPriority = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(20, 30, 40, 50)).clone(namedValues=NamedValues(("classOne", 20), ("classTwo", 30), ("classThree", 40), ("classFour", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbapHsupaCarrierPriority.setStatus('current')
nbapMbmsNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 3))
nbapRandomPhaseSupport = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unsupport", 0), ("support", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbapRandomPhaseSupport.setStatus('current')
aps = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 4))
apsFpHrntiIndTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsFpHrntiIndTimer.setStatus('current')
apb = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 5))
apbMaxJointCmrFlag = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apbMaxJointCmrFlag.setStatus('current')
apbMaxJointCmrNum = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apbMaxJointCmrNum.setStatus('current')
machs = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2))
hsdpaAlgorithmNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1))
hsdpaAlgorithmTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 1), )
if mibBuilder.loadTexts: hsdpaAlgorithmTable.setStatus('current')
hsdpaAlgorithmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaAlgorithmLcId"))
if mibBuilder.loadTexts: hsdpaAlgorithmEntry.setStatus('current')
hsdpaAlgorithmLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaAlgorithmLcId.setStatus('current')
hsdpaAlgorithmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaAlgorithmRowStatus.setStatus('current')
hsdpaSchedAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("pf", 0), ("maxci", 1), ("roundRobin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSchedAlgorithm.setStatus('current')
hsdpaFlowCtrlAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0)).clone(namedValues=NamedValues(("simpleCtrl", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaFlowCtrlAlgorithm.setStatus('current')
hsdpaCellSchedAdjRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("nojump", 0), ("evenjump", 1), ("jump", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCellSchedAdjRate.setStatus('current')
hsdpaSchedAlgorithmNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2))
hsdpaCQIReviseTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: hsdpaCQIReviseTable.setStatus('current')
hsdpaCQIReviseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaCQIReviseLcId"))
if mibBuilder.loadTexts: hsdpaCQIReviseEntry.setStatus('current')
hsdpaCQIReviseLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaCQIReviseLcId.setStatus('current')
hsdpaCQIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaCQIRowStatus.setStatus('current')
hsdpaCQIReviseSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("rtbs", 1), ("codeRate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIReviseSwitch.setStatus('current')
hsdpaCQIStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIStep.setStatus('current')
hsdpaCQIMaxRTBSadd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIMaxRTBSadd.setStatus('current')
hsdpaCQIMinRTBSadd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIMinRTBSadd.setStatus('current')
hsdpaCQIInitBLER = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIInitBLER.setStatus('current')
hsdpaCQIResidualBLER = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIResidualBLER.setStatus('current')
hsdpaCQIMFR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIMFR.setStatus('current')
hsdpaCQIRestrictMFFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unrestricted", 0), ("restricted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIRestrictMFFlag.setStatus('current')
hsdpaCQIMaxDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIMaxDiff.setStatus('current')
hsdpaCQIMinDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIMinDiff.setStatus('current')
hsdpaCQIInstantWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIInstantWinSize.setStatus('current')
hsdpaCQIInstantThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIInstantThreshold.setStatus('current')
hsdpaCQIVinSmoothGene = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIVinSmoothGene.setStatus('current')
hsdpaCQIACKLostRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIACKLostRate.setStatus('current')
hsdpaCQINACKLostRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQINACKLostRate.setStatus('current')
hsdpaCQIACKToNACKRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIACKToNACKRatio.setStatus('current')
hsdpaCQINACKToACKRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQINACKToACKRatio.setStatus('current')
hsdpaCQIRestrictMaxRTBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("unrestricted", 0), ("restricted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIRestrictMaxRTBSFlag.setStatus('current')
hsdpaCQIRestrictMaxRTBS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCQIRestrictMaxRTBS.setStatus('current')
hsdpaPFTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 2), )
if mibBuilder.loadTexts: hsdpaPFTable.setStatus('current')
hsdpaPFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaPFLcId"))
if mibBuilder.loadTexts: hsdpaPFEntry.setStatus('current')
hsdpaPFLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaPFLcId.setStatus('current')
hsdpaPFRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaPFRowStatus.setStatus('current')
hsdpaPFTcSlideWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaPFTcSlideWindowSize.setStatus('current')
hsdpaPFInitPF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaPFInitPF.setStatus('current')
hsdpaMAXCITable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 3), )
if mibBuilder.loadTexts: hsdpaMAXCITable.setStatus('current')
hsdpaMAXCIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaMaxCILcId"))
if mibBuilder.loadTexts: hsdpaMAXCIEntry.setStatus('current')
hsdpaMaxCILcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaMaxCILcId.setStatus('current')
hsdpaMaxCIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaMaxCIRowStatus.setStatus('current')
hsdpaMaxCITmR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaMaxCITmR.setStatus('current')
hsdpaRoundRobin = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 4))
hsdpaQosTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5), )
if mibBuilder.loadTexts: hsdpaQosTable.setStatus('current')
hsdpaQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaQosLcId"))
if mibBuilder.loadTexts: hsdpaQosEntry.setStatus('current')
hsdpaQosLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaQosLcId.setStatus('current')
hsdpaQosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaQosRowStatus.setStatus('current')
hsdpaQosSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("off", 0), ("qos", 1), ("spi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaQosSwitch.setStatus('current')
hsdpaQosRTExtraPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaQosRTExtraPriority.setStatus('current')
hsdpaSpiAPrioFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("aspiFirst", 0), ("atdFirst", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpiAPrioFlag.setStatus('current')
hsdpaSpiDiscardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpiDiscardTimer.setStatus('current')
hsdpaSpiTmRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2, 4, 6, 8, 10, 100, 1000)).clone(namedValues=NamedValues(("val0", 0), ("val2", 2), ("val4", 4), ("val6", 6), ("val8", 8), ("val10", 10), ("val100", 100), ("val1000", 1000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpiTmRate.setStatus('current')
hsdpaSpiTcWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpiTcWinSize.setStatus('current')
hsdpaSpiNonGBRDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpiNonGBRDelta.setStatus('current')
hsdpaSpi1Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi1Weight.setStatus('current')
hsdpaSpi2Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi2Weight.setStatus('current')
hsdpaSpi3Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi3Weight.setStatus('current')
hsdpaSpi4Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi4Weight.setStatus('current')
hsdpaSpi5Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi5Weight.setStatus('current')
hsdpaSpi6Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi6Weight.setStatus('current')
hsdpaSpi7Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi7Weight.setStatus('current')
hsdpaSpi8Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi8Weight.setStatus('current')
hsdpaSpi9Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi9Weight.setStatus('current')
hsdpaSpi10Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi10Weight.setStatus('current')
hsdpaSpi11Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi11Weight.setStatus('current')
hsdpaSpi12Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi12Weight.setStatus('current')
hsdpaSpi13Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi13Weight.setStatus('current')
hsdpaSpi14Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi14Weight.setStatus('current')
hsdpaSpi15Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi15Weight.setStatus('current')
hsdpaSpi16Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 2, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpi16Weight.setStatus('current')
hsdpaFlowCtrlAlgorithmNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3))
hsdpaSimpleFlowCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: hsdpaSimpleFlowCtrlTable.setStatus('current')
hsdpaSimpleFlowCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaSFCtrlLcId"))
if mibBuilder.loadTexts: hsdpaSimpleFlowCtrlEntry.setStatus('current')
hsdpaSFCtrlLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaSFCtrlLcId.setStatus('current')
hsdpaSFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaSFCRowStatus.setStatus('current')
hsdpaSFCBLThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCBLThresholdLow.setStatus('current')
hsdpaSFCBLThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCBLThresholdHigh.setStatus('current')
hsdpaSFCUuRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("averageRate", 0), ("instantRate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCUuRateType.setStatus('current')
hsdpaSFCMaxPeriodTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCMaxPeriodTime.setStatus('current')
hsdpaSFCUuAvgRateWin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCUuAvgRateWin.setStatus('current')
hsdpaSFCGbrMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCGbrMultiple.setStatus('current')
hsdpaSFCTotalIubMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCTotalIubMultiple.setStatus('current')
hsdpaSFCQueIubUuMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCQueIubUuMultiple.setStatus('current')
hsdpaSFCExtPDUNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCExtPDUNum.setStatus('current')
hsdpaSFCIubDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCIubDelay.setStatus('current')
hsdpaSFCThHighDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(6, 8, 12, 15)).clone(namedValues=NamedValues(("val6", 6), ("val8", 8), ("val12", 12), ("val15", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCThHighDelta.setStatus('current')
hsdpaSFCBEHighDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("val1", 1), ("val2", 2), ("val3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCBEHighDelta.setStatus('current')
hsdpaSFCMinThHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCMinThHigh.setStatus('current')
hsdpaSFCMinThLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCMinThLow.setStatus('current')
hsdpaSFCMacehsExtPDUNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCMacehsExtPDUNum.setStatus('current')
hsdpaSFCMacehsPduBitLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 12040))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCMacehsPduBitLen.setStatus('current')
hsdpaSFCEFACHBLThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 19456))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCEFACHBLThresholdLow.setStatus('current')
hsdpaSFCEFACHBLThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 19456))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCEFACHBLThresholdHigh.setStatus('current')
hsdpaSFCMinMacPduNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCMinMacPduNum.setStatus('current')
hsdpaSFCWaitDataThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSFCWaitDataThreshold.setStatus('current')
hsdpaTfrcAlgorithmNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 4))
hsdpaTfrcAlgorithmTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 4, 1), )
if mibBuilder.loadTexts: hsdpaTfrcAlgorithmTable.setStatus('current')
hsdpaTfrcAlgorithmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 4, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaTfrcLcId"))
if mibBuilder.loadTexts: hsdpaTfrcAlgorithmEntry.setStatus('current')
hsdpaTfrcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaTfrcLcId.setStatus('current')
hsdpaTfrcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 4, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaTfrcRowStatus.setStatus('current')
hsdpaTfrcTfrcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("tdcdPartialTd", 0), ("tdcdPartialCd", 1), ("pureTd", 2), ("allTd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaTfrcTfrcMode.setStatus('current')
hsdpaTfrcGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(2, 4, 8, 16)).clone(namedValues=NamedValues(("val2", 2), ("val4", 4), ("val8", 8), ("val16", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaTfrcGranularity.setStatus('current')
hsdpaTfrcCtrlChSdmaDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("noSDMA", 1), ("twoDegree", 2), ("threeDegree", 3), ("fourDegree", 4), ("fiveDegree", 5), ("sixDegree", 6), ("sevenDegree", 7), ("eightDegree", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaTfrcCtrlChSdmaDegree.setStatus('current')
hsdpaCqiPwrCtrlNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5))
hsdpaCqiPwrCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1), )
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlTable.setStatus('current')
hsdpaCqiPwrCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaCqiPwrCtrlLcd"))
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlEntry.setStatus('current')
hsdpaCqiPwrCtrlLcd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlLcd.setStatus('current')
hsdpaCqiPwrCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlRowStatus.setStatus('current')
hsdpaCqiPwrCtrlPcSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlPcSwitch.setStatus('current')
hsdpaCqiPwrCtrlDownThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(80, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlDownThreshold.setStatus('current')
hsdpaCqiPwrCtrlDownThresholdQpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(40, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlDownThresholdQpsk.setStatus('current')
hsdpaCqiPwrCtrlUpThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlUpThreshold.setStatus('current')
hsdpaCqiPwrCtrlWinStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlWinStep.setStatus('current')
hsdpaCqiPwrCtrlWinLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlWinLength.setStatus('current')
hsdpaCqiPwrCtrlDownStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("s0dot5dB", 0), ("s1dB", 1), ("s2dB", 2), ("s3dB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlDownStep.setStatus('current')
hsdpaCqiPwrCtrlDownStepQpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("s0dot5dB", 0), ("s1dB", 1), ("s2dB", 2), ("s3dB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlDownStepQpsk.setStatus('current')
hsdpaCqiPwrCtrlUpStepHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("s0dot5dB", 0), ("s1dB", 1), ("s2dB", 2), ("s3dB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlUpStepHigh.setStatus('current')
hsdpaCqiPwrCtrlUpStepLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("s0dot5dB", 0), ("s1dB", 1), ("s2dB", 2), ("s3dB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCqiPwrCtrlUpStepLow.setStatus('current')
hsdpaSpsSchedNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 6))
hsdpaSpsSchedTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 6, 1), )
if mibBuilder.loadTexts: hsdpaSpsSchedTable.setStatus('current')
hsdpaSpsSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 6, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaSpsSchedLcId"))
if mibBuilder.loadTexts: hsdpaSpsSchedEntry.setStatus('current')
hsdpaSpsSchedLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaSpsSchedLcId.setStatus('current')
hsdpaSpsSchedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 6, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaSpsSchedRowStatus.setStatus('current')
hsdpaSpsSchedStateTransWin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpsSchedStateTransWin.setStatus('current')
hsdpaSpsSchedActivePktTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpsSchedActivePktTh.setStatus('current')
hsdpaSpsSchedSilentPktTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpsSchedSilentPktTh.setStatus('current')
hsdpaSpsSchedDynamicSDThFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpsSchedDynamicSDThFactor.setStatus('current')
hsdpaSpsSchedCPCAlphaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpsSchedCPCAlphaIndex.setStatus('current')
hsdpaSpsSchedResrcBlkTsCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpsSchedResrcBlkTsCfgIndex.setStatus('current')
hsdpaSpsSchedResrcBlkCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaSpsSchedResrcBlkCfgIndex.setStatus('current')
hsdpaEFACHSchedNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 7))
hsdpaEFACHSchedTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 7, 1), )
if mibBuilder.loadTexts: hsdpaEFACHSchedTable.setStatus('current')
hsdpaEFACHSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 7, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaEFACHSchedLcId"))
if mibBuilder.loadTexts: hsdpaEFACHSchedEntry.setStatus('current')
hsdpaEFACHSchedLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaEFACHSchedLcId.setStatus('current')
hsdpaEFACHSchedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaEFACHSchedRowStatus.setStatus('current')
hsdpaEFACHSchedMaxTxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaEFACHSchedMaxTxNum.setStatus('current')
hsdpaEFACHSchedMF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("qpsk", 0), ("m16QAM", 1), ("m64QAM", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaEFACHSchedMF.setStatus('current')
hsdpaEFACHSchedCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaEFACHSchedCodeRate.setStatus('current')
hsdpaEFACHSchedOrderSendNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaEFACHSchedOrderSendNum.setStatus('current')
hsdpaCongestCtrlNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8))
hsdpaCongestCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1), )
if mibBuilder.loadTexts: hsdpaCongestCtrlTable.setStatus('current')
hsdpaCongestCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaCongestCtrlLcId"))
if mibBuilder.loadTexts: hsdpaCongestCtrlEntry.setStatus('current')
hsdpaCongestCtrlLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaCongestCtrlLcId.setStatus('current')
hsdpaCongestCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaCongestCtrlRowStatus.setStatus('current')
hsdpaCongestCtrlDecreasePara = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCongestCtrlDecreasePara.setStatus('current')
hsdpaCongestCtrlIncreasePara = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCongestCtrlIncreasePara.setStatus('current')
hsdpaCongestCtrlDetTimerTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCongestCtrlDetTimerTh.setStatus('current')
hsdpaCongestCtrlFSNDetTimerTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCongestCtrlFSNDetTimerTh.setStatus('current')
hsdpaCongestCtrlAvoidTimerTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCongestCtrlAvoidTimerTh.setStatus('current')
hsdpaCongestCtrlRestoreTimerTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCongestCtrlRestoreTimerTh.setStatus('current')
hsdpaCongestCtrlRestoreCounterTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCongestCtrlRestoreCounterTh.setStatus('current')
hsdpaCongestCtrlCongestTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCongestCtrlCongestTh.setStatus('current')
hsdpaCongestCtrlConFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCongestCtrlConFrameNum.setStatus('current')
hsdpaCongestCtrlCongAlarmTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6000, 90000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCongestCtrlCongAlarmTh.setStatus('current')
hsdpaCongestCtrlDeCongAlarmTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 8, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6000, 90000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCongestCtrlDeCongAlarmTh.setStatus('current')
hsdpaCellSelectNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 9))
hsdpaCellSelectTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 9, 1), )
if mibBuilder.loadTexts: hsdpaCellSelectTable.setStatus('current')
hsdpaCellSelectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 9, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaCellSelectLcId"))
if mibBuilder.loadTexts: hsdpaCellSelectEntry.setStatus('current')
hsdpaCellSelectLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaCellSelectLcId.setStatus('current')
hsdpaCellSelectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 9, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaCellSelectRowStatus.setStatus('current')
hsdpaCellSelectNotSchedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCellSelectNotSchedTime.setStatus('current')
hsdpaCommSchedNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 10))
hsdpaCommSchedTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 10, 1), )
if mibBuilder.loadTexts: hsdpaCommSchedTable.setStatus('current')
hsdpaCommSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 10, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaCommSchedLcId"))
if mibBuilder.loadTexts: hsdpaCommSchedEntry.setStatus('current')
hsdpaCommSchedLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaCommSchedLcId.setStatus('current')
hsdpaCommSchedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 10, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaCommSchedRowStatus.setStatus('current')
hsdpaCommSchedDpchPreemptPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("vru", 0), ("timeSlot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaCommSchedDpchPreemptPolicy.setStatus('current')
hsdpaTsRandomNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 11))
hsdpaTsRandomTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 11, 1), )
if mibBuilder.loadTexts: hsdpaTsRandomTable.setStatus('current')
hsdpaTsRandomEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 11, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaTsRandomLcId"))
if mibBuilder.loadTexts: hsdpaTsRandomEntry.setStatus('current')
hsdpaTsRandomLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaTsRandomLcId.setStatus('current')
hsdpaTsRandomRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 11, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaTsRandomRowStatus.setStatus('current')
hsdpaTsRandomSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaTsRandomSwitch.setStatus('current')
hsdpaHarqNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2))
hsdpaHarqTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1), )
if mibBuilder.loadTexts: hsdpaHarqTable.setStatus('current')
hsdpaHarqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsdpaHarqLcId"))
if mibBuilder.loadTexts: hsdpaHarqEntry.setStatus('current')
hsdpaHarqLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsdpaHarqLcId.setStatus('current')
hsdpaHarqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsdpaHarqRowStatus.setStatus('current')
hsdpaHarqMaxTxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqMaxTxNum.setStatus('current')
hsdpaHarqRvQpsk1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk1.setStatus('current')
hsdpaHarqRv16Qam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam1.setStatus('current')
hsdpaHarqRvQpsk2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk2.setStatus('current')
hsdpaHarqRv16Qam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam2.setStatus('current')
hsdpaHarqRvQpsk3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk3.setStatus('current')
hsdpaHarqRv16Qam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam3.setStatus('current')
hsdpaHarqRvQpsk4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk4.setStatus('current')
hsdpaHarqRv16Qam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam4.setStatus('current')
hsdpaHarqRvQpsk5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk5.setStatus('current')
hsdpaHarqRv16Qam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam5.setStatus('current')
hsdpaHarqRvQpsk6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk6.setStatus('current')
hsdpaHarqRv16Qam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam6.setStatus('current')
hsdpaHarqRvQpsk7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk7.setStatus('current')
hsdpaHarqRv16Qam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam7.setStatus('current')
hsdpaHarqRvQpsk8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk8.setStatus('current')
hsdpaHarqRv16Qam8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam8.setStatus('current')
hsdpaHarqRv64Qam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv64Qam1.setStatus('current')
hsdpaHarqRvQpsk1New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk1New.setStatus('current')
hsdpaHarqRv16Qam1New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam1New.setStatus('current')
hsdpaHarqRv64Qam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv64Qam2.setStatus('current')
hsdpaHarqRvQpsk2New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk2New.setStatus('current')
hsdpaHarqRv16Qam2New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam2New.setStatus('current')
hsdpaHarqRv64Qam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv64Qam3.setStatus('current')
hsdpaHarqRvQpsk3New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk3New.setStatus('current')
hsdpaHarqRv16Qam3New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam3New.setStatus('current')
hsdpaHarqRv64Qam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv64Qam4.setStatus('current')
hsdpaHarqRvQpsk4New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk4New.setStatus('current')
hsdpaHarqRv16Qam4New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam4New.setStatus('current')
hsdpaHarqRv64Qam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv64Qam5.setStatus('current')
hsdpaHarqRvQpsk5New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk5New.setStatus('current')
hsdpaHarqRv16Qam5New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam5New.setStatus('current')
hsdpaHarqRv64Qam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv64Qam6.setStatus('current')
hsdpaHarqRvQpsk6New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk6New.setStatus('current')
hsdpaHarqRv16Qam6New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam6New.setStatus('current')
hsdpaHarqRv64Qam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv64Qam7.setStatus('current')
hsdpaHarqRvQpsk7New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk7New.setStatus('current')
hsdpaHarqRv16Qam7New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam7New.setStatus('current')
hsdpaHarqRv64Qam8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv64Qam8.setStatus('current')
hsdpaHarqRvQpsk8New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRvQpsk8New.setStatus('current')
hsdpaHarqRv16Qam8New = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 2, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsdpaHarqRv16Qam8New.setStatus('current')
hsupaAlgorithmNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3))
hsupaAlgorithmTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 1), )
if mibBuilder.loadTexts: hsupaAlgorithmTable.setStatus('current')
hsupaAlgorithmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsupaAlgorithmLcId"))
if mibBuilder.loadTexts: hsupaAlgorithmEntry.setStatus('current')
hsupaAlgorithmLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsupaAlgorithmLcId.setStatus('current')
hsupaAlgorithmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsupaAlgorithmRowStatus.setStatus('current')
hsupaSchedAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("pf", 0), ("maxci", 1), ("roundRobin", 2), ("qos", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaSchedAlgorithm.setStatus('current')
huspaMBRCfgSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huspaMBRCfgSwitch.setStatus('current')
hsupaSchedAlgorithmNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2))
hsupaPFTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 1), )
if mibBuilder.loadTexts: hsupaPFTable.setStatus('current')
hsupaPFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsupaPFLcId"))
if mibBuilder.loadTexts: hsupaPFEntry.setStatus('current')
hsupaPFLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsupaPFLcId.setStatus('current')
hsupaPFRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsupaPFRowStatus.setStatus('current')
hsupaPFTcSlideWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaPFTcSlideWindowSize.setStatus('current')
hsupaPFInitPF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaPFInitPF.setStatus('current')
hsupaPFA = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaPFA.setStatus('current')
hsupaMAXCITable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 2), )
if mibBuilder.loadTexts: hsupaMAXCITable.setStatus('current')
hsupaMAXCIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsupaMaxCILcId"))
if mibBuilder.loadTexts: hsupaMAXCIEntry.setStatus('current')
hsupaMaxCILcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsupaMaxCILcId.setStatus('current')
hsupaMaxCIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsupaMaxCIRowStatus.setStatus('current')
hsupaMaxCITmR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaMaxCITmR.setStatus('current')
hsupaQosTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3), )
if mibBuilder.loadTexts: hsupaQosTable.setStatus('current')
hsupaQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsupaQosLcId"))
if mibBuilder.loadTexts: hsupaQosEntry.setStatus('current')
hsupaQosLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsupaQosLcId.setStatus('current')
hsupaQosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsupaQosRowStatus.setStatus('current')
hsupaQosGamaBufferA = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosGamaBufferA.setStatus('current')
hsupaQosGamaMaxK = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosGamaMaxK.setStatus('current')
hsupaQosGamaMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosGamaMin.setStatus('current')
hsupaQosSDLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosSDLMin.setStatus('current')
hsupaQosSDLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 33000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosSDLMax.setStatus('current')
hsupaQosMaxReTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosMaxReTxThreshold.setStatus('current')
hsupaQosCSPIDivPointFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosCSPIDivPointFirst.setStatus('current')
hsupaQosCSPIDivPointSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosCSPIDivPointSecond.setStatus('current')
hsupaQosNewAccSetBThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosNewAccSetBThreshold.setStatus('current')
hsupaQosCongWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosCongWaitTime.setStatus('current')
hsupaQosCongJudgeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosCongJudgeThreshold.setStatus('current')
hsupaQosCRFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosCRFactor.setStatus('current')
hsupaQosPFA = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosPFA.setStatus('current')
hsupaQosQueWeightA = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosQueWeightA.setStatus('current')
hsupaQosTcSlideWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosTcSlideWinSize.setStatus('current')
hsupaQosInitPF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosInitPF.setStatus('current')
hsupaQosQueWeightXBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaQosQueWeightXBitmap.setStatus('current')
hsupaTfrcAlgorithmNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3))
hsupaTfrcAlgorithmTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1), )
if mibBuilder.loadTexts: hsupaTfrcAlgorithmTable.setStatus('current')
hsupaTfrcAlgorithmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsupaTfrcLcId"))
if mibBuilder.loadTexts: hsupaTfrcAlgorithmEntry.setStatus('current')
hsupaTfrcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsupaTfrcLcId.setStatus('current')
hsupaTfrcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsupaTfrcRowStatus.setStatus('current')
hsupaTfrcTfrcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("pureTd", 0), ("pureCd", 1), ("tdcd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcTfrcMode.setStatus('current')
hsupaTfrcGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4, 8, 16)).clone(namedValues=NamedValues(("val1", 1), ("val2", 2), ("val4", 4), ("val8", 8), ("val16", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcGranularity.setStatus('current')
hsupaTfrcTpcModifySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcTpcModifySwitch.setStatus('current')
hsupaTfrcTpcGap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcTpcGap.setStatus('current')
hsupaTfrcTpcThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcTpcThreshold.setStatus('current')
hsupaTfrcTpcReceiveSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcTpcReceiveSwitch.setStatus('current')
hsupaTfrcTpcPreTTINum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcTpcPreTTINum.setStatus('current')
hsupaTfrcPwCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("rotpebase", 0), ("uph", 1), ("iotpebase", 2), ("rotsir", 3), ("iotsir", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcPwCtrlType.setStatus('current')
hsupaTfrcNonSdPcDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcNonSdPcDelta.setStatus('current')
hsupaTfrcDpchPcDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcDpchPcDelta.setStatus('current')
hsupaTfrcNonSdInitSnplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 27))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcNonSdInitSnplIndex.setStatus('current')
hsupaTfrcOlpcSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcOlpcSwitch.setStatus('current')
hsupaTfrcPuchFMFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcPuchFMFactor.setStatus('current')
hsupaTfrcDpchFMFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcDpchFMFactor.setStatus('current')
hsupaTfrcCrriAllocMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("ascending", 0), ("descending", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcCrriAllocMode.setStatus('current')
hsupaTfrcCtrlChSdmaDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("noSDMA", 1), ("twoDegree", 2), ("threeDegree", 3), ("fourDegree", 4), ("fiveDegree", 5), ("sixDegree", 6), ("sevenDegree", 7), ("eightDegree", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcCtrlChSdmaDegree.setStatus('current')
hsupaTfrcFastPuchFMFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcFastPuchFMFactor.setStatus('current')
hsupaTfrcDeltaSich = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaTfrcDeltaSich.setStatus('current')
hsupaSpsSchedNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4))
hsupaSpsSchedTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1), )
if mibBuilder.loadTexts: hsupaSpsSchedTable.setStatus('current')
hsupaSpsSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsupaSpsSchedLcId"))
if mibBuilder.loadTexts: hsupaSpsSchedEntry.setStatus('current')
hsupaSpsSchedLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsupaSpsSchedLcId.setStatus('current')
hsupaSpsSchedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsupaSpsSchedRowStatus.setStatus('current')
hsupaSpsSchedSilentTransCntTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaSpsSchedSilentTransCntTh.setStatus('current')
hsupaSpsSchedActiveTransPktTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaSpsSchedActiveTransPktTh.setStatus('current')
hsupaSpsSchedDynamicSDThFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaSpsSchedDynamicSDThFactor.setStatus('current')
hsupaSpsSchedDeltaQPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaSpsSchedDeltaQPSK.setStatus('current')
hsupaSpsSchedDelta16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaSpsSchedDelta16QAM.setStatus('current')
hsupaSpsSchedTimerQPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaSpsSchedTimerQPSK.setStatus('current')
hsupaSpsSchedTimer16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaSpsSchedTimer16QAM.setStatus('current')
hsupaSpsSchedResrcBlkTsCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaSpsSchedResrcBlkTsCfgIndex.setStatus('current')
hsupaSpsSchedResrcBlkCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaSpsSchedResrcBlkCfgIndex.setStatus('current')
hsupaSpsSchedCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(55, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaSpsSchedCodeRate.setStatus('current')
hsupaSpsSchedAllocPuchDetectCntTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaSpsSchedAllocPuchDetectCntTh.setStatus('current')
hsupaSpsSchedRelPuchDetectCntTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaSpsSchedRelPuchDetectCntTh.setStatus('current')
hsupaCellSelectNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 5))
hsupaCellSelectTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 5, 1), )
if mibBuilder.loadTexts: hsupaCellSelectTable.setStatus('current')
hsupaCellSelectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 5, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsupaCellSelectLcId"))
if mibBuilder.loadTexts: hsupaCellSelectEntry.setStatus('current')
hsupaCellSelectLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsupaCellSelectLcId.setStatus('current')
hsupaCellSelectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 5, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsupaCellSelectRowStatus.setStatus('current')
hsupaCellSelectSchedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaCellSelectSchedNum.setStatus('current')
hsupaCellSelectNotSchedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaCellSelectNotSchedTime.setStatus('current')
hsupaCommSchedNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 6))
hsupaCommSchedTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 6, 1), )
if mibBuilder.loadTexts: hsupaCommSchedTable.setStatus('current')
hsupaCommSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 6, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsupaCommSchedLcId"))
if mibBuilder.loadTexts: hsupaCommSchedEntry.setStatus('current')
hsupaCommSchedLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsupaCommSchedLcId.setStatus('current')
hsupaCommSchedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 6, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsupaCommSchedRowStatus.setStatus('current')
hsupaCommSchedRcvRucchSchedTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaCommSchedRcvRucchSchedTh.setStatus('current')
hsupaCommSchedDpchPreemptPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("vru", 0), ("timeSlot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaCommSchedDpchPreemptPolicy.setStatus('current')
hsupaForceSchedTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaForceSchedTh.setStatus('current')
hsupaCongestCtrlNode = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 7))
hsupaCongestCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 7, 1), )
if mibBuilder.loadTexts: hsupaCongestCtrlTable.setStatus('current')
hsupaCongestCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 7, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hsupaCongestCtrlLcId"))
if mibBuilder.loadTexts: hsupaCongestCtrlEntry.setStatus('current')
hsupaCongestCtrlLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: hsupaCongestCtrlLcId.setStatus('current')
hsupaCongestCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 7, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsupaCongestCtrlRowStatus.setStatus('current')
hsupaCongestCtrlDecreasePara = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaCongestCtrlDecreasePara.setStatus('current')
hsupaCongestCtrlIncreasePara = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaCongestCtrlIncreasePara.setStatus('current')
hsupaCongestCtrlDeCongTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaCongestCtrlDeCongTh.setStatus('current')
hsupaCongestCtrlRestoreTimerTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaCongestCtrlRestoreTimerTh.setStatus('current')
hsupaCongestCtrlRestoreCounterTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaCongestCtrlRestoreCounterTh.setStatus('current')
hsupaCongestCtrlWinLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 2, 3, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hsupaCongestCtrlWinLength.setStatus('current')
alcap = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 4))
alcapTotalPaths = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcapTotalPaths.setStatus('current')
alcapTotalLinks = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 4, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcapTotalLinks.setStatus('current')
alcapTotalConns = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 4, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcapTotalConns.setStatus('current')
alcapInRouteAddr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 2, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcapInRouteAddr.setStatus('current')
tdPl = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3))
sjm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1))
sjm1Table = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1), )
if mibBuilder.loadTexts: sjm1Table.setStatus('current')
sjm1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sjm1LocalCellId"))
if mibBuilder.loadTexts: sjm1Entry.setStatus('current')
sjm1LocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: sjm1LocalCellId.setStatus('current')
sjm1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sjm1RowStatus.setStatus('current')
sjm1ThresholdCC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1ThresholdCC.setStatus('current')
sjm1ThresholdFC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1ThresholdFC.setStatus('current')
sjm1ThresholdPP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1ThresholdPP.setStatus('current')
sjm1AveragePeriodMatrixISCP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1AveragePeriodMatrixISCP.setStatus('current')
sjm1ThreshIrtPiip = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1ThreshIrtPiip.setStatus('current')
sjm1ThreshIrtPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1ThreshIrtPeak.setStatus('current')
sjm1ThresholdAcd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1ThresholdAcd.setStatus('current')
sjm1ThresholdAcdIntraf = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2047))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1ThresholdAcdIntraf.setStatus('current')
sjm1ThresholdAcdSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 2560))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1ThresholdAcdSNR.setStatus('current')
sjm1BfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1BfThreshold.setStatus('current')
sjm1TotalVruNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(16, 20, 24, 28, 32, 36, 40)).clone(namedValues=NamedValues(("val16", 16), ("val20", 20), ("val24", 24), ("val28", 28), ("val32", 32), ("val36", 36), ("val40", 40)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1TotalVruNum.setStatus('current')
sjm1HighSpeedAlgorithmSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1HighSpeedAlgorithmSwitch.setStatus('current')
sjm1FreqShiftSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1FreqShiftSwitch.setStatus('current')
sjm1RoundSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1RoundSwitch.setStatus('current')
sjm1RoundPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1RoundPeriod.setStatus('current')
sjm1RecursionFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1RecursionFactor.setStatus('current')
sjm1MaxPuchRscp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-125, -50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1MaxPuchRscp.setStatus('current')
sjm1MinPuchRscp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-125, -50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1MinPuchRscp.setStatus('current')
sjm1PuchDeltaSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1PuchDeltaSnr.setStatus('current')
sjm1IscpPathThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1IscpPathThreshold.setStatus('current')
sjm1RnAlgorithmSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1RnAlgorithmSwitch.setStatus('current')
sjm1SnrLowThresholdQpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1SnrLowThresholdQpsk.setStatus('current')
sjm1SnrHighThresholdQpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2560))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1SnrHighThresholdQpsk.setStatus('current')
sjm1SnrLowThreshold16Qam = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 5120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1SnrLowThreshold16Qam.setStatus('current')
sjm1SnrHighThreshold16Qam = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1SnrHighThreshold16Qam.setStatus('current')
sjm1CoFreqAlgorithmSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1CoFreqAlgorithmSwitch.setStatus('current')
sjm1RnMatrixWindowAcd = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-8, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1RnMatrixWindowAcd.setStatus('current')
sjm1ThresholdPPNotSmartAnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1ThresholdPPNotSmartAnt.setStatus('current')
sjm1SichAcdSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1SichAcdSwitch.setStatus('current')
sjm1SichAcdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1SichAcdThreshold.setStatus('current')
sjm1WinPwrActThFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)).clone(namedValues=NamedValues(("val0", 0), ("val0dot5", 1), ("val1", 2), ("val1dot5", 3), ("val2", 4), ("val2dot5", 5), ("val3", 6), ("val3dot5", 7), ("val4", 8), ("val4dot5", 9), ("val5", 10), ("val5dot5", 11), ("val6", 12), ("val6dot5", 13), ("val7", 14), ("val7dot5", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1WinPwrActThFactor.setStatus('current')
sjm1DasIscpPathMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, -50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1DasIscpPathMaxThreshold.setStatus('current')
sjm1DasIscpPathMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, -50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1DasIscpPathMinThreshold.setStatus('current')
sjm1WinPwrAcdThFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1WinPwrAcdThFactor.setStatus('current')
sjm1PeakPosThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1PeakPosThreshold.setStatus('current')
sjm1SyncDlRxPowerTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, -50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1SyncDlRxPowerTh.setStatus('current')
sjm1SyncDlDetectTimesTh = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1SyncDlDetectTimesTh.setStatus('current')
sjm1CoFreqAlgorithmSwitchNotSmartAnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1CoFreqAlgorithmSwitchNotSmartAnt.setStatus('current')
sjm1RoundSwitchSmartAnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1RoundSwitchSmartAnt.setStatus('current')
sjm1IscpRptTypeSwitchNotSmartAnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("type0", 0), ("type1", 1), ("type2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1IscpRptTypeSwitchNotSmartAnt.setStatus('current')
sjm1IscpRptTypeSwitchSmartAnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("type0", 0), ("type1", 1), ("type2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sjm1IscpRptTypeSwitchSmartAnt.setStatus('current')
sd = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2))
sdTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1), )
if mibBuilder.loadTexts: sdTable.setStatus('current')
sdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sdLocalCellId"))
if mibBuilder.loadTexts: sdEntry.setStatus('current')
sdLocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: sdLocalCellId.setStatus('current')
sdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdRowStatus.setStatus('current')
sdForgettingFactorP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdForgettingFactorP.setStatus('current')
sdDWCMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdDWCMode.setStatus('current')
sdZeroSettingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdZeroSettingNum.setStatus('current')
sdCarrToIntDesRACHI = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdCarrToIntDesRACHI.setStatus('current')
sdAverPeriodRACHInt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdAverPeriodRACHInt.setStatus('current')
sdPeakAverageDiffThres = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdPeakAverageDiffThres.setStatus('current')
sdPeakSideDiffThres = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdPeakSideDiffThres.setStatus('current')
sdCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdCountThreshold.setStatus('current')
sdDeltaTimeDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdDeltaTimeDiff.setStatus('current')
sdPeakSideDiffCollThres = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdPeakSideDiffCollThres.setStatus('current')
sdPeakAverDiffRelThres = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdPeakAverDiffRelThres.setStatus('current')
sdUpptsShortAverFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdUpptsShortAverFactor.setStatus('current')
sdUpptsLongAverFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4, 8, 16)).clone(namedValues=NamedValues(("val1", 1), ("val2", 2), ("val4", 4), ("val8", 8), ("val16", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdUpptsLongAverFactor.setStatus('current')
sdPeakSideDiffCollThresNotSmartAnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdPeakSideDiffCollThresNotSmartAnt.setStatus('current')
sdSyncUlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, -80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdSyncUlThreshold.setStatus('current')
fc = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3))
fcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1), )
if mibBuilder.loadTexts: fcTable.setStatus('current')
fcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "fcLocalCellId"))
if mibBuilder.loadTexts: fcEntry.setStatus('current')
fcLocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: fcLocalCellId.setStatus('current')
fcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRowStatus.setStatus('current')
fcDdlbfOnSwitchAttrib = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcDdlbfOnSwitchAttrib.setStatus('current')
fcDlpcOnSwitchAttrib = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcDlpcOnSwitchAttrib.setStatus('current')
fcOlscOnSwitchAttrib = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcOlscOnSwitchAttrib.setStatus('current')
fcDoNothingULSC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcDoNothingULSC.setStatus('current')
fcThresholdDoNothingULSC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcThresholdDoNothingULSC.setStatus('current')
fcPeriodofOuterLoopULSC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPeriodofOuterLoopULSC.setStatus('current')
fcCIREndThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCIREndThreshold.setStatus('current')
fcCIRStartThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCIRStartThreshold.setStatus('current')
fcMinRxpUlpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, -110))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcMinRxpUlpc.setStatus('current')
fcScchDlpcStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcScchDlpcStep.setStatus('current')
fcSichSirTargetNack = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSichSirTargetNack.setStatus('current')
fcScchInitTxp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-300, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcScchInitTxp.setStatus('current')
fcPdschInitTxp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-300, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPdschInitTxp.setStatus('current')
fcUlpcForgettingFactorforMean = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcUlpcForgettingFactorforMean.setStatus('current')
fcUlpcLinearPredictionDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcUlpcLinearPredictionDelay.setStatus('current')
fcUlscForgettingFactorforMean = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcUlscForgettingFactorforMean.setStatus('current')
fcUlscLinearPredictionDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcUlscLinearPredictionDelay.setStatus('current')
fcDiffDb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(11, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcDiffDb.setStatus('current')
fcPresyncSubFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPresyncSubFrame.setStatus('current')
fcBfAlgorithmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("ebb", 0), ("gob", 1), ("selfAdaptive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcBfAlgorithmType.setStatus('current')
fcSnrAdjustFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSnrAdjustFactor.setStatus('current')
fcCombinationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCombinationThreshold.setStatus('current')
fcPhaseRotateSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPhaseRotateSwitch.setStatus('current')
fcScchInitTxaOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcScchInitTxaOffset.setStatus('current')
fcScchInitTxaOffsetAbound = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcScchInitTxaOffsetAbound.setStatus('current')
fcHichAckNackOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHichAckNackOffset.setStatus('current')
fcAgchPwrGap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcAgchPwrGap.setStatus('current')
fcAgchDpchOffsetTxa = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcAgchDpchOffsetTxa.setStatus('current')
fcAgchDpchOffsetAbundanceTxa = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcAgchDpchOffsetAbundanceTxa.setStatus('current')
fcHichDpchOffsetTxaUser0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-160, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHichDpchOffsetTxaUser0.setStatus('current')
fcHichDpchOffsetTxaUser1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-160, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHichDpchOffsetTxaUser1.setStatus('current')
fcHichDpchOffsetTxaUser2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-160, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHichDpchOffsetTxaUser2.setStatus('current')
fcHichDpchOffsetTxaUser3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-160, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHichDpchOffsetTxaUser3.setStatus('current')
fcHichDlpcSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHichDlpcSwitch.setStatus('current')
fcMaxRxpUlpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, -60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcMaxRxpUlpc.setStatus('current')
fcMaxSnrUlss = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-3, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcMaxSnrUlss.setStatus('current')
fcMinCIRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcMinCIRThreshold.setStatus('current')
fcHichDpchOffsetAbundanceTxa = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-16, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHichDpchOffsetAbundanceTxa.setStatus('current')
fcSichUlpcAbnormalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSichUlpcAbnormalThreshold.setStatus('current')
fcBfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcBfThreshold.setStatus('current')
fcSichSdmaIsolation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSichSdmaIsolation.setStatus('current')
fcPdschSdmaIsolation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPdschSdmaIsolation.setStatus('current')
fcPuchSdmaIsolation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPuchSdmaIsolation.setStatus('current')
fcPccpchPowerOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPccpchPowerOffset.setStatus('current')
fcPdschOffsetDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPdschOffsetDelta.setStatus('current')
fcPdschPCStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPdschPCStep.setStatus('current')
fcPdschModulationDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPdschModulationDelta.setStatus('current')
fcPdschQpskAboud = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPdschQpskAboud.setStatus('current')
fcCommRntiScchDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCommRntiScchDelta.setStatus('current')
fcPdschPwrThresholdQpsk16Qam = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPdschPwrThresholdQpsk16Qam.setStatus('current')
fcPdschPwrThreshold16QamQpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPdschPwrThreshold16QamQpsk.setStatus('current')
fcScchInitPwrRecursionFactor1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcScchInitPwrRecursionFactor1.setStatus('current')
fcScchInitPwrRecursionFactor2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcScchInitPwrRecursionFactor2.setStatus('current')
fcScchRecursionAverageOffsetTxa = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcScchRecursionAverageOffsetTxa.setStatus('current')
fcModulationChangePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcModulationChangePeriod.setStatus('current')
fcScchBfGapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcScchBfGapThreshold.setStatus('current')
fcPdschPwrGap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPdschPwrGap.setStatus('current')
fcScchPwrGap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcScchPwrGap.setStatus('current')
fcVruMinTxaDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcVruMinTxaDl.setStatus('current')
fcSsStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSsStep.setStatus('current')
fcScchInitSirTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcScchInitSirTarget.setStatus('current')
fcSpsHspdschDlpcSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSpsHspdschDlpcSwitch.setStatus('current')
fcAgchSdmaIsolation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcAgchSdmaIsolation.setStatus('current')
fcRxPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcRxPowerFactor.setStatus('current')
fcDTXAlgorithmSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 67), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcDTXAlgorithmSwitch.setStatus('current')
fcDTXPowerControlDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcDTXPowerControlDelay.setStatus('current')
fcDTXPowerGap = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcDTXPowerGap.setStatus('current')
fcDTXOffsetTxa = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcDTXOffsetTxa.setStatus('current')
fcSichOlpcSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 71), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSichOlpcSwitch.setStatus('current')
fcSichSirTargetUpStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSichSirTargetUpStep.setStatus('current')
fcSichSirTargetMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSichSirTargetMax.setStatus('current')
fcSichSirTargetMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSichSirTargetMin.setStatus('current')
fcSichBlerTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSichBlerTarget.setStatus('current')
fcSichErrorDetectProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSichErrorDetectProbability.setStatus('current')
fcCarrierSlotIscpMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, -45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCarrierSlotIscpMaxThreshold.setStatus('current')
fcCarrierSlotIscpMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-145, -110))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCarrierSlotIscpMinThreshold.setStatus('current')
fcCarrierSlotNoUserIscpMaxThresholdOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCarrierSlotNoUserIscpMaxThresholdOffset.setStatus('current')
fcTpcCombSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 80), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcTpcCombSwitch.setStatus('current')
fcUlDTXAlgorithmSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 81), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcUlDTXAlgorithmSwitch.setStatus('current')
fcUlDTXRxpDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcUlDTXRxpDelta.setStatus('current')
fcUlDTXAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 83), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("a", 0), ("b", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcUlDTXAlgorithm.setStatus('current')
fcMaxRtwbUlpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, -50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcMaxRtwbUlpc.setStatus('current')
fcUlssSnrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 85), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcUlssSnrFlag.setStatus('current')
fcSignalingTxaOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSignalingTxaOffset.setStatus('current')
fcAveSnrUlpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-3, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcAveSnrUlpc.setStatus('current')
fcAveRxpUlpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 3, 1, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, -50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcAveRxpUlpc.setStatus('current')
cc = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4))
ccTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1), )
if mibBuilder.loadTexts: ccTable.setStatus('current')
ccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ccLocalCellId"))
if mibBuilder.loadTexts: ccEntry.setStatus('current')
ccLocalCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: ccLocalCellId.setStatus('current')
ccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRowStatus.setStatus('current')
ccStepUpEhich = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("db1", 0), ("db2", 1), ("db3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccStepUpEhich.setStatus('current')
ccBlerTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccBlerTarget.setStatus('current')
ccHichFmAckUser0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccHichFmAckUser0.setStatus('current')
ccHichFmNackUser0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccHichFmNackUser0.setStatus('current')
ccHichFmAckUser1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccHichFmAckUser1.setStatus('current')
ccHichFmNackUser1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccHichFmNackUser1.setStatus('current')
ccHichFmAckUser2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccHichFmAckUser2.setStatus('current')
ccHichFmNackUser2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccHichFmNackUser2.setStatus('current')
ccHichFmAckUser3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccHichFmAckUser3.setStatus('current')
ccHichFmNackUser3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccHichFmNackUser3.setStatus('current')
ccPreOutSyncSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPreOutSyncSwitch.setStatus('current')
ccBlerStatisticWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccBlerStatisticWindowSize.setStatus('current')
ccOlpcGlideStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOlpcGlideStep.setStatus('current')
ccErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccErrorThreshold.setStatus('current')
ccOlpcControlPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOlpcControlPeriod.setStatus('current')
ccOlpcBlerTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOlpcBlerTarget.setStatus('current')
ccOlpcRecursionFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOlpcRecursionFactor.setStatus('current')
ccDeltaUpThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDeltaUpThreshold.setStatus('current')
ccDeltaDownThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDeltaDownThreshold.setStatus('current')
ccDeltaUpStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDeltaUpStep.setStatus('current')
ccDeltaDownStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDeltaDownStep.setStatus('current')
ccOlpcBlerTargetVoIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOlpcBlerTargetVoIP.setStatus('current')
ccRachErrorRatioPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRachErrorRatioPeriod.setStatus('current')
ccFpachNumThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccFpachNumThreshold.setStatus('current')
ccRachErrorRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRachErrorRatio.setStatus('current')
ccSpbSnrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-3, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSpbSnrMin.setStatus('current')
timeSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5))
timeSlotTypeTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1), )
if mibBuilder.loadTexts: timeSlotTypeTable.setStatus('current')
timeSlotTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "timeSlotTypeIndex"))
if mibBuilder.loadTexts: timeSlotTypeEntry.setStatus('current')
timeSlotTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 71)))
if mibBuilder.loadTexts: timeSlotTypeIndex.setStatus('current')
timeSlotTypeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeRowStatus.setStatus('current')
timeSlotTypeCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeCellId.setStatus('current')
timeSlotTypeCellFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeCellFreq.setStatus('current')
timeSlotTypeNeighCell1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell1.setStatus('current')
timeSlotTypeNeighCell2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell2.setStatus('current')
timeSlotTypeNeighCell3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell3.setStatus('current')
timeSlotTypeNeighCell4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell4.setStatus('current')
timeSlotTypeNeighCell5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell5.setStatus('current')
timeSlotTypeNeighCell6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell6.setStatus('current')
timeSlotTypeNeighCell7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell7.setStatus('current')
timeSlotTypeNeighCell8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell8.setStatus('current')
timeSlotTypeNeighCell9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell9.setStatus('current')
timeSlotTypeNeighCell10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell10.setStatus('current')
timeSlotTypeNeighCell11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell11.setStatus('current')
timeSlotTypeNeighCell12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell12.setStatus('current')
timeSlotTypeNeighCell13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell13.setStatus('current')
timeSlotTypeNeighCell14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell14.setStatus('current')
timeSlotTypeNeighCell15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell15.setStatus('current')
timeSlotTypeNeighCell16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell16.setStatus('current')
timeSlotTypeNeighCell17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell17.setStatus('current')
timeSlotTypeNeighCell18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell18.setStatus('current')
timeSlotTypeNeighCell19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell19.setStatus('current')
timeSlotTypeNeighCell20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell20.setStatus('current')
timeSlotTypeNeighCell21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell21.setStatus('current')
timeSlotTypeNeighCell22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell22.setStatus('current')
timeSlotTypeNeighCell23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell23.setStatus('current')
timeSlotTypeNeighCell24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell24.setStatus('current')
timeSlotTypeNeighCell25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell25.setStatus('current')
timeSlotTypeNeighCell26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell26.setStatus('current')
timeSlotTypeNeighCell27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell27.setStatus('current')
timeSlotTypeNeighCell28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell28.setStatus('current')
timeSlotTypeNeighCell29 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell29.setStatus('current')
timeSlotTypeNeighCell30 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell30.setStatus('current')
timeSlotTypeNeighCell31 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 100, 3, 5, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeSlotTypeNeighCell31.setStatus('current')
energySaving = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101))
closeTimeSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 1))
closeTimeSlotCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 1, 1))
closeDownTimeSlotSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: closeDownTimeSlotSwitch.setStatus('current')
closeDownTimeSlotStartTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 1, 1, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: closeDownTimeSlotStartTime.setStatus('current')
closeDownTimeSlotEndTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 1, 1, 3), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: closeDownTimeSlotEndTime.setStatus('current')
powerManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 2))
devicePowerManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 2, 1))
bbuPowerManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 2, 1, 1))
bbuPowerOffPolicySwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbuPowerOffPolicySwitch.setStatus('current')
bbuPowerOffScheduleStartTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 2, 1, 1, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbuPowerOffScheduleStartTime.setStatus('current')
bbuPowerOffScheduleEndTime = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 2, 1, 1, 3), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbuPowerOffScheduleEndTime.setStatus('current')
bbuDCAEnableThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbuDCAEnableThreshold.setStatus('current')
bbuWaitDCARegulateResultTimer = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbuWaitDCARegulateResultTimer.setStatus('current')
bbuDCARegulateSwitch = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 7, 101, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbuDCARegulateSwitch.setStatus('current')
eNBPerformanceManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100))
pmCounterGrpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1))
pmOriginCounterGrpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1))
rrcrelatedOriginCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1))
rrcConnEstabProcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1), )
if mibBuilder.loadTexts: rrcConnEstabProcTable.setStatus('current')
rrcConnEstabProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rrcConnEstabProcLcId"))
if mibBuilder.loadTexts: rrcConnEstabProcEntry.setStatus('current')
rrcConnEstabProcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: rrcConnEstabProcLcId.setStatus('current')
rrcConnEstabProcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabProcRowStatus.setStatus('current')
rrcFailConnEstabMaxUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnEstabMaxUeNum.setStatus('current')
rrcFailConnEstabCellOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnEstabCellOverLoad.setStatus('current')
rrcFailConnEstabCellBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnEstabCellBlock.setStatus('current')
rrcFailConnEstabPucchAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnEstabPucchAllocFail.setStatus('current')
rrcFailConnEstabSrsAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnEstabSrsAllocFail.setStatus('current')
rrcFailConnEstabTpcAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnEstabTpcAllocFail.setStatus('current')
rrcFailConnEstabTerminalNoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnEstabTerminalNoRsp.setStatus('current')
rrcFailConnEstabPerEncodeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnEstabPerEncodeFail.setStatus('current')
rrcFailConnEstabParameterError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnEstabParameterError.setStatus('current')
rrcFailConnEstabAccessJudgeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnEstabAccessJudgeFail.setStatus('current')
rrcFailConnEstabInstAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnEstabInstAllocFail.setStatus('current')
rrcFailConnEstabOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnEstabOthers.setStatus('current')
rrcAttConnEstabEmergency = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnEstabEmergency.setStatus('current')
rrcSuccConnEstabEmergency = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnEstabEmergency.setStatus('current')
rrcAttConnEstabHighPriorityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnEstabHighPriorityAccess.setStatus('current')
rrcSuccConnEstabHighPriorityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnEstabHighPriorityAccess.setStatus('current')
rrcAttConnEstabMtAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnEstabMtAccess.setStatus('current')
rrcSuccConnEstabMtAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnEstabMtAccess.setStatus('current')
rrcAttConnEstabMoSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnEstabMoSignalling.setStatus('current')
rrcSuccConnEstabMoSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnEstabMoSignalling.setStatus('current')
rrcAttConnEstabMoData = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnEstabMoData.setStatus('current')
rrcSuccConnEstabMoData = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnEstabMoData.setStatus('current')
rrcConnReleaseCsfb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleaseCsfb.setStatus('current')
rrcRejectConnEstabIllegalUE = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRejectConnEstabIllegalUE.setStatus('current')
rrcConnReleaseIllegalUE = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleaseIllegalUE.setStatus('current')
rrcConnReleaseRedirectionTo2GMea = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleaseRedirectionTo2GMea.setStatus('current')
rrcConnReleaseRedirectionTo3GMea = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleaseRedirectionTo3GMea.setStatus('current')
rrcConnReleaseRedirectionTo2GNoMea = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleaseRedirectionTo2GNoMea.setStatus('current')
rrcConnReleaseRedirectionTo3GNoMea = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleaseRedirectionTo3GNoMea.setStatus('current')
rrcConnReleaseRedirectionToCdma2000HrpdMea = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleaseRedirectionToCdma2000HrpdMea.setStatus('current')
rrcConnReleaseRedirectionToCdma2000HrpdNoMea = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleaseRedirectionToCdma2000HrpdNoMea.setStatus('current')
rrcConnReleaseRedirectionTo4GLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleaseRedirectionTo4GLoadBalance.setStatus('current')
rrcConnReleaseRedirectionTo3GLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleaseRedirectionTo3GLoadBalance.setStatus('current')
rrcConnReleaseRedirectionTo2GLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleaseRedirectionTo2GLoadBalance.setStatus('current')
rrcConnReleaseRedirectionTo2GRemoteRip = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleaseRedirectionTo2GRemoteRip.setStatus('current')
rrcConnReleaseCsfb3G = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleaseCsfb3G.setStatus('current')
rrcConnReleasePdcpNotRcvSn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReleasePdcpNotRcvSn.setStatus('current')
rrcAttConnEstabMoVolte = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnEstabMoVolte.setStatus('current')
rrcSuccConnEstabMoVolte = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnEstabMoVolte.setStatus('current')
rrcConnEstabTimeTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2), )
if mibBuilder.loadTexts: rrcConnEstabTimeTable.setStatus('current')
rrcConnEstabTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rrcConnEstabTimeLcId"))
if mibBuilder.loadTexts: rrcConnEstabTimeEntry.setStatus('current')
rrcConnEstabTimeLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: rrcConnEstabTimeLcId.setStatus('current')
rrcConnEstabTimeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabTimeRowStatus.setStatus('current')
rrcConnEstabTimeMeanEmergency = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabTimeMeanEmergency.setStatus('current')
rrcConnEstabTimeMaxEmergency = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabTimeMaxEmergency.setStatus('current')
rrcConnEstabTimeMeanHighPriorityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabTimeMeanHighPriorityAccess.setStatus('current')
rrcConnEstabTimeMaxHighPriorityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabTimeMaxHighPriorityAccess.setStatus('current')
rrcConnEstabTimeMeanMtAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabTimeMeanMtAccess.setStatus('current')
rrcConnEstabTimeMaxMtAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabTimeMaxMtAccess.setStatus('current')
rrcConnEstabTimeMeanMoSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabTimeMeanMoSignalling.setStatus('current')
rrcConnEstabTimeMaxMoSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabTimeMaxMoSignalling.setStatus('current')
rrcConnEstabTimeMeanMoData = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabTimeMeanMoData.setStatus('current')
rrcConnEstabTimeMaxMoData = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabTimeMaxMoData.setStatus('current')
rrcConnEstabTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabTimeMax.setStatus('current')
rrcConnEstabTimeMean = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnEstabTimeMean.setStatus('current')
rrcConnReEstabProcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3), )
if mibBuilder.loadTexts: rrcConnReEstabProcTable.setStatus('current')
rrcConnReEstabProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rrcConnReEstabProcLcId"))
if mibBuilder.loadTexts: rrcConnReEstabProcEntry.setStatus('current')
rrcConnReEstabProcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: rrcConnReEstabProcLcId.setStatus('current')
rrcConnReEstabProcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabProcRowStatus.setStatus('current')
rrcConnReEstabAttRlFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabAttRlFail.setStatus('current')
rrcConnReEstabSuccRlFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabSuccRlFail.setStatus('current')
rrcConnReEstabAttHandOverFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabAttHandOverFail.setStatus('current')
rrcConnReEstabSuccHandOverFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabSuccHandOverFail.setStatus('current')
rrcConnReEstabAttReConfigFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabAttReConfigFail.setStatus('current')
rrcConnReEstabSuccReConfigFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabSuccReConfigFail.setStatus('current')
rrcConnReEstabFailMaxUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabFailMaxUeNum.setStatus('current')
rrcConnReEstabFailCellOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabFailCellOverLoad.setStatus('current')
rrcConnReEstabFailPucchAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabFailPucchAllocFail.setStatus('current')
rrcConnReEstabFailSrsAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabFailSrsAllocFail.setStatus('current')
rrcConnReEstabFailTpcAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabFailTpcAllocFail.setStatus('current')
rrcConnReEstabFailTerminalNoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabFailTerminalNoRsp.setStatus('current')
rrcConnReEstabFailPerEncodeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabFailPerEncodeFail.setStatus('current')
rrcConnReEstabFailParameterError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabFailParameterError.setStatus('current')
rrcConnReEstabInterEnbAccessJudgeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabInterEnbAccessJudgeFail.setStatus('current')
rrcConnReEstabFailDrbIdAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabFailDrbIdAllocFail.setStatus('current')
rrcConnReEstabFailSpsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabFailSpsFail.setStatus('current')
rrcConnReEstabFailInstAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabFailInstAllocFail.setStatus('current')
rrcConnReEstabFailOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabFailOthers.setStatus('current')
rrcConnReEstabSuccNonSrccell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabSuccNonSrccell.setStatus('current')
rrcConnReEstabInterEnbNoContext = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabInterEnbNoContext.setStatus('current')
rrcConnReEstabInterEnbUEContextAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabInterEnbUEContextAtt.setStatus('current')
rrcConnReEstabInterEnbUEContextSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabInterEnbUEContextSucc.setStatus('current')
rrcConnReEstabInterEnbSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabInterEnbSucc.setStatus('current')
rrcConnReEstabInterEnbFailTerminalNoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabInterEnbFailTerminalNoRsp.setStatus('current')
rrcConnReEstabInterEnbScSentRp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabInterEnbScSentRp.setStatus('current')
rrcConnReEstabInterEnbScfailMrReCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabInterEnbScfailMrReCfg.setStatus('current')
rrcConnReEstabInterEnbScfailDrbCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabInterEnbScfailDrbCfg.setStatus('current')
rrcConnReEstabInterEnbScfailOther = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReEstabInterEnbScfailOther.setStatus('current')
rrcConnNumberTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 4), )
if mibBuilder.loadTexts: rrcConnNumberTable.setStatus('current')
rrcConnNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rrcConnNumberLcId"))
if mibBuilder.loadTexts: rrcConnNumberEntry.setStatus('current')
rrcConnNumberLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: rrcConnNumberLcId.setStatus('current')
rrcConnNumberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 4, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnNumberRowStatus.setStatus('current')
rrcConnMean = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnMean.setStatus('current')
rrcConnMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnMax.setStatus('current')
rrcConnReconfigProcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5), )
if mibBuilder.loadTexts: rrcConnReconfigProcTable.setStatus('current')
rrcConnReconfigProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rrcConnReconfigProcLcId"))
if mibBuilder.loadTexts: rrcConnReconfigProcEntry.setStatus('current')
rrcConnReconfigProcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: rrcConnReconfigProcLcId.setStatus('current')
rrcConnReconfigProcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnReconfigProcRowStatus.setStatus('current')
rrcAttConnReconfigRabSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnReconfigRabSetup.setStatus('current')
rrcSuccConnReconfigRabSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnReconfigRabSetup.setStatus('current')
rrcAttConnReconfigRabModify = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnReconfigRabModify.setStatus('current')
rrcSuccConnReconfigRabModify = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnReconfigRabModify.setStatus('current')
rrcAttConnReconfigRabDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnReconfigRabDelete.setStatus('current')
rrcSuccConnReconfigRabDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnReconfigRabDelete.setStatus('current')
rrcAttConnReconfigMeasCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnReconfigMeasCfg.setStatus('current')
rrcSuccConnReconfigMeasCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnReconfigMeasCfg.setStatus('current')
rrcAttConnReconfigHandOverIntraCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnReconfigHandOverIntraCell.setStatus('current')
rrcSuccConnReconfigHandOverIntraCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnReconfigHandOverIntraCell.setStatus('current')
rrcAttConnReconfigSrsCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnReconfigSrsCfg.setStatus('current')
rrcSuccConnReconfigSrsCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnReconfigSrsCfg.setStatus('current')
rrcAttConnReconfigTmChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnReconfigTmChange.setStatus('current')
rrcSuccConnReconfigTmChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnReconfigTmChange.setStatus('current')
rrcAttConnReconfigResReclaim = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnReconfigResReclaim.setStatus('current')
rrcSuccConnReconfigResReclaim = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnReconfigResReclaim.setStatus('current')
rrcAttConnReconfigRrcReestablish = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAttConnReconfigRrcReestablish.setStatus('current')
rrcSuccConnReconfigRrcReestablish = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcSuccConnReconfigRrcReestablish.setStatus('current')
rrcFailConnReconfigAmbr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigAmbr.setStatus('current')
rrcFailConnReconfigPrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigPrb.setStatus('current')
rrcFailConnReconfigCellBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigCellBlock.setStatus('current')
rrcFailConnReconfigTpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigTpc.setStatus('current')
rrcFailConnReconfigDrbID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigDrbID.setStatus('current')
rrcFailConnReconfigSPS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigSPS.setStatus('current')
rrcFailConnReconfigLoChID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigLoChID.setStatus('current')
rrcFailConnReconfigPucch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigPucch.setStatus('current')
rrcFailConnReconfigSrs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigSrs.setStatus('current')
rrcFailConnReconfigTerminalNoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigTerminalNoRsp.setStatus('current')
rrcFailConnReconfigPerEncodeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigPerEncodeFail.setStatus('current')
rrcFailConnReconfigParameterError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigParameterError.setStatus('current')
rrcFailConnReconfigStateError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigStateError.setStatus('current')
rrcFailConnReconfigRlFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigRlFailure.setStatus('current')
rrcFailConnReconfigRrcReestablish = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigRrcReestablish.setStatus('current')
rrcFailConnReconfigSecurityFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigSecurityFailure.setStatus('current')
rrcFailConnReconfigAccessJudgeFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigAccessJudgeFailure.setStatus('current')
rrcFailConnReconfigMobilityFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigMobilityFailure.setStatus('current')
rrcFailConnReconfigInstAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigInstAllocFail.setStatus('current')
rrcFailConnReconfigOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcFailConnReconfigOthers.setStatus('current')
rbEstabProcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6), )
if mibBuilder.loadTexts: rbEstabProcTable.setStatus('current')
rbEstabProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rbEstabProcLcId"))
if mibBuilder.loadTexts: rbEstabProcEntry.setStatus('current')
rbEstabProcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: rbEstabProcLcId.setStatus('current')
rbEstabProcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbEstabProcRowStatus.setStatus('current')
rbFailEstabRej = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFailEstabRej.setStatus('current')
rbFailEstabReEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFailEstabReEstab.setStatus('current')
rbFailEstabNoReply = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFailEstabNoReply.setStatus('current')
rbFailEstabIntraEnbError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFailEstabIntraEnbError.setStatus('current')
rbAttEstabQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbAttEstabQci1.setStatus('current')
rbSuccEstabQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSuccEstabQci1.setStatus('current')
rbAttEstabQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbAttEstabQci2.setStatus('current')
rbSuccEstabQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSuccEstabQci2.setStatus('current')
rbAttEstabQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbAttEstabQci3.setStatus('current')
rbSuccEstabQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSuccEstabQci3.setStatus('current')
rbAttEstabQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbAttEstabQci4.setStatus('current')
rbSuccEstabQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSuccEstabQci4.setStatus('current')
rbAttEstabQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbAttEstabQci5.setStatus('current')
rbSuccEstabQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSuccEstabQci5.setStatus('current')
rbAttEstabQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbAttEstabQci6.setStatus('current')
rbSuccEstabQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSuccEstabQci6.setStatus('current')
rbAttEstabQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbAttEstabQci7.setStatus('current')
rbSuccEstabQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSuccEstabQci7.setStatus('current')
rbAttEstabQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbAttEstabQci8.setStatus('current')
rbSuccEstabQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSuccEstabQci8.setStatus('current')
rbAttEstabQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbAttEstabQci9.setStatus('current')
rbSuccEstabQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSuccEstabQci9.setStatus('current')
s1HandOverProcInterEnbTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7), )
if mibBuilder.loadTexts: s1HandOverProcInterEnbTable.setStatus('current')
s1HandOverProcInterEnbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "s1HandOverProcInterEnbLcId"))
if mibBuilder.loadTexts: s1HandOverProcInterEnbEntry.setStatus('current')
s1HandOverProcInterEnbLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: s1HandOverProcInterEnbLcId.setStatus('current')
s1HandOverProcInterEnbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1HandOverProcInterEnbRowStatus.setStatus('current')
hoAttOutIntraFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutIntraFreqS1.setStatus('current')
hoSuccPrepOutIntraFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepOutIntraFreqS1.setStatus('current')
hoSuccOutIntraFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutIntraFreqS1.setStatus('current')
hoAttOutInterFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutInterFreqS1.setStatus('current')
hoSuccPrepOutInterFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepOutInterFreqS1.setStatus('current')
hoSuccOutInterFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutInterFreqS1.setStatus('current')
hoFailPrepOutIntraFreqS1Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutIntraFreqS1Fail.setStatus('current')
hoFailPrepOutIntraFreqS1NoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutIntraFreqS1NoRsp.setStatus('current')
hoFailPrepOutInterFreqS1Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutInterFreqS1Fail.setStatus('current')
hoFailPrepOutInterFreqS1NoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutInterFreqS1NoRsp.setStatus('current')
hoSuccPrepOutIntraFreqS1PartialHandover = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepOutIntraFreqS1PartialHandover.setStatus('current')
hoSuccPrepOutInterFreqS1PartialHandover = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepOutInterFreqS1PartialHandover.setStatus('current')
hoFailOutIntraFreqS1NoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutIntraFreqS1NoRsp.setStatus('current')
hoFailOutInterFreqS1NoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutInterFreqS1NoRsp.setStatus('current')
hoAttIncIntraFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttIncIntraFreqS1.setStatus('current')
hoSuccPrepIncIntraFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepIncIntraFreqS1.setStatus('current')
hoSuccIncIntraFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccIncIntraFreqS1.setStatus('current')
hoAttIncInterFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttIncInterFreqS1.setStatus('current')
hoSuccPrepIncInterFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepIncInterFreqS1.setStatus('current')
hoSuccIncInterFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccIncInterFreqS1.setStatus('current')
hoFailPrepIncIntraFreqS1MaxUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1MaxUeNum.setStatus('current')
hoFailPrepIncIntraFreqS1CellOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1CellOverLoad.setStatus('current')
hoFailPrepIncIntraFreqS1Prb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1Prb.setStatus('current')
hoFailPrepIncIntraFreqS1HandoverRestrictList = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1HandoverRestrictList.setStatus('current')
hoFailPrepIncIntraFreqS1CellBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1CellBlock.setStatus('current')
hoFailPrepIncIntraFreqS1Tpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1Tpc.setStatus('current')
hoFailPrepIncIntraFreqS1DrbID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1DrbID.setStatus('current')
hoFailPrepIncIntraFreqS1SPS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1SPS.setStatus('current')
hoFailPrepIncIntraFreqS1LoChID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1LoChID.setStatus('current')
hoFailPrepIncIntraFreqS1Pucch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1Pucch.setStatus('current')
hoFailPrepIncIntraFreqS1Srs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1Srs.setStatus('current')
hoFailPrepIncIntraFreqS1PerEncodeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1PerEncodeFail.setStatus('current')
hoFailPrepIncIntraFreqS1PerDecodeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1PerDecodeFail.setStatus('current')
hoFailPrepIncIntraFreqS1SecurityFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1SecurityFailure.setStatus('current')
hoFailPrepIncIntraFreqS1ParameterError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1ParameterError.setStatus('current')
hoFailPrepIncIntraFreqS1Others = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqS1Others.setStatus('current')
hoFailPrepIncInterFreqS1MaxUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1MaxUeNum.setStatus('current')
hoFailPrepIncInterFreqS1CellOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1CellOverLoad.setStatus('current')
hoFailPrepIncInterFreqS1Prb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1Prb.setStatus('current')
hoFailPrepIncInterFreqS1HandoverRestrictList = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1HandoverRestrictList.setStatus('current')
hoFailPrepIncInterFreqS1CellBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1CellBlock.setStatus('current')
hoFailPrepIncInterFreqS1Tpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1Tpc.setStatus('current')
hoFailPrepIncInterFreqS1DrbID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1DrbID.setStatus('current')
hoFailPrepIncInterFreqS1SPS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1SPS.setStatus('current')
hoFailPrepIncInterFreqS1LoChID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1LoChID.setStatus('current')
hoFailPrepIncInterFreqS1Pucch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1Pucch.setStatus('current')
hoFailPrepIncInterFreqS1Srs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1Srs.setStatus('current')
hoFailPrepIncInterFreqS1PerEncodeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1PerEncodeFail.setStatus('current')
hoFailPrepIncInterFreqS1PerDecodeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1PerDecodeFail.setStatus('current')
hoFailPrepIncInterFreqS1SecurityFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1SecurityFailure.setStatus('current')
hoFailPrepIncInterFreqS1ParameterError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1ParameterError.setStatus('current')
hoFailPrepIncInterFreqS1Others = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqS1Others.setStatus('current')
hoSucOutIntraFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSucOutIntraFreqS1.setStatus('current')
hoSucOutInterFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSucOutInterFreqS1.setStatus('current')
hoAttOutExecIntraFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutExecIntraFreqS1.setStatus('current')
hoAttOutExecInterFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutExecInterFreqS1.setStatus('current')
hoAttOutPrepIntraFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutPrepIntraFreqS1.setStatus('current')
hoAttOutPrepInterFreqS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutPrepInterFreqS1.setStatus('current')
hoFailPrepOutIntraFreqS1SourceFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutIntraFreqS1SourceFail.setStatus('current')
hoFailPrepOutInterFreqS1SourceFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 7, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutInterFreqS1SourceFail.setStatus('current')
x2HandOverProcInterEnbTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8), )
if mibBuilder.loadTexts: x2HandOverProcInterEnbTable.setStatus('current')
x2HandOverProcInterEnbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "x2HandOverProcInterEnbLcId"))
if mibBuilder.loadTexts: x2HandOverProcInterEnbEntry.setStatus('current')
x2HandOverProcInterEnbLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: x2HandOverProcInterEnbLcId.setStatus('current')
x2HandOverProcInterEnbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x2HandOverProcInterEnbRowStatus.setStatus('current')
hoAttOutIntraFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutIntraFreqX2.setStatus('current')
hoSuccPrepOutIntraFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepOutIntraFreqX2.setStatus('current')
hoSuccOutIntraFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutIntraFreqX2.setStatus('current')
hoAttOutInterFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutInterFreqX2.setStatus('current')
hoSuccPrepOutInterFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepOutInterFreqX2.setStatus('current')
hoSuccOutInterFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutInterFreqX2.setStatus('current')
hoFailPrepOutIntraFreqX2Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutIntraFreqX2Fail.setStatus('current')
hoFailPrepOutIntraFreqX2NoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutIntraFreqX2NoRsp.setStatus('current')
hoFailPrepOutInterFreqX2Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutInterFreqX2Fail.setStatus('current')
hoFailPrepOutInterFreqX2NoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutInterFreqX2NoRsp.setStatus('current')
hoSuccPrepOutIntraFreqX2PartialHandover = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepOutIntraFreqX2PartialHandover.setStatus('current')
hoSuccPrepOutInterFreqX2PartialHandover = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepOutInterFreqX2PartialHandover.setStatus('current')
hoFailOutIntraFreqX2TarExecuteNoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutIntraFreqX2TarExecuteNoRsp.setStatus('current')
hoFailOutInterFreqX2TarExecuteNoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutInterFreqX2TarExecuteNoRsp.setStatus('current')
hoAttIncIntraFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttIncIntraFreqX2.setStatus('current')
hoSuccPrepIncIntraFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepIncIntraFreqX2.setStatus('current')
hoSuccIncIntraFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccIncIntraFreqX2.setStatus('current')
hoAttIncInterFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttIncInterFreqX2.setStatus('current')
hoSuccPrepIncInterFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepIncInterFreqX2.setStatus('current')
hoSuccIncInterFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccIncInterFreqX2.setStatus('current')
hoFailPrepIncIntraFreqX2MaxUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2MaxUeNum.setStatus('current')
hoFailPrepIncIntraFreqX2CellOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2CellOverLoad.setStatus('current')
hoFailPrepIncIntraFreqX2Prb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2Prb.setStatus('current')
hoFailPrepIncIntraFreqX2HandoverRestrictList = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2HandoverRestrictList.setStatus('current')
hoFailPrepIncIntraFreqX2CellBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2CellBlock.setStatus('current')
hoFailPrepIncIntraFreqX2Tpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2Tpc.setStatus('current')
hoFailPrepIncIntraFreqX2DrbID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2DrbID.setStatus('current')
hoFailPrepIncIntraFreqX2SPS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2SPS.setStatus('current')
hoFailPrepIncIntraFreqX2LoChID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2LoChID.setStatus('current')
hoFailPrepIncIntraFreqX2Pucch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2Pucch.setStatus('current')
hoFailPrepIncIntraFreqX2Srs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2Srs.setStatus('current')
hoFailPrepIncIntraFreqX2PerEncodeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2PerEncodeFail.setStatus('current')
hoFailPrepIncIntraFreqX2PerDecodeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2PerDecodeFail.setStatus('current')
hoFailPrepIncIntraFreqX2SecurityFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2SecurityFailure.setStatus('current')
hoFailPrepIncIntraFreqX2ParameterError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2ParameterError.setStatus('current')
hoFailPrepIncIntraFreqX2Others = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqX2Others.setStatus('current')
hoFailPrepIncInterFreqX2MaxUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2MaxUeNum.setStatus('current')
hoFailPrepIncInterFreqX2CellOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2CellOverLoad.setStatus('current')
hoFailPrepIncInterFreqX2Prb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2Prb.setStatus('current')
hoFailPrepIncInterFreqX2HandoverRestrictList = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2HandoverRestrictList.setStatus('current')
hoFailPrepIncInterFreqX2CellBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2CellBlock.setStatus('current')
hoFailPrepIncInterFreqX2Tpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2Tpc.setStatus('current')
hoFailPrepIncInterFreqX2DrbID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2DrbID.setStatus('current')
hoFailPrepIncInterFreqX2SPS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2SPS.setStatus('current')
hoFailPrepIncInterFreqX2LoChID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2LoChID.setStatus('current')
hoFailPrepIncInterFreqX2Pucch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2Pucch.setStatus('current')
hoFailPrepIncInterFreqX2Srs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2Srs.setStatus('current')
hoFailPrepIncInterFreqX2PerEncodeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2PerEncodeFail.setStatus('current')
hoFailPrepIncInterFreqX2PerDecodeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2PerDecodeFail.setStatus('current')
hoFailPrepIncInterFreqX2SecurityFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2SecurityFailure.setStatus('current')
hoFailPrepIncInterFreqX2ParameterError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2ParameterError.setStatus('current')
hoFailPrepIncInterFreqX2Others = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqX2Others.setStatus('current')
hoFailOutIntraFreqX2SourceFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutIntraFreqX2SourceFail.setStatus('current')
hoFailOutInterFreqX2SourceFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutInterFreqX2SourceFail.setStatus('current')
hoAttOutExecIntraFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutExecIntraFreqX2.setStatus('current')
hoAttOutExecInterFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutExecInterFreqX2.setStatus('current')
hoAttOutPrepIntraFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutPrepIntraFreqX2.setStatus('current')
hoAttOutPrepInterFreqX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutPrepInterFreqX2.setStatus('current')
hoFailPrepOutIntraFreqX2SourceFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutIntraFreqX2SourceFail.setStatus('current')
hoFailPrepOutInterFreqX2SourceFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 8, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutInterFreqX2SourceFail.setStatus('current')
handOverProcIntraEnbTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9), )
if mibBuilder.loadTexts: handOverProcIntraEnbTable.setStatus('current')
handOverProcIntraEnbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "handOverProcIntraEnbLcId"))
if mibBuilder.loadTexts: handOverProcIntraEnbEntry.setStatus('current')
handOverProcIntraEnbLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: handOverProcIntraEnbLcId.setStatus('current')
handOverProcIntraEnbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: handOverProcIntraEnbRowStatus.setStatus('current')
hoAttIncIntraFreqInterCellIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttIncIntraFreqInterCellIntraEnb.setStatus('current')
hoSuccIncIntraFreqInterCellIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccIncIntraFreqInterCellIntraEnb.setStatus('current')
hoAttIncInterFreqInterCellIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttIncInterFreqInterCellIntraEnb.setStatus('current')
hoSuccIncInterFreqInterCellIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccIncInterFreqInterCellIntraEnb.setStatus('current')
hoAttOutIntraFreqInterCellIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutIntraFreqInterCellIntraEnb.setStatus('current')
hoSuccOutIntraFreqInterCellIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutIntraFreqInterCellIntraEnb.setStatus('current')
hoAttOutInterFreqInterCellIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutInterFreqInterCellIntraEnb.setStatus('current')
hoSuccOutInterFreqInterCellIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutInterFreqInterCellIntraEnb.setStatus('current')
hoFailIncIntraFreqInterCellIntraEnbMaxUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncIntraFreqInterCellIntraEnbMaxUeNum.setStatus('current')
hoFailIncIntraFreqInterCellIntraEnbOL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncIntraFreqInterCellIntraEnbOL.setStatus('current')
hoFailIncIntraFreqInterCellIntraEnbPrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncIntraFreqInterCellIntraEnbPrb.setStatus('current')
hoFailIncIntraFreqInterCellIntraEnbCellBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncIntraFreqInterCellIntraEnbCellBlock.setStatus('current')
hoFailIncIntraFreqInterCellIntraEnbTpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncIntraFreqInterCellIntraEnbTpc.setStatus('current')
hoFailIncIntraFreqInterCellIntraEnbDrbID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncIntraFreqInterCellIntraEnbDrbID.setStatus('current')
hoFailIncIntraFreqInterCellIntraEnbSPS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncIntraFreqInterCellIntraEnbSPS.setStatus('current')
hoFailIncIntraFreqInterCellIntraEnbLoChID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncIntraFreqInterCellIntraEnbLoChID.setStatus('current')
hoFailIncIntraFreqInterCellIntraEnbPucch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncIntraFreqInterCellIntraEnbPucch.setStatus('current')
hoFailIncIntraFreqInterCellIntraEnbSrs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncIntraFreqInterCellIntraEnbSrs.setStatus('current')
hoFailIncIntraFreqInterCellIntraEnbSrcNoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncIntraFreqInterCellIntraEnbSrcNoRsp.setStatus('current')
hoFailIncIntraFreqInterCellIntraEnbSecFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncIntraFreqInterCellIntraEnbSecFail.setStatus('current')
hoFailIncIntraFreqInterCellIntraEnbOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncIntraFreqInterCellIntraEnbOthers.setStatus('current')
hoFailIncInterFreqInterCellIntraEnbMaxUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncInterFreqInterCellIntraEnbMaxUeNum.setStatus('current')
hoFailIncInterFreqInterCellIntraEnbOL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncInterFreqInterCellIntraEnbOL.setStatus('current')
hoFailIncInterFreqInterCellIntraEnbPrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncInterFreqInterCellIntraEnbPrb.setStatus('current')
hoFailIncInterFreqInterCellIntraEnbCellBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncInterFreqInterCellIntraEnbCellBlock.setStatus('current')
hoFailIncInterFreqInterCellIntraEnbTpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncInterFreqInterCellIntraEnbTpc.setStatus('current')
hoFailIncInterFreqInterCellIntraEnbDrbID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncInterFreqInterCellIntraEnbDrbID.setStatus('current')
hoFailIncInterFreqInterCellIntraEnbSPS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncInterFreqInterCellIntraEnbSPS.setStatus('current')
hoFailIncInterFreqInterCellIntraEnbLoChID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncInterFreqInterCellIntraEnbLoChID.setStatus('current')
hoFailIncInterFreqInterCellIntraEnbPucch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncInterFreqInterCellIntraEnbPucch.setStatus('current')
hoFailIncInterFreqInterCellIntraEnbSrs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncInterFreqInterCellIntraEnbSrs.setStatus('current')
hoFailIncInterFreqInterCellIntraEnbSrcNoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncInterFreqInterCellIntraEnbSrcNoRsp.setStatus('current')
hoFailIncInterFreqInterCellIntraEnbSecFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncInterFreqInterCellIntraEnbSecFail.setStatus('current')
hoFailIncInterFreqInterCellIntraEnbOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailIncInterFreqInterCellIntraEnbOthers.setStatus('current')
hoFailOutIntraFreqInterCellIntraEnbTarExcNoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutIntraFreqInterCellIntraEnbTarExcNoRsp.setStatus('current')
hoFailOutIntraFreqInterCellIntraEnbPerEncFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutIntraFreqInterCellIntraEnbPerEncFail.setStatus('current')
hoFailOutInterFreqInterCellIntraEnbTarExcNoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutInterFreqInterCellIntraEnbTarExcNoRsp.setStatus('current')
hoFailOutInterFreqInterCellIntraEnbPerEncFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutInterFreqInterCellIntraEnbPerEncFail.setStatus('current')
hoAttOutIntraFreqIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutIntraFreqIntraEnb.setStatus('current')
hoAttOutInterFreqIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutInterFreqIntraEnb.setStatus('current')
hoSuccPrepOutIntraFreqIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepOutIntraFreqIntraEnb.setStatus('current')
hoSuccPrepOutInterFreqIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepOutInterFreqIntraEnb.setStatus('current')
hoAttIncIntraFreqIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttIncIntraFreqIntraEnb.setStatus('current')
hoAttIncInterFreqIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttIncInterFreqIntraEnb.setStatus('current')
hoSuccPrepIncIntraFreqIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepIncIntraFreqIntraEnb.setStatus('current')
hoSuccPrepIncInterFreqIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepIncInterFreqIntraEnb.setStatus('current')
hoFailPrepIncIntraFreqIntraEnbMaxUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqIntraEnbMaxUeNum.setStatus('current')
hoFailPrepIncIntraFreqIntraEnbCellOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqIntraEnbCellOverLoad.setStatus('current')
hoFailPrepIncIntraFreqIntraEnbPrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqIntraEnbPrb.setStatus('current')
hoFailPrepIncIntraFreqIntraEnbHORestrictList = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqIntraEnbHORestrictList.setStatus('current')
hoFailPrepIncIntraFreqIntraEnbCellBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqIntraEnbCellBlock.setStatus('current')
hoFailPrepIncIntraFreqIntraEnbTpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqIntraEnbTpc.setStatus('current')
hoFailPrepIncIntraFreqIntraEnbDrbID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqIntraEnbDrbID.setStatus('current')
hoFailPrepIncIntraFreqIntraEnbSPS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqIntraEnbSPS.setStatus('current')
hoFailPrepIncIntraFreqIntraEnbLoChID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqIntraEnbLoChID.setStatus('current')
hoFailPrepIncIntraFreqIntraEnbPucch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqIntraEnbPucch.setStatus('current')
hoFailPrepIncIntraFreqIntraEnbSrs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqIntraEnbSrs.setStatus('current')
hoFailPrepIncIntraFreqIntraEnbParameterError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqIntraEnbParameterError.setStatus('current')
hoFailPrepIncIntraFreqIntraEnbOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncIntraFreqIntraEnbOthers.setStatus('current')
hoFailPrepIncInterFreqIntraEnbMaxUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqIntraEnbMaxUeNum.setStatus('current')
hoFailPrepIncInterFreqIntraEnbCellOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqIntraEnbCellOverLoad.setStatus('current')
hoFailPrepIncInterFreqIntraEnbPrb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqIntraEnbPrb.setStatus('current')
hoFailPrepIncInterFreqIntraEnbHORestrictList = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqIntraEnbHORestrictList.setStatus('current')
hoFailPrepIncInterFreqIntraEnbCellBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqIntraEnbCellBlock.setStatus('current')
hoFailPrepIncInterFreqIntraEnbTpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqIntraEnbTpc.setStatus('current')
hoFailPrepIncInterFreqIntraEnbDrbID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqIntraEnbDrbID.setStatus('current')
hoFailPrepIncInterFreqIntraEnbSPS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqIntraEnbSPS.setStatus('current')
hoFailPrepIncInterFreqIntraEnbLoChID = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqIntraEnbLoChID.setStatus('current')
hoFailPrepIncInterFreqIntraEnbPucch = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqIntraEnbPucch.setStatus('current')
hoFailPrepIncInterFreqIntraEnbSrs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqIntraEnbSrs.setStatus('current')
hoFailPrepIncInterFreqIntraEnbParameterError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqIntraEnbParameterError.setStatus('current')
hoFailPrepIncInterFreqIntraEnbOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 9, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepIncInterFreqIntraEnbOthers.setStatus('current')
ueAccNumTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 10), )
if mibBuilder.loadTexts: ueAccNumTable.setStatus('current')
ueAccNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 10, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ueAccNumLcId"))
if mibBuilder.loadTexts: ueAccNumEntry.setStatus('current')
ueAccNumLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: ueAccNumLcId.setStatus('current')
ueAccNumRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 10, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueAccNumRowStatus.setStatus('current')
ueaccPreambleSendNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueaccPreambleSendNum.setStatus('current')
ueaccPreambleContentNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueaccPreambleContentNum.setStatus('current')
ueaccPreambleSuccNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueaccPreambleSuccNum.setStatus('current')
intraRATInterCellHOTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11), )
if mibBuilder.loadTexts: intraRATInterCellHOTable.setStatus('current')
intraRATInterCellHOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "intraRATInterCellHOLcId"))
if mibBuilder.loadTexts: intraRATInterCellHOEntry.setStatus('current')
intraRATInterCellHOLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: intraRATInterCellHOLcId.setStatus('current')
intraRATInterCellHORowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraRATInterCellHORowStatus.setStatus('current')
hoOutAttIntraFreqRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutAttIntraFreqRadio.setStatus('current')
hoSuccOutIntraFreqRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutIntraFreqRadio.setStatus('current')
hoOutAttInterFreqRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutAttInterFreqRadio.setStatus('current')
hoSuccOutInterFreqRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutInterFreqRadio.setStatus('current')
hoOutAttIntraFreqLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutAttIntraFreqLoadBalance.setStatus('current')
hoSuccOutIntraFreqLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutIntraFreqLoadBalance.setStatus('current')
hoOutAttInterFreqLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutAttInterFreqLoadBalance.setStatus('current')
hoSuccOutInterFreqLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutInterFreqLoadBalance.setStatus('current')
hoOutAttIntraFreqOMC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutAttIntraFreqOMC.setStatus('current')
hoSuccOutIntraFreqOMC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutIntraFreqOMC.setStatus('current')
hoOutAttInterFreqOMC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutAttInterFreqOMC.setStatus('current')
hoSuccOutInterFreqOMC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutInterFreqOMC.setStatus('current')
hoAttOutIntraFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutIntraFreq.setStatus('current')
hoAttOutInterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutInterFreq.setStatus('current')
hoAttOutInterEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutInterEnb.setStatus('current')
hoFailOutS1Prep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutS1Prep.setStatus('current')
hoFailOutX2Prep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutX2Prep.setStatus('current')
hoFailOutIntraEnbPrep = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutIntraEnbPrep.setStatus('current')
hoFailOutRRCReConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutRRCReConn.setStatus('current')
hoFailOutHoExeTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutHoExeTimeOut.setStatus('current')
hoFailOutOther = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutOther.setStatus('current')
hoCoverHoleSum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoCoverHoleSum.setStatus('current')
hoOutAttIntraFreqService = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutAttIntraFreqService.setStatus('current')
hoSuccOutIntraFreqService = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutIntraFreqService.setStatus('current')
hoOutAttInterFreqService = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutAttInterFreqService.setStatus('current')
hoSuccOutInterFreqService = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutInterFreqService.setStatus('current')
hoHoPreAttRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoHoPreAttRadio.setStatus('current')
hoHoPreSuccRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoHoPreSuccRadio.setStatus('current')
hoHoPreAttLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoHoPreAttLB.setStatus('current')
hoHoPreSuccLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoHoPreSuccLB.setStatus('current')
hoHoPreAttSV = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoHoPreAttSV.setStatus('current')
hoHoPreSuccSV = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoHoPreSuccSV.setStatus('current')
hoHoPreAttOMC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoHoPreAttOMC.setStatus('current')
hoHoPreSuccOMC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoHoPreSuccOMC.setStatus('current')
hoFailOutHoPrepTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 11, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutHoPrepTimeOut.setStatus('current')
s1hoCancelProcInterEnbTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 12), )
if mibBuilder.loadTexts: s1hoCancelProcInterEnbTable.setStatus('current')
s1hoCancelProcInterEnbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 12, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "s1hoCancelProcInterEnbLcId"))
if mibBuilder.loadTexts: s1hoCancelProcInterEnbEntry.setStatus('current')
s1hoCancelProcInterEnbLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: s1hoCancelProcInterEnbLcId.setStatus('current')
s1hoCancelProcInterEnbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 12, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1hoCancelProcInterEnbRowStatus.setStatus('current')
hoCancelIntraFreqIntraEnbS1HandOverSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoCancelIntraFreqIntraEnbS1HandOverSucc.setStatus('current')
hoCancelIntraFreqInterEnbS1HandOverFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoCancelIntraFreqInterEnbS1HandOverFail.setStatus('current')
hoCancelAckIntraFreqInterEnbS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoCancelAckIntraFreqInterEnbS1.setStatus('current')
hoCancelInterFreqInterEnbS1HandOverSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoCancelInterFreqInterEnbS1HandOverSucc.setStatus('current')
hoCancelInterFreqInterEnbS1HandOverFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoCancelInterFreqInterEnbS1HandOverFail.setStatus('current')
hoCancelAckInterFreqInterEnbS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoCancelAckInterFreqInterEnbS1.setStatus('current')
x2hoCancelProcInterEnbTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 13), )
if mibBuilder.loadTexts: x2hoCancelProcInterEnbTable.setStatus('current')
x2hoCancelProcInterEnbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 13, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "x2hoCancelProcInterEnbLcId"))
if mibBuilder.loadTexts: x2hoCancelProcInterEnbEntry.setStatus('current')
x2hoCancelProcInterEnbLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: x2hoCancelProcInterEnbLcId.setStatus('current')
x2hoCancelProcInterEnbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 13, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x2hoCancelProcInterEnbRowStatus.setStatus('current')
hoCancelIntraFreqIntraEnbX2HandOverSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoCancelIntraFreqIntraEnbX2HandOverSucc.setStatus('current')
hoCancelIntraFreqIntraEnbX2HandOverFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoCancelIntraFreqIntraEnbX2HandOverFail.setStatus('current')
hoCancelInterFreqInterEnbX2HandOverSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoCancelInterFreqInterEnbX2HandOverSucc.setStatus('current')
hoCancelInterFreqInterEnbX2HandOverFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoCancelInterFreqInterEnbX2HandOverFail.setStatus('current')
handOverInterRATTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14), )
if mibBuilder.loadTexts: handOverInterRATTable.setStatus('current')
handOverInterRATEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "handOverInterRATLcId"))
if mibBuilder.loadTexts: handOverInterRATEntry.setStatus('current')
handOverInterRATLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: handOverInterRATLcId.setStatus('current')
handOverInterRATRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: handOverInterRATRowStatus.setStatus('current')
irathoAttOutGprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoAttOutGprs.setStatus('current')
irathoSuccOutGprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoSuccOutGprs.setStatus('current')
irathoFailOutGprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailOutGprs.setStatus('current')
irathoAttOutTdscdma = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoAttOutTdscdma.setStatus('current')
irathoSuccOutUtran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoSuccOutUtran.setStatus('current')
irathoFailOutTdscdma = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailOutTdscdma.setStatus('current')
irathoAttOutCdma2000 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoAttOutCdma2000.setStatus('current')
irathoAttIncGprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoAttIncGprs.setStatus('current')
irathoSuccIncGprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoSuccIncGprs.setStatus('current')
irathoAttIncTdscdma = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoAttIncTdscdma.setStatus('current')
irathoSuccIncTdscdma = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoSuccIncTdscdma.setStatus('current')
irathoAttPrepOutGprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoAttPrepOutGprs.setStatus('current')
irathoSuccPrepOutGprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoSuccPrepOutGprs.setStatus('current')
irathoFailPrepOutGprsOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepOutGprsOverTime.setStatus('current')
irathoFailPrepOutGprsSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepOutGprsSyntaxError.setStatus('current')
irathoFailPrepOutGprsTgtEpcEnbSystemFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepOutGprsTgtEpcEnbSystemFailure.setStatus('current')
irathoFailPrepOutGprsOtherFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepOutGprsOtherFailure.setStatus('current')
irathoAttPrepOutUtran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoAttPrepOutUtran.setStatus('current')
irathoSuccPrepOutUtran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoSuccPrepOutUtran.setStatus('current')
irathoFailPrepOutUtranOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepOutUtranOverTime.setStatus('current')
irathoFailPrepOutUtranSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepOutUtranSyntaxError.setStatus('current')
irathoFailPrepOutUtranTgtEpcEnbSystemFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepOutUtranTgtEpcEnbSystemFailure.setStatus('current')
irathoFailPrepOutUtranOtherFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepOutUtranOtherFailure.setStatus('current')
irathoAttPrepIncGprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoAttPrepIncGprs.setStatus('current')
irathoSuccPrepIncGprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoSuccPrepIncGprs.setStatus('current')
irathoFailPrepIncGprsResourceAllocFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepIncGprsResourceAllocFailure.setStatus('current')
irathoFailPrepIncGprsCacFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepIncGprsCacFailure.setStatus('current')
irathoFailPrepIncGprsInstFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepIncGprsInstFailure.setStatus('current')
irathoFailPrepIncGprsPerFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepIncGprsPerFailure.setStatus('current')
irathoFailPrepIncGprsOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepIncGprsOthers.setStatus('current')
irathoAttPrepIncUtran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoAttPrepIncUtran.setStatus('current')
irathoSuccPrepIncUtran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoSuccPrepIncUtran.setStatus('current')
irathoFailPrepIncUtranResourceAllocFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepIncUtranResourceAllocFailure.setStatus('current')
irathoFailPrepIncUtranCacFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepIncUtranCacFailure.setStatus('current')
irathoFailPrepIncUtranInstFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepIncUtranInstFailure.setStatus('current')
irathoFailPrepIncUtranPerFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepIncUtranPerFailure.setStatus('current')
irathoFailPrepIncUtranOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 14, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoFailPrepIncUtranOthers.setStatus('current')
douAdjcHandOverProcedureTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15), )
if mibBuilder.loadTexts: douAdjcHandOverProcedureTable.setStatus('current')
douAdjcHandOverProcedureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "douAdjcHandOverProcedureCellAdjCellLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "douAdjcHandOverProcedureCellAdjCellIndex"))
if mibBuilder.loadTexts: douAdjcHandOverProcedureEntry.setStatus('current')
douAdjcHandOverProcedureCellAdjCellLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: douAdjcHandOverProcedureCellAdjCellLcId.setStatus('current')
douAdjcHandOverProcedureCellAdjCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: douAdjcHandOverProcedureCellAdjCellIndex.setStatus('current')
douAdjcHandOverProcedureRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: douAdjcHandOverProcedureRowStatus.setStatus('current')
hoOutAttMeasure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutAttMeasure.setStatus('current')
hoOutSuccMeasure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutSuccMeasure.setStatus('current')
hoOutAttLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutAttLoadBalance.setStatus('current')
hoOutSuccLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutSuccLoadBalance.setStatus('current')
hoOutFailTooEarly = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailTooEarly.setStatus('current')
hoOutFailTooLate = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailTooLate.setStatus('current')
hoOutFailToWrongCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailToWrongCell.setStatus('current')
hoOutSuccMro = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutSuccMro.setStatus('current')
hoOutFailPingpong = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailPingpong.setStatus('current')
hoHoPreAttTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoHoPreAttTarget.setStatus('current')
hoHoPreSuccTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoHoPreSuccTarget.setStatus('current')
hoOutPrepFailCauseTCellNoResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutPrepFailCauseTCellNoResponse.setStatus('current')
hoOutPrepFailCauseHOPrepFailureMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutPrepFailCauseHOPrepFailureMsg.setStatus('current')
hoOutFailTooEarlyType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailTooEarlyType1.setStatus('current')
hoOutFailTooEarlyType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailTooEarlyType2.setStatus('current')
hoOutFailTooLateType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailTooLateType1.setStatus('current')
hoOutFailTooLateType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailTooLateType2.setStatus('current')
hoOutFailToWrongCellType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailToWrongCellType1.setStatus('current')
hoOutFailToWrongCellType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailToWrongCellType2.setStatus('current')
hoAdjCellDiscvNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAdjCellDiscvNum.setStatus('current')
hoOutAttMLBMeasure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutAttMLBMeasure.setStatus('current')
hoOutSuccMLBMro = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutSuccMLBMro.setStatus('current')
hoOutFailMLBPingpong = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailMLBPingpong.setStatus('current')
hoOutFailMLBTooEarlyType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailMLBTooEarlyType1.setStatus('current')
hoOutFailMLBTooEarlyType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailMLBTooEarlyType2.setStatus('current')
hoOutFailMLBTooLateType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailMLBTooLateType1.setStatus('current')
hoOutFailMLBTooLateType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailMLBTooLateType2.setStatus('current')
hoOutFailMLBToWrongCellType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailMLBToWrongCellType1.setStatus('current')
hoOutFailMLBToWrongCellType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutFailMLBToWrongCellType2.setStatus('current')
hoHoPreAttQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoHoPreAttQci1.setStatus('current')
hoHoPreSuccQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoHoPreSuccQci1.setStatus('current')
hoOutAttQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutAttQci1.setStatus('current')
hoOutSuccQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutSuccQci1.setStatus('current')
hoNcHoPreAttM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoNcHoPreAttM.setStatus('current')
hoNcHoPreSuccM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoNcHoPreSuccM.setStatus('current')
hoNcHoPreAttLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoNcHoPreAttLB.setStatus('current')
hoNcHoPreSuccLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoNcHoPreSuccLB.setStatus('current')
hoNcHoPreAttS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoNcHoPreAttS.setStatus('current')
hoNcHoPreSuccS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoNcHoPreSuccS.setStatus('current')
hoOutAttS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutAttS.setStatus('current')
hoOutSuccS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 15, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoOutSuccS.setStatus('current')
erabInterWithHandOverTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 16), )
if mibBuilder.loadTexts: erabInterWithHandOverTable.setStatus('current')
erabInterWithHandOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 16, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "erabInterWithHandOverLcId"))
if mibBuilder.loadTexts: erabInterWithHandOverEntry.setStatus('current')
erabInterWithHandOverLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: erabInterWithHandOverLcId.setStatus('current')
erabInterWithHandOverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 16, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabInterWithHandOverRowStatus.setStatus('current')
rrcErabSetupInteractWithHo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcErabSetupInteractWithHo.setStatus('current')
rrcRecofigInteractWithHoErabFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRecofigInteractWithHoErabFail.setStatus('current')
rrcErabModInteractWithHo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcErabModInteractWithHo.setStatus('current')
rrcErabDelInteractWithHo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcErabDelInteractWithHo.setStatus('current')
vipSafeguardTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 17), )
if mibBuilder.loadTexts: vipSafeguardTable.setStatus('current')
vipSafeguardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 17, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "vipSafeguardLcId"))
if mibBuilder.loadTexts: vipSafeguardEntry.setStatus('current')
vipSafeguardLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: vipSafeguardLcId.setStatus('current')
vipSafeguardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 17, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipSafeguardRowStatus.setStatus('current')
rrcReduceCrsPowerReq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcReduceCrsPowerReq.setStatus('current')
rrcReduceCrsPowerSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcReduceCrsPowerSucc.setStatus('current')
rrcRecoverCrsPowerRevRedPowReq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRecoverCrsPowerRevRedPowReq.setStatus('current')
rrcRecoverCrsPowerVipIn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRecoverCrsPowerVipIn.setStatus('current')
rrcRecoverCrsPowerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRecoverCrsPowerTimeOut.setStatus('current')
pagingProcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 18), )
if mibBuilder.loadTexts: pagingProcTable.setStatus('current')
pagingProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 18, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pagingProcLcId"))
if mibBuilder.loadTexts: pagingProcEntry.setStatus('current')
pagingProcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pagingProcLcId.setStatus('current')
pagingProcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 18, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pagingProcRowStatus.setStatus('current')
pagingPagReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pagingPagReceived.setStatus('current')
pagingCongCellPaging = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pagingCongCellPaging.setStatus('current')
pagingPagDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pagingPagDiscarded.setStatus('current')
pagingPagUu = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pagingPagUu.setStatus('current')
cellAvailCapTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 19), )
if mibBuilder.loadTexts: cellAvailCapTable.setStatus('current')
cellAvailCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 19, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellAvailCapLcId"))
if mibBuilder.loadTexts: cellAvailCapEntry.setStatus('current')
cellAvailCapLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellAvailCapLcId.setStatus('current')
cellAvailCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 19, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAvailCapRowStatus.setStatus('current')
capacityAvailableUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capacityAvailableUl.setStatus('current')
capacityAvailableDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capacityAvailableDl.setStatus('current')
erabRelHoProcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 20), )
if mibBuilder.loadTexts: erabRelHoProcTable.setStatus('current')
erabRelHoProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 20, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "erabRelHoProcLcId"))
if mibBuilder.loadTexts: erabRelHoProcEntry.setStatus('current')
erabRelHoProcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: erabRelHoProcLcId.setStatus('current')
erabRelHoProcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 20, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelHoProcRowStatus.setStatus('current')
erabHoFailQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabHoFailQci1.setStatus('current')
erabHoFailQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabHoFailQci2.setStatus('current')
erabHoFailQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabHoFailQci3.setStatus('current')
erabHoFailQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabHoFailQci4.setStatus('current')
erabHoFailQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabHoFailQci5.setStatus('current')
erabHoFailQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 20, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabHoFailQci6.setStatus('current')
erabHoFailQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 20, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabHoFailQci7.setStatus('current')
erabHoFailQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 20, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabHoFailQci8.setStatus('current')
erabHoFailQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 20, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabHoFailQci9.setStatus('current')
holbcProcInterEnbTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21), )
if mibBuilder.loadTexts: holbcProcInterEnbTable.setStatus('current')
holbcProcInterEnbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "holbcProcInterEnbLcId"))
if mibBuilder.loadTexts: holbcProcInterEnbEntry.setStatus('current')
holbcProcInterEnbLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: holbcProcInterEnbLcId.setStatus('current')
holbcProcInterEnbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: holbcProcInterEnbRowStatus.setStatus('current')
hoInterEnbX2LBCPrepOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoInterEnbX2LBCPrepOut.setStatus('current')
hoInterEnbX2LBCPrepOutSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoInterEnbX2LBCPrepOutSucc.setStatus('current')
hoInterEnbX2LBCOutSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoInterEnbX2LBCOutSucc.setStatus('current')
hoInterEnbX2LBCOutAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoInterEnbX2LBCOutAtt.setStatus('current')
hoInterEnbX2LBCOutCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoInterEnbX2LBCOutCancel.setStatus('current')
hoIntraEnbLBCOutAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoIntraEnbLBCOutAtt.setStatus('current')
hoInterEnbX2LBCPrepIn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoInterEnbX2LBCPrepIn.setStatus('current')
hoInterEnbX2LBCPrepInSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoInterEnbX2LBCPrepInSucc.setStatus('current')
hoInterEnbX2LBCInSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoInterEnbX2LBCInSucc.setStatus('current')
hoIntraEnbLBCOutSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoIntraEnbLBCOutSucc.setStatus('current')
hoInterEnbX2LBCInCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoInterEnbX2LBCInCancel.setStatus('current')
hoIntraSysVolteLBCOutAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoIntraSysVolteLBCOutAtt.setStatus('current')
hoIntraSysVolteLBCOutSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoIntraSysVolteLBCOutSucc.setStatus('current')
hoInterSysVolteLBCOutAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoInterSysVolteLBCOutAtt.setStatus('current')
hoInterSysVolteLBCOutSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoInterSysVolteLBCOutSucc.setStatus('current')
lbcPrbMeasurementControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbcPrbMeasurementControl.setStatus('current')
lbcPrbMeasurementReport = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbcPrbMeasurementReport.setStatus('current')
lbcPrbPeriodNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbcPrbPeriodNum.setStatus('current')
lbcPrbHighLoadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbcPrbHighLoadTime.setStatus('current')
lbcHoOutPRBUsageUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbcHoOutPRBUsageUl.setStatus('current')
lbcHoOutPRBUsageDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbcHoOutPRBUsageDl.setStatus('current')
lbcUserMeasurementControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbcUserMeasurementControl.setStatus('current')
lbcUserMeasurementReport = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbcUserMeasurementReport.setStatus('current')
lbcUserPeriodNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbcUserPeriodNum.setStatus('current')
lbcUserHighLoadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 21, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbcUserHighLoadTime.setStatus('current')
handOverProcTimeInterEnbTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 22), )
if mibBuilder.loadTexts: handOverProcTimeInterEnbTable.setStatus('current')
handOverProcTimeInterEnbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 22, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "handOverProcTimeInterEnbLcId"))
if mibBuilder.loadTexts: handOverProcTimeInterEnbEntry.setStatus('current')
handOverProcTimeInterEnbLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: handOverProcTimeInterEnbLcId.setStatus('current')
handOverProcTimeInterEnbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 22, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: handOverProcTimeInterEnbRowStatus.setStatus('current')
hoAvgTimeInterEnbS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAvgTimeInterEnbS1.setStatus('current')
hoAvgTimeInterEnbX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAvgTimeInterEnbX2.setStatus('current')
irathoAvgTimeOutGeran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoAvgTimeOutGeran.setStatus('current')
irathoAvgTimeOutUtran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoAvgTimeOutUtran.setStatus('current')
irathoAvgTimeOutExecGeran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 22, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irathoAvgTimeOutExecGeran.setStatus('current')
lteFddTddHOTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23), )
if mibBuilder.loadTexts: lteFddTddHOTable.setStatus('current')
lteFddTddHOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "lteFddTddHOLcId"))
if mibBuilder.loadTexts: lteFddTddHOEntry.setStatus('current')
lteFddTddHOLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: lteFddTddHOLcId.setStatus('current')
lteFddTddHORowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lteFddTddHORowStatus.setStatus('current')
hoAttOutFddTddS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutFddTddS1.setStatus('current')
hoSuccPrepOutFddTddS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepOutFddTddS1.setStatus('current')
hoSuccOutFddTddS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutFddTddS1.setStatus('current')
hoAttOutFddTddX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutFddTddX2.setStatus('current')
hoSuccPrepOutFddTddX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepOutFddTddX2.setStatus('current')
hoSuccOutFddTddX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutFddTddX2.setStatus('current')
hoAttIncFddTddS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttIncFddTddS1.setStatus('current')
hoSuccPrepIncFddTddS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepIncFddTddS1.setStatus('current')
hoSuccIncFddTddS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccIncFddTddS1.setStatus('current')
hoAttIncFddTddX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttIncFddTddX2.setStatus('current')
hoSuccPrepIncFddTddX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccPrepIncFddTddX2.setStatus('current')
hoSuccIncFddTddX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccIncFddTddX2.setStatus('current')
hoAttOutFddTddIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutFddTddIntraEnb.setStatus('current')
hoSuccOutFddTddIntraEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 23, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutFddTddIntraEnb.setStatus('current')
voLTEHandOverInTDLTETable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24), )
if mibBuilder.loadTexts: voLTEHandOverInTDLTETable.setStatus('current')
voLTEHandOverInTDLTEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "voLTEHandOverInTDLTELcId"))
if mibBuilder.loadTexts: voLTEHandOverInTDLTEEntry.setStatus('current')
voLTEHandOverInTDLTELcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: voLTEHandOverInTDLTELcId.setStatus('current')
voLTEHandOverInTDLTERowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voLTEHandOverInTDLTERowStatus.setStatus('current')
volteHOAttOutInterEnbS1IntraFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutInterEnbS1IntraFreq.setStatus('current')
volteHOAttOutInterEnbS1InterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutInterEnbS1InterFreq.setStatus('current')
volteHOAttOutInterEnbS1IntraFreqN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutInterEnbS1IntraFreqN.setStatus('current')
volteHOAttOutInterEnbS1InterFreqN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutInterEnbS1InterFreqN.setStatus('current')
volteHOSuccOutPrepInterEnbS1IntraFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOSuccOutPrepInterEnbS1IntraFreq.setStatus('current')
volteHOSuccOutPrepInterEnbS1InterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOSuccOutPrepInterEnbS1InterFreq.setStatus('current')
volteHOAttOutExecInterEnbS1IntraFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutExecInterEnbS1IntraFreq.setStatus('current')
volteHOAttOutExecInterEnbS1InterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutExecInterEnbS1InterFreq.setStatus('current')
volteHOSuccOutInterEnbS1IntraFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOSuccOutInterEnbS1IntraFreq.setStatus('current')
volteHOSuccOutInterEnbS1InterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOSuccOutInterEnbS1InterFreq.setStatus('current')
volteHOCancelOutInterEnbS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOCancelOutInterEnbS1.setStatus('current')
volteHOAttOutInterEnbX2IntraFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutInterEnbX2IntraFreq.setStatus('current')
volteHOAttOutInterEnbX2InterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutInterEnbX2InterFreq.setStatus('current')
volteHOAttOutInterEnbX2IntraFreqN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutInterEnbX2IntraFreqN.setStatus('current')
volteHOAttOutInterEnbX2InterFreqN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutInterEnbX2InterFreqN.setStatus('current')
volteHOSuccOutPrepInterEnbX2IntraFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOSuccOutPrepInterEnbX2IntraFreq.setStatus('current')
volteHOSuccOutPrepInterEnbX2InterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOSuccOutPrepInterEnbX2InterFreq.setStatus('current')
volteHOAttOutExecInterEnbX2IntraFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutExecInterEnbX2IntraFreq.setStatus('current')
volteHOAttOutExecInterEnbX2InterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutExecInterEnbX2InterFreq.setStatus('current')
volteHOSuccOutInterEnbX2IntraFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOSuccOutInterEnbX2IntraFreq.setStatus('current')
volteHOSuccOutInterEnbX2InterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOSuccOutInterEnbX2InterFreq.setStatus('current')
volteHOCancelOutInterEnbX2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOCancelOutInterEnbX2.setStatus('current')
volteHOAttOutIntraEnbIntraFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutIntraEnbIntraFreq.setStatus('current')
volteHOAttOutIntraEnbInterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOAttOutIntraEnbInterFreq.setStatus('current')
volteHOSuccOutIntraEnbIntraFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOSuccOutIntraEnbIntraFreq.setStatus('current')
volteHOSuccOutIntraEnbInterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOSuccOutIntraEnbInterFreq.setStatus('current')
hoAttOutInterEnbS1IntraFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutInterEnbS1IntraFreqQci2.setStatus('current')
hoAttOutInterEnbS1InterFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutInterEnbS1InterFreqQci2.setStatus('current')
hoSuccOutPrepInterEnbS1IntraFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutPrepInterEnbS1IntraFreqQci2.setStatus('current')
hoSuccOutPrepInterEnbS1InterFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutPrepInterEnbS1InterFreqQci2.setStatus('current')
hoAttOutExecInterEnbS1IntraFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutExecInterEnbS1IntraFreqQci2.setStatus('current')
hoAttOutExecInterEnbS1InterFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutExecInterEnbS1InterFreqQci2.setStatus('current')
hoSuccOutInterEnbS1IntraFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutInterEnbS1IntraFreqQci2.setStatus('current')
hoSuccOutInterEnbS1InterFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutInterEnbS1InterFreqQci2.setStatus('current')
hoAttOutInterEnbX2IntraFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutInterEnbX2IntraFreqQci2.setStatus('current')
hoAttOutInterEnbX2InterFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutInterEnbX2InterFreqQci2.setStatus('current')
hoSuccOutPrepInterEnbX2IntraFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutPrepInterEnbX2IntraFreqQci2.setStatus('current')
hoSuccOutPrepInterEnbX2InterFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutPrepInterEnbX2InterFreqQci2.setStatus('current')
hoAttOutExecInterEnbX2IntraFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutExecInterEnbX2IntraFreqQci2.setStatus('current')
hoAttOutExecInterEnbX2InterFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutExecInterEnbX2InterFreqQci2.setStatus('current')
hoSuccOutInterEnbX2IntraFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutInterEnbX2IntraFreqQci2.setStatus('current')
hoSuccOutInterEnbX2InterFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutInterEnbX2InterFreqQci2.setStatus('current')
hoAttOutIntraEnbIntraFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutIntraEnbIntraFreqQci2.setStatus('current')
hoAttOutIntraEnbInterFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutIntraEnbInterFreqQci2.setStatus('current')
hoSuccOutIntraEnbIntraFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutIntraEnbIntraFreqQci2.setStatus('current')
hoSuccOutIntraEnbInterFreqQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutIntraEnbInterFreqQci2.setStatus('current')
volteHOFailOutPrepFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOFailOutPrepFail.setStatus('current')
volteHOFailOutPrepTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOFailOutPrepTimeOut.setStatus('current')
volteHOFailOutExecTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOFailOutExecTimeOut.setStatus('current')
volteHOFailOutRRCReConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOFailOutRRCReConn.setStatus('current')
volteHOFailOutMme = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteHOFailOutMme.setStatus('current')
hoAttOutPrepInterEnbX2Quality = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutPrepInterEnbX2Quality.setStatus('current')
hoSuccOutPrepInterEnbX2Quality = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutPrepInterEnbX2Quality.setStatus('current')
hoSuccOutInterEnbX2Quality = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutInterEnbX2Quality.setStatus('current')
hoAttOutPrepIntraEnbQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutPrepIntraEnbQuality.setStatus('current')
hoAttOutExecIntraEnbQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutExecIntraEnbQuality.setStatus('current')
hoSuccOutIntraEnbQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutIntraEnbQuality.setStatus('current')
hoFailPrepOutX2QuaNoRRinTc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutX2QuaNoRRinTc.setStatus('current')
hoFailPrepOutX2QuaUnknownMme = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutX2QuaUnknownMme.setStatus('current')
hoFailPrepOutX2QuaOtherTf = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailPrepOutX2QuaOtherTf.setStatus('current')
hoFailOutX2QuaReEtOenbHof = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutX2QuaReEtOenbHof.setStatus('current')
hoFailOutX2QuaReEtOenbRcf = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutX2QuaReEtOenbRcf.setStatus('current')
hoFailOutX2QuaReEtOenbOther = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutX2QuaReEtOenbOther.setStatus('current')
hoFailOutX2QuaReEtPrepSetEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 24, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutX2QuaReEtPrepSetEnb.setStatus('current')
srvccTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25), )
if mibBuilder.loadTexts: srvccTable.setStatus('current')
srvccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "srvccLcId"))
if mibBuilder.loadTexts: srvccEntry.setStatus('current')
srvccLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: srvccLcId.setStatus('current')
srvccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccRowStatus.setStatus('current')
srvccAttOutGeranCoverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccAttOutGeranCoverage.setStatus('current')
srvccSuccOutPrepGeranCoverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccSuccOutPrepGeranCoverage.setStatus('current')
srvccAttOutExecGeranCoverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccAttOutExecGeranCoverage.setStatus('current')
srvccSuccOutGeranCoverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccSuccOutGeranCoverage.setStatus('current')
srvccFailPrepOutGeranCovNoResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccFailPrepOutGeranCovNoResponse.setStatus('current')
srvccFailPrepOutGeranCovTgtFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccFailPrepOutGeranCovTgtFailure.setStatus('current')
srvccFailPrepOutGeranCovOther = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccFailPrepOutGeranCovOther.setStatus('current')
srvccAttOutUtran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccAttOutUtran.setStatus('current')
srvccSuccOutPrepUtran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccSuccOutPrepUtran.setStatus('current')
srvccAttOutExecUtran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccAttOutExecUtran.setStatus('current')
srvccSuccOutUtran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccSuccOutUtran.setStatus('current')
srvccFailPrepOutUtranNoResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccFailPrepOutUtranNoResponse.setStatus('current')
srvccFailPrepOutUtranTgtFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccFailPrepOutUtranTgtFailure.setStatus('current')
srvccFailPrepOutUtranOther = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccFailPrepOutUtranOther.setStatus('current')
srvccAttOutGeranQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccAttOutGeranQuality.setStatus('current')
srvccSuccOutPrepGeranQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccSuccOutPrepGeranQuality.setStatus('current')
srvccAttOutExecGeranQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccAttOutExecGeranQuality.setStatus('current')
srvccSuccOutGeranQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccSuccOutGeranQuality.setStatus('current')
srvccFailPrepOutGeranQuaNoResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccFailPrepOutGeranQuaNoResponse.setStatus('current')
srvccFailPrepOutGeranQuaTgtFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccFailPrepOutGeranQuaTgtFailure.setStatus('current')
srvccFailPrepOutGeranQuaOther = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccFailPrepOutGeranQuaOther.setStatus('current')
srvccFailOutGeranCovMme = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccFailOutGeranCovMme.setStatus('current')
srvccFailOutGeranQuaMme = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccFailOutGeranQuaMme.setStatus('current')
srvccFailOutUtranMme = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccFailOutUtranMme.setStatus('current')
srvccAttOutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccAttOutDelay.setStatus('current')
srvccSuccOutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccSuccOutDelay.setStatus('current')
srvccOutExecPenalty = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvccOutExecPenalty.setStatus('current')
measVolteDelInterFreqMeasNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measVolteDelInterFreqMeasNum.setStatus('current')
measVolteReconfMeasNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measVolteReconfMeasNum.setStatus('current')
measVolteDelInterRatMeasNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 25, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measVolteDelInterRatMeasNum.setStatus('current')
equivalentPRBUsageTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 26), )
if mibBuilder.loadTexts: equivalentPRBUsageTable.setStatus('current')
equivalentPRBUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 26, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "equivalentPRBUsageLcId"))
if mibBuilder.loadTexts: equivalentPRBUsageEntry.setStatus('current')
equivalentPRBUsageLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: equivalentPRBUsageLcId.setStatus('current')
equivalentPRBUsageRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 26, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equivalentPRBUsageRowStatus.setStatus('current')
equivalentprbusageulmean = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 26, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equivalentprbusageulmean.setStatus('current')
equivalentprbusagedlmean = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 26, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equivalentprbusagedlmean.setStatus('current')
coMPUeNumberTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 27), )
if mibBuilder.loadTexts: coMPUeNumberTable.setStatus('current')
coMPUeNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 27, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "coMPUeNumberLcId"))
if mibBuilder.loadTexts: coMPUeNumberEntry.setStatus('current')
coMPUeNumberLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: coMPUeNumberLcId.setStatus('current')
coMPUeNumberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 27, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coMPUeNumberRowStatus.setStatus('current')
rrcMeanNbrCoMPUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 27, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcMeanNbrCoMPUl.setStatus('current')
rrcMeanNbrCoMPDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 27, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcMeanNbrCoMPDl.setStatus('current')
douAdjcHOProToGsmTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 28), )
if mibBuilder.loadTexts: douAdjcHOProToGsmTable.setStatus('current')
douAdjcHOProToGsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 28, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "douAdjcHOProToGsmCellAdjCellLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "douAdjcHOProToGsmCellAdjCellIndex"))
if mibBuilder.loadTexts: douAdjcHOProToGsmEntry.setStatus('current')
douAdjcHOProToGsmCellAdjCellLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: douAdjcHOProToGsmCellAdjCellLcId.setStatus('current')
douAdjcHOProToGsmCellAdjCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: douAdjcHOProToGsmCellAdjCellIndex.setStatus('current')
douAdjcHOProToGsmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 28, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: douAdjcHOProToGsmRowStatus.setStatus('current')
hoToGsmAttOutPerRelation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 28, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoToGsmAttOutPerRelation.setStatus('current')
hoToGsmSuccOutPrepPerRelation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 28, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoToGsmSuccOutPrepPerRelation.setStatus('current')
hoToGsmSuccOutPerRelation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 28, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoToGsmSuccOutPerRelation.setStatus('current')
eutraAdjCellMeasTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 29), )
if mibBuilder.loadTexts: eutraAdjCellMeasTable.setStatus('current')
eutraAdjCellMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 29, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "eutraAdjCellMeasCellAdjEutraCellIndex"))
if mibBuilder.loadTexts: eutraAdjCellMeasEntry.setStatus('current')
eutraAdjCellMeasCellAdjEutraCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 383)))
if mibBuilder.loadTexts: eutraAdjCellMeasCellAdjEutraCellIndex.setStatus('current')
eutraAdjCellMeasRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 29, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eutraAdjCellMeasRowStatus.setStatus('current')
hoPenaltyEutra = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 29, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoPenaltyEutra.setStatus('current')
rrcProcofRUETable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 30), )
if mibBuilder.loadTexts: rrcProcofRUETable.setStatus('current')
rrcProcofRUEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 30, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rrcProcofRUELcId"))
if mibBuilder.loadTexts: rrcProcofRUEEntry.setStatus('current')
rrcProcofRUELcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: rrcProcofRUELcId.setStatus('current')
rrcProcofRUERowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 30, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcProcofRUERowStatus.setStatus('current')
rueRRCConnReEstabAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 30, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rueRRCConnReEstabAtt.setStatus('current')
rueRRCConnReEstabSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 30, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rueRRCConnReEstabSucc.setStatus('current')
rueRRCAttConnReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 30, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rueRRCAttConnReconfig.setStatus('current')
rueRRCSuccConnReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 30, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rueRRCSuccConnReconfig.setStatus('current')
rueRRCConnMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 30, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rueRRCConnMax.setStatus('current')
highSpeedStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 31), )
if mibBuilder.loadTexts: highSpeedStatisticTable.setStatus('current')
highSpeedStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 31, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "highSpeedStatisticLcId"))
if mibBuilder.loadTexts: highSpeedStatisticEntry.setStatus('current')
highSpeedStatisticLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: highSpeedStatisticLcId.setStatus('current')
highSpeedStatisticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 31, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: highSpeedStatisticRowStatus.setStatus('current')
hsLowSpeedUserHoAttOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 31, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsLowSpeedUserHoAttOut.setStatus('current')
hsLowSpeedUserHoSuccOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 31, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsLowSpeedUserHoSuccOut.setStatus('current')
hsLowSpeedUserRelocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 31, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsLowSpeedUserRelocation.setStatus('current')
hsHighSpeedUserRelocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 31, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsHighSpeedUserRelocation.setStatus('current')
hsDirectionalHoAttOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 31, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsDirectionalHoAttOut.setStatus('current')
hsDirectionalHoSuccOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 31, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsDirectionalHoSuccOut.setStatus('current')
caPerformanceByRRCTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32), )
if mibBuilder.loadTexts: caPerformanceByRRCTable.setStatus('current')
caPerformanceByRRCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "caPerformanceByRRCLcId"))
if mibBuilder.loadTexts: caPerformanceByRRCEntry.setStatus('current')
caPerformanceByRRCLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: caPerformanceByRRCLcId.setStatus('current')
caPerformanceByRRCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caPerformanceByRRCRowStatus.setStatus('current')
rrcCAConfigNbrPCellDl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCAConfigNbrPCellDl2CC.setStatus('current')
rrcCAConfigMaxNbrPCellDl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCAConfigMaxNbrPCellDl2CC.setStatus('current')
rrcCAConfigSampNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCAConfigSampNbr.setStatus('current')
rrcCAConfigNbrPCellUl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCAConfigNbrPCellUl2CC.setStatus('current')
rrcCAConfigMaxNbrPCellUl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCAConfigMaxNbrPCellUl2CC.setStatus('current')
rrcCASCellConfigAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCASCellConfigAtt.setStatus('current')
rrcCASCellConfigSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCASCellConfigSucc.setStatus('current')
rrcCASCellReleaseAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCASCellReleaseAtt.setStatus('current')
rrcCASCellReleaseSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCASCellReleaseSucc.setStatus('current')
rrcCAConfigNbrSCellDl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCAConfigNbrSCellDl2CC.setStatus('current')
rrcCAConfigMaxNbrSCellDl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCAConfigMaxNbrSCellDl2CC.setStatus('current')
rrcCAConfigNbrSCellUl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCAConfigNbrSCellUl2CC.setStatus('current')
rrcCAConfigMaxNbrSCellUl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCAConfigMaxNbrSCellUl2CC.setStatus('current')
rrcCAConfigNbrPCellDl2CCTF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCAConfigNbrPCellDl2CCTF.setStatus('current')
rrcCAConfigMaxNbrPCellDl2CCTF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCAConfigMaxNbrPCellDl2CCTF.setStatus('current')
rrcTFCACapUserNbrFddPCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcTFCACapUserNbrFddPCell.setStatus('current')
rrcTFCACapUserMaxNbrFddPCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcTFCACapUserMaxNbrFddPCell.setStatus('current')
rrcTFCACapUserNbrTddPCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcTFCACapUserNbrTddPCell.setStatus('current')
rrcTFCACapUserMaxNbrTddPCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 32, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcTFCACapUserMaxNbrTddPCell.setStatus('current')
handOverIntraCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 33), )
if mibBuilder.loadTexts: handOverIntraCellTable.setStatus('current')
handOverIntraCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 33, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "handOverIntraCellLcId"))
if mibBuilder.loadTexts: handOverIntraCellEntry.setStatus('current')
handOverIntraCellLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: handOverIntraCellLcId.setStatus('current')
handOverIntraCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 33, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: handOverIntraCellRowStatus.setStatus('current')
hoAttOutIntraCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 33, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAttOutIntraCell.setStatus('current')
hoSuccIncIntraCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 33, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccIncIntraCell.setStatus('current')
hoFailOutIntraCellNoRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 33, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoFailOutIntraCellNoRsp.setStatus('current')
geranAdjCellMeasTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 34), )
if mibBuilder.loadTexts: geranAdjCellMeasTable.setStatus('current')
geranAdjCellMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 34, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "geranAdjCellMeasCellAdjGeranCellIndex"))
if mibBuilder.loadTexts: geranAdjCellMeasEntry.setStatus('current')
geranAdjCellMeasCellAdjGeranCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: geranAdjCellMeasCellAdjGeranCellIndex.setStatus('current')
geranAdjCellMeasRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 34, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geranAdjCellMeasRowStatus.setStatus('current')
hoPenaltyGeran = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 34, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoPenaltyGeran.setStatus('current')
rrcPresetPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35), )
if mibBuilder.loadTexts: rrcPresetPerformanceTable.setStatus('current')
rrcPresetPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rrcPresetPerformanceLcId"))
if mibBuilder.loadTexts: rrcPresetPerformanceEntry.setStatus('current')
rrcPresetPerformanceLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: rrcPresetPerformanceLcId.setStatus('current')
rrcPresetPerformanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPresetPerformanceRowStatus.setStatus('current')
rrcPreset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset1.setStatus('current')
rrcPreset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset2.setStatus('current')
rrcPreset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset3.setStatus('current')
rrcPreset4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset4.setStatus('current')
rrcPreset5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset5.setStatus('current')
rrcPreset6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset6.setStatus('current')
rrcPreset7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset7.setStatus('current')
rrcPreset8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset8.setStatus('current')
rrcPreset9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset9.setStatus('current')
rrcPreset10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset10.setStatus('current')
rrcPreset11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset11.setStatus('current')
rrcPreset12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset12.setStatus('current')
rrcPreset13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset13.setStatus('current')
rrcPreset14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset14.setStatus('current')
rrcPreset15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset15.setStatus('current')
rrcPreset16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset16.setStatus('current')
rrcPreset17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset17.setStatus('current')
rrcPreset18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset18.setStatus('current')
rrcPreset19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset19.setStatus('current')
rrcPreset20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset20.setStatus('current')
rrcPreset21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset21.setStatus('current')
rrcPreset22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset22.setStatus('current')
rrcPreset23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset23.setStatus('current')
rrcPreset24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset24.setStatus('current')
rrcPreset25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset25.setStatus('current')
rrcPreset26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset26.setStatus('current')
rrcPreset27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset27.setStatus('current')
rrcPreset28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset28.setStatus('current')
rrcPreset29 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset29.setStatus('current')
rrcPreset30 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset30.setStatus('current')
rrcPreset31 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset31.setStatus('current')
rrcPreset32 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset32.setStatus('current')
rrcPreset33 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset33.setStatus('current')
rrcPreset34 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset34.setStatus('current')
rrcPreset35 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset35.setStatus('current')
rrcPreset36 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset36.setStatus('current')
rrcPreset37 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset37.setStatus('current')
rrcPreset38 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset38.setStatus('current')
rrcPreset39 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset39.setStatus('current')
rrcPreset40 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 35, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcPreset40.setStatus('current')
rrcCAndRCheckOfCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 36), )
if mibBuilder.loadTexts: rrcCAndRCheckOfCellTable.setStatus('current')
rrcCAndRCheckOfCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 36, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rrcCAndRCheckOfCellLcId"))
if mibBuilder.loadTexts: rrcCAndRCheckOfCellEntry.setStatus('current')
rrcCAndRCheckOfCellLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: rrcCAndRCheckOfCellLcId.setStatus('current')
rrcCAndRCheckOfCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 36, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCAndRCheckOfCellRowStatus.setStatus('current')
rrcCellUeIndexRel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 36, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCellUeIndexRel.setStatus('current')
rrcCellCrntiRel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 36, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCellCrntiRel.setStatus('current')
rrcCellPucch1BcsRel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 36, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCellPucch1BcsRel.setStatus('current')
rrcCellPUCCH3Rel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 36, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCellPUCCH3Rel.setStatus('current')
rrcCellSrsRel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 36, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCellSrsRel.setStatus('current')
rrcCellCqiRel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 36, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCellCqiRel.setStatus('current')
rrcCellSrRel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 36, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCellSrRel.setStatus('current')
rrcCellUeTimeOutRel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 36, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCellUeTimeOutRel.setStatus('current')
rrcCAndRCheckOfEnb = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37))
rrcCpmCaseRelP0 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmCaseRelP0.setStatus('current')
rrcCpmCaseRelP2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmCaseRelP2.setStatus('current')
rrcCpmCaseRelP3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmCaseRelP3.setStatus('current')
rrcCpmCaseRelP4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmCaseRelP4.setStatus('current')
rrcCpmCaseRelP5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmCaseRelP5.setStatus('current')
rrcCpmCaseRelP6 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmCaseRelP6.setStatus('current')
rrcCpmCaseRelP7 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmCaseRelP7.setStatus('current')
rrcCpmCaseRelP8 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmCaseRelP8.setStatus('current')
rrcCpmCaseRelP9 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmCaseRelP9.setStatus('current')
rrcCpmCaseRelP10 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmCaseRelP10.setStatus('current')
rrcRbcCaseRelP0 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRbcCaseRelP0.setStatus('current')
rrcRbcCaseRelP2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRbcCaseRelP2.setStatus('current')
rrcRbcCaseRelP3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRbcCaseRelP3.setStatus('current')
rrcRbcCaseRelP4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRbcCaseRelP4.setStatus('current')
rrcRbcCaseRelP5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRbcCaseRelP5.setStatus('current')
rrcRbcCaseRelP6 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRbcCaseRelP6.setStatus('current')
rrcRbcCaseRelP7 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRbcCaseRelP7.setStatus('current')
rrcRbcCaseRelP8 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRbcCaseRelP8.setStatus('current')
rrcRbcCaseRelP9 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRbcCaseRelP9.setStatus('current')
rrcRbcCaseRelP10 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRbcCaseRelP10.setStatus('current')
rrcMchCaseRelP0 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcMchCaseRelP0.setStatus('current')
rrcMchCaseRelP2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcMchCaseRelP2.setStatus('current')
rrcMchCaseRelP3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcMchCaseRelP3.setStatus('current')
rrcMchCaseRelP4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcMchCaseRelP4.setStatus('current')
rrcMchCaseRelP5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcMchCaseRelP5.setStatus('current')
rrcMchCaseRelP6 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcMchCaseRelP6.setStatus('current')
rrcMchCaseRelP7 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcMchCaseRelP7.setStatus('current')
rrcMchCaseRelP8 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcMchCaseRelP8.setStatus('current')
rrcMchCaseRelP9 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcMchCaseRelP9.setStatus('current')
rrcMchCaseRelP10 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcMchCaseRelP10.setStatus('current')
rrcHcCaseRelP0 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcHcCaseRelP0.setStatus('current')
rrcHcCaseRelP2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcHcCaseRelP2.setStatus('current')
rrcHcCaseRelP3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcHcCaseRelP3.setStatus('current')
rrcHcCaseRelP4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcHcCaseRelP4.setStatus('current')
rrcHcCaseRelP5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcHcCaseRelP5.setStatus('current')
rrcHcCaseRelP6 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcHcCaseRelP6.setStatus('current')
rrcHcCaseRelP7 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcHcCaseRelP7.setStatus('current')
rrcHcCaseRelP8 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcHcCaseRelP8.setStatus('current')
rrcHcCaseRelP9 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcHcCaseRelP9.setStatus('current')
rrcHcCaseRelP10 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcHcCaseRelP10.setStatus('current')
rrcLpmCaseRelP0 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcLpmCaseRelP0.setStatus('current')
rrcLpmCaseRelP2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcLpmCaseRelP2.setStatus('current')
rrcLpmCaseRelP3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcLpmCaseRelP3.setStatus('current')
rrcLpmCaseRelP4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcLpmCaseRelP4.setStatus('current')
rrcLpmCaseRelP5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcLpmCaseRelP5.setStatus('current')
rrcLpmCaseRelP6 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcLpmCaseRelP6.setStatus('current')
rrcLpmCaseRelP7 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcLpmCaseRelP7.setStatus('current')
rrcLpmCaseRelP8 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcLpmCaseRelP8.setStatus('current')
rrcLpmCaseRelP9 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcLpmCaseRelP9.setStatus('current')
rrcLpmCaseRelP10 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcLpmCaseRelP10.setStatus('current')
rrcCpmMeasCaseRelP0 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmMeasCaseRelP0.setStatus('current')
rrcCpmMeasCaseRelP2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmMeasCaseRelP2.setStatus('current')
rrcCpmMeasCaseRelP3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmMeasCaseRelP3.setStatus('current')
rrcCpmMeasCaseRelP4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmMeasCaseRelP4.setStatus('current')
rrcCpmMeasCaseRelP5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmMeasCaseRelP5.setStatus('current')
rrcCpmMeasCaseRelP6 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmMeasCaseRelP6.setStatus('current')
rrcCpmMeasCaseRelP7 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmMeasCaseRelP7.setStatus('current')
rrcCpmMeasCaseRelP8 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmMeasCaseRelP8.setStatus('current')
rrcCpmMeasCaseRelP9 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmMeasCaseRelP9.setStatus('current')
rrcCpmMeasCaseRelP10 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 1, 37, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcCpmMeasCaseRelP10.setStatus('current')
aprelatedOriginCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2))
initERABEstabProcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1), )
if mibBuilder.loadTexts: initERABEstabProcTable.setStatus('current')
initERABEstabProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "initERABEstabProcLcId"))
if mibBuilder.loadTexts: initERABEstabProcEntry.setStatus('current')
initERABEstabProcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: initERABEstabProcLcId.setStatus('current')
initERABEstabProcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initERABEstabProcRowStatus.setStatus('current')
erabEstabInitFailNbrEnbUeS1apIdError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrEnbUeS1apIdError.setStatus('current')
erabEstabInitFailNbrUeS1apIdPairError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrUeS1apIdPairError.setStatus('current')
erabEstabInitFailNbrInvalidQosCombination = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrInvalidQosCombination.setStatus('current')
erabEstabInitFailNbrRadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrRadioInterfaceFailure.setStatus('current')
erabEstabInitFailNbrMultipleErabId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrMultipleErabId.setStatus('current')
erabEstabInitFailNbrAlgoNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrAlgoNotSupported.setStatus('current')
erabEstabInitFailNbrTransResNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrTransResNotAvailable.setStatus('current')
erabEstabInitFailNbrTransferSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrTransferSyntaxError.setStatus('current')
erabEstabInitFailNbrAbstractSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrAbstractSyntaxError.setStatus('current')
erabEstabInitFailNbrControlProcessingOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrControlProcessingOverload.setStatus('current')
erabEstabInitFailNbrUnspecifiedFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrUnspecifiedFailure.setStatus('current')
erabEstabInitAttNbrQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitAttNbrQci1.setStatus('current')
erabEstabInitSuccNbrQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitSuccNbrQci1.setStatus('current')
erabEstabInitAttNbrQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitAttNbrQci2.setStatus('current')
erabEstabInitSuccNbrQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitSuccNbrQci2.setStatus('current')
erabEstabInitAttNbrQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitAttNbrQci3.setStatus('current')
erabEstabInitSuccNbrQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitSuccNbrQci3.setStatus('current')
erabEstabInitAttNbrQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitAttNbrQci4.setStatus('current')
erabEstabInitSuccNbrQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitSuccNbrQci4.setStatus('current')
erabEstabInitAttNbrQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitAttNbrQci5.setStatus('current')
erabEstabInitSuccNbrQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitSuccNbrQci5.setStatus('current')
erabEstabInitAttNbrQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitAttNbrQci6.setStatus('current')
erabEstabInitSuccNbrQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitSuccNbrQci6.setStatus('current')
erabEstabInitAttNbrQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitAttNbrQci7.setStatus('current')
erabEstabInitSuccNbrQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitSuccNbrQci7.setStatus('current')
erabEstabInitAttNbrQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitAttNbrQci8.setStatus('current')
erabEstabInitSuccNbrQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitSuccNbrQci8.setStatus('current')
erabEstabInitAttNbrQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitAttNbrQci9.setStatus('current')
erabEstabInitSuccNbrQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitSuccNbrQci9.setStatus('current')
erabEstabInitFailNbrRadioResNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrRadioResNotAvailable.setStatus('current')
erabEstabInitFailNbrQci1RadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci1RadioInterfaceFailure.setStatus('current')
erabEstabInitFailNbrQci1RadioResNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci1RadioResNotAvailable.setStatus('current')
erabEstabInitFailNbrQci1Mme = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci1Mme.setStatus('current')
erabEstabInitFailNbrQci1InterWithOtherProc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci1InterWithOtherProc.setStatus('current')
erabEstabInitFailNbrQci1Transport = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci1Transport.setStatus('current')
erabEstabInitFailNbrQci1AlgoNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci1AlgoNotSupported.setStatus('current')
erabEstabInitFailNbrQci1Other = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci1Other.setStatus('current')
erabEstabInitFailNbrQci2RadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci2RadioInterfaceFailure.setStatus('current')
erabEstabInitFailNbrQci2RadioResNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci2RadioResNotAvailable.setStatus('current')
erabEstabInitFailNbrQci2Mme = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci2Mme.setStatus('current')
erabEstabInitFailNbrQci2InterWithOtherProc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci2InterWithOtherProc.setStatus('current')
erabEstabInitFailNbrQci2Transport = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci2Transport.setStatus('current')
erabEstabInitFailNbrQci2AlgoNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci2AlgoNotSupported.setStatus('current')
erabEstabInitFailNbrQci2Other = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabInitFailNbrQci2Other.setStatus('current')
addERABEstabProcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2), )
if mibBuilder.loadTexts: addERABEstabProcTable.setStatus('current')
addERABEstabProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "addERABEstabProcLcId"))
if mibBuilder.loadTexts: addERABEstabProcEntry.setStatus('current')
addERABEstabProcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: addERABEstabProcLcId.setStatus('current')
addERABEstabProcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addERABEstabProcRowStatus.setStatus('current')
erabEstabAddFailNbrUeS1apIdPairError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrUeS1apIdPairError.setStatus('current')
erabEstabAddFailNbrInteractionWithOtherProc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrInteractionWithOtherProc.setStatus('current')
erabEstabAddFailNbrInvalidQosCombination = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrInvalidQosCombination.setStatus('current')
erabEstabAddFailNbrRadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrRadioInterfaceFailure.setStatus('current')
erabEstabAddFailNbrMultipleErabId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrMultipleErabId.setStatus('current')
erabEstabAddFailNbrS1IntraSystemHoTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrS1IntraSystemHoTrig.setStatus('current')
erabEstabAddFailNbrS1InterSystemHoTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrS1InterSystemHoTrig.setStatus('current')
erabEstabAddFailNbrX2HandoverTriggered = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrX2HandoverTriggered.setStatus('current')
erabEstabAddFailNbrTransportResNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrTransportResNotAvailable.setStatus('current')
erabEstabAddFailNbrTransferSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrTransferSyntaxError.setStatus('current')
erabEstabAddFailNbrAbstractSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrAbstractSyntaxError.setStatus('current')
erabEstabAddFailNbrControlProcessingOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrControlProcessingOverload.setStatus('current')
erabEstabAddFailNbrUnspecifiedFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrUnspecifiedFailure.setStatus('current')
erabEstabAddAttNbrQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddAttNbrQci1.setStatus('current')
erabEstabAddSuccNbrQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddSuccNbrQci1.setStatus('current')
erabEstabAddAttNbrQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddAttNbrQci2.setStatus('current')
erabEstabAddSuccNbrQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddSuccNbrQci2.setStatus('current')
erabEstabAddAttNbrQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddAttNbrQci3.setStatus('current')
erabEstabAddSuccNbrQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddSuccNbrQci3.setStatus('current')
erabEstabAddAttNbrQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddAttNbrQci4.setStatus('current')
erabEstabAddSuccNbrQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddSuccNbrQci4.setStatus('current')
erabEstabAddAttNbrQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddAttNbrQci5.setStatus('current')
erabEstabAddSuccNbrQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddSuccNbrQci5.setStatus('current')
erabEstabAddAttNbrQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddAttNbrQci6.setStatus('current')
erabEstabAddSuccNbrQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddSuccNbrQci6.setStatus('current')
erabEstabAddAttNbrQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddAttNbrQci7.setStatus('current')
erabEstabAddSuccNbrQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddSuccNbrQci7.setStatus('current')
erabEstabAddAttNbrQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddAttNbrQci8.setStatus('current')
erabEstabAddSuccNbrQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddSuccNbrQci8.setStatus('current')
erabEstabAddAttNbrQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddAttNbrQci9.setStatus('current')
erabEstabAddSuccNbrQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddSuccNbrQci9.setStatus('current')
erabEstabAddFailNbrRadioResNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrRadioResNotAvailable.setStatus('current')
erabEstabAddFailNbrWeakCoverageQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrWeakCoverageQci1.setStatus('current')
erabEstabAddFailNbrQci1RadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrQci1RadioInterfaceFailure.setStatus('current')
erabEstabAddFailNbrQci1RadioResNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrQci1RadioResNotAvailable.setStatus('current')
erabEstabAddFailNbrQci1Mme = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrQci1Mme.setStatus('current')
erabEstabAddFailNbrQci1InterWithOtherProc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrQci1InterWithOtherProc.setStatus('current')
erabEstabAddFailNbrQci1Transport = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrQci1Transport.setStatus('current')
erabEstabAddFailNbrQci1Other = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrQci1Other.setStatus('current')
erabEstabAddFailNbrQci2RadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrQci2RadioInterfaceFailure.setStatus('current')
erabEstabAddFailNbrQci2RadioResNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrQci2RadioResNotAvailable.setStatus('current')
erabEstabAddFailNbrQci2Mme = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrQci2Mme.setStatus('current')
erabEstabAddFailNbrQci2InterWithOtherProc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrQci2InterWithOtherProc.setStatus('current')
erabEstabAddFailNbrQci2Transport = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrQci2Transport.setStatus('current')
erabEstabAddFailNbrQci2Other = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAddFailNbrQci2Other.setStatus('current')
erabRelProcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3), )
if mibBuilder.loadTexts: erabRelProcTable.setStatus('current')
erabRelProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "erabRelProcLcId"))
if mibBuilder.loadTexts: erabRelProcEntry.setStatus('current')
erabRelProcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: erabRelProcLcId.setStatus('current')
erabRelProcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelProcRowStatus.setStatus('current')
erabRelEnbNbrQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci1.setStatus('current')
erabRelEnbNbrQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci2.setStatus('current')
erabRelEnbNbrQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci3.setStatus('current')
erabRelEnbNbrQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci4.setStatus('current')
erabRelEnbNbrQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci5.setStatus('current')
erabRelEnbNbrQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci6.setStatus('current')
erabRelEnbNbrQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci7.setStatus('current')
erabRelEnbNbrQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci8.setStatus('current')
erabRelEnbNbrQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci9.setStatus('current')
erabRelEnbNbrUserInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrUserInactivity.setStatus('current')
erabRelEnbNbrRadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrRadioInterfaceFailure.setStatus('current')
erabRelEnbNbrUnspecified = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrUnspecified.setStatus('current')
erabRelFailNbrInteractionWithOtherProcedure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelFailNbrInteractionWithOtherProcedure.setStatus('current')
erabRelFailNbrTransferSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelFailNbrTransferSyntaxError.setStatus('current')
erabRelFailNbrAbstractSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelFailNbrAbstractSyntaxError.setStatus('current')
erabRelFailNbrControlProcessingOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelFailNbrControlProcessingOverload.setStatus('current')
erabRelFailNbrHardwareFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelFailNbrHardwareFailure.setStatus('current')
erabRelFailNbrUeS1apIdPairError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelFailNbrUeS1apIdPairError.setStatus('current')
erabRelFailNbrRadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelFailNbrRadioInterfaceFailure.setStatus('current')
erabRelFailNbrUnspecifiedFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelFailNbrUnspecifiedFailure.setStatus('current')
erabRelAttNbrQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelAttNbrQci1.setStatus('current')
erabRelSuccNbrQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelSuccNbrQci1.setStatus('current')
erabRelAttNbrQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelAttNbrQci2.setStatus('current')
erabRelSuccNbrQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelSuccNbrQci2.setStatus('current')
erabRelAttNbrQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelAttNbrQci3.setStatus('current')
erabRelSuccNbrQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelSuccNbrQci3.setStatus('current')
erabRelAttNbrQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelAttNbrQci4.setStatus('current')
erabRelSuccNbrQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelSuccNbrQci4.setStatus('current')
erabRelAttNbrQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelAttNbrQci5.setStatus('current')
erabRelSuccNbrQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelSuccNbrQci5.setStatus('current')
erabRelAttNbrQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelAttNbrQci6.setStatus('current')
erabRelSuccNbrQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelSuccNbrQci6.setStatus('current')
erabRelAttNbrQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelAttNbrQci7.setStatus('current')
erabRelSuccNbrQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelSuccNbrQci7.setStatus('current')
erabRelAttNbrQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelAttNbrQci8.setStatus('current')
erabRelSuccNbrQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelSuccNbrQci8.setStatus('current')
erabRelAttNbrQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelAttNbrQci9.setStatus('current')
erabRelSuccNbrQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelSuccNbrQci9.setStatus('current')
erabRelMmeNbrTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrTransport.setStatus('current')
erabRelMmeNbrNormalRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrNormalRelease.setStatus('current')
erabRelMmeNbrDetach = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrDetach.setStatus('current')
erabRelMmeNbrUnspecifiedNas = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrUnspecifiedNas.setStatus('current')
erabRelMmeNbrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrProtocol.setStatus('current')
erabRelMmeNbrMiscellaneous = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrMiscellaneous.setStatus('current')
erabRelMmeNbrRadioNetworkLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrRadioNetworkLayer.setStatus('current')
erabRelEnbNbrCSFallbackTriggered = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrCSFallbackTriggered.setStatus('current')
erabRelEnbNbrUENotAvailableforPS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrUENotAvailableforPS.setStatus('current')
erabRelEnbNbrInterRATRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrInterRATRedirection.setStatus('current')
erabRelEnbNbrRedirectionto1xRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrRedirectionto1xRTT.setStatus('current')
erabRelEnbNbrOMIntervention = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrOMIntervention.setStatus('current')
erabRelEnbNbrUELostM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrUELostM1.setStatus('current')
erabRelEnbNbrUELostN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrUELostN.setStatus('current')
erabRelEnbNbrTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrTransfer.setStatus('current')
erabRelEnbNbrCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrCongestion.setStatus('current')
erabRelMmeNbrRadioNetworkLayerOther = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrRadioNetworkLayerOther.setStatus('current')
erabRelMmeNbrUserInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrUserInactivity.setStatus('current')
erabRelMmeNbrCSFallbackTriggered = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrCSFallbackTriggered.setStatus('current')
erabRelMmeNbrUENotAvailableforPS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrUENotAvailableforPS.setStatus('current')
erabRelMmeNbrInterRATRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrInterRATRedirection.setStatus('current')
erabRelMmeNbrRedirectionTowards1xRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrRedirectionTowards1xRTT.setStatus('current')
erabRelMmeNbrRadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrRadioInterfaceFailure.setStatus('current')
erabRelMmeNbrUELost = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrUELost.setStatus('current')
erabRelMmeNbrCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrCongestion.setStatus('current')
erabRelMmeNbrSucHO = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrSucHO.setStatus('current')
erabRelEnbNbrUELostTa = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrUELostTa.setStatus('current')
erabRelEnbNbrUELostRlc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrUELostRlc.setStatus('current')
erabRelEnbNbrHoFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrHoFail.setStatus('current')
erabRelEnbNbrReConfigFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrReConfigFail.setStatus('current')
erabRelEnbNbrReEstabFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 3, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrReEstabFail.setStatus('current')
erabInitEstabTimeTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 4), )
if mibBuilder.loadTexts: erabInitEstabTimeTable.setStatus('current')
erabInitEstabTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "erabInitEstabTimeLcId"))
if mibBuilder.loadTexts: erabInitEstabTimeEntry.setStatus('current')
erabInitEstabTimeLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: erabInitEstabTimeLcId.setStatus('current')
erabInitEstabTimeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 4, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabInitEstabTimeRowStatus.setStatus('current')
erabInitEstabTimeMean = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabInitEstabTimeMean.setStatus('current')
erabInitEstabTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabInitEstabTimeMax.setStatus('current')
erabAddEstabTimeMean = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabAddEstabTimeMean.setStatus('current')
erabAddEstabTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabAddEstabTimeMax.setStatus('current')
erabEstabTimeMean = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabTimeMean.setStatus('current')
erabEstabTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabTimeMax.setStatus('current')
erabModProcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5), )
if mibBuilder.loadTexts: erabModProcTable.setStatus('current')
erabModProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "erabModProcLcId"))
if mibBuilder.loadTexts: erabModProcEntry.setStatus('current')
erabModProcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: erabModProcLcId.setStatus('current')
erabModProcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModProcRowStatus.setStatus('current')
erabModQoSFailNbrUeS1apIdPairError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSFailNbrUeS1apIdPairError.setStatus('current')
erabModQoSFailNbrInteractionWithOtherProc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSFailNbrInteractionWithOtherProc.setStatus('current')
erabModQoSFailNbrInvalidQosCombination = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSFailNbrInvalidQosCombination.setStatus('current')
erabModQoSFailNbrRadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSFailNbrRadioInterfaceFailure.setStatus('current')
erabModQoSFailNbrMultipleErabId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSFailNbrMultipleErabId.setStatus('current')
erabModQoSFailNbrS1IntraSystemHoTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSFailNbrS1IntraSystemHoTrig.setStatus('current')
erabModQoSFailNbrS1InterSystemHoTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSFailNbrS1InterSystemHoTrig.setStatus('current')
erabModQoSFailNbrX2HandoverTriggered = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSFailNbrX2HandoverTriggered.setStatus('current')
erabModQoSFailNbrTransResNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSFailNbrTransResNotAvailable.setStatus('current')
erabModQoSFailNbrTransferSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSFailNbrTransferSyntaxError.setStatus('current')
erabModQoSFailNbrAbstractSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSFailNbrAbstractSyntaxError.setStatus('current')
erabModQoSFailNbrControlProcessingOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSFailNbrControlProcessingOverload.setStatus('current')
erabModQoSFailNbrUnspecifiedFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSFailNbrUnspecifiedFailure.setStatus('current')
erabModQoSAttNbrQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSAttNbrQci1.setStatus('current')
erabModQoSSuccNbrQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSSuccNbrQci1.setStatus('current')
erabModQoSAttNbrQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSAttNbrQci2.setStatus('current')
erabModQoSSuccNbrQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSSuccNbrQci2.setStatus('current')
erabModQoSAttNbrQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSAttNbrQci3.setStatus('current')
erabModQoSSuccNbrQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSSuccNbrQci3.setStatus('current')
erabModQoSAttNbrQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSAttNbrQci4.setStatus('current')
erabModQoSSuccNbrQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSSuccNbrQci4.setStatus('current')
erabModQoSAttNbrQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSAttNbrQci5.setStatus('current')
erabModQoSSuccNbrQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSSuccNbrQci5.setStatus('current')
erabModQoSAttNbrQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSAttNbrQci6.setStatus('current')
erabModQoSSuccNbrQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSSuccNbrQci6.setStatus('current')
erabModQoSAttNbrQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSAttNbrQci7.setStatus('current')
erabModQoSSuccNbrQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSSuccNbrQci7.setStatus('current')
erabModQoSAttNbrQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSAttNbrQci8.setStatus('current')
erabModQoSSuccNbrQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSSuccNbrQci8.setStatus('current')
erabModQoSAttNbrQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSAttNbrQci9.setStatus('current')
erabModQoSSuccNbrQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabModQoSSuccNbrQci9.setStatus('current')
erabNbrTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6), )
if mibBuilder.loadTexts: erabNbrTable.setStatus('current')
erabNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "erabNbrLcId"))
if mibBuilder.loadTexts: erabNbrEntry.setStatus('current')
erabNbrLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: erabNbrLcId.setStatus('current')
erabNbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrRowStatus.setStatus('current')
erabNbrMeanEstabQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMeanEstabQci1.setStatus('current')
erabNbrMeanEstabQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMeanEstabQci2.setStatus('current')
erabNbrMeanEstabQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMeanEstabQci3.setStatus('current')
erabNbrMeanEstabQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMeanEstabQci4.setStatus('current')
erabNbrMeanEstabQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMeanEstabQci5.setStatus('current')
erabNbrMeanEstabQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMeanEstabQci6.setStatus('current')
erabNbrMeanEstabQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMeanEstabQci7.setStatus('current')
erabNbrMeanEstabQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMeanEstabQci8.setStatus('current')
erabNbrMeanEstabQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMeanEstabQci9.setStatus('current')
erabNbrMaxEstabQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMaxEstabQci1.setStatus('current')
erabNbrMaxEstabQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMaxEstabQci2.setStatus('current')
erabNbrMaxEstabQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMaxEstabQci3.setStatus('current')
erabNbrMaxEstabQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMaxEstabQci4.setStatus('current')
erabNbrMaxEstabQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMaxEstabQci5.setStatus('current')
erabNbrMaxEstabQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMaxEstabQci6.setStatus('current')
erabNbrMaxEstabQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMaxEstabQci7.setStatus('current')
erabNbrMaxEstabQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMaxEstabQci8.setStatus('current')
erabNbrMaxEstabQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMaxEstabQci9.setStatus('current')
erabNbrMaxEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrMaxEstab.setStatus('current')
erabNbrEstabSumQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrEstabSumQci1.setStatus('current')
erabNbrEstabSumQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrEstabSumQci2.setStatus('current')
erabNbrEstabSumQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrEstabSumQci5.setStatus('current')
erabNbrEstabSampNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrEstabSampNum.setStatus('current')
handoverInERABNbrTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 7), )
if mibBuilder.loadTexts: handoverInERABNbrTable.setStatus('current')
handoverInERABNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "handoverInERABNbrLcId"))
if mibBuilder.loadTexts: handoverInERABNbrEntry.setStatus('current')
handoverInERABNbrLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: handoverInERABNbrLcId.setStatus('current')
handoverInERABNbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 7, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: handoverInERABNbrRowStatus.setStatus('current')
erabNbrHoIncQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrHoIncQci1.setStatus('current')
erabNbrHoIncQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrHoIncQci2.setStatus('current')
erabNbrHoIncQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrHoIncQci3.setStatus('current')
erabNbrHoIncQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrHoIncQci4.setStatus('current')
erabNbrHoIncQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrHoIncQci5.setStatus('current')
erabNbrHoIncQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrHoIncQci6.setStatus('current')
erabNbrHoIncQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrHoIncQci7.setStatus('current')
erabNbrHoIncQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrHoIncQci8.setStatus('current')
erabNbrHoIncQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrHoIncQci9.setStatus('current')
ueContextProcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8), )
if mibBuilder.loadTexts: ueContextProcTable.setStatus('current')
ueContextProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ueContextProcLcId"))
if mibBuilder.loadTexts: ueContextProcEntry.setStatus('current')
ueContextProcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: ueContextProcLcId.setStatus('current')
ueContextProcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueContextProcRowStatus.setStatus('current')
contextFailInitalSetupNbrEnbUeS1apIdError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailInitalSetupNbrEnbUeS1apIdError.setStatus('current')
contextFailInitalSetupNbrUeS1apIdPairError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailInitalSetupNbrUeS1apIdPairError.setStatus('current')
contextFailInitalSetupNbrInvalidQosComb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailInitalSetupNbrInvalidQosComb.setStatus('current')
contextFailInitalSetupNbrRadioInterfaceFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailInitalSetupNbrRadioInterfaceFail.setStatus('current')
contextFailInitalSetupNbrMultipleErabId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailInitalSetupNbrMultipleErabId.setStatus('current')
contextFailInitalSetupNbrAlgoNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailInitalSetupNbrAlgoNotSupported.setStatus('current')
contextFailInitalSetupNbrTransResNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailInitalSetupNbrTransResNotAvailable.setStatus('current')
contextFailInitalSetupNbrTransferSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailInitalSetupNbrTransferSyntaxError.setStatus('current')
contextFailInitalSetupNbrAbstractSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailInitalSetupNbrAbstractSyntaxError.setStatus('current')
contextFailInitalSetupNbrCPOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailInitalSetupNbrCPOverload.setStatus('current')
contextFailInitalSetupNbrUnspecifiedFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailInitalSetupNbrUnspecifiedFailure.setStatus('current')
contextAttInitalSetupNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttInitalSetupNbr.setStatus('current')
contextSuccInitalSetupNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextSuccInitalSetupNbr.setStatus('current')
contextFailModNbrUeS1apIdPairError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailModNbrUeS1apIdPairError.setStatus('current')
contextFailModNbrRadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailModNbrRadioInterfaceFailure.setStatus('current')
contextFailModNbrAlgoNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailModNbrAlgoNotSupported.setStatus('current')
contextFailModNbrTransferSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailModNbrTransferSyntaxError.setStatus('current')
contextFailModNbrAbstractSyntaxError = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailModNbrAbstractSyntaxError.setStatus('current')
contextFailModNbrControlProcessingOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailModNbrControlProcessingOverload.setStatus('current')
contextFailModNbrUnspecifiedFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextFailModNbrUnspecifiedFailure.setStatus('current')
contextAttModNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttModNbr.setStatus('current')
contextSuccModNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextSuccModNbr.setStatus('current')
contextAttReleNBNbrUserInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrUserInactivity.setStatus('current')
contextAttReleNBNbrRadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrRadioInterfaceFailure.setStatus('current')
contextAttReleNBNbrUnspecified = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrUnspecified.setStatus('current')
contextAttRelMMENbrTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrTransport.setStatus('current')
contextAttRelMMENbrNormalRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrNormalRelease.setStatus('current')
contextAttRelMMENbrDetach = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrDetach.setStatus('current')
contextAttRelMMENbrUnspecifiedNas = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrUnspecifiedNas.setStatus('current')
contextAttRelMMENbrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrProtocol.setStatus('current')
contextAttRelMMENbrMiscellaneous = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrMiscellaneous.setStatus('current')
contextAttRelMMENbrRadioNetworkLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrRadioNetworkLayer.setStatus('current')
contextAttReleNBNbrCSFallbackTriggered = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrCSFallbackTriggered.setStatus('current')
contextAttReleNBNbrUENotAvailableforPS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrUENotAvailableforPS.setStatus('current')
contextAttReleNBNbrInterRATRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrInterRATRedirection.setStatus('current')
contextAttReleNBNbrRedirectionto1xRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrRedirectionto1xRTT.setStatus('current')
contextAttReleNBNbrOMIntervention = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrOMIntervention.setStatus('current')
contextAttInitalSetupCsfb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttInitalSetupCsfb.setStatus('current')
contextSuccInitalSetupCsfb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextSuccInitalSetupCsfb.setStatus('current')
contextAttModCsfb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttModCsfb.setStatus('current')
contextSuccModCsfb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextSuccModCsfb.setStatus('current')
contextAttReleNBNbrUELostM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrUELostM1.setStatus('current')
contextAttReleNBNbrUELostN = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrUELostN.setStatus('current')
contextAttReleNBNbrTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrTransfer.setStatus('current')
contextAttReleNBNbrCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrCongestion.setStatus('current')
contextAttRelMMENbrRadioNetworkLayerOther = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrRadioNetworkLayerOther.setStatus('current')
contextAttRelMMENbrUserInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrUserInactivity.setStatus('current')
contextAttRelMMENbrCSFallbackTriggered = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrCSFallbackTriggered.setStatus('current')
contextAttRelMMENbrUENotAvailableforPS = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrUENotAvailableforPS.setStatus('current')
contextAttRelMMENbrInterRATRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrInterRATRedirection.setStatus('current')
contextAttRelMMENbrRedirectionTowards1xRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrRedirectionTowards1xRTT.setStatus('current')
contextAttRelMMENbrRadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrRadioInterfaceFailure.setStatus('current')
contextAttRelMMENbrUELost = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrUELost.setStatus('current')
contextAttRelMMENbrCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrCongestion.setStatus('current')
contextAttRelMMENbrSucHO = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttRelMMENbrSucHO.setStatus('current')
contextAttReleNBNbrUELostTa = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrUELostTa.setStatus('current')
contextAttReleNBNbrUELostRlc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrUELostRlc.setStatus('current')
contextAttReleNBNbrHoFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrHoFail.setStatus('current')
contextAttReleNBNbrReConfigFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrReConfigFail.setStatus('current')
contextAttReleNBNbrReEstabFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 8, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextAttReleNBNbrReEstabFail.setStatus('current')
s1SigProcTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 9), )
if mibBuilder.loadTexts: s1SigProcTable.setStatus('current')
s1SigProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 9, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "s1SigProcLcId"))
if mibBuilder.loadTexts: s1SigProcEntry.setStatus('current')
s1SigProcLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: s1SigProcLcId.setStatus('current')
s1SigProcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 9, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1SigProcRowStatus.setStatus('current')
s1sigConnEstabAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1sigConnEstabAtt.setStatus('current')
s1sigConnEstabSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1sigConnEstabSucc.setStatus('current')
s1Conn = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10))
s1FailSetupNbrTransferSyntaxError = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1FailSetupNbrTransferSyntaxError.setStatus('current')
s1FailSetupNbrAbstractSyntaxError = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1FailSetupNbrAbstractSyntaxError.setStatus('current')
s1FailSetupNbrControlProcessingOverload = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1FailSetupNbrControlProcessingOverload.setStatus('current')
s1FailSetupNbrUserPlaneResourcesNotEnough = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1FailSetupNbrUserPlaneResourcesNotEnough.setStatus('current')
s1FailSetupNbrHardwareFailure = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1FailSetupNbrHardwareFailure.setStatus('current')
s1FailSetupNbrUnspecifiedFailure = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1FailSetupNbrUnspecifiedFailure.setStatus('current')
s1AttSetupNbr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1AttSetupNbr.setStatus('current')
s1SuccSetupNbr = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1SuccSetupNbr.setStatus('current')
s1ErrorIndicatByeNBMmeUeS1apIdError = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ErrorIndicatByeNBMmeUeS1apIdError.setStatus('current')
s1ErrorIndicatByeNBEnbUeS1apIdError = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ErrorIndicatByeNBEnbUeS1apIdError.setStatus('current')
s1ErrorIndicatByeNBUeS1apIdPairError = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ErrorIndicatByeNBUeS1apIdPairError.setStatus('current')
s1ErrorIndicatByeNBTransferSyntaxError = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ErrorIndicatByeNBTransferSyntaxError.setStatus('current')
s1ErrorIndicatByeNBAbstractSyntaxError = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ErrorIndicatByeNBAbstractSyntaxError.setStatus('current')
s1ErrorIndicatByMMETransport = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ErrorIndicatByMMETransport.setStatus('current')
s1ErrorIndicatByMMENas = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ErrorIndicatByMMENas.setStatus('current')
s1ErrorIndicatByMMEProtocol = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ErrorIndicatByMMEProtocol.setStatus('current')
s1ErrorIndicatByMMEMiscellaneous = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ErrorIndicatByMMEMiscellaneous.setStatus('current')
s1ResetByeNBReleaseDueToEutran = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ResetByeNBReleaseDueToEutran.setStatus('current')
s1ResetByeNBOMIntervention = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ResetByeNBOMIntervention.setStatus('current')
s1ResetByeNBHardwareFailure = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ResetByeNBHardwareFailure.setStatus('current')
s1ResetByeNBUnspecifiedFailure = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ResetByeNBUnspecifiedFailure.setStatus('current')
s1SuccResetByeNB = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1SuccResetByeNB.setStatus('current')
s1ResetByMMETransport = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ResetByMMETransport.setStatus('current')
s1ResetByMMENas = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ResetByMMENas.setStatus('current')
s1ResetByMMEProtocol = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ResetByMMEProtocol.setStatus('current')
s1ResetByMMEMiscellaneous = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ResetByMMEMiscellaneous.setStatus('current')
s1SuccResetByMME = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1SuccResetByMME.setStatus('current')
s1OverLoadMme = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 10, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1OverLoadMme.setStatus('current')
x2AbnormalProc = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 11))
x2ErrorInd = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x2ErrorInd.setStatus('current')
x2Reset = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x2Reset.setStatus('current')
erabRelProcByHOTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 12), )
if mibBuilder.loadTexts: erabRelProcByHOTable.setStatus('current')
erabRelProcByHOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 12, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "erabRelProcByHOLcId"))
if mibBuilder.loadTexts: erabRelProcByHOEntry.setStatus('current')
erabRelProcByHOLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: erabRelProcByHOLcId.setStatus('current')
erabRelProcByHORowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 12, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelProcByHORowStatus.setStatus('current')
erabNbrReqRelEnbByHOQCI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbByHOQCI1.setStatus('current')
erabNbrReqRelEnbByHOQCI2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbByHOQCI2.setStatus('current')
erabNbrReqRelEnbByHOQCI3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbByHOQCI3.setStatus('current')
erabNbrReqRelEnbByHOQCI4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbByHOQCI4.setStatus('current')
erabNbrReqRelEnbByHOQCI5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbByHOQCI5.setStatus('current')
erabNbrReqRelEnbByHOQCI6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbByHOQCI6.setStatus('current')
erabNbrReqRelEnbByHOQCI7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbByHOQCI7.setStatus('current')
erabNbrReqRelEnbByHOQCI8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbByHOQCI8.setStatus('current')
erabNbrReqRelEnbByHOQCI9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbByHOQCI9.setStatus('current')
erabExistNbrTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 13), )
if mibBuilder.loadTexts: erabExistNbrTable.setStatus('current')
erabExistNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 13, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "erabExistNbrLcId"))
if mibBuilder.loadTexts: erabExistNbrEntry.setStatus('current')
erabExistNbrLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: erabExistNbrLcId.setStatus('current')
erabExistNbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 13, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabExistNbrRowStatus.setStatus('current')
erabNbrExistQCI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrExistQCI1.setStatus('current')
erabNbrExistQCI2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrExistQCI2.setStatus('current')
erabNbrExistQCI3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrExistQCI3.setStatus('current')
erabNbrExistQCI4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrExistQCI4.setStatus('current')
erabNbrExistQCI5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrExistQCI5.setStatus('current')
erabNbrExistQCI6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrExistQCI6.setStatus('current')
erabNbrExistQCI7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrExistQCI7.setStatus('current')
erabNbrExistQCI8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrExistQCI8.setStatus('current')
erabNbrExistQCI9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrExistQCI9.setStatus('current')
erabReleNBTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14), )
if mibBuilder.loadTexts: erabReleNBTable.setStatus('current')
erabReleNBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "erabReleNBLcId"))
if mibBuilder.loadTexts: erabReleNBEntry.setStatus('current')
erabReleNBLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: erabReleNBLcId.setStatus('current')
erabReleNBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabReleNBRowStatus.setStatus('current')
erabNormRelEnbNbrQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNormRelEnbNbrQci1.setStatus('current')
erabNormRelEnbNbrQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNormRelEnbNbrQci2.setStatus('current')
erabNormRelEnbNbrQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNormRelEnbNbrQci3.setStatus('current')
erabNormRelEnbNbrQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNormRelEnbNbrQci4.setStatus('current')
erabNormRelEnbNbrQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNormRelEnbNbrQci5.setStatus('current')
erabNormRelEnbNbrQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNormRelEnbNbrQci6.setStatus('current')
erabNormRelEnbNbrQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNormRelEnbNbrQci7.setStatus('current')
erabNormRelEnbNbrQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNormRelEnbNbrQci8.setStatus('current')
erabNormRelEnbNbrQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNormRelEnbNbrQci9.setStatus('current')
erabNbrReqRelEnbQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbQci1.setStatus('current')
erabNbrReqRelEnbQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbQci2.setStatus('current')
erabNbrReqRelEnbQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbQci3.setStatus('current')
erabNbrReqRelEnbQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbQci4.setStatus('current')
erabNbrReqRelEnbQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbQci5.setStatus('current')
erabNbrReqRelEnbQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbQci6.setStatus('current')
erabNbrReqRelEnbQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbQci7.setStatus('current')
erabNbrReqRelEnbQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbQci8.setStatus('current')
erabNbrReqRelEnbQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabNbrReqRelEnbQci9.setStatus('current')
erabRelEnbNbrQci1UserInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci1UserInactivity.setStatus('current')
erabRelEnbNbrQci1RadioInterfaceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci1RadioInterfaceFailure.setStatus('current')
erabRelEnbNbrQci1UELost = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci1UELost.setStatus('current')
erabRelEnbNbrQci1PdcpNotRcvSn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci1PdcpNotRcvSn.setStatus('current')
erabRelEnbNbrQci1Other = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci1Other.setStatus('current')
erabRelMmeNbrQci1NormalRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrQci1NormalRelease.setStatus('current')
erabRelMmeNbrQci1Other = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrQci1Other.setStatus('current')
erabRelEnbNbrQci1Transfer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci1Transfer.setStatus('current')
erabRelEnbNbrQci1Congestion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci1Congestion.setStatus('current')
erabRelEnbNbrQci1HoFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci1HoFail.setStatus('current')
erabRelEnbNbrQci1ReConfigFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci1ReConfigFail.setStatus('current')
erabRelEnbNbrQci1ReEstabFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelEnbNbrQci1ReEstabFail.setStatus('current')
erabRelMmeNbrQci1HoSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrQci1HoSuccess.setStatus('current')
erabRelMmeNbrQci1Detech = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrQci1Detech.setStatus('current')
erabRelMmeNbrQci1Transfer = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrQci1Transfer.setStatus('current')
erabRelMmeNbrQci1RadioNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 14, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelMmeNbrQci1RadioNetwork.setStatus('current')
contextExistNbrTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 15), )
if mibBuilder.loadTexts: contextExistNbrTable.setStatus('current')
contextExistNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 15, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "contextExistNbrLcId"))
if mibBuilder.loadTexts: contextExistNbrEntry.setStatus('current')
contextExistNbrLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: contextExistNbrLcId.setStatus('current')
contextExistNbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 15, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextExistNbrRowStatus.setStatus('current')
contextNbrExist = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextNbrExist.setStatus('current')
s1PathSwichTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 16), )
if mibBuilder.loadTexts: s1PathSwichTable.setStatus('current')
s1PathSwichEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 16, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "s1PathSwichLcId"))
if mibBuilder.loadTexts: s1PathSwichEntry.setStatus('current')
s1PathSwichLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: s1PathSwichLcId.setStatus('current')
s1PathSwichRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 16, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1PathSwichRowStatus.setStatus('current')
s1PathSwichReq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1PathSwichReq.setStatus('current')
s1PathSwichFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1PathSwichFail.setStatus('current')
s1PathSwichNoResp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1PathSwichNoResp.setStatus('current')
rrcConnNumberOfeNB = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 17))
rrcConnMaxeNB = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 17, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnMaxeNB.setStatus('current')
rrcConnMeaneNB = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 17, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnMeaneNB.setStatus('current')
erabEstabProcOfRUETable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 18), )
if mibBuilder.loadTexts: erabEstabProcOfRUETable.setStatus('current')
erabEstabProcOfRUEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 18, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "erabEstabProcOfRUELcId"))
if mibBuilder.loadTexts: erabEstabProcOfRUEEntry.setStatus('current')
erabEstabProcOfRUELcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: erabEstabProcOfRUELcId.setStatus('current')
erabEstabProcOfRUERowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 18, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabProcOfRUERowStatus.setStatus('current')
erabEstabAttNbrQci251 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAttNbrQci251.setStatus('current')
erabEstabAttNbrQci252 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAttNbrQci252.setStatus('current')
erabEstabAttNbrQci253 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAttNbrQci253.setStatus('current')
erabEstabAttNbrQci254 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabAttNbrQci254.setStatus('current')
erabEstabSuccNbrQci251 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabSuccNbrQci251.setStatus('current')
erabEstabSuccNbrQci252 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabSuccNbrQci252.setStatus('current')
erabEstabSuccNbrQci253 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabSuccNbrQci253.setStatus('current')
erabEstabSuccNbrQci254 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabEstabSuccNbrQci254.setStatus('current')
handOverInterWithERABTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 19), )
if mibBuilder.loadTexts: handOverInterWithERABTable.setStatus('current')
handOverInterWithERABEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 19, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "handOverInterWithERABLcId"))
if mibBuilder.loadTexts: handOverInterWithERABEntry.setStatus('current')
handOverInterWithERABLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: handOverInterWithERABLcId.setStatus('current')
handOverInterWithERABRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 19, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: handOverInterWithERABRowStatus.setStatus('current')
apHoInteractWithErabSetupInterNBFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHoInteractWithErabSetupInterNBFail.setStatus('current')
apHoInteractWithEraSetupIntraNB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHoInteractWithEraSetupIntraNB.setStatus('current')
apHoInteractWithErabModInterNBFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHoInteractWithErabModInterNBFail.setStatus('current')
apHoInteractWithEraModIntraNB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHoInteractWithEraModIntraNB.setStatus('current')
apHoInteractWithErabDelInterNBFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHoInteractWithErabDelInterNBFail.setStatus('current')
apHoInteractWithEraDelIntraNB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHoInteractWithEraDelIntraNB.setStatus('current')
apCAndRCheckOfCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 20), )
if mibBuilder.loadTexts: apCAndRCheckOfCellTable.setStatus('current')
apCAndRCheckOfCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 20, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "apCAndRCheckOfCellLcId"))
if mibBuilder.loadTexts: apCAndRCheckOfCellEntry.setStatus('current')
apCAndRCheckOfCellLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: apCAndRCheckOfCellLcId.setStatus('current')
apCAndRCheckOfCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 20, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCAndRCheckOfCellRowStatus.setStatus('current')
apErabRel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apErabRel.setStatus('current')
apSwitchErabResourceRel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSwitchErabResourceRel.setStatus('current')
apTeidRel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTeidRel.setStatus('current')
apX2apIdRel = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apX2apIdRel.setStatus('current')
apCAndRCheckOfEnb = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21))
apTeidMapRel = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTeidMapRel.setStatus('current')
apS1apRelP0 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apS1apRelP0.setStatus('current')
apS1apRelP2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apS1apRelP2.setStatus('current')
apS1apRelP3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apS1apRelP3.setStatus('current')
apS1apRelP4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apS1apRelP4.setStatus('current')
apS1apRelP5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apS1apRelP5.setStatus('current')
apS1apRelP6 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apS1apRelP6.setStatus('current')
apS1apRelP7 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apS1apRelP7.setStatus('current')
apS1apRelP8 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apS1apRelP8.setStatus('current')
apS1apRelP9 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apS1apRelP9.setStatus('current')
apS1apRelP10 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apS1apRelP10.setStatus('current')
apX2apRelP0 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apX2apRelP0.setStatus('current')
apX2apRelP2 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apX2apRelP2.setStatus('current')
apX2apRelP3 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apX2apRelP3.setStatus('current')
apX2apRelP4 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apX2apRelP4.setStatus('current')
apX2apRelP5 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apX2apRelP5.setStatus('current')
apX2apRelP6 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apX2apRelP6.setStatus('current')
apX2apRelP7 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apX2apRelP7.setStatus('current')
apX2apRelP8 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apX2apRelP8.setStatus('current')
apX2apRelP9 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apX2apRelP9.setStatus('current')
apX2apRelP10 = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 21, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apX2apRelP10.setStatus('current')
apPmofeNB = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 22))
apConnReEstabInterEnbScRecRlf = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 22, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apConnReEstabInterEnbScRecRlf.setStatus('current')
apConnReEstabInterEnbScfailClose = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 2, 22, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apConnReEstabInterEnbScfailClose.setStatus('current')
macrelatedOriginCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3))
macPrbUtilizationCCTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1), )
if mibBuilder.loadTexts: macPrbUtilizationCCTable.setStatus('current')
macPrbUtilizationCCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "macPrbUtilizationCCLcId"))
if mibBuilder.loadTexts: macPrbUtilizationCCEntry.setStatus('current')
macPrbUtilizationCCLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: macPrbUtilizationCCLcId.setStatus('current')
macPrbUtilizationCCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPrbUtilizationCCRowStatus.setStatus('current')
rruPrbUlTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbUlTotalNum.setStatus('current')
rruPrbUlUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbUlUsedNum.setStatus('current')
rruPrbUlQci1Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbUlQci1Num.setStatus('current')
rruPrbUlQci2Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbUlQci2Num.setStatus('current')
rruPrbUlQci3Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbUlQci3Num.setStatus('current')
rruPrbUlQci4Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbUlQci4Num.setStatus('current')
rruPrbUlQci5Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbUlQci5Num.setStatus('current')
rruPrbUlQci6Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbUlQci6Num.setStatus('current')
rruPrbUlQci7Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbUlQci7Num.setStatus('current')
rruPrbUlQci8Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbUlQci8Num.setStatus('current')
rruPrbUlQci9Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbUlQci9Num.setStatus('current')
rruPrbDlTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbDlTotalNum.setStatus('current')
rruPrbDlUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbDlUsedNum.setStatus('current')
rruPrbDlQci1Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbDlQci1Num.setStatus('current')
rruPrbDlQci2Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbDlQci2Num.setStatus('current')
rruPrbDlQci3Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbDlQci3Num.setStatus('current')
rruPrbDlQci4Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbDlQci4Num.setStatus('current')
rruPrbDlQci5Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbDlQci5Num.setStatus('current')
rruPrbDlQci6Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbDlQci6Num.setStatus('current')
rruPrbDlQci7Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbDlQci7Num.setStatus('current')
rruPrbDlQci8Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbDlQci8Num.setStatus('current')
rruPrbDlQci9Num = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbDlQci9Num.setStatus('current')
rruUlDcheTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruUlDcheTimes.setStatus('current')
rruDlDcheTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruDlDcheTimes.setStatus('current')
rruEffectiveScheTimesUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruEffectiveScheTimesUl.setStatus('current')
rruEffectiveScheTimesDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruEffectiveScheTimesDl.setStatus('current')
rruTheorScheTimesUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruTheorScheTimesUl.setStatus('current')
rruTheorScheTimesDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruTheorScheTimesDl.setStatus('current')
rruPrbDlRank2UsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbDlRank2UsedNum.setStatus('current')
rruPrbUlMumimoUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbUlMumimoUsedNum.setStatus('current')
macPreSchPrbNumUL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreSchPrbNumUL.setStatus('current')
macPreSchNumUL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreSchNumUL.setStatus('current')
rruPrbPucchUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbPucchUsedNum.setStatus('current')
rruFreqSelPrbPuschUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruFreqSelPrbPuschUsedNum.setStatus('current')
rruFreqSelPrbPdschUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruFreqSelPrbPdschUsedNum.setStatus('current')
macPrbUsedNumULHighSpeedUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPrbUsedNumULHighSpeedUser.setStatus('current')
macPrbUsedNumULLowSpeedUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPrbUsedNumULLowSpeedUser.setStatus('current')
macPrbUsedNumDLHighSpeedUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPrbUsedNumDLHighSpeedUser.setStatus('current')
macPrbUsedNumDLLowSpeedUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPrbUsedNumDLLowSpeedUser.setStatus('current')
macPreSchRealPrbNumUL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreSchRealPrbNumUL.setStatus('current')
macPreReSchNumUL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreReSchNumUL.setStatus('current')
macPreLowMCSSchNumUL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreLowMCSSchNumUL.setStatus('current')
rruFullRbTtiTotUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruFullRbTtiTotUl.setStatus('current')
rruFullRbTtiTotDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruFullRbTtiTotDl.setStatus('current')
rruDtchPrbAssnMeanUIEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 200), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruDtchPrbAssnMeanUIEnb.setStatus('current')
rruDtchPrbAssnMeanDlEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 201), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruDtchPrbAssnMeanDlEnb.setStatus('current')
rruPrbTotUlEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 202), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbTotUlEnb.setStatus('current')
rruPrbTotDlEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 203), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPrbTotDlEnb.setStatus('current')
rruPuschPrbMeanTotUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 204), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPuschPrbMeanTotUl.setStatus('current')
rruPdschPrbMeanTotDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 205), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPdschPrbMeanTotDl.setStatus('current')
rruEffectiveDataTransTimeUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 206), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruEffectiveDataTransTimeUl.setStatus('current')
rruEffectiveDataTransTimeDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 1, 1, 207), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruEffectiveDataTransTimeDl.setStatus('current')
macPrbUtilizationSITable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 2), )
if mibBuilder.loadTexts: macPrbUtilizationSITable.setStatus('current')
macPrbUtilizationSIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "macPrbUtilizationSILcId"))
if mibBuilder.loadTexts: macPrbUtilizationSIEntry.setStatus('current')
macPrbUtilizationSILcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: macPrbUtilizationSILcId.setStatus('current')
macPrbUtilizationSIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPrbUtilizationSIRowStatus.setStatus('current')
macPrbUtilizationUlMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPrbUtilizationUlMax.setStatus('current')
macPrbUtilizationUlMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPrbUtilizationUlMin.setStatus('current')
macPrbUtilizationUlAvaild = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPrbUtilizationUlAvaild.setStatus('current')
macPrbUtilizationDlMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPrbUtilizationDlMax.setStatus('current')
macPrbUtilizationDlMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPrbUtilizationDlMin.setStatus('current')
macPrbUtilizationDlAvaild = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPrbUtilizationDlAvaild.setStatus('current')
activeUETable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3), )
if mibBuilder.loadTexts: activeUETable.setStatus('current')
activeUEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "activeUELcId"))
if mibBuilder.loadTexts: activeUEEntry.setStatus('current')
activeUELcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: activeUELcId.setStatus('current')
activeUERowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeUERowStatus.setStatus('current')
drbUEActiveDlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveDlQci1.setStatus('current')
drbUEActiveDlQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveDlQci2.setStatus('current')
drbUEActiveDlQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveDlQci3.setStatus('current')
drbUEActiveDlQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveDlQci4.setStatus('current')
drbUEActiveDlQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveDlQci5.setStatus('current')
drbUEActiveDlQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveDlQci6.setStatus('current')
drbUEActiveDlQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveDlQci7.setStatus('current')
drbUEActiveDlQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveDlQci8.setStatus('current')
drbUEActiveDlQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveDlQci9.setStatus('current')
drbUEActiveUlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveUlQci1.setStatus('current')
drbUEActiveUlQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveUlQci2.setStatus('current')
drbUEActiveUlQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveUlQci3.setStatus('current')
drbUEActiveUlQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveUlQci4.setStatus('current')
drbUEActiveUlQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveUlQci5.setStatus('current')
drbUEActiveUlQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveUlQci6.setStatus('current')
drbUEActiveUlQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveUlQci7.setStatus('current')
drbUEActiveUlQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveUlQci8.setStatus('current')
drbUEActiveUlQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveUlQci9.setStatus('current')
drbUEActiveDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveDl.setStatus('current')
drbUEActiveUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbUEActiveUl.setStatus('current')
drbMaxUeActiveDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbMaxUeActiveDl.setStatus('current')
drbMaxUeActiveUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbMaxUeActiveUl.setStatus('current')
releasedActiveERABTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 4), )
if mibBuilder.loadTexts: releasedActiveERABTable.setStatus('current')
releasedActiveERABEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "releasedActiveERABLcId"))
if mibBuilder.loadTexts: releasedActiveERABEntry.setStatus('current')
releasedActiveERABLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: releasedActiveERABLcId.setStatus('current')
releasedActiveERABRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 4, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: releasedActiveERABRowStatus.setStatus('current')
erabRelActNbrQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelActNbrQci1.setStatus('current')
erabRelActNbrQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelActNbrQci2.setStatus('current')
erabRelActNbrQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelActNbrQci3.setStatus('current')
erabRelActNbrQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelActNbrQci4.setStatus('current')
erabRelActNbrQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelActNbrQci5.setStatus('current')
erabRelActNbrQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelActNbrQci6.setStatus('current')
erabRelActNbrQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelActNbrQci7.setStatus('current')
erabRelActNbrQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelActNbrQci8.setStatus('current')
erabRelActNbrQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabRelActNbrQci9.setStatus('current')
macBlerTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5), )
if mibBuilder.loadTexts: macBlerTable.setStatus('current')
macBlerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "macBlerLcId"))
if mibBuilder.loadTexts: macBlerEntry.setStatus('current')
macBlerLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: macBlerLcId.setStatus('current')
macBlerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBlerRowStatus.setStatus('current')
tbNbrInitUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrInitUl.setStatus('current')
tbNbrUlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrUlErr.setStatus('current')
tbNbrInitDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrInitDl.setStatus('current')
tbNbrDlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrDlErr.setStatus('current')
tbNbrInitUlQpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrInitUlQpsk.setStatus('current')
tbNbrInitUl16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrInitUl16QAM.setStatus('current')
tbNbrInitUl64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrInitUl64QAM.setStatus('current')
tbNbrSuccInitUlQpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrSuccInitUlQpsk.setStatus('current')
tbNbrSuccInitUl16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrSuccInitUl16QAM.setStatus('current')
tbNbrSuccInitUl64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrSuccInitUl64QAM.setStatus('current')
tbNbrInitDlQpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrInitDlQpsk.setStatus('current')
tbNbrInitDl16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrInitDl16QAM.setStatus('current')
tbNbrInitDl64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrInitDl64QAM.setStatus('current')
tbNbrSuccInitDlQpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrSuccInitDlQpsk.setStatus('current')
tbNbrSuccInitDl16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrSuccInitDl16QAM.setStatus('current')
tbNbrSuccInitDl64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbNbrSuccInitDl64QAM.setStatus('current')
tbSRBInitUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBInitUl.setStatus('current')
tbSRBUlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBUlErr.setStatus('current')
tbSRBInitDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBInitDl.setStatus('current')
tbSRBDlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBDlErr.setStatus('current')
tbSRBInitUlQpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBInitUlQpsk.setStatus('current')
tbSRBInitUl16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBInitUl16QAM.setStatus('current')
tbSRBInitUl64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBInitUl64QAM.setStatus('current')
tbSRBSuccInitUlQpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBSuccInitUlQpsk.setStatus('current')
tbSRBSuccInitUl16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBSuccInitUl16QAM.setStatus('current')
tbSRBSuccInitUl64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBSuccInitUl64QAM.setStatus('current')
tbSRBInitDlQpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBInitDlQpsk.setStatus('current')
tbSRBInitDl16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBInitDl16QAM.setStatus('current')
tbSRBInitDl64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBInitDl64QAM.setStatus('current')
tbSRBSuccInitDlQpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBSuccInitDlQpsk.setStatus('current')
tbSRBSuccInitDl16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBSuccInitDl16QAM.setStatus('current')
tbSRBSuccInitDl64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tbSRBSuccInitDl64QAM.setStatus('current')
macHarqRetxRatioTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6), )
if mibBuilder.loadTexts: macHarqRetxRatioTable.setStatus('current')
macHarqRetxRatioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "macHarqRetxRatioLcId"))
if mibBuilder.loadTexts: macHarqRetxRatioEntry.setStatus('current')
macHarqRetxRatioLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: macHarqRetxRatioLcId.setStatus('current')
macHarqRetxRatioRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macHarqRetxRatioRowStatus.setStatus('current')
macNbrTbUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbUl.setStatus('current')
macNbrAckdTbUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrAckdTbUl.setStatus('current')
macNbrTbDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDl.setStatus('current')
macNbrSuccTbDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrSuccTbDl.setStatus('current')
macNbrTbDLRank1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDLRank1.setStatus('current')
macNbrTbDLRank2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDLRank2.setStatus('current')
macNbrTbDLRank3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDLRank3.setStatus('current')
macNbrTbDLRank4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDLRank4.setStatus('current')
macNbrTbDLRank5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDLRank5.setStatus('current')
macNbrTbDLRank6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDLRank6.setStatus('current')
macNbrTbDLRank7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDLRank7.setStatus('current')
macNbrTbDLRank8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDLRank8.setStatus('current')
macNbrTbDlTm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlTm1.setStatus('current')
macNbrTbDlTm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlTm2.setStatus('current')
macNbrTbDlTm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlTm3.setStatus('current')
macNbrTbDlTm4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlTm4.setStatus('current')
macNbrTbDlTm5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlTm5.setStatus('current')
macNbrTbDlTm6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlTm6.setStatus('current')
macNbrTbDlTm7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlTm7.setStatus('current')
macNbrTbDlTm8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlTm8.setStatus('current')
macSRBTbUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbUl.setStatus('current')
macSRBAckdTbUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBAckdTbUl.setStatus('current')
macSRBTbDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDl.setStatus('current')
macSRBSuccTbDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBSuccTbDl.setStatus('current')
macSRBTbDLRank1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDLRank1.setStatus('current')
macSRBTbDLRank2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDLRank2.setStatus('current')
macSRBTbDLRank3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDLRank3.setStatus('current')
macSRBTbDLRank4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDLRank4.setStatus('current')
macSRBTbDLRank5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDLRank5.setStatus('current')
macSRBTbDLRank6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDLRank6.setStatus('current')
macSRBTbDLRank7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDLRank7.setStatus('current')
macSRBTbDLRank8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDLRank8.setStatus('current')
macSRBTbDlTm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDlTm1.setStatus('current')
macSRBTbDlTm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDlTm2.setStatus('current')
macSRBTbDlTm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDlTm3.setStatus('current')
macSRBTbDlTm4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDlTm4.setStatus('current')
macSRBTbDlTm5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDlTm5.setStatus('current')
macSRBTbDlTm6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDlTm6.setStatus('current')
macSRBTbDlTm7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDlTm7.setStatus('current')
macSRBTbDlTm8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSRBTbDlTm8.setStatus('current')
macNbrTbDlTm9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 6, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlTm9.setStatus('current')
pdcchCceDlMeanTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 7), )
if mibBuilder.loadTexts: pdcchCceDlMeanTable.setStatus('current')
pdcchCceDlMeanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcchCceDlMeanLcId"))
if mibBuilder.loadTexts: pdcchCceDlMeanEntry.setStatus('current')
pdcchCceDlMeanLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcchCceDlMeanLcId.setStatus('current')
pdcchCceDlMeanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 7, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcchCceDlMeanRowStatus.setStatus('current')
rruPdcchCceDlAssnMean = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPdcchCceDlAssnMean.setStatus('current')
cqiNumberStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8), )
if mibBuilder.loadTexts: cqiNumberStatisticTable.setStatus('current')
cqiNumberStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cqiNumberStatisticLcId"))
if mibBuilder.loadTexts: cqiNumberStatisticEntry.setStatus('current')
cqiNumberStatisticLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cqiNumberStatisticLcId.setStatus('current')
cqiNumberStatisticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqiNumberStatisticRowStatus.setStatus('current')
phyNbrCqi0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi0.setStatus('current')
phyNbrCqi1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi1.setStatus('current')
phyNbrCqi2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi2.setStatus('current')
phyNbrCqi3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi3.setStatus('current')
phyNbrCqi4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi4.setStatus('current')
phyNbrCqi5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi5.setStatus('current')
phyNbrCqi6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi6.setStatus('current')
phyNbrCqi7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi7.setStatus('current')
phyNbrCqi8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi8.setStatus('current')
phyNbrCqi9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi9.setStatus('current')
phyNbrCqi10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi10.setStatus('current')
phyNbrCqi11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi11.setStatus('current')
phyNbrCqi12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi12.setStatus('current')
phyNbrCqi13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi13.setStatus('current')
phyNbrCqi14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi14.setStatus('current')
phyNbrCqi15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyNbrCqi15.setStatus('current')
rrcReduceIotUPNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcReduceIotUPNum.setStatus('current')
rrcRecoverIotUPNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcRecoverIotUPNum.setStatus('current')
rrcReduceIotUPNumVip = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcReduceIotUPNumVip.setStatus('current')
cceCclrTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9), )
if mibBuilder.loadTexts: cceCclrTable.setStatus('current')
cceCclrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cceCclrLcId"))
if mibBuilder.loadTexts: cceCclrEntry.setStatus('current')
cceCclrLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cceCclrLcId.setStatus('current')
cceCclrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCclrRowStatus.setStatus('current')
macsche1cce = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macsche1cce.setStatus('current')
macsche2cce = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macsche2cce.setStatus('current')
macsche3cce = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macsche3cce.setStatus('current')
macsche4cce = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macsche4cce.setStatus('current')
macschecceusedsfn0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedsfn0.setStatus('current')
macschecceusedsfn1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedsfn1.setStatus('current')
macschecceusedsfn3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedsfn3.setStatus('current')
macschecceusedsfn4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedsfn4.setStatus('current')
macschecceusedsfn5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedsfn5.setStatus('current')
macschecceusedsfn6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedsfn6.setStatus('current')
macschecceusedsfn7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedsfn7.setStatus('current')
macschecceusedsfn8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedsfn8.setStatus('current')
macschecceusedsfn9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedsfn9.setStatus('current')
macschecceallsfn0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceallsfn0.setStatus('current')
macschecceallsfn1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceallsfn1.setStatus('current')
macschecceallsfn3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceallsfn3.setStatus('current')
macschecceallsfn4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceallsfn4.setStatus('current')
macschecceallsfn5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceallsfn5.setStatus('current')
macschecceallsfn6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceallsfn6.setStatus('current')
macschecceallsfn7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceallsfn7.setStatus('current')
macschecceallsfn8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceallsfn8.setStatus('current')
macschecceallsfn9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceallsfn9.setStatus('current')
macschefailtimescclr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschefailtimescclr.setStatus('current')
macschetimestotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschetimestotal.setStatus('current')
macschecfi1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecfi1.setStatus('current')
macschecfi2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecfi2.setStatus('current')
macschecfi3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecfi3.setStatus('current')
macschecceusedUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedUl.setStatus('current')
macschecceallUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceallUl.setStatus('current')
macscheCceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macscheCceUsed.setStatus('current')
macscheCceAll = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macscheCceAll.setStatus('current')
rruPdcchCceAvailUlDciSf = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPdcchCceAvailUlDciSf.setStatus('current')
rruPdcchCceUtilUlDciSf = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPdcchCceUtilUlDciSf.setStatus('current')
macsche1cceratio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 200), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macsche1cceratio.setStatus('current')
macsche2cceratio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 201), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macsche2cceratio.setStatus('current')
macsche4cceratio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 202), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macsche4cceratio.setStatus('current')
macsche8cceratio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 203), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macsche8cceratio.setStatus('current')
macschecceusedratiosfn0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 204), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedratiosfn0.setStatus('current')
macschecceusedratiosfn1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 205), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedratiosfn1.setStatus('current')
macschecceusedratiosfn3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 206), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedratiosfn3.setStatus('current')
macschecceusedratiosfn4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 207), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedratiosfn4.setStatus('current')
macschecceusedratiosfn5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 208), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedratiosfn5.setStatus('current')
macschecceusedratiosfn6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 209), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedratiosfn6.setStatus('current')
macschecceusedratiosfn7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 210), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedratiosfn7.setStatus('current')
macschecceusedratiosfn8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 211), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedratiosfn8.setStatus('current')
macschecceusedratiosfn9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 212), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecceusedratiosfn9.setStatus('current')
macschefailtimescclrratio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 213), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschefailtimescclrratio.setStatus('current')
macschecfi1ratio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 214), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecfi1ratio.setStatus('current')
macschecfi2ratio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 215), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecfi2ratio.setStatus('current')
macschecfi3ratio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 9, 1, 216), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macschecfi3ratio.setStatus('current')
pdcpThroughputTimeTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10), )
if mibBuilder.loadTexts: pdcpThroughputTimeTable.setStatus('current')
pdcpThroughputTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpThroughputTimeLcId"))
if mibBuilder.loadTexts: pdcpThroughputTimeEntry.setStatus('current')
pdcpThroughputTimeLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcpThroughputTimeLcId.setStatus('current')
pdcpThroughputTimeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThroughputTimeRowStatus.setStatus('current')
pdcpThrpTimeUL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeUL.setStatus('current')
pdcpThrpTimeULQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeULQci1.setStatus('current')
pdcpThrpTimeULQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeULQci2.setStatus('current')
pdcpThrpTimeULQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeULQci3.setStatus('current')
pdcpThrpTimeULQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeULQci4.setStatus('current')
pdcpThrpTimeULQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeULQci5.setStatus('current')
pdcpThrpTimeULQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeULQci6.setStatus('current')
pdcpThrpTimeULQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeULQci7.setStatus('current')
pdcpThrpTimeULQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeULQci8.setStatus('current')
pdcpThrpTimeULQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeULQci9.setStatus('current')
pdcpThrpTimeDL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeDL.setStatus('current')
pdcpThrpTimeDLQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeDLQci1.setStatus('current')
pdcpThrpTimeDLQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeDLQci2.setStatus('current')
pdcpThrpTimeDLQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeDLQci3.setStatus('current')
pdcpThrpTimeDLQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeDLQci4.setStatus('current')
pdcpThrpTimeDLQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeDLQci5.setStatus('current')
pdcpThrpTimeDLQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeDLQci6.setStatus('current')
pdcpThrpTimeDLQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeDLQci7.setStatus('current')
pdcpThrpTimeDLQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeDLQci8.setStatus('current')
pdcpThrpTimeDLQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThrpTimeDLQci9.setStatus('current')
erabActiveNumberTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11), )
if mibBuilder.loadTexts: erabActiveNumberTable.setStatus('current')
erabActiveNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "erabActiveNumberLcId"))
if mibBuilder.loadTexts: erabActiveNumberEntry.setStatus('current')
erabActiveNumberLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: erabActiveNumberLcId.setStatus('current')
erabActiveNumberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveNumberRowStatus.setStatus('current')
erabActiveMeanNbrDL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrDL.setStatus('current')
erabActiveMeanNbrDLQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrDLQci1.setStatus('current')
erabActiveMeanNbrDLQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrDLQci2.setStatus('current')
erabActiveMeanNbrDLQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrDLQci3.setStatus('current')
erabActiveMeanNbrDLQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrDLQci4.setStatus('current')
erabActiveMeanNbrDLQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrDLQci5.setStatus('current')
erabActiveMeanNbrDLQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrDLQci6.setStatus('current')
erabActiveMeanNbrDLQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrDLQci7.setStatus('current')
erabActiveMeanNbrDLQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrDLQci8.setStatus('current')
erabActiveMeanNbrDLQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrDLQci9.setStatus('current')
erabActiveMaxNbrDL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrDL.setStatus('current')
erabActiveMaxNbrDLQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrDLQci1.setStatus('current')
erabActiveMaxNbrDLQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrDLQci2.setStatus('current')
erabActiveMaxNbrDLQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrDLQci3.setStatus('current')
erabActiveMaxNbrDLQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrDLQci4.setStatus('current')
erabActiveMaxNbrDLQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrDLQci5.setStatus('current')
erabActiveMaxNbrDLQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrDLQci6.setStatus('current')
erabActiveMaxNbrDLQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrDLQci7.setStatus('current')
erabActiveMaxNbrDLQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrDLQci8.setStatus('current')
erabActiveMaxNbrDLQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrDLQci9.setStatus('current')
erabActiveMeanNbrUL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrUL.setStatus('current')
erabActiveMeanNbrULQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrULQci1.setStatus('current')
erabActiveMeanNbrULQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrULQci2.setStatus('current')
erabActiveMeanNbrULQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrULQci3.setStatus('current')
erabActiveMeanNbrULQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrULQci4.setStatus('current')
erabActiveMeanNbrULQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrULQci5.setStatus('current')
erabActiveMeanNbrULQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrULQci6.setStatus('current')
erabActiveMeanNbrULQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrULQci7.setStatus('current')
erabActiveMeanNbrULQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrULQci8.setStatus('current')
erabActiveMeanNbrULQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMeanNbrULQci9.setStatus('current')
erabActiveMaxNbrUL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrUL.setStatus('current')
erabActiveMaxNbrULQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrULQci1.setStatus('current')
erabActiveMaxNbrULQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrULQci2.setStatus('current')
erabActiveMaxNbrULQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrULQci3.setStatus('current')
erabActiveMaxNbrULQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrULQci4.setStatus('current')
erabActiveMaxNbrULQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrULQci5.setStatus('current')
erabActiveMaxNbrULQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrULQci6.setStatus('current')
erabActiveMaxNbrULQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrULQci7.setStatus('current')
erabActiveMaxNbrULQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrULQci8.setStatus('current')
erabActiveMaxNbrULQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 11, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabActiveMaxNbrULQci9.setStatus('current')
volteSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12), )
if mibBuilder.loadTexts: volteSchedulingTable.setStatus('current')
volteSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "volteSchedulingLcId"))
if mibBuilder.loadTexts: volteSchedulingEntry.setStatus('current')
volteSchedulingLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: volteSchedulingLcId.setStatus('current')
volteSchedulingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volteSchedulingRowStatus.setStatus('current')
macNbrSpsTbUlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrSpsTbUlQci1.setStatus('current')
macNbrSpsTbDlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrSpsTbDlQci1.setStatus('current')
macNbrTbUlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbUlQci1.setStatus('current')
macNbrTbDlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlQci1.setStatus('current')
macNbrInitTbUlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrInitTbUlQci1.setStatus('current')
macNbrInitTbDlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrInitTbDlQci1.setStatus('current')
macUlScheTimesQCI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macUlScheTimesQCI1.setStatus('current')
macDlScheTimesQCI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macDlScheTimesQCI1.setStatus('current')
macSpsPrbUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSpsPrbUl.setStatus('current')
macSpsPrbDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macSpsPrbDl.setStatus('current')
macNbrSuccInitTbUlQpskQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrSuccInitTbUlQpskQci1.setStatus('current')
macNbrSuccInitTbUl16QamQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrSuccInitTbUl16QamQci1.setStatus('current')
macNbrSuccInitTbUl64QamQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrSuccInitTbUl64QamQci1.setStatus('current')
macNbrSuccInitTbDlQpskQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrSuccInitTbDlQpskQci1.setStatus('current')
macNbrSuccInitTbDl16QamQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrSuccInitTbDl16QamQci1.setStatus('current')
macNbrSuccInitTbDl64QamQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrSuccInitTbDl64QamQci1.setStatus('current')
macNbrTbUlQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbUlQci2.setStatus('current')
macNbrTbDlQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlQci2.setStatus('current')
caPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13), )
if mibBuilder.loadTexts: caPerformanceTable.setStatus('current')
caPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "caPerformanceLcId"))
if mibBuilder.loadTexts: caPerformanceEntry.setStatus('current')
caPerformanceLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: caPerformanceLcId.setStatus('current')
caPerformanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caPerformanceRowStatus.setStatus('current')
rruBorrowFromScellPrbTotDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruBorrowFromScellPrbTotDl.setStatus('current')
rruLendToPCellPrbTotDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruLendToPCellPrbTotDl.setStatus('current')
rrcActiveMeanNbrPCellDl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcActiveMeanNbrPCellDl2CC.setStatus('current')
rrcActiveMaxNbrPCellDl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcActiveMaxNbrPCellDl2CC.setStatus('current')
rrcAdmissionConnTot = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAdmissionConnTot.setStatus('current')
rrcAdmissionConnSampNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAdmissionConnSampNum.setStatus('current')
rrcAdmisssionConnMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcAdmisssionConnMax.setStatus('current')
rruBorrowFromScellPrbTotUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruBorrowFromScellPrbTotUl.setStatus('current')
rruLendToPCellPrbTotUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruLendToPCellPrbTotUl.setStatus('current')
rrcActiveNbrPCellDl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcActiveNbrPCellDl2CC.setStatus('current')
macCaActiveSampNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveSampNbr.setStatus('current')
macCASCellActiveAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCASCellActiveAtt.setStatus('current')
macCASCellActiveSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCASCellActiveSucc.setStatus('current')
macCASCellDeactiveAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCASCellDeactiveAtt.setStatus('current')
macCASCellDeactiveSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCASCellDeactiveSucc.setStatus('current')
macCaActivePrbPCellDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActivePrbPCellDl.setStatus('current')
macCaActiveTtiPCellDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveTtiPCellDl.setStatus('current')
macThrpTimeCaActiveDL2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macThrpTimeCaActiveDL2CC.setStatus('current')
macCaActiveMacThruPCellDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveMacThruPCellDl.setStatus('current')
macCaActivePrbPSCellDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActivePrbPSCellDl.setStatus('current')
macCaActiveNbrSCellDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveNbrSCellDl.setStatus('current')
macCaActiveMaxNbrSCellDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveMaxNbrSCellDl.setStatus('current')
macCaActiveNbrPCellUl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveNbrPCellUl2CC.setStatus('current')
macCaActiveMaxNbrPCellUl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveMaxNbrPCellUl2CC.setStatus('current')
macCaActiveNbrSCellUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveNbrSCellUl.setStatus('current')
macCaActiveMaxNbrSCellUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveMaxNbrSCellUl.setStatus('current')
macCaActivePrbPCellUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActivePrbPCellUl.setStatus('current')
macCaActiveTtiPCellUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveTtiPCellUl.setStatus('current')
macCaActivePrbPSCellUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActivePrbPSCellUl.setStatus('current')
macThrpTimeCaActiveUL2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macThrpTimeCaActiveUL2CC.setStatus('current')
macCaActiveMacThruPCellUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveMacThruPCellUl.setStatus('current')
macCaActiveBurstDataThruPCellUl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveBurstDataThruPCellUl2CC.setStatus('current')
macCaActiveThrpTimeUL2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveThrpTimeUL2CC.setStatus('current')
rrcActiveNbrPCellDl2CCTF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcActiveNbrPCellDl2CCTF.setStatus('current')
rrcActiveMaxNbrPCellDl2CCTF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcActiveMaxNbrPCellDl2CCTF.setStatus('current')
rruBorrowFromScellPrbTotDlTF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruBorrowFromScellPrbTotDlTF.setStatus('current')
rruLendToPCellPrbTotDlTF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruLendToPCellPrbTotDlTF.setStatus('current')
rruBorrowFromScellPrbTotUlTF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruBorrowFromScellPrbTotUlTF.setStatus('current')
rruLendToPCellPrbTotUlTF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruLendToPCellPrbTotUlTF.setStatus('current')
rrcActiveNbrPCellDl3CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcActiveNbrPCellDl3CC.setStatus('current')
rrcActiveMaxNbrPCellDl3CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcActiveMaxNbrPCellDl3CC.setStatus('current')
macCaActiveMacThruSCellUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveMacThruSCellUl.setStatus('current')
macCaActiveMacThruSCellDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 13, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveMacThruSCellDl.setStatus('current')
scheUEPerTTITable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 14), )
if mibBuilder.loadTexts: scheUEPerTTITable.setStatus('current')
scheUEPerTTIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 14, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "scheUEPerTTILcId"))
if mibBuilder.loadTexts: scheUEPerTTIEntry.setStatus('current')
scheUEPerTTILcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: scheUEPerTTILcId.setStatus('current')
scheUEPerTTIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 14, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scheUEPerTTIRowStatus.setStatus('current')
macMaxSchUeUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMaxSchUeUl.setStatus('current')
macMaxSchUeDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMaxSchUeDl.setStatus('current')
ipThpUlTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15), )
if mibBuilder.loadTexts: ipThpUlTable.setStatus('current')
ipThpUlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ipThpUlLcId"))
if mibBuilder.loadTexts: ipThpUlEntry.setStatus('current')
ipThpUlLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: ipThpUlLcId.setStatus('current')
ipThpUlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipThpUlRowStatus.setStatus('current')
erabThpTimeUlSum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabThpTimeUlSum.setStatus('current')
erabThpTimeUlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabThpTimeUlQci1.setStatus('current')
erabThpTimeUlQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabThpTimeUlQci2.setStatus('current')
erabThpTimeUlQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabThpTimeUlQci3.setStatus('current')
erabThpTimeUlQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabThpTimeUlQci4.setStatus('current')
erabThpTimeUlQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabThpTimeUlQci5.setStatus('current')
erabThpTimeUlQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabThpTimeUlQci6.setStatus('current')
erabThpTimeUlQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabThpTimeUlQci7.setStatus('current')
erabThpTimeUlQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabThpTimeUlQci8.setStatus('current')
erabThpTimeUlQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erabThpTimeUlQci9.setStatus('current')
drbBurstDataThpULSum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpULSum.setStatus('current')
drbBurstDataThpULQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpULQci1.setStatus('current')
drbBurstDataThpULQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpULQci2.setStatus('current')
drbBurstDataThpULQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpULQci3.setStatus('current')
drbBurstDataThpULQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpULQci4.setStatus('current')
drbBurstDataThpULQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpULQci5.setStatus('current')
drbBurstDataThpULQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpULQci6.setStatus('current')
drbBurstDataThpULQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpULQci7.setStatus('current')
drbBurstDataThpULQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpULQci8.setStatus('current')
drbBurstDataThpULQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 15, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpULQci9.setStatus('current')
compPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16), )
if mibBuilder.loadTexts: compPerformanceTable.setStatus('current')
compPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "compPerformanceLcId"))
if mibBuilder.loadTexts: compPerformanceEntry.setStatus('current')
compPerformanceLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: compPerformanceLcId.setStatus('current')
compPerformanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compPerformanceRowStatus.setStatus('current')
rruCompPrbTotUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCompPrbTotUl.setStatus('current')
rruCompPrbTotDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCompPrbTotDl.setStatus('current')
rruCompSfnDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCompSfnDl.setStatus('current')
rruCompCsDlGBR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCompCsDlGBR.setStatus('current')
rruCompCsDlNonGBR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruCompCsDlNonGBR.setStatus('current')
pdcpCompThrputDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpCompThrputDl.setStatus('current')
rruJRSfn = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruJRSfn.setStatus('current')
rruJRUsrGBR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruJRUsrGBR.setStatus('current')
rruJRUsrNonGBR = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruJRUsrNonGBR.setStatus('current')
pdcpJRThrput = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpJRThrput.setStatus('current')
taPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17), )
if mibBuilder.loadTexts: taPerformanceTable.setStatus('current')
taPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "taPerformanceLcId"))
if mibBuilder.loadTexts: taPerformanceEntry.setStatus('current')
taPerformanceLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: taPerformanceLcId.setStatus('current')
taPerformanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taPerformanceRowStatus.setStatus('current')
phyTA0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyTA0.setStatus('current')
phyTA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyTA1.setStatus('current')
phyTA2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyTA2.setStatus('current')
phyTA3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyTA3.setStatus('current')
phyTA4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyTA4.setStatus('current')
phyTA5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyTA5.setStatus('current')
phyTA6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyTA6.setStatus('current')
phyTA7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyTA7.setStatus('current')
phyTA8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyTA8.setStatus('current')
phyTA9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyTA9.setStatus('current')
phyTA10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyTA10.setStatus('current')
phyTA11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyTA11.setStatus('current')
phyTAMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyTAMax.setStatus('current')
dlrbStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18), )
if mibBuilder.loadTexts: dlrbStatisticTable.setStatus('current')
dlrbStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "dlrbStatisticLcId"))
if mibBuilder.loadTexts: dlrbStatisticEntry.setStatus('current')
dlrbStatisticLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: dlrbStatisticLcId.setStatus('current')
dlrbStatisticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlrbStatisticRowStatus.setStatus('current')
macNbrRbDlTm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm2.setStatus('current')
macNbrRbDlTm3SFBC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm3SFBC.setStatus('current')
macNbrRbDlTm3SM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm3SM.setStatus('current')
macNbrRbDlTm8SFBC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm8SFBC.setStatus('current')
macNbrRbDlTm8RANK1BF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm8RANK1BF.setStatus('current')
macNbrRbDlTm8RANK2BF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm8RANK2BF.setStatus('current')
macNbrRbDlTm7SFBC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm7SFBC.setStatus('current')
macNbrRbDlTm7BF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm7BF.setStatus('current')
macNbrRbDlUnused = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlUnused.setStatus('current')
macNbrRbDlPBCH = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlPBCH.setStatus('current')
macNbrRbDlTm9SFBC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm9SFBC.setStatus('current')
macNbrRbDlTm9RANK1BF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm9RANK1BF.setStatus('current')
macNbrRbDlTm9RANK2BF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm9RANK2BF.setStatus('current')
macNbrRbDlTm9RANK3BF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm9RANK3BF.setStatus('current')
macNbrRbDlTm9RANK4BF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm9RANK4BF.setStatus('current')
macNbrRbDlTm4SFBC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm4SFBC.setStatus('current')
macNbrRbDlTm4SM = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 18, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlTm4SM.setStatus('current')
cellCompStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19), )
if mibBuilder.loadTexts: cellCompStatisticTable.setStatus('current')
cellCompStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellCompStatisticNetLcComponentLcId"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellCompStatisticNetLcComponentIndex"))
if mibBuilder.loadTexts: cellCompStatisticEntry.setStatus('current')
cellCompStatisticNetLcComponentLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellCompStatisticNetLcComponentLcId.setStatus('current')
cellCompStatisticNetLcComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: cellCompStatisticNetLcComponentIndex.setStatus('current')
cellCompStatisticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellCompStatisticRowStatus.setStatus('current')
macCellCompThrpUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCellCompThrpUl.setStatus('current')
macCellCompThrpDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCellCompThrpDl.setStatus('current')
macCellCompUeNumQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCellCompUeNumQci1.setStatus('current')
macCellCompUeNumQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCellCompUeNumQci2.setStatus('current')
macCellCompUeNumQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCellCompUeNumQci3.setStatus('current')
macCellCompUeNumQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCellCompUeNumQci4.setStatus('current')
macCellCompUeNumQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCellCompUeNumQci5.setStatus('current')
macCellCompUeNumQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCellCompUeNumQci6.setStatus('current')
macCellCompUeNumQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCellCompUeNumQci7.setStatus('current')
macCellCompUeNumQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCellCompUeNumQci8.setStatus('current')
macCellCompUeNumQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCellCompUeNumQci9.setStatus('current')
macCellCompUeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCellCompUeNum.setStatus('current')
macCellCompSampNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 19, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCellCompSampNum.setStatus('current')
scheTimesAcoordingMCSTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20), )
if mibBuilder.loadTexts: scheTimesAcoordingMCSTable.setStatus('current')
scheTimesAcoordingMCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "scheTimesAcoordingMCSLcId"))
if mibBuilder.loadTexts: scheTimesAcoordingMCSEntry.setStatus('current')
scheTimesAcoordingMCSLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: scheTimesAcoordingMCSLcId.setStatus('current')
scheTimesAcoordingMCSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scheTimesAcoordingMCSRowStatus.setStatus('current')
nbrschetimesulMcs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs0.setStatus('current')
nbrschetimesulMcs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs1.setStatus('current')
nbrschetimesulMcs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs2.setStatus('current')
nbrschetimesulMcs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs3.setStatus('current')
nbrschetimesulMcs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs4.setStatus('current')
nbrschetimesulMcs5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs5.setStatus('current')
nbrschetimesulMcs6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs6.setStatus('current')
nbrschetimesulMcs7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs7.setStatus('current')
nbrschetimesulMcs8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs8.setStatus('current')
nbrschetimesulMcs9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs9.setStatus('current')
nbrschetimesulMcs10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs10.setStatus('current')
nbrschetimesulMcs11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs11.setStatus('current')
nbrschetimesulMcs12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs12.setStatus('current')
nbrschetimesulMcs13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs13.setStatus('current')
nbrschetimesulMcs14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs14.setStatus('current')
nbrschetimesulMcs15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs15.setStatus('current')
nbrschetimesulMcs16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs16.setStatus('current')
nbrschetimesulMcs17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs17.setStatus('current')
nbrschetimesulMcs18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs18.setStatus('current')
nbrschetimesulMcs19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs19.setStatus('current')
nbrschetimesulMcs20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs20.setStatus('current')
nbrschetimesulMcs21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs21.setStatus('current')
nbrschetimesulMcs22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs22.setStatus('current')
nbrschetimesulMcs23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs23.setStatus('current')
nbrschetimesulMcs24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs24.setStatus('current')
nbrschetimesulMcs25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs25.setStatus('current')
nbrschetimesulMcs26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs26.setStatus('current')
nbrschetimesulMcs27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs27.setStatus('current')
nbrschetimesulMcs28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesulMcs28.setStatus('current')
nbrschetimesdlMcs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs0.setStatus('current')
nbrschetimesdlMcs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs1.setStatus('current')
nbrschetimesdlMcs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs2.setStatus('current')
nbrschetimesdlMcs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs3.setStatus('current')
nbrschetimesdlMcs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs4.setStatus('current')
nbrschetimesdlMcs5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs5.setStatus('current')
nbrschetimesdlMcs6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs6.setStatus('current')
nbrschetimesdlMcs7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs7.setStatus('current')
nbrschetimesdlMcs8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs8.setStatus('current')
nbrschetimesdlMcs9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs9.setStatus('current')
nbrschetimesdlMcs10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs10.setStatus('current')
nbrschetimesdlMcs11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs11.setStatus('current')
nbrschetimesdlMcs12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs12.setStatus('current')
nbrschetimesdlMcs13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs13.setStatus('current')
nbrschetimesdlMcs14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs14.setStatus('current')
nbrschetimesdlMcs15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs15.setStatus('current')
nbrschetimesdlMcs16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs16.setStatus('current')
nbrschetimesdlMcs17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs17.setStatus('current')
nbrschetimesdlMcs18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs18.setStatus('current')
nbrschetimesdlMcs19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs19.setStatus('current')
nbrschetimesdlMcs20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs20.setStatus('current')
nbrschetimesdlMcs21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs21.setStatus('current')
nbrschetimesdlMcs22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs22.setStatus('current')
nbrschetimesdlMcs23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs23.setStatus('current')
nbrschetimesdlMcs24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs24.setStatus('current')
nbrschetimesdlMcs25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs25.setStatus('current')
nbrschetimesdlMcs26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs26.setStatus('current')
nbrschetimesdlMcs27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs27.setStatus('current')
nbrschetimesdlMcs28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs28.setStatus('current')
nbrschetimesdlMcs29 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs29.setStatus('current')
nbrschetimesdlMcs30 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs30.setStatus('current')
nbrschetimesdlMcs31 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 20, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrschetimesdlMcs31.setStatus('current')
schePrbAcoordingMCSTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21), )
if mibBuilder.loadTexts: schePrbAcoordingMCSTable.setStatus('current')
schePrbAcoordingMCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "schePrbAcoordingMCSLcId"))
if mibBuilder.loadTexts: schePrbAcoordingMCSEntry.setStatus('current')
schePrbAcoordingMCSLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: schePrbAcoordingMCSLcId.setStatus('current')
schePrbAcoordingMCSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schePrbAcoordingMCSRowStatus.setStatus('current')
nbrscheprbulMcs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs0.setStatus('current')
nbrscheprbulMcs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs1.setStatus('current')
nbrscheprbulMcs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs2.setStatus('current')
nbrscheprbulMcs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs3.setStatus('current')
nbrscheprbulMcs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs4.setStatus('current')
nbrscheprbulMcs5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs5.setStatus('current')
nbrscheprbulMcs6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs6.setStatus('current')
nbrscheprbulMcs7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs7.setStatus('current')
nbrscheprbulMcs8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs8.setStatus('current')
nbrscheprbulMcs9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs9.setStatus('current')
nbrscheprbulMcs10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs10.setStatus('current')
nbrscheprbulMcs11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs11.setStatus('current')
nbrscheprbulMcs12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs12.setStatus('current')
nbrscheprbulMcs13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs13.setStatus('current')
nbrscheprbulMcs14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs14.setStatus('current')
nbrscheprbulMcs15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs15.setStatus('current')
nbrscheprbulMcs16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs16.setStatus('current')
nbrscheprbulMcs17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs17.setStatus('current')
nbrscheprbulMcs18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs18.setStatus('current')
nbrscheprbulMcs19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs19.setStatus('current')
nbrscheprbulMcs20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs20.setStatus('current')
nbrscheprbulMcs21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs21.setStatus('current')
nbrscheprbulMcs22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs22.setStatus('current')
nbrscheprbulMcs23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs23.setStatus('current')
nbrscheprbulMcs24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs24.setStatus('current')
nbrscheprbulMcs25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs25.setStatus('current')
nbrscheprbulMcs26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs26.setStatus('current')
nbrscheprbulMcs27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs27.setStatus('current')
nbrscheprbulMcs28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbulMcs28.setStatus('current')
nbrscheprbdlMcs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs0.setStatus('current')
nbrscheprbdlMcs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs1.setStatus('current')
nbrscheprbdlMcs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs2.setStatus('current')
nbrscheprbdlMcs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs3.setStatus('current')
nbrscheprbdlMcs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs4.setStatus('current')
nbrscheprbdlMcs5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs5.setStatus('current')
nbrscheprbdlMcs6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs6.setStatus('current')
nbrscheprbdlMcs7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs7.setStatus('current')
nbrscheprbdlMcs8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs8.setStatus('current')
nbrscheprbdlMcs9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs9.setStatus('current')
nbrscheprbdlMcs10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs10.setStatus('current')
nbrscheprbdlMcs11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs11.setStatus('current')
nbrscheprbdlMcs12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs12.setStatus('current')
nbrscheprbdlMcs13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs13.setStatus('current')
nbrscheprbdlMcs14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs14.setStatus('current')
nbrscheprbdlMcs15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs15.setStatus('current')
nbrscheprbdlMcs16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs16.setStatus('current')
nbrscheprbdlMcs17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs17.setStatus('current')
nbrscheprbdlMcs18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs18.setStatus('current')
nbrscheprbdlMcs19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs19.setStatus('current')
nbrscheprbdlMcs20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs20.setStatus('current')
nbrscheprbdlMcs21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs21.setStatus('current')
nbrscheprbdlMcs22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs22.setStatus('current')
nbrscheprbdlMcs23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs23.setStatus('current')
nbrscheprbdlMcs24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs24.setStatus('current')
nbrscheprbdlMcs25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs25.setStatus('current')
nbrscheprbdlMcs26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs26.setStatus('current')
nbrscheprbdlMcs27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs27.setStatus('current')
nbrscheprbdlMcs28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs28.setStatus('current')
nbrscheprbdlMcs29 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs29.setStatus('current')
nbrscheprbdlMcs30 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs30.setStatus('current')
nbrscheprbdlMcs31 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 21, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbrscheprbdlMcs31.setStatus('current')
scheTimesAcoordingSFNTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22), )
if mibBuilder.loadTexts: scheTimesAcoordingSFNTable.setStatus('current')
scheTimesAcoordingSFNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "scheTimesAcoordingSFNLcId"))
if mibBuilder.loadTexts: scheTimesAcoordingSFNEntry.setStatus('current')
scheTimesAcoordingSFNLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: scheTimesAcoordingSFNLcId.setStatus('current')
scheTimesAcoordingSFNRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scheTimesAcoordingSFNRowStatus.setStatus('current')
srbNbrScheTimesSfn0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srbNbrScheTimesSfn0.setStatus('current')
srbNbrScheTimesSfn1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srbNbrScheTimesSfn1.setStatus('current')
srbNbrScheTimesSfn2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srbNbrScheTimesSfn2.setStatus('current')
srbNbrScheTimesSfn3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srbNbrScheTimesSfn3.setStatus('current')
srbNbrScheTimesSfn4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srbNbrScheTimesSfn4.setStatus('current')
srbNbrScheTimesSfn5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srbNbrScheTimesSfn5.setStatus('current')
srbNbrScheTimesSfn6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srbNbrScheTimesSfn6.setStatus('current')
srbNbrScheTimesSfn7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srbNbrScheTimesSfn7.setStatus('current')
srbNbrScheTimesSfn8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srbNbrScheTimesSfn8.setStatus('current')
srbNbrScheTimesSfn9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srbNbrScheTimesSfn9.setStatus('current')
drbNbrScheTimesSfn0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbNbrScheTimesSfn0.setStatus('current')
drbNbrScheTimesSfn1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbNbrScheTimesSfn1.setStatus('current')
drbNbrScheTimesSfn2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbNbrScheTimesSfn2.setStatus('current')
drbNbrScheTimesSfn3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbNbrScheTimesSfn3.setStatus('current')
drbNbrScheTimesSfn4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbNbrScheTimesSfn4.setStatus('current')
drbNbrScheTimesSfn5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbNbrScheTimesSfn5.setStatus('current')
drbNbrScheTimesSfn6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbNbrScheTimesSfn6.setStatus('current')
drbNbrScheTimesSfn7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbNbrScheTimesSfn7.setStatus('current')
drbNbrScheTimesSfn8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbNbrScheTimesSfn8.setStatus('current')
drbNbrScheTimesSfn9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbNbrScheTimesSfn9.setStatus('current')
srNbrScheTimesTotol = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srNbrScheTimesTotol.setStatus('current')
srNbrScheTimesSfn2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srNbrScheTimesSfn2.setStatus('current')
srNbrScheTimesSfn7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 22, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srNbrScheTimesSfn7.setStatus('current')
edgeUserStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23), )
if mibBuilder.loadTexts: edgeUserStatisticTable.setStatus('current')
edgeUserStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "edgeUserStatisticLcId"))
if mibBuilder.loadTexts: edgeUserStatisticEntry.setStatus('current')
edgeUserStatisticLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: edgeUserStatisticLcId.setStatus('current')
edgeUserStatisticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgeUserStatisticRowStatus.setStatus('current')
macPdschPrbAssnDlEdgeUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPdschPrbAssnDlEdgeUser.setStatus('current')
macPuschPrbAssnUlEdgeUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPuschPrbAssnUlEdgeUser.setStatus('current')
pdcpUpOctDlEdgeUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpOctDlEdgeUser.setStatus('current')
pdcpUpOctDlCentreUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpOctDlCentreUser.setStatus('current')
macScheTimeDlEdgeUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macScheTimeDlEdgeUser.setStatus('current')
macScheTimeDlCentreUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macScheTimeDlCentreUser.setStatus('current')
rrcConnTolDlEdgeUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnTolDlEdgeUser.setStatus('current')
rrcConnTolDlCentreUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnTolDlCentreUser.setStatus('current')
rrcUserSampNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcUserSampNbr.setStatus('current')
rrcConnTolUlEdgeUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcConnTolUlEdgeUser.setStatus('current')
pdcpUpOctUlEdgeUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpOctUlEdgeUser.setStatus('current')
pdcpBurstDataUlEdgeUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpBurstDataUlEdgeUser.setStatus('current')
macScheTimeUlEdgeUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 23, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macScheTimeUlEdgeUser.setStatus('current')
mimoPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24), )
if mibBuilder.loadTexts: mimoPerformanceTable.setStatus('current')
mimoPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "mimoPerformanceLcId"))
if mibBuilder.loadTexts: mimoPerformanceEntry.setStatus('current')
mimoPerformanceLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: mimoPerformanceLcId.setStatus('current')
mimoPerformanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mimoPerformanceRowStatus.setStatus('current')
macMumimoPairSfnUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoPairSfnUl.setStatus('current')
macMumimoPairRbUlRank1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoPairRbUlRank1.setStatus('current')
macMumimoPairRbUlRank2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoPairRbUlRank2.setStatus('current')
macMumimoThrputUlRank1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoThrputUlRank1.setStatus('current')
macMumimoThrputUlRank2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoThrputUlRank2.setStatus('current')
macMumimoUserUlRank1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoUserUlRank1.setStatus('current')
macMumimoPairUserUlRank2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoPairUserUlRank2.setStatus('current')
macMumimoMaxPairUserUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoMaxPairUserUl.setStatus('current')
macMumimoThrpTimeUlRank1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoThrpTimeUlRank1.setStatus('current')
macMumimoThrpTimeUlRank2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoThrpTimeUlRank2.setStatus('current')
macMumimoPairSfnDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoPairSfnDl.setStatus('current')
macMumimoRbDlRank1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoRbDlRank1.setStatus('current')
macMumimoPairRbDlRank2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoPairRbDlRank2.setStatus('current')
macMumimoThrputDlRank1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoThrputDlRank1.setStatus('current')
macMumimoThrputDlRank2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoThrputDlRank2.setStatus('current')
macMumimoUserDlRank1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoUserDlRank1.setStatus('current')
macMumimoPairUserDlRank2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoPairUserDlRank2.setStatus('current')
macMumimoMaxPairUserDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoMaxPairUserDl.setStatus('current')
macMumimoThrpTimeDlRank1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoThrpTimeDlRank1.setStatus('current')
macMumimoThrpTimeDlRank2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 24, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macMumimoThrpTimeDlRank2.setStatus('current')
macPresetPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25), )
if mibBuilder.loadTexts: macPresetPerformanceTable.setStatus('current')
macPresetPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "macPresetPerformanceLcId"))
if mibBuilder.loadTexts: macPresetPerformanceEntry.setStatus('current')
macPresetPerformanceLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: macPresetPerformanceLcId.setStatus('current')
macPresetPerformanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPresetPerformanceRowStatus.setStatus('current')
macPreset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset1.setStatus('current')
macPreset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset2.setStatus('current')
macPreset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset3.setStatus('current')
macPreset4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset4.setStatus('current')
macPreset5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset5.setStatus('current')
macPreset6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset6.setStatus('current')
macPreset7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset7.setStatus('current')
macPreset8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset8.setStatus('current')
macPreset9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset9.setStatus('current')
macPreset10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset10.setStatus('current')
macPreset11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset11.setStatus('current')
macPreset12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset12.setStatus('current')
macPreset13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset13.setStatus('current')
macPreset14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset14.setStatus('current')
macPreset15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset15.setStatus('current')
macPreset16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset16.setStatus('current')
macPreset17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset17.setStatus('current')
macPreset18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset18.setStatus('current')
macPreset19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset19.setStatus('current')
macPreset20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset20.setStatus('current')
macPreset21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset21.setStatus('current')
macPreset22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset22.setStatus('current')
macPreset23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset23.setStatus('current')
macPreset24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset24.setStatus('current')
macPreset25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset25.setStatus('current')
macPreset26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset26.setStatus('current')
macPreset27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset27.setStatus('current')
macPreset28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset28.setStatus('current')
macPreset29 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset29.setStatus('current')
macPreset30 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset30.setStatus('current')
macPreset31 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset31.setStatus('current')
macPreset32 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset32.setStatus('current')
macPreset33 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset33.setStatus('current')
macPreset34 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset34.setStatus('current')
macPreset35 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset35.setStatus('current')
macPreset36 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset36.setStatus('current')
macPreset37 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset37.setStatus('current')
macPreset38 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset38.setStatus('current')
macPreset39 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset39.setStatus('current')
macPreset40 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 25, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPreset40.setStatus('current')
videoPerfOfMacTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 26), )
if mibBuilder.loadTexts: videoPerfOfMacTable.setStatus('current')
videoPerfOfMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 26, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "videoPerfOfMacLcId"))
if mibBuilder.loadTexts: videoPerfOfMacEntry.setStatus('current')
videoPerfOfMacLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: videoPerfOfMacLcId.setStatus('current')
videoPerfOfMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 26, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoPerfOfMacRowStatus.setStatus('current')
macVideoSchDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 26, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macVideoSchDl.setStatus('current')
macVideoUsedPrbPerSfnDlMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 26, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macVideoUsedPrbPerSfnDlMax.setStatus('current')
macVideoUsedPrbPerSfnDlAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 26, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macVideoUsedPrbPerSfnDlAvg.setStatus('current')
macVideoSendBitLenSucDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 26, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macVideoSendBitLenSucDl.setStatus('current')
macVideoUsedPrbPerSfnUlMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 26, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macVideoUsedPrbPerSfnUlMax.setStatus('current')
macVideoUsedPrbPerSfnUlAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 26, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macVideoUsedPrbPerSfnUlAvg.setStatus('current')
macVideoRevBitLenSucUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 26, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macVideoRevBitLenSucUl.setStatus('current')
phrPerformTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27), )
if mibBuilder.loadTexts: phrPerformTable.setStatus('current')
phrPerformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "phrPerformLcId"))
if mibBuilder.loadTexts: phrPerformEntry.setStatus('current')
phrPerformLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: phrPerformLcId.setStatus('current')
phrPerformRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phrPerformRowStatus.setStatus('current')
macPhrIndex0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex0.setStatus('current')
macPhrIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex1.setStatus('current')
macPhrIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex2.setStatus('current')
macPhrIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex3.setStatus('current')
macPhrIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex4.setStatus('current')
macPhrIndex5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex5.setStatus('current')
macPhrIndex6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex6.setStatus('current')
macPhrIndex7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex7.setStatus('current')
macPhrIndex8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex8.setStatus('current')
macPhrIndex9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex9.setStatus('current')
macPhrIndex10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex10.setStatus('current')
macPhrIndex11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex11.setStatus('current')
macPhrIndex12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex12.setStatus('current')
macPhrIndex13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex13.setStatus('current')
macPhrIndex14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex14.setStatus('current')
macPhrIndex15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex15.setStatus('current')
macPhrIndex16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex16.setStatus('current')
macPhrIndex17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex17.setStatus('current')
macPhrIndex18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex18.setStatus('current')
macPhrIndex19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex19.setStatus('current')
macPhrIndex20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex20.setStatus('current')
macPhrIndex21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex21.setStatus('current')
macPhrIndex22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex22.setStatus('current')
macPhrIndex23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex23.setStatus('current')
macPhrIndex24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex24.setStatus('current')
macPhrIndex25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex25.setStatus('current')
macPhrIndex26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex26.setStatus('current')
macPhrIndex27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex27.setStatus('current')
macPhrIndex28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex28.setStatus('current')
macPhrIndex29 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex29.setStatus('current')
macPhrIndex30 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex30.setStatus('current')
macPhrIndex31 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex31.setStatus('current')
macPhrIndex32 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex32.setStatus('current')
macPhrIndex33 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex33.setStatus('current')
macPhrIndex34 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex34.setStatus('current')
macPhrIndex35 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex35.setStatus('current')
macPhrIndex36 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex36.setStatus('current')
macPhrIndex37 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex37.setStatus('current')
macPhrIndex38 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex38.setStatus('current')
macPhrIndex39 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex39.setStatus('current')
macPhrIndex40 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex40.setStatus('current')
macPhrIndex41 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex41.setStatus('current')
macPhrIndex42 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex42.setStatus('current')
macPhrIndex43 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex43.setStatus('current')
macPhrIndex44 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex44.setStatus('current')
macPhrIndex45 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex45.setStatus('current')
macPhrIndex46 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex46.setStatus('current')
macPhrIndex47 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex47.setStatus('current')
macPhrIndex48 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex48.setStatus('current')
macPhrIndex49 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex49.setStatus('current')
macPhrIndex50 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex50.setStatus('current')
macPhrIndex51 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex51.setStatus('current')
macPhrIndex52 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex52.setStatus('current')
macPhrIndex53 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex53.setStatus('current')
macPhrIndex54 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex54.setStatus('current')
macPhrIndex55 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex55.setStatus('current')
macPhrIndex56 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex56.setStatus('current')
macPhrIndex57 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex57.setStatus('current')
macPhrIndex58 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex58.setStatus('current')
macPhrIndex59 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex59.setStatus('current')
macPhrIndex60 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex60.setStatus('current')
macPhrIndex61 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex61.setStatus('current')
macPhrIndex62 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex62.setStatus('current')
macPhrIndex63 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 27, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPhrIndex63.setStatus('current')
perfOfMacForTestTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 28), )
if mibBuilder.loadTexts: perfOfMacForTestTable.setStatus('current')
perfOfMacForTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 28, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "perfOfMacForTestLcId"))
if mibBuilder.loadTexts: perfOfMacForTestEntry.setStatus('current')
perfOfMacForTestLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: perfOfMacForTestLcId.setStatus('current')
perfOfMacForTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 28, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfOfMacForTestRowStatus.setStatus('current')
macVipNumDataUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 28, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macVipNumDataUl.setStatus('current')
macVipNumDataDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 28, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macVipNumDataDl.setStatus('current')
macVipNumVolte = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 28, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macVipNumVolte.setStatus('current')
macVipNumVedio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 28, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macVipNumVedio.setStatus('current')
macVipNumGoldVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 28, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macVipNumGoldVoice.setStatus('current')
macVipNumDisconfGv = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 28, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macVipNumDisconfGv.setStatus('current')
massiveMIMOTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29), )
if mibBuilder.loadTexts: massiveMIMOTable.setStatus('current')
massiveMIMOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "massiveMIMOLcId"))
if mibBuilder.loadTexts: massiveMIMOEntry.setStatus('current')
massiveMIMOLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: massiveMIMOLcId.setStatus('current')
massiveMIMORowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: massiveMIMORowStatus.setStatus('current')
macNbrRbUlMassiveMimoSM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbUlMassiveMimoSM1.setStatus('current')
macNbrRbUlMassiveMimoSM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbUlMassiveMimoSM2.setStatus('current')
macNbrRbUlMassiveMimoSM3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbUlMassiveMimoSM3.setStatus('current')
macNbrRbUlMassiveMimoSM4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbUlMassiveMimoSM4.setStatus('current')
macNbrRbUlMassiveMimoSM5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbUlMassiveMimoSM5.setStatus('current')
macNbrRbUlMassiveMimoSM6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbUlMassiveMimoSM6.setStatus('current')
macNbrRbUlMassiveMimoSM7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbUlMassiveMimoSM7.setStatus('current')
macNbrRbUlMassiveMimoSM8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbUlMassiveMimoSM8.setStatus('current')
macNbrRbDlMassiveMimoSM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM1.setStatus('current')
macNbrRbDlMassiveMimoSM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM2.setStatus('current')
macNbrRbDlMassiveMimoSM3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM3.setStatus('current')
macNbrRbDlMassiveMimoSM4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM4.setStatus('current')
macNbrRbDlMassiveMimoSM5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM5.setStatus('current')
macNbrRbDlMassiveMimoSM6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM6.setStatus('current')
macNbrRbDlMassiveMimoSM7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM7.setStatus('current')
macNbrRbDlMassiveMimoSM8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM8.setStatus('current')
macNbrRbDlMassiveMimoSM9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM9.setStatus('current')
macNbrRbDlMassiveMimoSM10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM10.setStatus('current')
macNbrRbDlMassiveMimoSM11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM11.setStatus('current')
macNbrRbDlMassiveMimoSM12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM12.setStatus('current')
macNbrRbDlMassiveMimoSM13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM13.setStatus('current')
macNbrRbDlMassiveMimoSM14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM14.setStatus('current')
macNbrRbDlMassiveMimoSM15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM15.setStatus('current')
macNbrRbDlMassiveMimoSM16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrRbDlMassiveMimoSM16.setStatus('current')
macNbrErrTbUlMassiveMimoSM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbUlMassiveMimoSM1.setStatus('current')
macNbrErrTbUlMassiveMimoSM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbUlMassiveMimoSM2.setStatus('current')
macNbrErrTbUlMassiveMimoSM3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbUlMassiveMimoSM3.setStatus('current')
macNbrErrTbUlMassiveMimoSM4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbUlMassiveMimoSM4.setStatus('current')
macNbrErrTbUlMassiveMimoSM5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbUlMassiveMimoSM5.setStatus('current')
macNbrErrTbUlMassiveMimoSM6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbUlMassiveMimoSM6.setStatus('current')
macNbrErrTbUlMassiveMimoSM7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbUlMassiveMimoSM7.setStatus('current')
macNbrErrTbUlMassiveMimoSM8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbUlMassiveMimoSM8.setStatus('current')
macNbrErrTbDlMassiveMimoSM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM1.setStatus('current')
macNbrErrTbDlMassiveMimoSM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM2.setStatus('current')
macNbrErrTbDlMassiveMimoSM3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM3.setStatus('current')
macNbrErrTbDlMassiveMimoSM4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM4.setStatus('current')
macNbrErrTbDlMassiveMimoSM5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM5.setStatus('current')
macNbrErrTbDlMassiveMimoSM6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM6.setStatus('current')
macNbrErrTbDlMassiveMimoSM7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM7.setStatus('current')
macNbrErrTbDlMassiveMimoSM8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM8.setStatus('current')
macNbrErrTbDlMassiveMimoSM9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM9.setStatus('current')
macNbrErrTbDlMassiveMimoSM10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM10.setStatus('current')
macNbrErrTbDlMassiveMimoSM11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM11.setStatus('current')
macNbrErrTbDlMassiveMimoSM12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM12.setStatus('current')
macNbrErrTbDlMassiveMimoSM13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM13.setStatus('current')
macNbrErrTbDlMassiveMimoSM14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM14.setStatus('current')
macNbrErrTbDlMassiveMimoSM15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM15.setStatus('current')
macNbrErrTbDlMassiveMimoSM16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrErrTbDlMassiveMimoSM16.setStatus('current')
macNbrTbUlMassiveMimoSM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbUlMassiveMimoSM1.setStatus('current')
macNbrTbUlMassiveMimoSM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbUlMassiveMimoSM2.setStatus('current')
macNbrTbUlMassiveMimoSM3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbUlMassiveMimoSM3.setStatus('current')
macNbrTbUlMassiveMimoSM4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbUlMassiveMimoSM4.setStatus('current')
macNbrTbUlMassiveMimoSM5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbUlMassiveMimoSM5.setStatus('current')
macNbrTbUlMassiveMimoSM6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbUlMassiveMimoSM6.setStatus('current')
macNbrTbUlMassiveMimoSM7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbUlMassiveMimoSM7.setStatus('current')
macNbrTbUlMassiveMimoSM8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbUlMassiveMimoSM8.setStatus('current')
macNbrTbDlMassiveMimoSM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM1.setStatus('current')
macNbrTbDlMassiveMimoSM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM2.setStatus('current')
macNbrTbDlMassiveMimoSM3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM3.setStatus('current')
macNbrTbDlMassiveMimoSM4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM4.setStatus('current')
macNbrTbDlMassiveMimoSM5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM5.setStatus('current')
macNbrTbDlMassiveMimoSM6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM6.setStatus('current')
macNbrTbDlMassiveMimoSM7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM7.setStatus('current')
macNbrTbDlMassiveMimoSM8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM8.setStatus('current')
macNbrTbDlMassiveMimoSM9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM9.setStatus('current')
macNbrTbDlMassiveMimoSM10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM10.setStatus('current')
macNbrTbDlMassiveMimoSM11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM11.setStatus('current')
macNbrTbDlMassiveMimoSM12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM12.setStatus('current')
macNbrTbDlMassiveMimoSM13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM13.setStatus('current')
macNbrTbDlMassiveMimoSM14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM14.setStatus('current')
macNbrTbDlMassiveMimoSM15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM15.setStatus('current')
macNbrTbDlMassiveMimoSM16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNbrTbDlMassiveMimoSM16.setStatus('current')
macOctUlMassiveMimoSM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctUlMassiveMimoSM1.setStatus('current')
macOctUlMassiveMimoSM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctUlMassiveMimoSM2.setStatus('current')
macOctUlMassiveMimoSM3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctUlMassiveMimoSM3.setStatus('current')
macOctUlMassiveMimoSM4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctUlMassiveMimoSM4.setStatus('current')
macOctUlMassiveMimoSM5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctUlMassiveMimoSM5.setStatus('current')
macOctUlMassiveMimoSM6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctUlMassiveMimoSM6.setStatus('current')
macOctUlMassiveMimoSM7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctUlMassiveMimoSM7.setStatus('current')
macOctUlMassiveMimoSM8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctUlMassiveMimoSM8.setStatus('current')
macOctDlMassiveMimoSM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM1.setStatus('current')
macOctDlMassiveMimoSM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM2.setStatus('current')
macOctDlMassiveMimoSM3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM3.setStatus('current')
macOctDlMassiveMimoSM4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM4.setStatus('current')
macOctDlMassiveMimoSM5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM5.setStatus('current')
macOctDlMassiveMimoSM6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM6.setStatus('current')
macOctDlMassiveMimoSM7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM7.setStatus('current')
macOctDlMassiveMimoSM8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM8.setStatus('current')
macOctDlMassiveMimoSM9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM9.setStatus('current')
macOctDlMassiveMimoSM10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM10.setStatus('current')
macOctDlMassiveMimoSM11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM11.setStatus('current')
macOctDlMassiveMimoSM12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM12.setStatus('current')
macOctDlMassiveMimoSM13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM13.setStatus('current')
macOctDlMassiveMimoSM14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM14.setStatus('current')
macOctDlMassiveMimoSM15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM15.setStatus('current')
macOctDlMassiveMimoSM16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macOctDlMassiveMimoSM16.setStatus('current')
macDlMassiveMimoPair01 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macDlMassiveMimoPair01.setStatus('current')
macDlMassiveMimoPair02 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macDlMassiveMimoPair02.setStatus('current')
macDlMassiveMimoPair03 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 3, 29, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macDlMassiveMimoPair03.setStatus('current')
pdcprelatedOriginCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4))
pdcpRatioSITable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1), )
if mibBuilder.loadTexts: pdcpRatioSITable.setStatus('current')
pdcpRatioSIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpRatioSILcId"))
if mibBuilder.loadTexts: pdcpRatioSIEntry.setStatus('current')
pdcpRatioSILcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcpRatioSILcId.setStatus('current')
pdcpRatioSIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpRatioSIRowStatus.setStatus('current')
drbPdcpSduBitLenDlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenDlQci1.setStatus('current')
drbPdcpSduBitLenDlQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenDlQci2.setStatus('current')
drbPdcpSduBitLenDlQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenDlQci3.setStatus('current')
drbPdcpSduBitLenDlQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenDlQci4.setStatus('current')
drbPdcpSduBitLenDlQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenDlQci5.setStatus('current')
drbPdcpSduBitLenDlQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenDlQci6.setStatus('current')
drbPdcpSduBitLenDlQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenDlQci7.setStatus('current')
drbPdcpSduBitLenDlQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenDlQci8.setStatus('current')
drbPdcpSduBitLenDlQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenDlQci9.setStatus('current')
drbPdcpSduBitLenUlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenUlQci1.setStatus('current')
drbPdcpSduBitLenUlQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenUlQci2.setStatus('current')
drbPdcpSduBitLenUlQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenUlQci3.setStatus('current')
drbPdcpSduBitLenUlQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenUlQci4.setStatus('current')
drbPdcpSduBitLenUlQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenUlQci5.setStatus('current')
drbPdcpSduBitLenUlQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenUlQci6.setStatus('current')
drbPdcpSduBitLenUlQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenUlQci7.setStatus('current')
drbPdcpSduBitLenUlQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenUlQci8.setStatus('current')
drbPdcpSduBitLenUlQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitLenUlQci9.setStatus('current')
srbPdcpSduBitLenDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srbPdcpSduBitLenDl.setStatus('current')
srbPdcpSduBitLenUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srbPdcpSduBitLenUl.setStatus('current')
drbPdcpSduBitRatioDlMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitRatioDlMax.setStatus('current')
drbPdcpSduBitRatioUlMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduBitRatioUlMax.setStatus('current')
stasticperiod = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stasticperiod.setStatus('current')
pdcpDlPacketDelayTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2), )
if mibBuilder.loadTexts: pdcpDlPacketDelayTable.setStatus('current')
pdcpDlPacketDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpDlPacketDelayLcId"))
if mibBuilder.loadTexts: pdcpDlPacketDelayEntry.setStatus('current')
pdcpDlPacketDelayLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcpDlPacketDelayLcId.setStatus('current')
pdcpDlPacketDelayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlPacketDelayRowStatus.setStatus('current')
drbPdcpSduDelayDlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduDelayDlQci1.setStatus('current')
drbPdcpSduDelayDlQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduDelayDlQci2.setStatus('current')
drbPdcpSduDelayDlQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduDelayDlQci3.setStatus('current')
drbPdcpSduDelayDlQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduDelayDlQci4.setStatus('current')
drbPdcpSduDelayDlQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduDelayDlQci5.setStatus('current')
drbPdcpSduDelayDlQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduDelayDlQci6.setStatus('current')
drbPdcpSduDelayDlQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduDelayDlQci7.setStatus('current')
drbPdcpSduDelayDlQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduDelayDlQci8.setStatus('current')
drbPdcpSduDelayDlQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduDelayDlQci9.setStatus('current')
drbPdcpSduTotalDelayDlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalDelayDlQci1.setStatus('current')
drbPdcpSduTotalDelayDlQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalDelayDlQci2.setStatus('current')
drbPdcpSduTotalDelayDlQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalDelayDlQci3.setStatus('current')
drbPdcpSduTotalDelayDlQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalDelayDlQci4.setStatus('current')
drbPdcpSduTotalDelayDlQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalDelayDlQci5.setStatus('current')
drbPdcpSduTotalDelayDlQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalDelayDlQci6.setStatus('current')
drbPdcpSduTotalDelayDlQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalDelayDlQci7.setStatus('current')
drbPdcpSduTotalDelayDlQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalDelayDlQci8.setStatus('current')
drbPdcpSduTotalDelayDlQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalDelayDlQci9.setStatus('current')
drbPdcpSduTotalNumberDlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalNumberDlQci1.setStatus('current')
drbPdcpSduTotalNumberDlQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalNumberDlQci2.setStatus('current')
drbPdcpSduTotalNumberDlQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalNumberDlQci3.setStatus('current')
drbPdcpSduTotalNumberDlQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalNumberDlQci4.setStatus('current')
drbPdcpSduTotalNumberDlQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalNumberDlQci5.setStatus('current')
drbPdcpSduTotalNumberDlQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalNumberDlQci6.setStatus('current')
drbPdcpSduTotalNumberDlQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalNumberDlQci7.setStatus('current')
drbPdcpSduTotalNumberDlQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalNumberDlQci8.setStatus('current')
drbPdcpSduTotalNumberDlQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbPdcpSduTotalNumberDlQci9.setStatus('current')
pdcpUpPktDelayDlEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 200), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDelayDlEnb.setStatus('current')
pdcpUpPktDelayDlQci1Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 201), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDelayDlQci1Enb.setStatus('current')
pdcpUpPktDelayDlQci2Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 202), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDelayDlQci2Enb.setStatus('current')
pdcpUpPktDelayDlQci3Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 203), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDelayDlQci3Enb.setStatus('current')
pdcpUpPktDelayDlQci4Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 204), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDelayDlQci4Enb.setStatus('current')
pdcpUpPktDelayDlQci5Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 205), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDelayDlQci5Enb.setStatus('current')
pdcpUpPktDelayDlQci6Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 206), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDelayDlQci6Enb.setStatus('current')
pdcpUpPktDelayDlQci7Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 207), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDelayDlQci7Enb.setStatus('current')
pdcpUpPktDelayDlQci8Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 208), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDelayDlQci8Enb.setStatus('current')
pdcpUpPktDelayDlQci9Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 2, 1, 209), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDelayDlQci9Enb.setStatus('current')
pdcpSduDlDropRatioTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3), )
if mibBuilder.loadTexts: pdcpSduDlDropRatioTable.setStatus('current')
pdcpSduDlDropRatioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpSduDlDropRatioLcId"))
if mibBuilder.loadTexts: pdcpSduDlDropRatioEntry.setStatus('current')
pdcpSduDlDropRatioLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcpSduDlDropRatioLcId.setStatus('current')
pdcpSduDlDropRatioRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDlDropRatioRowStatus.setStatus('current')
pdcpSduSendTotalDateLenQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDateLenQci1.setStatus('current')
pdcpSduSendTotalDateLenQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDateLenQci2.setStatus('current')
pdcpSduSendTotalDateLenQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDateLenQci3.setStatus('current')
pdcpSduSendTotalDateLenQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDateLenQci4.setStatus('current')
pdcpSduSendTotalDateLenQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDateLenQci5.setStatus('current')
pdcpSduSendTotalDateLenQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDateLenQci6.setStatus('current')
pdcpSduSendTotalDateLenQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDateLenQci7.setStatus('current')
pdcpSduSendTotalDateLenQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDateLenQci8.setStatus('current')
pdcpSduSendTotalDateLenQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDateLenQci9.setStatus('current')
pdcpSduDropTotalDateLenQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDropTotalDateLenQci1.setStatus('current')
pdcpSduDropTotalDateLenQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDropTotalDateLenQci2.setStatus('current')
pdcpSduDropTotalDateLenQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDropTotalDateLenQci3.setStatus('current')
pdcpSduDropTotalDateLenQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDropTotalDateLenQci4.setStatus('current')
pdcpSduDropTotalDateLenQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDropTotalDateLenQci5.setStatus('current')
pdcpSduDropTotalDateLenQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDropTotalDateLenQci6.setStatus('current')
pdcpSduDropTotalDateLenQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDropTotalDateLenQci7.setStatus('current')
pdcpSduDropTotalDateLenQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDropTotalDateLenQci8.setStatus('current')
pdcpSduDropTotalDateLenQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDropTotalDateLenQci9.setStatus('current')
pdcpUlSduAirDropRatioTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4), )
if mibBuilder.loadTexts: pdcpUlSduAirDropRatioTable.setStatus('current')
pdcpUlSduAirDropRatioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpUlSduAirDropRatioLcId"))
if mibBuilder.loadTexts: pdcpUlSduAirDropRatioEntry.setStatus('current')
pdcpUlSduAirDropRatioLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcpUlSduAirDropRatioLcId.setStatus('current')
pdcpUlSduAirDropRatioRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlSduAirDropRatioRowStatus.setStatus('current')
pdcpUlAirSduSendTotalNumberQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduSendTotalNumberQci1.setStatus('current')
pdcpUlAirSduSendTotalNumberQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduSendTotalNumberQci2.setStatus('current')
pdcpUlAirSduSendTotalNumberQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduSendTotalNumberQci3.setStatus('current')
pdcpUlAirSduSendTotalNumberQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduSendTotalNumberQci4.setStatus('current')
pdcpUlAirSduSendTotalNumberQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduSendTotalNumberQci5.setStatus('current')
pdcpUlAirSduSendTotalNumberQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduSendTotalNumberQci6.setStatus('current')
pdcpUlAirSduSendTotalNumberQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduSendTotalNumberQci7.setStatus('current')
pdcpUlAirSduSendTotalNumberQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduSendTotalNumberQci8.setStatus('current')
pdcpUlAirSduSendTotalNumberQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduSendTotalNumberQci9.setStatus('current')
pdcpUlAirSduDropTotalNumberQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduDropTotalNumberQci1.setStatus('current')
pdcpUlAirSduDropTotalNumberQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduDropTotalNumberQci2.setStatus('current')
pdcpUlAirSduDropTotalNumberQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduDropTotalNumberQci3.setStatus('current')
pdcpUlAirSduDropTotalNumberQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduDropTotalNumberQci4.setStatus('current')
pdcpUlAirSduDropTotalNumberQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduDropTotalNumberQci5.setStatus('current')
pdcpUlAirSduDropTotalNumberQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduDropTotalNumberQci6.setStatus('current')
pdcpUlAirSduDropTotalNumberQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduDropTotalNumberQci7.setStatus('current')
pdcpUlAirSduDropTotalNumberQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduDropTotalNumberQci8.setStatus('current')
pdcpUlAirSduDropTotalNumberQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlAirSduDropTotalNumberQci9.setStatus('current')
pdcpUpPktLossRateUlEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 200), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateUlEnb.setStatus('current')
pdcpUpPktLossRateUlQci1Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 201), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateUlQci1Enb.setStatus('current')
pdcpUpPktLossRateUlQci2Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 202), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateUlQci2Enb.setStatus('current')
pdcpUpPktLossRateUlQci3Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 203), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateUlQci3Enb.setStatus('current')
pdcpUpPktLossRateUlQci4Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 204), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateUlQci4Enb.setStatus('current')
pdcpUpPktLossRateUlQci5Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 205), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateUlQci5Enb.setStatus('current')
pdcpUpPktLossRateUlQci6Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 206), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateUlQci6Enb.setStatus('current')
pdcpUpPktLossRateUlQci7Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 207), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateUlQci7Enb.setStatus('current')
pdcpUpPktLossRateUlQci8Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 208), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateUlQci8Enb.setStatus('current')
pdcpUpPktLossRateUlQci9Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 4, 1, 209), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateUlQci9Enb.setStatus('current')
voicePakStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5), )
if mibBuilder.loadTexts: voicePakStatisticTable.setStatus('current')
voicePakStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "voicePakStatisticLcId"))
if mibBuilder.loadTexts: voicePakStatisticEntry.setStatus('current')
voicePakStatisticLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: voicePakStatisticLcId.setStatus('current')
voicePakStatisticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicePakStatisticRowStatus.setStatus('current')
voipRtpPacketUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipRtpPacketUl.setStatus('current')
voipRtpPacketDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipRtpPacketDl.setStatus('current')
voipRtpPacketLosUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipRtpPacketLosUl.setStatus('current')
voipRtpPacketLosDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipRtpPacketLosDl.setStatus('current')
voipSilenceCallUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipSilenceCallUl.setStatus('current')
voipSilenceCallDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipSilenceCallDl.setStatus('current')
voipRohcDecompFailUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipRohcDecompFailUl.setStatus('current')
amrUlVoipPacketWb0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketWb0.setStatus('current')
amrUlVoipPacketWb1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketWb1.setStatus('current')
amrUlVoipPacketWb2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketWb2.setStatus('current')
amrUlVoipPacketWb3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketWb3.setStatus('current')
amrUlVoipPacketWb4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketWb4.setStatus('current')
amrUlVoipPacketWb5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketWb5.setStatus('current')
amrUlVoipPacketWb6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketWb6.setStatus('current')
amrUlVoipPacketWb7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketWb7.setStatus('current')
amrUlVoipPacketWb8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketWb8.setStatus('current')
amrUlVoipPacketWb9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketWb9.setStatus('current')
amrUlVoipPacketNb0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketNb0.setStatus('current')
amrUlVoipPacketNb1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketNb1.setStatus('current')
amrUlVoipPacketNb2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketNb2.setStatus('current')
amrUlVoipPacketNb3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketNb3.setStatus('current')
amrUlVoipPacketNb4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketNb4.setStatus('current')
amrUlVoipPacketNb5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketNb5.setStatus('current')
amrUlVoipPacketNb6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketNb6.setStatus('current')
amrUlVoipPacketNb7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketNb7.setStatus('current')
amrUlVoipPacketNb8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrUlVoipPacketNb8.setStatus('current')
amrDlVoipPacketWb0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketWb0.setStatus('current')
amrDlVoipPacketWb1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketWb1.setStatus('current')
amrDlVoipPacketWb2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketWb2.setStatus('current')
amrDlVoipPacketWb3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketWb3.setStatus('current')
amrDlVoipPacketWb4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketWb4.setStatus('current')
amrDlVoipPacketWb5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketWb5.setStatus('current')
amrDlVoipPacketWb6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketWb6.setStatus('current')
amrDlVoipPacketWb7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketWb7.setStatus('current')
amrDlVoipPacketWb8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketWb8.setStatus('current')
amrDlVoipPacketWb9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketWb9.setStatus('current')
amrDlVoipPacketNb0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketNb0.setStatus('current')
amrDlVoipPacketNb1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketNb1.setStatus('current')
amrDlVoipPacketNb2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketNb2.setStatus('current')
amrDlVoipPacketNb3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketNb3.setStatus('current')
amrDlVoipPacketNb4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketNb4.setStatus('current')
amrDlVoipPacketNb5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketNb5.setStatus('current')
amrDlVoipPacketNb6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketNb6.setStatus('current')
amrDlVoipPacketNb7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketNb7.setStatus('current')
amrDlVoipPacketNb8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrDlVoipPacketNb8.setStatus('current')
voipLosSilentPackerCopyUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLosSilentPackerCopyUl.setStatus('current')
voipLosSilentPackerCopyDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLosSilentPackerCopyDl.setStatus('current')
voipLosActivePackerCopyUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLosActivePackerCopyUl.setStatus('current')
voipLosActivePackerCopyDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 5, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLosActivePackerCopyDl.setStatus('current')
pdcpDlSduAirDropRatioTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6), )
if mibBuilder.loadTexts: pdcpDlSduAirDropRatioTable.setStatus('current')
pdcpDlSduAirDropRatioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpDlSduAirDropRatioLcId"))
if mibBuilder.loadTexts: pdcpDlSduAirDropRatioEntry.setStatus('current')
pdcpDlSduAirDropRatioLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcpDlSduAirDropRatioLcId.setStatus('current')
pdcpDlSduAirDropRatioRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlSduAirDropRatioRowStatus.setStatus('current')
pdcpDlAirSduSendTotalNumberQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduSendTotalNumberQci1.setStatus('current')
pdcpDlAirSduSendTotalNumberQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduSendTotalNumberQci2.setStatus('current')
pdcpDlAirSduSendTotalNumberQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduSendTotalNumberQci3.setStatus('current')
pdcpDlAirSduSendTotalNumberQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduSendTotalNumberQci4.setStatus('current')
pdcpDlAirSduSendTotalNumberQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduSendTotalNumberQci5.setStatus('current')
pdcpDlAirSduSendTotalNumberQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduSendTotalNumberQci6.setStatus('current')
pdcpDlAirSduSendTotalNumberQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduSendTotalNumberQci7.setStatus('current')
pdcpDlAirSduSendTotalNumberQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduSendTotalNumberQci8.setStatus('current')
pdcpDlAirSduSendTotalNumberQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduSendTotalNumberQci9.setStatus('current')
pdcpDlAirSduDropTotalNumberQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduDropTotalNumberQci1.setStatus('current')
pdcpDlAirSduDropTotalNumberQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduDropTotalNumberQci2.setStatus('current')
pdcpDlAirSduDropTotalNumberQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduDropTotalNumberQci3.setStatus('current')
pdcpDlAirSduDropTotalNumberQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduDropTotalNumberQci4.setStatus('current')
pdcpDlAirSduDropTotalNumberQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduDropTotalNumberQci5.setStatus('current')
pdcpDlAirSduDropTotalNumberQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduDropTotalNumberQci6.setStatus('current')
pdcpDlAirSduDropTotalNumberQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduDropTotalNumberQci7.setStatus('current')
pdcpDlAirSduDropTotalNumberQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduDropTotalNumberQci8.setStatus('current')
pdcpDlAirSduDropTotalNumberQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpDlAirSduDropTotalNumberQci9.setStatus('current')
pdcpUpPktLossRateDlEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 200), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateDlEnb.setStatus('current')
pdcpUpPktLossRateDlQci1Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 201), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateDlQci1Enb.setStatus('current')
pdcpUpPktLossRateDlQci2Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 202), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateDlQci2Enb.setStatus('current')
pdcpUpPktLossRateDlQci3Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 203), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateDlQci3Enb.setStatus('current')
pdcpUpPktLossRateDlQci4Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 204), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateDlQci4Enb.setStatus('current')
pdcpUpPktLossRateDlQci5Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 205), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateDlQci5Enb.setStatus('current')
pdcpUpPktLossRateDlQci6Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 206), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateDlQci6Enb.setStatus('current')
pdcpUpPktLossRateDlQci7Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 207), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateDlQci7Enb.setStatus('current')
pdcpUpPktLossRateDlQci8Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 208), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateDlQci8Enb.setStatus('current')
pdcpUpPktLossRateDlQci9Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 6, 1, 209), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktLossRateDlQci9Enb.setStatus('current')
pdcpSduReceivedNbrTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 7), )
if mibBuilder.loadTexts: pdcpSduReceivedNbrTable.setStatus('current')
pdcpSduReceivedNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpSduReceivedNbrLcId"))
if mibBuilder.loadTexts: pdcpSduReceivedNbrEntry.setStatus('current')
pdcpSduReceivedNbrLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcpSduReceivedNbrLcId.setStatus('current')
pdcpSduReceivedNbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 7, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduReceivedNbrRowStatus.setStatus('current')
pdcpNbrUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpNbrUl.setStatus('current')
pdcpNbrDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpNbrDl.setStatus('current')
activeRRCTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 8), )
if mibBuilder.loadTexts: activeRRCTable.setStatus('current')
activeRRCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "activeRRCLcId"))
if mibBuilder.loadTexts: activeRRCEntry.setStatus('current')
activeRRCLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: activeRRCLcId.setStatus('current')
activeRRCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 8, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeRRCRowStatus.setStatus('current')
rrcEffectiveConnMean = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcEffectiveConnMean.setStatus('current')
rrcEffectiveConnMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcEffectiveConnMax.setStatus('current')
rrcEffectiveConnSum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcEffectiveConnSum.setStatus('current')
rrcEffectiveConnSampNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rrcEffectiveConnSampNum.setStatus('current')
ipThroughputCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9), )
if mibBuilder.loadTexts: ipThroughputCapacityTable.setStatus('current')
ipThroughputCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ipThroughputCapacityLcId"))
if mibBuilder.loadTexts: ipThroughputCapacityEntry.setStatus('current')
ipThroughputCapacityLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: ipThroughputCapacityLcId.setStatus('current')
ipThroughputCapacityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipThroughputCapacityRowStatus.setStatus('current')
pdcpIPThroughputDlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputDlQci1.setStatus('current')
pdcpIPThroughputDlQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputDlQci2.setStatus('current')
pdcpIPThroughputDlQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputDlQci3.setStatus('current')
pdcpIPThroughputDlQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputDlQci4.setStatus('current')
pdcpIPThroughputDlQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputDlQci5.setStatus('current')
pdcpIPThroughputDlQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputDlQci6.setStatus('current')
pdcpIPThroughputDlQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputDlQci7.setStatus('current')
pdcpIPThroughputDlQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputDlQci8.setStatus('current')
pdcpIPThroughputDlQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputDlQci9.setStatus('current')
pdcpIPThroughputUlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputUlQci1.setStatus('current')
pdcpIPThroughputUlQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputUlQci2.setStatus('current')
pdcpIPThroughputUlQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputUlQci3.setStatus('current')
pdcpIPThroughputUlQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputUlQci4.setStatus('current')
pdcpIPThroughputUlQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputUlQci5.setStatus('current')
pdcpIPThroughputUlQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputUlQci6.setStatus('current')
pdcpIPThroughputUlQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputUlQci7.setStatus('current')
pdcpIPThroughputUlQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputUlQci8.setStatus('current')
pdcpIPThroughputUlQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 9, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpIPThroughputUlQci9.setStatus('current')
sessionTimeTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10), )
if mibBuilder.loadTexts: sessionTimeTable.setStatus('current')
sessionTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sessionTimeLcId"))
if mibBuilder.loadTexts: sessionTimeEntry.setStatus('current')
sessionTimeLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sessionTimeLcId.setStatus('current')
sessionTimeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionTimeRowStatus.setStatus('current')
sessiontimeue = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessiontimeue.setStatus('current')
sessiontimeerabQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessiontimeerabQci1.setStatus('current')
sessiontimeerabQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessiontimeerabQci2.setStatus('current')
sessiontimeerabQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessiontimeerabQci3.setStatus('current')
sessiontimeerabQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessiontimeerabQci4.setStatus('current')
sessiontimeerabQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessiontimeerabQci5.setStatus('current')
sessiontimeerabQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessiontimeerabQci6.setStatus('current')
sessiontimeerabQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessiontimeerabQci7.setStatus('current')
sessiontimeerabQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessiontimeerabQci8.setStatus('current')
sessiontimeerabQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessiontimeerabQci9.setStatus('current')
dataPlanStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 11), )
if mibBuilder.loadTexts: dataPlanStatisticTable.setStatus('current')
dataPlanStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 11, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "dataPlanStatisticLcId"))
if mibBuilder.loadTexts: dataPlanStatisticEntry.setStatus('current')
dataPlanStatisticLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: dataPlanStatisticLcId.setStatus('current')
dataPlanStatisticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 11, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPlanStatisticRowStatus.setStatus('current')
drbTCPSduReceivedDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbTCPSduReceivedDl.setStatus('current')
drbTCPSduResentLineDisorderDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbTCPSduResentLineDisorderDl.setStatus('current')
drbTCPSduResentLineDropDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbTCPSduResentLineDropDl.setStatus('current')
drbTCPSduResentRadioDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbTCPSduResentRadioDl.setStatus('current')
pdcpRatioOfRUETable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 12), )
if mibBuilder.loadTexts: pdcpRatioOfRUETable.setStatus('current')
pdcpRatioOfRUEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 12, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpRatioOfRUELcId"))
if mibBuilder.loadTexts: pdcpRatioOfRUEEntry.setStatus('current')
pdcpRatioOfRUELcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcpRatioOfRUELcId.setStatus('current')
pdcpRatioOfRUERowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 12, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpRatioOfRUERowStatus.setStatus('current')
ruePdcpSduBitLenDlQci251 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruePdcpSduBitLenDlQci251.setStatus('current')
ruePdcpSduBitLenDlQci252 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruePdcpSduBitLenDlQci252.setStatus('current')
ruePdcpSduBitLenDlQci253 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruePdcpSduBitLenDlQci253.setStatus('current')
ruePdcpSduBitLenDlQci254 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruePdcpSduBitLenDlQci254.setStatus('current')
ruePdcpSduBitLenUlQci251 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruePdcpSduBitLenUlQci251.setStatus('current')
ruePdcpSduBitLenUlQci252 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruePdcpSduBitLenUlQci252.setStatus('current')
ruePdcpSduBitLenUlQci253 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruePdcpSduBitLenUlQci253.setStatus('current')
ruePdcpSduBitLenUlQci254 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruePdcpSduBitLenUlQci254.setStatus('current')
pdcpPresetPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13), )
if mibBuilder.loadTexts: pdcpPresetPerformanceTable.setStatus('current')
pdcpPresetPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpPresetPerformanceLcId"))
if mibBuilder.loadTexts: pdcpPresetPerformanceEntry.setStatus('current')
pdcpPresetPerformanceLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcpPresetPerformanceLcId.setStatus('current')
pdcpPresetPerformanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPresetPerformanceRowStatus.setStatus('current')
pdcpPreset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset1.setStatus('current')
pdcpPreset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset2.setStatus('current')
pdcpPreset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset3.setStatus('current')
pdcpPreset4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset4.setStatus('current')
pdcpPreset5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset5.setStatus('current')
pdcpPreset6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset6.setStatus('current')
pdcpPreset7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset7.setStatus('current')
pdcpPreset8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset8.setStatus('current')
pdcpPreset9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset9.setStatus('current')
pdcpPreset10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset10.setStatus('current')
pdcpPreset11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset11.setStatus('current')
pdcpPreset12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset12.setStatus('current')
pdcpPreset13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset13.setStatus('current')
pdcpPreset14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset14.setStatus('current')
pdcpPreset15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset15.setStatus('current')
pdcpPreset16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset16.setStatus('current')
pdcpPreset17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset17.setStatus('current')
pdcpPreset18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset18.setStatus('current')
pdcpPreset19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset19.setStatus('current')
pdcpPreset20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset20.setStatus('current')
pdcpPreset21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset21.setStatus('current')
pdcpPreset22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset22.setStatus('current')
pdcpPreset23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset23.setStatus('current')
pdcpPreset24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset24.setStatus('current')
pdcpPreset25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset25.setStatus('current')
pdcpPreset26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset26.setStatus('current')
pdcpPreset27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset27.setStatus('current')
pdcpPreset28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset28.setStatus('current')
pdcpPreset29 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset29.setStatus('current')
pdcpPreset30 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset30.setStatus('current')
pdcpPreset31 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset31.setStatus('current')
pdcpPreset32 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset32.setStatus('current')
pdcpPreset33 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset33.setStatus('current')
pdcpPreset34 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset34.setStatus('current')
pdcpPreset35 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset35.setStatus('current')
pdcpPreset36 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset36.setStatus('current')
pdcpPreset37 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset37.setStatus('current')
pdcpPreset38 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset38.setStatus('current')
pdcpPreset39 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset39.setStatus('current')
pdcpPreset40 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 13, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpPreset40.setStatus('current')
videoPerfOfPdcpTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14), )
if mibBuilder.loadTexts: videoPerfOfPdcpTable.setStatus('current')
videoPerfOfPdcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "videoPerfOfPdcpLcId"))
if mibBuilder.loadTexts: videoPerfOfPdcpEntry.setStatus('current')
videoPerfOfPdcpLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: videoPerfOfPdcpLcId.setStatus('current')
videoPerfOfPdcpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoPerfOfPdcpRowStatus.setStatus('current')
pdcpUlPakChaRecogSuc = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUlPakChaRecogSuc.setStatus('current')
pdcpVideoRecogSucMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoRecogSucMax.setStatus('current')
pdcpVideoRecogSucAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoRecogSucAvg.setStatus('current')
pdcpVideoThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoThroughput.setStatus('current')
pdcpVideoMatchTencent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoMatchTencent.setStatus('current')
pdcpVideoMatchIqiyi = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoMatchIqiyi.setStatus('current')
pdcpVideoMatchYouku = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoMatchYouku.setStatus('current')
pdcpVideoMatchLetv = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoMatchLetv.setStatus('current')
pdcpVideoMatchMigu = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoMatchMigu.setStatus('current')
pdcpVideoMatchKuaiShou = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoMatchKuaiShou.setStatus('current')
pdcpVideoMatchMgtv = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoMatchMgtv.setStatus('current')
pdcpVideoPreset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoPreset1.setStatus('current')
pdcpVideoPreset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoPreset2.setStatus('current')
pdcpVideoPreset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoPreset3.setStatus('current')
pdcpVideoPreset4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoPreset4.setStatus('current')
pdcpVideoPreset5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoPreset5.setStatus('current')
pdcpVideoPreset6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoPreset6.setStatus('current')
pdcpVideoPreset7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoPreset7.setStatus('current')
pdcpVideoPreset8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoPreset8.setStatus('current')
pdcpVideoPreset9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoPreset9.setStatus('current')
pdcpVideoPreset10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 4, 14, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpVideoPreset10.setStatus('current')
plrelatedOriginCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5))
plPreambeRevNumTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 1), )
if mibBuilder.loadTexts: plPreambeRevNumTable.setStatus('current')
plPreambeRevNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "plPreambeRevNumLcId"))
if mibBuilder.loadTexts: plPreambeRevNumEntry.setStatus('current')
plPreambeRevNumLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: plPreambeRevNumLcId.setStatus('current')
plPreambeRevNumRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plPreambeRevNumRowStatus.setStatus('current')
rruPreambleDTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPreambleDTotal.setStatus('current')
rruPreambleATotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPreambleATotal.setStatus('current')
rruPreambleBTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPreambleBTotal.setStatus('current')
rruPreambleContentionTimesGroupA = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPreambleContentionTimesGroupA.setStatus('current')
rruPreambleContentionTimesGroupB = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruPreambleContentionTimesGroupB.setStatus('current')
plrssiTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2), )
if mibBuilder.loadTexts: plrssiTable.setStatus('current')
plrssiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "plrssiLcId"))
if mibBuilder.loadTexts: plrssiEntry.setStatus('current')
plrssiLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: plrssiLcId.setStatus('current')
plrssiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plrssiRowStatus.setStatus('current')
plReceivePowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerMax.setStatus('current')
plReceivePowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerMin.setStatus('current')
plReceivePowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerAvg.setStatus('current')
plRssiAvgC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC1.setStatus('current')
plRssiAvgC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC2.setStatus('current')
plRssiAvgC3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC3.setStatus('current')
plRssiAvgC4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC4.setStatus('current')
plRssiAvgC5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC5.setStatus('current')
plRssiAvgC6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC6.setStatus('current')
plRssiAvgC7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC7.setStatus('current')
plRssiAvgC8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC8.setStatus('current')
plRssiAvgC9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC9.setStatus('current')
plRssiAvgC10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC10.setStatus('current')
plRssiAvgC11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC11.setStatus('current')
plRssiAvgC12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC12.setStatus('current')
plRssiAvgC13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC13.setStatus('current')
plRssiAvgC14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC14.setStatus('current')
plRssiAvgC15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC15.setStatus('current')
plRssiAvgC16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC16.setStatus('current')
plRssiAvgC17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC17.setStatus('current')
plRssiAvgC18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC18.setStatus('current')
plRssiAvgC19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC19.setStatus('current')
plRssiAvgC20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC20.setStatus('current')
plRssiAvgC21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC21.setStatus('current')
plRssiAvgC22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC22.setStatus('current')
plRssiAvgC23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC23.setStatus('current')
plRssiAvgC24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plRssiAvgC24.setStatus('current')
plPreamblePwrTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 3), )
if mibBuilder.loadTexts: plPreamblePwrTable.setStatus('current')
plPreamblePwrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "plPreamblePwrLcId"))
if mibBuilder.loadTexts: plPreamblePwrEntry.setStatus('current')
plPreamblePwrLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: plPreamblePwrLcId.setStatus('current')
plPreamblePwrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plPreamblePwrRowStatus.setStatus('current')
plPreamblePwrHighNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plPreamblePwrHighNum.setStatus('current')
plPreamblePwrNormNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plPreamblePwrNormNum.setStatus('current')
sfn1avgripTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4), )
if mibBuilder.loadTexts: sfn1avgripTable.setStatus('current')
sfn1avgripEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sfn1avgripLcId"))
if mibBuilder.loadTexts: sfn1avgripEntry.setStatus('current')
sfn1avgripLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sfn1avgripLcId.setStatus('current')
sfn1avgripRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn1avgripRowStatus.setStatus('current')
plsfn1Prb00RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb00RIPAvg.setStatus('current')
plsfn1Prb01RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb01RIPAvg.setStatus('current')
plsfn1Prb02RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb02RIPAvg.setStatus('current')
plsfn1Prb03RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb03RIPAvg.setStatus('current')
plsfn1Prb04RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb04RIPAvg.setStatus('current')
plsfn1Prb05RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb05RIPAvg.setStatus('current')
plsfn1Prb06RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb06RIPAvg.setStatus('current')
plsfn1Prb07RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb07RIPAvg.setStatus('current')
plsfn1Prb08RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb08RIPAvg.setStatus('current')
plsfn1Prb09RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb09RIPAvg.setStatus('current')
plsfn1Prb10RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb10RIPAvg.setStatus('current')
plsfn1Prb11RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb11RIPAvg.setStatus('current')
plsfn1Prb12RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb12RIPAvg.setStatus('current')
plsfn1Prb13RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb13RIPAvg.setStatus('current')
plsfn1Prb14RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb14RIPAvg.setStatus('current')
plsfn1Prb15RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb15RIPAvg.setStatus('current')
plsfn1Prb16RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb16RIPAvg.setStatus('current')
plsfn1Prb17RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb17RIPAvg.setStatus('current')
plsfn1Prb18RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb18RIPAvg.setStatus('current')
plsfn1Prb19RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb19RIPAvg.setStatus('current')
plsfn1Prb20RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb20RIPAvg.setStatus('current')
plsfn1Prb21RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb21RIPAvg.setStatus('current')
plsfn1Prb22RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb22RIPAvg.setStatus('current')
plsfn1Prb23RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb23RIPAvg.setStatus('current')
plsfn1Prb24RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb24RIPAvg.setStatus('current')
plsfn1Prb25RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb25RIPAvg.setStatus('current')
plsfn1Prb26RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb26RIPAvg.setStatus('current')
plsfn1Prb27RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb27RIPAvg.setStatus('current')
plsfn1Prb28RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb28RIPAvg.setStatus('current')
plsfn1Prb29RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb29RIPAvg.setStatus('current')
plsfn1Prb30RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb30RIPAvg.setStatus('current')
plsfn1Prb31RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb31RIPAvg.setStatus('current')
plsfn1Prb32RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb32RIPAvg.setStatus('current')
plsfn1Prb33RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb33RIPAvg.setStatus('current')
plsfn1Prb34RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb34RIPAvg.setStatus('current')
plsfn1Prb35RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb35RIPAvg.setStatus('current')
plsfn1Prb36RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb36RIPAvg.setStatus('current')
plsfn1Prb37RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb37RIPAvg.setStatus('current')
plsfn1Prb38RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb38RIPAvg.setStatus('current')
plsfn1Prb39RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb39RIPAvg.setStatus('current')
plsfn1Prb40RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb40RIPAvg.setStatus('current')
plsfn1Prb41RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb41RIPAvg.setStatus('current')
plsfn1Prb42RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb42RIPAvg.setStatus('current')
plsfn1Prb43RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb43RIPAvg.setStatus('current')
plsfn1Prb44RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb44RIPAvg.setStatus('current')
plsfn1Prb45RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb45RIPAvg.setStatus('current')
plsfn1Prb46RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb46RIPAvg.setStatus('current')
plsfn1Prb47RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb47RIPAvg.setStatus('current')
plsfn1Prb48RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb48RIPAvg.setStatus('current')
plsfn1Prb49RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb49RIPAvg.setStatus('current')
plsfn1Prb50RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb50RIPAvg.setStatus('current')
plsfn1Prb51RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb51RIPAvg.setStatus('current')
plsfn1Prb52RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb52RIPAvg.setStatus('current')
plsfn1Prb53RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb53RIPAvg.setStatus('current')
plsfn1Prb54RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb54RIPAvg.setStatus('current')
plsfn1Prb55RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb55RIPAvg.setStatus('current')
plsfn1Prb56RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb56RIPAvg.setStatus('current')
plsfn1Prb57RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb57RIPAvg.setStatus('current')
plsfn1Prb58RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb58RIPAvg.setStatus('current')
plsfn1Prb59RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb59RIPAvg.setStatus('current')
plsfn1Prb60RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb60RIPAvg.setStatus('current')
plsfn1Prb61RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb61RIPAvg.setStatus('current')
plsfn1Prb62RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb62RIPAvg.setStatus('current')
plsfn1Prb63RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb63RIPAvg.setStatus('current')
plsfn1Prb64RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb64RIPAvg.setStatus('current')
plsfn1Prb65RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb65RIPAvg.setStatus('current')
plsfn1Prb66RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb66RIPAvg.setStatus('current')
plsfn1Prb67RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb67RIPAvg.setStatus('current')
plsfn1Prb68RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb68RIPAvg.setStatus('current')
plsfn1Prb69RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb69RIPAvg.setStatus('current')
plsfn1Prb70RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb70RIPAvg.setStatus('current')
plsfn1Prb71RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb71RIPAvg.setStatus('current')
plsfn1Prb72RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb72RIPAvg.setStatus('current')
plsfn1Prb73RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb73RIPAvg.setStatus('current')
plsfn1Prb74RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb74RIPAvg.setStatus('current')
plsfn1Prb75RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb75RIPAvg.setStatus('current')
plsfn1Prb76RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb76RIPAvg.setStatus('current')
plsfn1Prb77RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb77RIPAvg.setStatus('current')
plsfn1Prb78RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb78RIPAvg.setStatus('current')
plsfn1Prb79RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb79RIPAvg.setStatus('current')
plsfn1Prb80RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb80RIPAvg.setStatus('current')
plsfn1Prb81RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb81RIPAvg.setStatus('current')
plsfn1Prb82RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb82RIPAvg.setStatus('current')
plsfn1Prb83RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb83RIPAvg.setStatus('current')
plsfn1Prb84RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb84RIPAvg.setStatus('current')
plsfn1Prb85RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb85RIPAvg.setStatus('current')
plsfn1Prb86RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb86RIPAvg.setStatus('current')
plsfn1Prb87RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb87RIPAvg.setStatus('current')
plsfn1Prb88RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb88RIPAvg.setStatus('current')
plsfn1Prb89RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb89RIPAvg.setStatus('current')
plsfn1Prb90RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb90RIPAvg.setStatus('current')
plsfn1Prb91RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb91RIPAvg.setStatus('current')
plsfn1Prb92RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb92RIPAvg.setStatus('current')
plsfn1Prb93RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb93RIPAvg.setStatus('current')
plsfn1Prb94RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb94RIPAvg.setStatus('current')
plsfn1Prb95RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb95RIPAvg.setStatus('current')
plsfn1Prb96RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb96RIPAvg.setStatus('current')
plsfn1Prb97RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb97RIPAvg.setStatus('current')
plsfn1Prb98RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb98RIPAvg.setStatus('current')
plsfn1Prb99RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 4, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn1Prb99RIPAvg.setStatus('current')
sfn0avgripTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5), )
if mibBuilder.loadTexts: sfn0avgripTable.setStatus('current')
sfn0avgripEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sfn0avgripLcId"))
if mibBuilder.loadTexts: sfn0avgripEntry.setStatus('current')
sfn0avgripLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sfn0avgripLcId.setStatus('current')
sfn0avgripRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn0avgripRowStatus.setStatus('current')
plsfn0Prb00RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb00RIPAvg.setStatus('current')
plsfn0Prb01RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb01RIPAvg.setStatus('current')
plsfn0Prb02RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb02RIPAvg.setStatus('current')
plsfn0Prb03RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb03RIPAvg.setStatus('current')
plsfn0Prb04RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb04RIPAvg.setStatus('current')
plsfn0Prb05RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb05RIPAvg.setStatus('current')
plsfn0Prb06RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb06RIPAvg.setStatus('current')
plsfn0Prb07RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb07RIPAvg.setStatus('current')
plsfn0Prb08RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb08RIPAvg.setStatus('current')
plsfn0Prb09RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb09RIPAvg.setStatus('current')
plsfn0Prb10RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb10RIPAvg.setStatus('current')
plsfn0Prb11RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb11RIPAvg.setStatus('current')
plsfn0Prb12RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb12RIPAvg.setStatus('current')
plsfn0Prb13RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb13RIPAvg.setStatus('current')
plsfn0Prb14RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb14RIPAvg.setStatus('current')
plsfn0Prb15RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb15RIPAvg.setStatus('current')
plsfn0Prb16RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb16RIPAvg.setStatus('current')
plsfn0Prb17RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb17RIPAvg.setStatus('current')
plsfn0Prb18RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb18RIPAvg.setStatus('current')
plsfn0Prb19RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb19RIPAvg.setStatus('current')
plsfn0Prb20RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb20RIPAvg.setStatus('current')
plsfn0Prb21RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb21RIPAvg.setStatus('current')
plsfn0Prb22RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb22RIPAvg.setStatus('current')
plsfn0Prb23RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb23RIPAvg.setStatus('current')
plsfn0Prb24RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb24RIPAvg.setStatus('current')
plsfn0Prb25RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb25RIPAvg.setStatus('current')
plsfn0Prb26RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb26RIPAvg.setStatus('current')
plsfn0Prb27RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb27RIPAvg.setStatus('current')
plsfn0Prb28RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb28RIPAvg.setStatus('current')
plsfn0Prb29RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb29RIPAvg.setStatus('current')
plsfn0Prb30RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb30RIPAvg.setStatus('current')
plsfn0Prb31RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb31RIPAvg.setStatus('current')
plsfn0Prb32RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb32RIPAvg.setStatus('current')
plsfn0Prb33RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb33RIPAvg.setStatus('current')
plsfn0Prb34RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb34RIPAvg.setStatus('current')
plsfn0Prb35RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb35RIPAvg.setStatus('current')
plsfn0Prb36RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb36RIPAvg.setStatus('current')
plsfn0Prb37RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb37RIPAvg.setStatus('current')
plsfn0Prb38RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb38RIPAvg.setStatus('current')
plsfn0Prb39RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb39RIPAvg.setStatus('current')
plsfn0Prb40RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb40RIPAvg.setStatus('current')
plsfn0Prb41RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb41RIPAvg.setStatus('current')
plsfn0Prb42RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb42RIPAvg.setStatus('current')
plsfn0Prb43RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb43RIPAvg.setStatus('current')
plsfn0Prb44RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb44RIPAvg.setStatus('current')
plsfn0Prb45RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb45RIPAvg.setStatus('current')
plsfn0Prb46RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb46RIPAvg.setStatus('current')
plsfn0Prb47RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb47RIPAvg.setStatus('current')
plsfn0Prb48RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb48RIPAvg.setStatus('current')
plsfn0Prb49RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb49RIPAvg.setStatus('current')
plsfn0Prb50RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb50RIPAvg.setStatus('current')
plsfn0Prb51RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb51RIPAvg.setStatus('current')
plsfn0Prb52RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb52RIPAvg.setStatus('current')
plsfn0Prb53RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb53RIPAvg.setStatus('current')
plsfn0Prb54RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb54RIPAvg.setStatus('current')
plsfn0Prb55RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb55RIPAvg.setStatus('current')
plsfn0Prb56RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb56RIPAvg.setStatus('current')
plsfn0Prb57RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb57RIPAvg.setStatus('current')
plsfn0Prb58RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb58RIPAvg.setStatus('current')
plsfn0Prb59RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb59RIPAvg.setStatus('current')
plsfn0Prb60RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb60RIPAvg.setStatus('current')
plsfn0Prb61RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb61RIPAvg.setStatus('current')
plsfn0Prb62RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb62RIPAvg.setStatus('current')
plsfn0Prb63RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb63RIPAvg.setStatus('current')
plsfn0Prb64RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb64RIPAvg.setStatus('current')
plsfn0Prb65RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb65RIPAvg.setStatus('current')
plsfn0Prb66RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb66RIPAvg.setStatus('current')
plsfn0Prb67RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb67RIPAvg.setStatus('current')
plsfn0Prb68RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb68RIPAvg.setStatus('current')
plsfn0Prb69RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb69RIPAvg.setStatus('current')
plsfn0Prb70RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb70RIPAvg.setStatus('current')
plsfn0Prb71RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb71RIPAvg.setStatus('current')
plsfn0Prb72RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb72RIPAvg.setStatus('current')
plsfn0Prb73RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb73RIPAvg.setStatus('current')
plsfn0Prb74RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb74RIPAvg.setStatus('current')
plsfn0Prb75RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb75RIPAvg.setStatus('current')
plsfn0Prb76RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb76RIPAvg.setStatus('current')
plsfn0Prb77RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb77RIPAvg.setStatus('current')
plsfn0Prb78RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb78RIPAvg.setStatus('current')
plsfn0Prb79RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb79RIPAvg.setStatus('current')
plsfn0Prb80RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb80RIPAvg.setStatus('current')
plsfn0Prb81RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb81RIPAvg.setStatus('current')
plsfn0Prb82RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb82RIPAvg.setStatus('current')
plsfn0Prb83RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb83RIPAvg.setStatus('current')
plsfn0Prb84RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb84RIPAvg.setStatus('current')
plsfn0Prb85RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb85RIPAvg.setStatus('current')
plsfn0Prb86RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb86RIPAvg.setStatus('current')
plsfn0Prb87RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb87RIPAvg.setStatus('current')
plsfn0Prb88RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb88RIPAvg.setStatus('current')
plsfn0Prb89RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb89RIPAvg.setStatus('current')
plsfn0Prb90RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb90RIPAvg.setStatus('current')
plsfn0Prb91RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb91RIPAvg.setStatus('current')
plsfn0Prb92RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb92RIPAvg.setStatus('current')
plsfn0Prb93RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb93RIPAvg.setStatus('current')
plsfn0Prb94RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb94RIPAvg.setStatus('current')
plsfn0Prb95RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb95RIPAvg.setStatus('current')
plsfn0Prb96RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb96RIPAvg.setStatus('current')
plsfn0Prb97RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb97RIPAvg.setStatus('current')
plsfn0Prb98RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb98RIPAvg.setStatus('current')
plsfn0Prb99RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 5, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn0Prb99RIPAvg.setStatus('current')
sfn2avgripTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6), )
if mibBuilder.loadTexts: sfn2avgripTable.setStatus('current')
sfn2avgripEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sfn2avgripLcId"))
if mibBuilder.loadTexts: sfn2avgripEntry.setStatus('current')
sfn2avgripLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sfn2avgripLcId.setStatus('current')
sfn2avgripRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn2avgripRowStatus.setStatus('current')
plsfn2Prb00RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb00RIPAvg.setStatus('current')
plsfn2Prb01RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb01RIPAvg.setStatus('current')
plsfn2Prb02RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb02RIPAvg.setStatus('current')
plsfn2Prb03RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb03RIPAvg.setStatus('current')
plsfn2Prb04RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb04RIPAvg.setStatus('current')
plsfn2Prb05RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb05RIPAvg.setStatus('current')
plsfn2Prb06RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb06RIPAvg.setStatus('current')
plsfn2Prb07RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb07RIPAvg.setStatus('current')
plsfn2Prb08RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb08RIPAvg.setStatus('current')
plsfn2Prb09RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb09RIPAvg.setStatus('current')
plsfn2Prb10RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb10RIPAvg.setStatus('current')
plsfn2Prb11RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb11RIPAvg.setStatus('current')
plsfn2Prb12RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb12RIPAvg.setStatus('current')
plsfn2Prb13RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb13RIPAvg.setStatus('current')
plsfn2Prb14RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb14RIPAvg.setStatus('current')
plsfn2Prb15RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb15RIPAvg.setStatus('current')
plsfn2Prb16RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb16RIPAvg.setStatus('current')
plsfn2Prb17RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb17RIPAvg.setStatus('current')
plsfn2Prb18RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb18RIPAvg.setStatus('current')
plsfn2Prb19RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb19RIPAvg.setStatus('current')
plsfn2Prb20RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb20RIPAvg.setStatus('current')
plsfn2Prb21RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb21RIPAvg.setStatus('current')
plsfn2Prb22RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb22RIPAvg.setStatus('current')
plsfn2Prb23RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb23RIPAvg.setStatus('current')
plsfn2Prb24RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb24RIPAvg.setStatus('current')
plsfn2Prb25RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb25RIPAvg.setStatus('current')
plsfn2Prb26RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb26RIPAvg.setStatus('current')
plsfn2Prb27RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb27RIPAvg.setStatus('current')
plsfn2Prb28RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb28RIPAvg.setStatus('current')
plsfn2Prb29RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb29RIPAvg.setStatus('current')
plsfn2Prb30RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb30RIPAvg.setStatus('current')
plsfn2Prb31RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb31RIPAvg.setStatus('current')
plsfn2Prb32RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb32RIPAvg.setStatus('current')
plsfn2Prb33RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb33RIPAvg.setStatus('current')
plsfn2Prb34RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb34RIPAvg.setStatus('current')
plsfn2Prb35RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb35RIPAvg.setStatus('current')
plsfn2Prb36RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb36RIPAvg.setStatus('current')
plsfn2Prb37RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb37RIPAvg.setStatus('current')
plsfn2Prb38RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb38RIPAvg.setStatus('current')
plsfn2Prb39RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb39RIPAvg.setStatus('current')
plsfn2Prb40RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb40RIPAvg.setStatus('current')
plsfn2Prb41RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb41RIPAvg.setStatus('current')
plsfn2Prb42RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb42RIPAvg.setStatus('current')
plsfn2Prb43RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb43RIPAvg.setStatus('current')
plsfn2Prb44RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb44RIPAvg.setStatus('current')
plsfn2Prb45RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb45RIPAvg.setStatus('current')
plsfn2Prb46RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb46RIPAvg.setStatus('current')
plsfn2Prb47RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb47RIPAvg.setStatus('current')
plsfn2Prb48RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb48RIPAvg.setStatus('current')
plsfn2Prb49RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb49RIPAvg.setStatus('current')
plsfn2Prb50RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb50RIPAvg.setStatus('current')
plsfn2Prb51RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb51RIPAvg.setStatus('current')
plsfn2Prb52RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb52RIPAvg.setStatus('current')
plsfn2Prb53RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb53RIPAvg.setStatus('current')
plsfn2Prb54RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb54RIPAvg.setStatus('current')
plsfn2Prb55RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb55RIPAvg.setStatus('current')
plsfn2Prb56RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb56RIPAvg.setStatus('current')
plsfn2Prb57RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb57RIPAvg.setStatus('current')
plsfn2Prb58RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb58RIPAvg.setStatus('current')
plsfn2Prb59RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb59RIPAvg.setStatus('current')
plsfn2Prb60RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb60RIPAvg.setStatus('current')
plsfn2Prb61RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb61RIPAvg.setStatus('current')
plsfn2Prb62RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb62RIPAvg.setStatus('current')
plsfn2Prb63RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb63RIPAvg.setStatus('current')
plsfn2Prb64RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb64RIPAvg.setStatus('current')
plsfn2Prb65RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb65RIPAvg.setStatus('current')
plsfn2Prb66RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb66RIPAvg.setStatus('current')
plsfn2Prb67RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb67RIPAvg.setStatus('current')
plsfn2Prb68RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb68RIPAvg.setStatus('current')
plsfn2Prb69RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb69RIPAvg.setStatus('current')
plsfn2Prb70RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb70RIPAvg.setStatus('current')
plsfn2Prb71RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb71RIPAvg.setStatus('current')
plsfn2Prb72RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb72RIPAvg.setStatus('current')
plsfn2Prb73RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb73RIPAvg.setStatus('current')
plsfn2Prb74RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb74RIPAvg.setStatus('current')
plsfn2Prb75RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb75RIPAvg.setStatus('current')
plsfn2Prb76RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb76RIPAvg.setStatus('current')
plsfn2Prb77RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb77RIPAvg.setStatus('current')
plsfn2Prb78RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb78RIPAvg.setStatus('current')
plsfn2Prb79RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb79RIPAvg.setStatus('current')
plsfn2Prb80RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb80RIPAvg.setStatus('current')
plsfn2Prb81RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb81RIPAvg.setStatus('current')
plsfn2Prb82RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb82RIPAvg.setStatus('current')
plsfn2Prb83RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb83RIPAvg.setStatus('current')
plsfn2Prb84RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb84RIPAvg.setStatus('current')
plsfn2Prb85RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb85RIPAvg.setStatus('current')
plsfn2Prb86RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb86RIPAvg.setStatus('current')
plsfn2Prb87RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb87RIPAvg.setStatus('current')
plsfn2Prb88RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb88RIPAvg.setStatus('current')
plsfn2Prb89RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb89RIPAvg.setStatus('current')
plsfn2Prb90RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb90RIPAvg.setStatus('current')
plsfn2Prb91RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb91RIPAvg.setStatus('current')
plsfn2Prb92RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb92RIPAvg.setStatus('current')
plsfn2Prb93RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb93RIPAvg.setStatus('current')
plsfn2Prb94RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb94RIPAvg.setStatus('current')
plsfn2Prb95RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb95RIPAvg.setStatus('current')
plsfn2Prb96RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb96RIPAvg.setStatus('current')
plsfn2Prb97RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb97RIPAvg.setStatus('current')
plsfn2Prb98RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb98RIPAvg.setStatus('current')
plsfn2Prb99RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 6, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn2Prb99RIPAvg.setStatus('current')
sfn4avgripTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7), )
if mibBuilder.loadTexts: sfn4avgripTable.setStatus('current')
sfn4avgripEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sfn4avgripLcId"))
if mibBuilder.loadTexts: sfn4avgripEntry.setStatus('current')
sfn4avgripLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sfn4avgripLcId.setStatus('current')
sfn4avgripRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn4avgripRowStatus.setStatus('current')
plsfn4Prb00RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb00RIPAvg.setStatus('current')
plsfn4Prb01RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb01RIPAvg.setStatus('current')
plsfn4Prb02RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb02RIPAvg.setStatus('current')
plsfn4Prb03RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb03RIPAvg.setStatus('current')
plsfn4Prb04RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb04RIPAvg.setStatus('current')
plsfn4Prb05RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb05RIPAvg.setStatus('current')
plsfn4Prb06RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb06RIPAvg.setStatus('current')
plsfn4Prb07RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb07RIPAvg.setStatus('current')
plsfn4Prb08RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb08RIPAvg.setStatus('current')
plsfn4Prb09RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb09RIPAvg.setStatus('current')
plsfn4Prb10RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb10RIPAvg.setStatus('current')
plsfn4Prb11RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb11RIPAvg.setStatus('current')
plsfn4Prb12RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb12RIPAvg.setStatus('current')
plsfn4Prb13RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb13RIPAvg.setStatus('current')
plsfn4Prb14RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb14RIPAvg.setStatus('current')
plsfn4Prb15RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb15RIPAvg.setStatus('current')
plsfn4Prb16RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb16RIPAvg.setStatus('current')
plsfn4Prb17RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb17RIPAvg.setStatus('current')
plsfn4Prb18RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb18RIPAvg.setStatus('current')
plsfn4Prb19RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb19RIPAvg.setStatus('current')
plsfn4Prb20RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb20RIPAvg.setStatus('current')
plsfn4Prb21RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb21RIPAvg.setStatus('current')
plsfn4Prb22RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb22RIPAvg.setStatus('current')
plsfn4Prb23RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb23RIPAvg.setStatus('current')
plsfn4Prb24RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb24RIPAvg.setStatus('current')
plsfn4Prb25RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb25RIPAvg.setStatus('current')
plsfn4Prb26RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb26RIPAvg.setStatus('current')
plsfn4Prb27RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb27RIPAvg.setStatus('current')
plsfn4Prb28RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb28RIPAvg.setStatus('current')
plsfn4Prb29RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb29RIPAvg.setStatus('current')
plsfn4Prb30RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb30RIPAvg.setStatus('current')
plsfn4Prb31RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb31RIPAvg.setStatus('current')
plsfn4Prb32RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb32RIPAvg.setStatus('current')
plsfn4Prb33RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb33RIPAvg.setStatus('current')
plsfn4Prb34RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb34RIPAvg.setStatus('current')
plsfn4Prb35RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb35RIPAvg.setStatus('current')
plsfn4Prb36RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb36RIPAvg.setStatus('current')
plsfn4Prb37RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb37RIPAvg.setStatus('current')
plsfn4Prb38RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb38RIPAvg.setStatus('current')
plsfn4Prb39RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb39RIPAvg.setStatus('current')
plsfn4Prb40RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb40RIPAvg.setStatus('current')
plsfn4Prb41RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb41RIPAvg.setStatus('current')
plsfn4Prb42RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb42RIPAvg.setStatus('current')
plsfn4Prb43RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb43RIPAvg.setStatus('current')
plsfn4Prb44RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb44RIPAvg.setStatus('current')
plsfn4Prb45RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb45RIPAvg.setStatus('current')
plsfn4Prb46RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb46RIPAvg.setStatus('current')
plsfn4Prb47RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb47RIPAvg.setStatus('current')
plsfn4Prb48RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb48RIPAvg.setStatus('current')
plsfn4Prb49RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb49RIPAvg.setStatus('current')
plsfn4Prb50RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb50RIPAvg.setStatus('current')
plsfn4Prb51RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb51RIPAvg.setStatus('current')
plsfn4Prb52RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb52RIPAvg.setStatus('current')
plsfn4Prb53RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb53RIPAvg.setStatus('current')
plsfn4Prb54RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb54RIPAvg.setStatus('current')
plsfn4Prb55RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb55RIPAvg.setStatus('current')
plsfn4Prb56RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb56RIPAvg.setStatus('current')
plsfn4Prb57RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb57RIPAvg.setStatus('current')
plsfn4Prb58RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb58RIPAvg.setStatus('current')
plsfn4Prb59RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb59RIPAvg.setStatus('current')
plsfn4Prb60RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb60RIPAvg.setStatus('current')
plsfn4Prb61RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb61RIPAvg.setStatus('current')
plsfn4Prb62RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb62RIPAvg.setStatus('current')
plsfn4Prb63RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb63RIPAvg.setStatus('current')
plsfn4Prb64RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb64RIPAvg.setStatus('current')
plsfn4Prb65RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb65RIPAvg.setStatus('current')
plsfn4Prb66RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb66RIPAvg.setStatus('current')
plsfn4Prb67RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb67RIPAvg.setStatus('current')
plsfn4Prb68RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb68RIPAvg.setStatus('current')
plsfn4Prb69RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb69RIPAvg.setStatus('current')
plsfn4Prb70RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb70RIPAvg.setStatus('current')
plsfn4Prb71RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb71RIPAvg.setStatus('current')
plsfn4Prb72RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb72RIPAvg.setStatus('current')
plsfn4Prb73RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb73RIPAvg.setStatus('current')
plsfn4Prb74RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb74RIPAvg.setStatus('current')
plsfn4Prb75RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb75RIPAvg.setStatus('current')
plsfn4Prb76RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb76RIPAvg.setStatus('current')
plsfn4Prb77RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb77RIPAvg.setStatus('current')
plsfn4Prb78RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb78RIPAvg.setStatus('current')
plsfn4Prb79RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb79RIPAvg.setStatus('current')
plsfn4Prb80RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb80RIPAvg.setStatus('current')
plsfn4Prb81RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb81RIPAvg.setStatus('current')
plsfn4Prb82RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb82RIPAvg.setStatus('current')
plsfn4Prb83RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb83RIPAvg.setStatus('current')
plsfn4Prb84RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb84RIPAvg.setStatus('current')
plsfn4Prb85RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb85RIPAvg.setStatus('current')
plsfn4Prb86RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb86RIPAvg.setStatus('current')
plsfn4Prb87RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb87RIPAvg.setStatus('current')
plsfn4Prb88RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb88RIPAvg.setStatus('current')
plsfn4Prb89RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb89RIPAvg.setStatus('current')
plsfn4Prb90RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb90RIPAvg.setStatus('current')
plsfn4Prb91RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb91RIPAvg.setStatus('current')
plsfn4Prb92RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb92RIPAvg.setStatus('current')
plsfn4Prb93RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb93RIPAvg.setStatus('current')
plsfn4Prb94RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb94RIPAvg.setStatus('current')
plsfn4Prb95RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb95RIPAvg.setStatus('current')
plsfn4Prb96RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb96RIPAvg.setStatus('current')
plsfn4Prb97RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb97RIPAvg.setStatus('current')
plsfn4Prb98RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb98RIPAvg.setStatus('current')
plsfn4Prb99RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 7, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn4Prb99RIPAvg.setStatus('current')
sfn3avgripTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8), )
if mibBuilder.loadTexts: sfn3avgripTable.setStatus('current')
sfn3avgripEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sfn3avgripLcId"))
if mibBuilder.loadTexts: sfn3avgripEntry.setStatus('current')
sfn3avgripLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sfn3avgripLcId.setStatus('current')
sfn3avgripRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn3avgripRowStatus.setStatus('current')
plsfn3Prb00RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb00RIPAvg.setStatus('current')
plsfn3Prb01RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb01RIPAvg.setStatus('current')
plsfn3Prb02RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb02RIPAvg.setStatus('current')
plsfn3Prb03RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb03RIPAvg.setStatus('current')
plsfn3Prb04RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb04RIPAvg.setStatus('current')
plsfn3Prb05RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb05RIPAvg.setStatus('current')
plsfn3Prb06RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb06RIPAvg.setStatus('current')
plsfn3Prb07RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb07RIPAvg.setStatus('current')
plsfn3Prb08RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb08RIPAvg.setStatus('current')
plsfn3Prb09RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb09RIPAvg.setStatus('current')
plsfn3Prb10RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb10RIPAvg.setStatus('current')
plsfn3Prb11RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb11RIPAvg.setStatus('current')
plsfn3Prb12RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb12RIPAvg.setStatus('current')
plsfn3Prb13RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb13RIPAvg.setStatus('current')
plsfn3Prb14RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb14RIPAvg.setStatus('current')
plsfn3Prb15RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb15RIPAvg.setStatus('current')
plsfn3Prb16RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb16RIPAvg.setStatus('current')
plsfn3Prb17RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb17RIPAvg.setStatus('current')
plsfn3Prb18RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb18RIPAvg.setStatus('current')
plsfn3Prb19RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb19RIPAvg.setStatus('current')
plsfn3Prb20RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb20RIPAvg.setStatus('current')
plsfn3Prb21RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb21RIPAvg.setStatus('current')
plsfn3Prb22RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb22RIPAvg.setStatus('current')
plsfn3Prb23RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb23RIPAvg.setStatus('current')
plsfn3Prb24RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb24RIPAvg.setStatus('current')
plsfn3Prb25RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb25RIPAvg.setStatus('current')
plsfn3Prb26RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb26RIPAvg.setStatus('current')
plsfn3Prb27RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb27RIPAvg.setStatus('current')
plsfn3Prb28RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb28RIPAvg.setStatus('current')
plsfn3Prb29RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb29RIPAvg.setStatus('current')
plsfn3Prb30RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb30RIPAvg.setStatus('current')
plsfn3Prb31RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb31RIPAvg.setStatus('current')
plsfn3Prb32RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb32RIPAvg.setStatus('current')
plsfn3Prb33RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb33RIPAvg.setStatus('current')
plsfn3Prb34RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb34RIPAvg.setStatus('current')
plsfn3Prb35RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb35RIPAvg.setStatus('current')
plsfn3Prb36RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb36RIPAvg.setStatus('current')
plsfn3Prb37RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb37RIPAvg.setStatus('current')
plsfn3Prb38RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb38RIPAvg.setStatus('current')
plsfn3Prb39RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb39RIPAvg.setStatus('current')
plsfn3Prb40RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb40RIPAvg.setStatus('current')
plsfn3Prb41RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb41RIPAvg.setStatus('current')
plsfn3Prb42RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb42RIPAvg.setStatus('current')
plsfn3Prb43RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb43RIPAvg.setStatus('current')
plsfn3Prb44RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb44RIPAvg.setStatus('current')
plsfn3Prb45RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb45RIPAvg.setStatus('current')
plsfn3Prb46RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb46RIPAvg.setStatus('current')
plsfn3Prb47RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb47RIPAvg.setStatus('current')
plsfn3Prb48RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb48RIPAvg.setStatus('current')
plsfn3Prb49RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb49RIPAvg.setStatus('current')
plsfn3Prb50RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb50RIPAvg.setStatus('current')
plsfn3Prb51RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb51RIPAvg.setStatus('current')
plsfn3Prb52RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb52RIPAvg.setStatus('current')
plsfn3Prb53RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb53RIPAvg.setStatus('current')
plsfn3Prb54RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb54RIPAvg.setStatus('current')
plsfn3Prb55RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb55RIPAvg.setStatus('current')
plsfn3Prb56RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb56RIPAvg.setStatus('current')
plsfn3Prb57RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb57RIPAvg.setStatus('current')
plsfn3Prb58RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb58RIPAvg.setStatus('current')
plsfn3Prb59RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb59RIPAvg.setStatus('current')
plsfn3Prb60RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb60RIPAvg.setStatus('current')
plsfn3Prb61RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb61RIPAvg.setStatus('current')
plsfn3Prb62RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb62RIPAvg.setStatus('current')
plsfn3Prb63RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb63RIPAvg.setStatus('current')
plsfn3Prb64RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb64RIPAvg.setStatus('current')
plsfn3Prb65RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb65RIPAvg.setStatus('current')
plsfn3Prb66RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb66RIPAvg.setStatus('current')
plsfn3Prb67RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb67RIPAvg.setStatus('current')
plsfn3Prb68RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb68RIPAvg.setStatus('current')
plsfn3Prb69RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb69RIPAvg.setStatus('current')
plsfn3Prb70RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb70RIPAvg.setStatus('current')
plsfn3Prb71RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb71RIPAvg.setStatus('current')
plsfn3Prb72RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb72RIPAvg.setStatus('current')
plsfn3Prb73RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb73RIPAvg.setStatus('current')
plsfn3Prb74RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb74RIPAvg.setStatus('current')
plsfn3Prb75RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb75RIPAvg.setStatus('current')
plsfn3Prb76RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb76RIPAvg.setStatus('current')
plsfn3Prb77RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb77RIPAvg.setStatus('current')
plsfn3Prb78RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb78RIPAvg.setStatus('current')
plsfn3Prb79RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb79RIPAvg.setStatus('current')
plsfn3Prb80RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb80RIPAvg.setStatus('current')
plsfn3Prb81RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb81RIPAvg.setStatus('current')
plsfn3Prb82RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb82RIPAvg.setStatus('current')
plsfn3Prb83RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb83RIPAvg.setStatus('current')
plsfn3Prb84RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb84RIPAvg.setStatus('current')
plsfn3Prb85RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb85RIPAvg.setStatus('current')
plsfn3Prb86RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb86RIPAvg.setStatus('current')
plsfn3Prb87RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb87RIPAvg.setStatus('current')
plsfn3Prb88RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb88RIPAvg.setStatus('current')
plsfn3Prb89RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb89RIPAvg.setStatus('current')
plsfn3Prb90RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb90RIPAvg.setStatus('current')
plsfn3Prb91RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb91RIPAvg.setStatus('current')
plsfn3Prb92RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb92RIPAvg.setStatus('current')
plsfn3Prb93RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb93RIPAvg.setStatus('current')
plsfn3Prb94RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb94RIPAvg.setStatus('current')
plsfn3Prb95RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb95RIPAvg.setStatus('current')
plsfn3Prb96RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb96RIPAvg.setStatus('current')
plsfn3Prb97RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb97RIPAvg.setStatus('current')
plsfn3Prb98RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb98RIPAvg.setStatus('current')
plsfn3Prb99RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 8, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn3Prb99RIPAvg.setStatus('current')
sfn5avgripTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9), )
if mibBuilder.loadTexts: sfn5avgripTable.setStatus('current')
sfn5avgripEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sfn5avgripLcId"))
if mibBuilder.loadTexts: sfn5avgripEntry.setStatus('current')
sfn5avgripLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sfn5avgripLcId.setStatus('current')
sfn5avgripRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn5avgripRowStatus.setStatus('current')
plsfn5Prb00RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb00RIPAvg.setStatus('current')
plsfn5Prb01RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb01RIPAvg.setStatus('current')
plsfn5Prb02RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb02RIPAvg.setStatus('current')
plsfn5Prb03RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb03RIPAvg.setStatus('current')
plsfn5Prb04RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb04RIPAvg.setStatus('current')
plsfn5Prb05RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb05RIPAvg.setStatus('current')
plsfn5Prb06RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb06RIPAvg.setStatus('current')
plsfn5Prb07RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb07RIPAvg.setStatus('current')
plsfn5Prb08RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb08RIPAvg.setStatus('current')
plsfn5Prb09RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb09RIPAvg.setStatus('current')
plsfn5Prb10RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb10RIPAvg.setStatus('current')
plsfn5Prb11RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb11RIPAvg.setStatus('current')
plsfn5Prb12RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb12RIPAvg.setStatus('current')
plsfn5Prb13RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb13RIPAvg.setStatus('current')
plsfn5Prb14RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb14RIPAvg.setStatus('current')
plsfn5Prb15RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb15RIPAvg.setStatus('current')
plsfn5Prb16RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb16RIPAvg.setStatus('current')
plsfn5Prb17RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb17RIPAvg.setStatus('current')
plsfn5Prb18RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb18RIPAvg.setStatus('current')
plsfn5Prb19RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb19RIPAvg.setStatus('current')
plsfn5Prb20RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb20RIPAvg.setStatus('current')
plsfn5Prb21RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb21RIPAvg.setStatus('current')
plsfn5Prb22RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb22RIPAvg.setStatus('current')
plsfn5Prb23RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb23RIPAvg.setStatus('current')
plsfn5Prb24RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb24RIPAvg.setStatus('current')
plsfn5Prb25RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb25RIPAvg.setStatus('current')
plsfn5Prb26RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb26RIPAvg.setStatus('current')
plsfn5Prb27RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb27RIPAvg.setStatus('current')
plsfn5Prb28RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb28RIPAvg.setStatus('current')
plsfn5Prb29RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb29RIPAvg.setStatus('current')
plsfn5Prb30RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb30RIPAvg.setStatus('current')
plsfn5Prb31RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb31RIPAvg.setStatus('current')
plsfn5Prb32RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb32RIPAvg.setStatus('current')
plsfn5Prb33RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb33RIPAvg.setStatus('current')
plsfn5Prb34RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb34RIPAvg.setStatus('current')
plsfn5Prb35RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb35RIPAvg.setStatus('current')
plsfn5Prb36RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb36RIPAvg.setStatus('current')
plsfn5Prb37RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb37RIPAvg.setStatus('current')
plsfn5Prb38RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb38RIPAvg.setStatus('current')
plsfn5Prb39RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb39RIPAvg.setStatus('current')
plsfn5Prb40RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb40RIPAvg.setStatus('current')
plsfn5Prb41RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb41RIPAvg.setStatus('current')
plsfn5Prb42RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb42RIPAvg.setStatus('current')
plsfn5Prb43RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb43RIPAvg.setStatus('current')
plsfn5Prb44RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb44RIPAvg.setStatus('current')
plsfn5Prb45RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb45RIPAvg.setStatus('current')
plsfn5Prb46RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb46RIPAvg.setStatus('current')
plsfn5Prb47RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb47RIPAvg.setStatus('current')
plsfn5Prb48RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb48RIPAvg.setStatus('current')
plsfn5Prb49RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb49RIPAvg.setStatus('current')
plsfn5Prb50RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb50RIPAvg.setStatus('current')
plsfn5Prb51RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb51RIPAvg.setStatus('current')
plsfn5Prb52RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb52RIPAvg.setStatus('current')
plsfn5Prb53RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb53RIPAvg.setStatus('current')
plsfn5Prb54RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb54RIPAvg.setStatus('current')
plsfn5Prb55RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb55RIPAvg.setStatus('current')
plsfn5Prb56RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb56RIPAvg.setStatus('current')
plsfn5Prb57RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb57RIPAvg.setStatus('current')
plsfn5Prb58RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb58RIPAvg.setStatus('current')
plsfn5Prb59RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb59RIPAvg.setStatus('current')
plsfn5Prb60RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb60RIPAvg.setStatus('current')
plsfn5Prb61RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb61RIPAvg.setStatus('current')
plsfn5Prb62RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb62RIPAvg.setStatus('current')
plsfn5Prb63RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb63RIPAvg.setStatus('current')
plsfn5Prb64RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb64RIPAvg.setStatus('current')
plsfn5Prb65RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb65RIPAvg.setStatus('current')
plsfn5Prb66RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb66RIPAvg.setStatus('current')
plsfn5Prb67RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb67RIPAvg.setStatus('current')
plsfn5Prb68RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb68RIPAvg.setStatus('current')
plsfn5Prb69RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb69RIPAvg.setStatus('current')
plsfn5Prb70RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb70RIPAvg.setStatus('current')
plsfn5Prb71RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb71RIPAvg.setStatus('current')
plsfn5Prb72RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb72RIPAvg.setStatus('current')
plsfn5Prb73RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb73RIPAvg.setStatus('current')
plsfn5Prb74RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb74RIPAvg.setStatus('current')
plsfn5Prb75RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb75RIPAvg.setStatus('current')
plsfn5Prb76RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb76RIPAvg.setStatus('current')
plsfn5Prb77RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb77RIPAvg.setStatus('current')
plsfn5Prb78RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb78RIPAvg.setStatus('current')
plsfn5Prb79RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb79RIPAvg.setStatus('current')
plsfn5Prb80RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb80RIPAvg.setStatus('current')
plsfn5Prb81RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb81RIPAvg.setStatus('current')
plsfn5Prb82RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb82RIPAvg.setStatus('current')
plsfn5Prb83RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb83RIPAvg.setStatus('current')
plsfn5Prb84RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb84RIPAvg.setStatus('current')
plsfn5Prb85RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb85RIPAvg.setStatus('current')
plsfn5Prb86RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb86RIPAvg.setStatus('current')
plsfn5Prb87RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb87RIPAvg.setStatus('current')
plsfn5Prb88RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb88RIPAvg.setStatus('current')
plsfn5Prb89RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb89RIPAvg.setStatus('current')
plsfn5Prb90RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb90RIPAvg.setStatus('current')
plsfn5Prb91RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb91RIPAvg.setStatus('current')
plsfn5Prb92RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb92RIPAvg.setStatus('current')
plsfn5Prb93RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb93RIPAvg.setStatus('current')
plsfn5Prb94RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb94RIPAvg.setStatus('current')
plsfn5Prb95RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb95RIPAvg.setStatus('current')
plsfn5Prb96RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb96RIPAvg.setStatus('current')
plsfn5Prb97RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb97RIPAvg.setStatus('current')
plsfn5Prb98RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb98RIPAvg.setStatus('current')
plsfn5Prb99RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 9, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn5Prb99RIPAvg.setStatus('current')
sfn6avgripTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10), )
if mibBuilder.loadTexts: sfn6avgripTable.setStatus('current')
sfn6avgripEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sfn6avgripLcId"))
if mibBuilder.loadTexts: sfn6avgripEntry.setStatus('current')
sfn6avgripLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sfn6avgripLcId.setStatus('current')
sfn6avgripRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn6avgripRowStatus.setStatus('current')
plsfn6Prb00RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb00RIPAvg.setStatus('current')
plsfn6Prb01RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb01RIPAvg.setStatus('current')
plsfn6Prb02RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb02RIPAvg.setStatus('current')
plsfn6Prb03RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb03RIPAvg.setStatus('current')
plsfn6Prb04RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb04RIPAvg.setStatus('current')
plsfn6Prb05RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb05RIPAvg.setStatus('current')
plsfn6Prb06RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb06RIPAvg.setStatus('current')
plsfn6Prb07RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb07RIPAvg.setStatus('current')
plsfn6Prb08RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb08RIPAvg.setStatus('current')
plsfn6Prb09RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb09RIPAvg.setStatus('current')
plsfn6Prb10RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb10RIPAvg.setStatus('current')
plsfn6Prb11RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb11RIPAvg.setStatus('current')
plsfn6Prb12RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb12RIPAvg.setStatus('current')
plsfn6Prb13RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb13RIPAvg.setStatus('current')
plsfn6Prb14RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb14RIPAvg.setStatus('current')
plsfn6Prb15RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb15RIPAvg.setStatus('current')
plsfn6Prb16RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb16RIPAvg.setStatus('current')
plsfn6Prb17RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb17RIPAvg.setStatus('current')
plsfn6Prb18RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb18RIPAvg.setStatus('current')
plsfn6Prb19RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb19RIPAvg.setStatus('current')
plsfn6Prb20RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb20RIPAvg.setStatus('current')
plsfn6Prb21RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb21RIPAvg.setStatus('current')
plsfn6Prb22RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb22RIPAvg.setStatus('current')
plsfn6Prb23RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb23RIPAvg.setStatus('current')
plsfn6Prb24RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb24RIPAvg.setStatus('current')
plsfn6Prb25RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb25RIPAvg.setStatus('current')
plsfn6Prb26RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb26RIPAvg.setStatus('current')
plsfn6Prb27RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb27RIPAvg.setStatus('current')
plsfn6Prb28RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb28RIPAvg.setStatus('current')
plsfn6Prb29RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb29RIPAvg.setStatus('current')
plsfn6Prb30RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb30RIPAvg.setStatus('current')
plsfn6Prb31RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb31RIPAvg.setStatus('current')
plsfn6Prb32RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb32RIPAvg.setStatus('current')
plsfn6Prb33RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb33RIPAvg.setStatus('current')
plsfn6Prb34RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb34RIPAvg.setStatus('current')
plsfn6Prb35RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb35RIPAvg.setStatus('current')
plsfn6Prb36RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb36RIPAvg.setStatus('current')
plsfn6Prb37RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb37RIPAvg.setStatus('current')
plsfn6Prb38RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb38RIPAvg.setStatus('current')
plsfn6Prb39RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb39RIPAvg.setStatus('current')
plsfn6Prb40RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb40RIPAvg.setStatus('current')
plsfn6Prb41RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb41RIPAvg.setStatus('current')
plsfn6Prb42RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb42RIPAvg.setStatus('current')
plsfn6Prb43RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb43RIPAvg.setStatus('current')
plsfn6Prb44RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb44RIPAvg.setStatus('current')
plsfn6Prb45RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb45RIPAvg.setStatus('current')
plsfn6Prb46RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb46RIPAvg.setStatus('current')
plsfn6Prb47RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb47RIPAvg.setStatus('current')
plsfn6Prb48RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb48RIPAvg.setStatus('current')
plsfn6Prb49RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb49RIPAvg.setStatus('current')
plsfn6Prb50RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb50RIPAvg.setStatus('current')
plsfn6Prb51RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb51RIPAvg.setStatus('current')
plsfn6Prb52RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb52RIPAvg.setStatus('current')
plsfn6Prb53RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb53RIPAvg.setStatus('current')
plsfn6Prb54RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb54RIPAvg.setStatus('current')
plsfn6Prb55RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb55RIPAvg.setStatus('current')
plsfn6Prb56RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb56RIPAvg.setStatus('current')
plsfn6Prb57RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb57RIPAvg.setStatus('current')
plsfn6Prb58RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb58RIPAvg.setStatus('current')
plsfn6Prb59RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb59RIPAvg.setStatus('current')
plsfn6Prb60RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb60RIPAvg.setStatus('current')
plsfn6Prb61RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb61RIPAvg.setStatus('current')
plsfn6Prb62RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb62RIPAvg.setStatus('current')
plsfn6Prb63RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb63RIPAvg.setStatus('current')
plsfn6Prb64RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb64RIPAvg.setStatus('current')
plsfn6Prb65RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb65RIPAvg.setStatus('current')
plsfn6Prb66RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb66RIPAvg.setStatus('current')
plsfn6Prb67RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb67RIPAvg.setStatus('current')
plsfn6Prb68RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb68RIPAvg.setStatus('current')
plsfn6Prb69RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb69RIPAvg.setStatus('current')
plsfn6Prb70RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb70RIPAvg.setStatus('current')
plsfn6Prb71RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb71RIPAvg.setStatus('current')
plsfn6Prb72RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb72RIPAvg.setStatus('current')
plsfn6Prb73RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb73RIPAvg.setStatus('current')
plsfn6Prb74RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb74RIPAvg.setStatus('current')
plsfn6Prb75RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb75RIPAvg.setStatus('current')
plsfn6Prb76RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb76RIPAvg.setStatus('current')
plsfn6Prb77RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb77RIPAvg.setStatus('current')
plsfn6Prb78RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb78RIPAvg.setStatus('current')
plsfn6Prb79RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb79RIPAvg.setStatus('current')
plsfn6Prb80RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb80RIPAvg.setStatus('current')
plsfn6Prb81RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb81RIPAvg.setStatus('current')
plsfn6Prb82RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb82RIPAvg.setStatus('current')
plsfn6Prb83RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb83RIPAvg.setStatus('current')
plsfn6Prb84RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb84RIPAvg.setStatus('current')
plsfn6Prb85RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb85RIPAvg.setStatus('current')
plsfn6Prb86RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb86RIPAvg.setStatus('current')
plsfn6Prb87RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb87RIPAvg.setStatus('current')
plsfn6Prb88RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb88RIPAvg.setStatus('current')
plsfn6Prb89RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb89RIPAvg.setStatus('current')
plsfn6Prb90RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb90RIPAvg.setStatus('current')
plsfn6Prb91RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb91RIPAvg.setStatus('current')
plsfn6Prb92RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb92RIPAvg.setStatus('current')
plsfn6Prb93RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb93RIPAvg.setStatus('current')
plsfn6Prb94RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb94RIPAvg.setStatus('current')
plsfn6Prb95RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb95RIPAvg.setStatus('current')
plsfn6Prb96RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb96RIPAvg.setStatus('current')
plsfn6Prb97RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb97RIPAvg.setStatus('current')
plsfn6Prb98RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb98RIPAvg.setStatus('current')
plsfn6Prb99RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 10, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn6Prb99RIPAvg.setStatus('current')
sfn9avgripTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11), )
if mibBuilder.loadTexts: sfn9avgripTable.setStatus('current')
sfn9avgripEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sfn9avgripLcId"))
if mibBuilder.loadTexts: sfn9avgripEntry.setStatus('current')
sfn9avgripLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sfn9avgripLcId.setStatus('current')
sfn9avgripRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn9avgripRowStatus.setStatus('current')
plsfn9Prb00RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb00RIPAvg.setStatus('current')
plsfn9Prb01RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb01RIPAvg.setStatus('current')
plsfn9Prb02RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb02RIPAvg.setStatus('current')
plsfn9Prb03RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb03RIPAvg.setStatus('current')
plsfn9Prb04RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb04RIPAvg.setStatus('current')
plsfn9Prb05RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb05RIPAvg.setStatus('current')
plsfn9Prb06RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb06RIPAvg.setStatus('current')
plsfn9Prb07RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb07RIPAvg.setStatus('current')
plsfn9Prb08RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb08RIPAvg.setStatus('current')
plsfn9Prb09RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb09RIPAvg.setStatus('current')
plsfn9Prb10RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb10RIPAvg.setStatus('current')
plsfn9Prb11RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb11RIPAvg.setStatus('current')
plsfn9Prb12RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb12RIPAvg.setStatus('current')
plsfn9Prb13RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb13RIPAvg.setStatus('current')
plsfn9Prb14RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb14RIPAvg.setStatus('current')
plsfn9Prb15RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb15RIPAvg.setStatus('current')
plsfn9Prb16RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb16RIPAvg.setStatus('current')
plsfn9Prb17RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb17RIPAvg.setStatus('current')
plsfn9Prb18RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb18RIPAvg.setStatus('current')
plsfn9Prb19RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb19RIPAvg.setStatus('current')
plsfn9Prb20RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb20RIPAvg.setStatus('current')
plsfn9Prb21RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb21RIPAvg.setStatus('current')
plsfn9Prb22RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb22RIPAvg.setStatus('current')
plsfn9Prb23RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb23RIPAvg.setStatus('current')
plsfn9Prb24RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb24RIPAvg.setStatus('current')
plsfn9Prb25RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb25RIPAvg.setStatus('current')
plsfn9Prb26RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb26RIPAvg.setStatus('current')
plsfn9Prb27RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb27RIPAvg.setStatus('current')
plsfn9Prb28RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb28RIPAvg.setStatus('current')
plsfn9Prb29RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb29RIPAvg.setStatus('current')
plsfn9Prb30RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb30RIPAvg.setStatus('current')
plsfn9Prb31RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb31RIPAvg.setStatus('current')
plsfn9Prb32RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb32RIPAvg.setStatus('current')
plsfn9Prb33RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb33RIPAvg.setStatus('current')
plsfn9Prb34RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb34RIPAvg.setStatus('current')
plsfn9Prb35RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb35RIPAvg.setStatus('current')
plsfn9Prb36RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb36RIPAvg.setStatus('current')
plsfn9Prb37RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb37RIPAvg.setStatus('current')
plsfn9Prb38RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb38RIPAvg.setStatus('current')
plsfn9Prb39RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb39RIPAvg.setStatus('current')
plsfn9Prb40RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb40RIPAvg.setStatus('current')
plsfn9Prb41RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb41RIPAvg.setStatus('current')
plsfn9Prb42RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb42RIPAvg.setStatus('current')
plsfn9Prb43RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb43RIPAvg.setStatus('current')
plsfn9Prb44RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb44RIPAvg.setStatus('current')
plsfn9Prb45RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb45RIPAvg.setStatus('current')
plsfn9Prb46RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb46RIPAvg.setStatus('current')
plsfn9Prb47RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb47RIPAvg.setStatus('current')
plsfn9Prb48RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb48RIPAvg.setStatus('current')
plsfn9Prb49RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb49RIPAvg.setStatus('current')
plsfn9Prb50RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb50RIPAvg.setStatus('current')
plsfn9Prb51RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb51RIPAvg.setStatus('current')
plsfn9Prb52RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb52RIPAvg.setStatus('current')
plsfn9Prb53RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb53RIPAvg.setStatus('current')
plsfn9Prb54RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb54RIPAvg.setStatus('current')
plsfn9Prb55RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb55RIPAvg.setStatus('current')
plsfn9Prb56RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb56RIPAvg.setStatus('current')
plsfn9Prb57RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb57RIPAvg.setStatus('current')
plsfn9Prb58RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb58RIPAvg.setStatus('current')
plsfn9Prb59RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb59RIPAvg.setStatus('current')
plsfn9Prb60RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb60RIPAvg.setStatus('current')
plsfn9Prb61RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb61RIPAvg.setStatus('current')
plsfn9Prb62RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb62RIPAvg.setStatus('current')
plsfn9Prb63RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb63RIPAvg.setStatus('current')
plsfn9Prb64RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb64RIPAvg.setStatus('current')
plsfn9Prb65RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb65RIPAvg.setStatus('current')
plsfn9Prb66RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb66RIPAvg.setStatus('current')
plsfn9Prb67RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb67RIPAvg.setStatus('current')
plsfn9Prb68RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb68RIPAvg.setStatus('current')
plsfn9Prb69RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb69RIPAvg.setStatus('current')
plsfn9Prb70RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb70RIPAvg.setStatus('current')
plsfn9Prb71RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb71RIPAvg.setStatus('current')
plsfn9Prb72RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb72RIPAvg.setStatus('current')
plsfn9Prb73RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb73RIPAvg.setStatus('current')
plsfn9Prb74RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb74RIPAvg.setStatus('current')
plsfn9Prb75RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb75RIPAvg.setStatus('current')
plsfn9Prb76RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb76RIPAvg.setStatus('current')
plsfn9Prb77RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb77RIPAvg.setStatus('current')
plsfn9Prb78RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb78RIPAvg.setStatus('current')
plsfn9Prb79RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb79RIPAvg.setStatus('current')
plsfn9Prb80RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb80RIPAvg.setStatus('current')
plsfn9Prb81RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb81RIPAvg.setStatus('current')
plsfn9Prb82RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb82RIPAvg.setStatus('current')
plsfn9Prb83RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb83RIPAvg.setStatus('current')
plsfn9Prb84RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb84RIPAvg.setStatus('current')
plsfn9Prb85RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb85RIPAvg.setStatus('current')
plsfn9Prb86RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb86RIPAvg.setStatus('current')
plsfn9Prb87RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb87RIPAvg.setStatus('current')
plsfn9Prb88RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb88RIPAvg.setStatus('current')
plsfn9Prb89RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb89RIPAvg.setStatus('current')
plsfn9Prb90RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb90RIPAvg.setStatus('current')
plsfn9Prb91RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb91RIPAvg.setStatus('current')
plsfn9Prb92RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb92RIPAvg.setStatus('current')
plsfn9Prb93RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb93RIPAvg.setStatus('current')
plsfn9Prb94RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb94RIPAvg.setStatus('current')
plsfn9Prb95RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb95RIPAvg.setStatus('current')
plsfn9Prb96RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb96RIPAvg.setStatus('current')
plsfn9Prb97RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb97RIPAvg.setStatus('current')
plsfn9Prb98RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb98RIPAvg.setStatus('current')
plsfn9Prb99RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 11, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn9Prb99RIPAvg.setStatus('current')
sfn7avgripTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12), )
if mibBuilder.loadTexts: sfn7avgripTable.setStatus('current')
sfn7avgripEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sfn7avgripLcId"))
if mibBuilder.loadTexts: sfn7avgripEntry.setStatus('current')
sfn7avgripLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sfn7avgripLcId.setStatus('current')
sfn7avgripRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn7avgripRowStatus.setStatus('current')
plsfn7Prb00RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb00RIPAvg.setStatus('current')
plsfn7Prb01RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb01RIPAvg.setStatus('current')
plsfn7Prb02RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb02RIPAvg.setStatus('current')
plsfn7Prb03RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb03RIPAvg.setStatus('current')
plsfn7Prb04RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb04RIPAvg.setStatus('current')
plsfn7Prb05RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb05RIPAvg.setStatus('current')
plsfn7Prb06RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb06RIPAvg.setStatus('current')
plsfn7Prb07RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb07RIPAvg.setStatus('current')
plsfn7Prb08RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb08RIPAvg.setStatus('current')
plsfn7Prb09RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb09RIPAvg.setStatus('current')
plsfn7Prb10RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb10RIPAvg.setStatus('current')
plsfn7Prb11RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb11RIPAvg.setStatus('current')
plsfn7Prb12RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb12RIPAvg.setStatus('current')
plsfn7Prb13RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb13RIPAvg.setStatus('current')
plsfn7Prb14RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb14RIPAvg.setStatus('current')
plsfn7Prb15RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb15RIPAvg.setStatus('current')
plsfn7Prb16RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb16RIPAvg.setStatus('current')
plsfn7Prb17RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb17RIPAvg.setStatus('current')
plsfn7Prb18RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb18RIPAvg.setStatus('current')
plsfn7Prb19RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb19RIPAvg.setStatus('current')
plsfn7Prb20RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb20RIPAvg.setStatus('current')
plsfn7Prb21RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb21RIPAvg.setStatus('current')
plsfn7Prb22RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb22RIPAvg.setStatus('current')
plsfn7Prb23RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb23RIPAvg.setStatus('current')
plsfn7Prb24RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb24RIPAvg.setStatus('current')
plsfn7Prb25RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb25RIPAvg.setStatus('current')
plsfn7Prb26RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb26RIPAvg.setStatus('current')
plsfn7Prb27RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb27RIPAvg.setStatus('current')
plsfn7Prb28RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb28RIPAvg.setStatus('current')
plsfn7Prb29RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb29RIPAvg.setStatus('current')
plsfn7Prb30RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb30RIPAvg.setStatus('current')
plsfn7Prb31RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb31RIPAvg.setStatus('current')
plsfn7Prb32RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb32RIPAvg.setStatus('current')
plsfn7Prb33RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb33RIPAvg.setStatus('current')
plsfn7Prb34RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb34RIPAvg.setStatus('current')
plsfn7Prb35RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb35RIPAvg.setStatus('current')
plsfn7Prb36RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb36RIPAvg.setStatus('current')
plsfn7Prb37RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb37RIPAvg.setStatus('current')
plsfn7Prb38RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb38RIPAvg.setStatus('current')
plsfn7Prb39RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb39RIPAvg.setStatus('current')
plsfn7Prb40RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb40RIPAvg.setStatus('current')
plsfn7Prb41RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb41RIPAvg.setStatus('current')
plsfn7Prb42RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb42RIPAvg.setStatus('current')
plsfn7Prb43RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb43RIPAvg.setStatus('current')
plsfn7Prb44RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb44RIPAvg.setStatus('current')
plsfn7Prb45RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb45RIPAvg.setStatus('current')
plsfn7Prb46RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb46RIPAvg.setStatus('current')
plsfn7Prb47RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb47RIPAvg.setStatus('current')
plsfn7Prb48RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb48RIPAvg.setStatus('current')
plsfn7Prb49RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb49RIPAvg.setStatus('current')
plsfn7Prb50RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb50RIPAvg.setStatus('current')
plsfn7Prb51RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb51RIPAvg.setStatus('current')
plsfn7Prb52RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb52RIPAvg.setStatus('current')
plsfn7Prb53RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb53RIPAvg.setStatus('current')
plsfn7Prb54RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb54RIPAvg.setStatus('current')
plsfn7Prb55RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb55RIPAvg.setStatus('current')
plsfn7Prb56RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb56RIPAvg.setStatus('current')
plsfn7Prb57RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb57RIPAvg.setStatus('current')
plsfn7Prb58RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb58RIPAvg.setStatus('current')
plsfn7Prb59RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb59RIPAvg.setStatus('current')
plsfn7Prb60RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb60RIPAvg.setStatus('current')
plsfn7Prb61RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb61RIPAvg.setStatus('current')
plsfn7Prb62RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb62RIPAvg.setStatus('current')
plsfn7Prb63RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb63RIPAvg.setStatus('current')
plsfn7Prb64RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb64RIPAvg.setStatus('current')
plsfn7Prb65RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb65RIPAvg.setStatus('current')
plsfn7Prb66RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb66RIPAvg.setStatus('current')
plsfn7Prb67RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb67RIPAvg.setStatus('current')
plsfn7Prb68RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb68RIPAvg.setStatus('current')
plsfn7Prb69RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb69RIPAvg.setStatus('current')
plsfn7Prb70RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb70RIPAvg.setStatus('current')
plsfn7Prb71RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb71RIPAvg.setStatus('current')
plsfn7Prb72RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb72RIPAvg.setStatus('current')
plsfn7Prb73RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb73RIPAvg.setStatus('current')
plsfn7Prb74RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb74RIPAvg.setStatus('current')
plsfn7Prb75RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb75RIPAvg.setStatus('current')
plsfn7Prb76RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb76RIPAvg.setStatus('current')
plsfn7Prb77RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb77RIPAvg.setStatus('current')
plsfn7Prb78RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb78RIPAvg.setStatus('current')
plsfn7Prb79RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb79RIPAvg.setStatus('current')
plsfn7Prb80RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb80RIPAvg.setStatus('current')
plsfn7Prb81RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb81RIPAvg.setStatus('current')
plsfn7Prb82RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb82RIPAvg.setStatus('current')
plsfn7Prb83RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb83RIPAvg.setStatus('current')
plsfn7Prb84RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb84RIPAvg.setStatus('current')
plsfn7Prb85RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb85RIPAvg.setStatus('current')
plsfn7Prb86RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb86RIPAvg.setStatus('current')
plsfn7Prb87RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb87RIPAvg.setStatus('current')
plsfn7Prb88RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb88RIPAvg.setStatus('current')
plsfn7Prb89RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb89RIPAvg.setStatus('current')
plsfn7Prb90RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb90RIPAvg.setStatus('current')
plsfn7Prb91RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb91RIPAvg.setStatus('current')
plsfn7Prb92RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb92RIPAvg.setStatus('current')
plsfn7Prb93RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb93RIPAvg.setStatus('current')
plsfn7Prb94RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb94RIPAvg.setStatus('current')
plsfn7Prb95RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb95RIPAvg.setStatus('current')
plsfn7Prb96RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb96RIPAvg.setStatus('current')
plsfn7Prb97RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb97RIPAvg.setStatus('current')
plsfn7Prb98RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb98RIPAvg.setStatus('current')
plsfn7Prb99RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 12, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7Prb99RIPAvg.setStatus('current')
sfn7maxripTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13), )
if mibBuilder.loadTexts: sfn7maxripTable.setStatus('current')
sfn7maxripEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sfn7maxripLcId"))
if mibBuilder.loadTexts: sfn7maxripEntry.setStatus('current')
sfn7maxripLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sfn7maxripLcId.setStatus('current')
sfn7maxripRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn7maxripRowStatus.setStatus('current')
plsfn7PrbG1RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG1RIPMax.setStatus('current')
plsfn7PrbG2RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG2RIPMax.setStatus('current')
plsfn7PrbG3RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG3RIPMax.setStatus('current')
plsfn7PrbG4RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG4RIPMax.setStatus('current')
plsfn7PrbG5RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG5RIPMax.setStatus('current')
plsfn7PrbG6RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG6RIPMax.setStatus('current')
plsfn7PrbG7RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG7RIPMax.setStatus('current')
plsfn7PrbG8RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG8RIPMax.setStatus('current')
plsfn7PrbG9RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG9RIPMax.setStatus('current')
plsfn7PrbG10RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG10RIPMax.setStatus('current')
plsfn7PrbG11RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG11RIPMax.setStatus('current')
plsfn7PrbG12RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG12RIPMax.setStatus('current')
plsfn7PrbG13RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG13RIPMax.setStatus('current')
plsfn7PrbG14RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG14RIPMax.setStatus('current')
plsfn7PrbG15RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG15RIPMax.setStatus('current')
plsfn7PrbG16RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG16RIPMax.setStatus('current')
plsfn7PrbG17RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG17RIPMax.setStatus('current')
plsfn7PrbG18RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG18RIPMax.setStatus('current')
plsfn7PrbG19RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG19RIPMax.setStatus('current')
plsfn7PrbG20RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 13, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn7PrbG20RIPMax.setStatus('current')
sfn8avgripTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14), )
if mibBuilder.loadTexts: sfn8avgripTable.setStatus('current')
sfn8avgripEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sfn8avgripLcId"))
if mibBuilder.loadTexts: sfn8avgripEntry.setStatus('current')
sfn8avgripLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sfn8avgripLcId.setStatus('current')
sfn8avgripRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn8avgripRowStatus.setStatus('current')
plsfn8Prb00RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb00RIPAvg.setStatus('current')
plsfn8Prb01RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb01RIPAvg.setStatus('current')
plsfn8Prb02RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb02RIPAvg.setStatus('current')
plsfn8Prb03RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb03RIPAvg.setStatus('current')
plsfn8Prb04RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb04RIPAvg.setStatus('current')
plsfn8Prb05RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb05RIPAvg.setStatus('current')
plsfn8Prb06RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb06RIPAvg.setStatus('current')
plsfn8Prb07RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb07RIPAvg.setStatus('current')
plsfn8Prb08RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb08RIPAvg.setStatus('current')
plsfn8Prb09RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb09RIPAvg.setStatus('current')
plsfn8Prb10RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb10RIPAvg.setStatus('current')
plsfn8Prb11RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb11RIPAvg.setStatus('current')
plsfn8Prb12RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb12RIPAvg.setStatus('current')
plsfn8Prb13RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb13RIPAvg.setStatus('current')
plsfn8Prb14RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb14RIPAvg.setStatus('current')
plsfn8Prb15RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb15RIPAvg.setStatus('current')
plsfn8Prb16RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb16RIPAvg.setStatus('current')
plsfn8Prb17RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb17RIPAvg.setStatus('current')
plsfn8Prb18RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb18RIPAvg.setStatus('current')
plsfn8Prb19RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb19RIPAvg.setStatus('current')
plsfn8Prb20RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb20RIPAvg.setStatus('current')
plsfn8Prb21RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb21RIPAvg.setStatus('current')
plsfn8Prb22RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb22RIPAvg.setStatus('current')
plsfn8Prb23RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb23RIPAvg.setStatus('current')
plsfn8Prb24RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb24RIPAvg.setStatus('current')
plsfn8Prb25RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb25RIPAvg.setStatus('current')
plsfn8Prb26RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb26RIPAvg.setStatus('current')
plsfn8Prb27RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb27RIPAvg.setStatus('current')
plsfn8Prb28RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb28RIPAvg.setStatus('current')
plsfn8Prb29RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb29RIPAvg.setStatus('current')
plsfn8Prb30RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb30RIPAvg.setStatus('current')
plsfn8Prb31RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb31RIPAvg.setStatus('current')
plsfn8Prb32RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb32RIPAvg.setStatus('current')
plsfn8Prb33RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb33RIPAvg.setStatus('current')
plsfn8Prb34RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb34RIPAvg.setStatus('current')
plsfn8Prb35RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb35RIPAvg.setStatus('current')
plsfn8Prb36RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb36RIPAvg.setStatus('current')
plsfn8Prb37RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb37RIPAvg.setStatus('current')
plsfn8Prb38RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb38RIPAvg.setStatus('current')
plsfn8Prb39RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb39RIPAvg.setStatus('current')
plsfn8Prb40RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb40RIPAvg.setStatus('current')
plsfn8Prb41RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb41RIPAvg.setStatus('current')
plsfn8Prb42RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb42RIPAvg.setStatus('current')
plsfn8Prb43RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb43RIPAvg.setStatus('current')
plsfn8Prb44RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb44RIPAvg.setStatus('current')
plsfn8Prb45RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb45RIPAvg.setStatus('current')
plsfn8Prb46RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb46RIPAvg.setStatus('current')
plsfn8Prb47RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb47RIPAvg.setStatus('current')
plsfn8Prb48RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb48RIPAvg.setStatus('current')
plsfn8Prb49RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb49RIPAvg.setStatus('current')
plsfn8Prb50RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb50RIPAvg.setStatus('current')
plsfn8Prb51RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb51RIPAvg.setStatus('current')
plsfn8Prb52RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb52RIPAvg.setStatus('current')
plsfn8Prb53RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb53RIPAvg.setStatus('current')
plsfn8Prb54RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb54RIPAvg.setStatus('current')
plsfn8Prb55RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb55RIPAvg.setStatus('current')
plsfn8Prb56RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb56RIPAvg.setStatus('current')
plsfn8Prb57RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb57RIPAvg.setStatus('current')
plsfn8Prb58RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb58RIPAvg.setStatus('current')
plsfn8Prb59RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb59RIPAvg.setStatus('current')
plsfn8Prb60RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb60RIPAvg.setStatus('current')
plsfn8Prb61RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb61RIPAvg.setStatus('current')
plsfn8Prb62RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb62RIPAvg.setStatus('current')
plsfn8Prb63RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb63RIPAvg.setStatus('current')
plsfn8Prb64RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb64RIPAvg.setStatus('current')
plsfn8Prb65RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb65RIPAvg.setStatus('current')
plsfn8Prb66RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb66RIPAvg.setStatus('current')
plsfn8Prb67RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb67RIPAvg.setStatus('current')
plsfn8Prb68RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb68RIPAvg.setStatus('current')
plsfn8Prb69RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb69RIPAvg.setStatus('current')
plsfn8Prb70RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb70RIPAvg.setStatus('current')
plsfn8Prb71RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb71RIPAvg.setStatus('current')
plsfn8Prb72RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb72RIPAvg.setStatus('current')
plsfn8Prb73RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb73RIPAvg.setStatus('current')
plsfn8Prb74RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb74RIPAvg.setStatus('current')
plsfn8Prb75RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb75RIPAvg.setStatus('current')
plsfn8Prb76RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb76RIPAvg.setStatus('current')
plsfn8Prb77RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb77RIPAvg.setStatus('current')
plsfn8Prb78RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb78RIPAvg.setStatus('current')
plsfn8Prb79RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb79RIPAvg.setStatus('current')
plsfn8Prb80RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb80RIPAvg.setStatus('current')
plsfn8Prb81RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb81RIPAvg.setStatus('current')
plsfn8Prb82RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb82RIPAvg.setStatus('current')
plsfn8Prb83RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb83RIPAvg.setStatus('current')
plsfn8Prb84RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb84RIPAvg.setStatus('current')
plsfn8Prb85RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb85RIPAvg.setStatus('current')
plsfn8Prb86RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb86RIPAvg.setStatus('current')
plsfn8Prb87RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb87RIPAvg.setStatus('current')
plsfn8Prb88RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb88RIPAvg.setStatus('current')
plsfn8Prb89RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb89RIPAvg.setStatus('current')
plsfn8Prb90RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb90RIPAvg.setStatus('current')
plsfn8Prb91RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb91RIPAvg.setStatus('current')
plsfn8Prb92RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb92RIPAvg.setStatus('current')
plsfn8Prb93RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb93RIPAvg.setStatus('current')
plsfn8Prb94RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb94RIPAvg.setStatus('current')
plsfn8Prb95RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb95RIPAvg.setStatus('current')
plsfn8Prb96RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb96RIPAvg.setStatus('current')
plsfn8Prb97RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb97RIPAvg.setStatus('current')
plsfn8Prb98RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb98RIPAvg.setStatus('current')
plsfn8Prb99RIPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 14, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8Prb99RIPAvg.setStatus('current')
sfn8maxripTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15), )
if mibBuilder.loadTexts: sfn8maxripTable.setStatus('current')
sfn8maxripEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sfn8maxripLcId"))
if mibBuilder.loadTexts: sfn8maxripEntry.setStatus('current')
sfn8maxripLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: sfn8maxripLcId.setStatus('current')
sfn8maxripRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfn8maxripRowStatus.setStatus('current')
plsfn8PrbG1RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG1RIPMax.setStatus('current')
plsfn8PrbG2RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG2RIPMax.setStatus('current')
plsfn8PrbG3RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG3RIPMax.setStatus('current')
plsfn8PrbG4RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG4RIPMax.setStatus('current')
plsfn8PrbG5RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG5RIPMax.setStatus('current')
plsfn8PrbG6RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG6RIPMax.setStatus('current')
plsfn8PrbG7RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG7RIPMax.setStatus('current')
plsfn8PrbG8RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG8RIPMax.setStatus('current')
plsfn8PrbG9RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG9RIPMax.setStatus('current')
plsfn8PrbG10RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG10RIPMax.setStatus('current')
plsfn8PrbG11RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG11RIPMax.setStatus('current')
plsfn8PrbG12RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG12RIPMax.setStatus('current')
plsfn8PrbG13RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG13RIPMax.setStatus('current')
plsfn8PrbG14RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG14RIPMax.setStatus('current')
plsfn8PrbG15RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG15RIPMax.setStatus('current')
plsfn8PrbG16RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG16RIPMax.setStatus('current')
plsfn8PrbG17RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG17RIPMax.setStatus('current')
plsfn8PrbG18RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG18RIPMax.setStatus('current')
plsfn8PrbG19RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG19RIPMax.setStatus('current')
plsfn8PrbG20RIPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 15, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plsfn8PrbG20RIPMax.setStatus('current')
plTransPowerTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 16), )
if mibBuilder.loadTexts: plTransPowerTable.setStatus('current')
plTransPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 16, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "plTransPowerLcId"))
if mibBuilder.loadTexts: plTransPowerEntry.setStatus('current')
plTransPowerLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: plTransPowerLcId.setStatus('current')
plTransPowerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 16, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plTransPowerRowStatus.setStatus('current')
plCellTransPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plCellTransPowerMax.setStatus('current')
plCellTransPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plCellTransPowerAvg.setStatus('current')
cellavgripperprbTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17), )
if mibBuilder.loadTexts: cellavgripperprbTable.setStatus('current')
cellavgripperprbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellavgripperprbLcId"))
if mibBuilder.loadTexts: cellavgripperprbEntry.setStatus('current')
cellavgripperprbLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellavgripperprbLcId.setStatus('current')
cellavgripperprbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellavgripperprbRowStatus.setStatus('current')
phyULMeanNLPRB00 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB00.setStatus('current')
phyULMeanNLPRB01 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB01.setStatus('current')
phyULMeanNLPRB02 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB02.setStatus('current')
phyULMeanNLPRB03 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB03.setStatus('current')
phyULMeanNLPRB04 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB04.setStatus('current')
phyULMeanNLPRB05 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB05.setStatus('current')
phyULMeanNLPRB06 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB06.setStatus('current')
phyULMeanNLPRB07 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB07.setStatus('current')
phyULMeanNLPRB08 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB08.setStatus('current')
phyULMeanNLPRB09 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB09.setStatus('current')
phyULMeanNLPRB10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB10.setStatus('current')
phyULMeanNLPRB11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB11.setStatus('current')
phyULMeanNLPRB12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB12.setStatus('current')
phyULMeanNLPRB13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB13.setStatus('current')
phyULMeanNLPRB14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB14.setStatus('current')
phyULMeanNLPRB15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB15.setStatus('current')
phyULMeanNLPRB16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB16.setStatus('current')
phyULMeanNLPRB17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB17.setStatus('current')
phyULMeanNLPRB18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB18.setStatus('current')
phyULMeanNLPRB19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB19.setStatus('current')
phyULMeanNLPRB20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB20.setStatus('current')
phyULMeanNLPRB21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB21.setStatus('current')
phyULMeanNLPRB22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB22.setStatus('current')
phyULMeanNLPRB23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB23.setStatus('current')
phyULMeanNLPRB24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB24.setStatus('current')
phyULMeanNLPRB25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB25.setStatus('current')
phyULMeanNLPRB26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB26.setStatus('current')
phyULMeanNLPRB27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB27.setStatus('current')
phyULMeanNLPRB28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB28.setStatus('current')
phyULMeanNLPRB29 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB29.setStatus('current')
phyULMeanNLPRB30 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB30.setStatus('current')
phyULMeanNLPRB31 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB31.setStatus('current')
phyULMeanNLPRB32 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB32.setStatus('current')
phyULMeanNLPRB33 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB33.setStatus('current')
phyULMeanNLPRB34 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB34.setStatus('current')
phyULMeanNLPRB35 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB35.setStatus('current')
phyULMeanNLPRB36 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB36.setStatus('current')
phyULMeanNLPRB37 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB37.setStatus('current')
phyULMeanNLPRB38 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB38.setStatus('current')
phyULMeanNLPRB39 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB39.setStatus('current')
phyULMeanNLPRB40 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB40.setStatus('current')
phyULMeanNLPRB41 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB41.setStatus('current')
phyULMeanNLPRB42 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB42.setStatus('current')
phyULMeanNLPRB43 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB43.setStatus('current')
phyULMeanNLPRB44 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB44.setStatus('current')
phyULMeanNLPRB45 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB45.setStatus('current')
phyULMeanNLPRB46 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB46.setStatus('current')
phyULMeanNLPRB47 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB47.setStatus('current')
phyULMeanNLPRB48 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB48.setStatus('current')
phyULMeanNLPRB49 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB49.setStatus('current')
phyULMeanNLPRB50 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB50.setStatus('current')
phyULMeanNLPRB51 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB51.setStatus('current')
phyULMeanNLPRB52 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB52.setStatus('current')
phyULMeanNLPRB53 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB53.setStatus('current')
phyULMeanNLPRB54 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB54.setStatus('current')
phyULMeanNLPRB55 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB55.setStatus('current')
phyULMeanNLPRB56 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB56.setStatus('current')
phyULMeanNLPRB57 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB57.setStatus('current')
phyULMeanNLPRB58 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB58.setStatus('current')
phyULMeanNLPRB59 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB59.setStatus('current')
phyULMeanNLPRB60 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB60.setStatus('current')
phyULMeanNLPRB61 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB61.setStatus('current')
phyULMeanNLPRB62 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB62.setStatus('current')
phyULMeanNLPRB63 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB63.setStatus('current')
phyULMeanNLPRB64 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB64.setStatus('current')
phyULMeanNLPRB65 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB65.setStatus('current')
phyULMeanNLPRB66 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB66.setStatus('current')
phyULMeanNLPRB67 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB67.setStatus('current')
phyULMeanNLPRB68 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB68.setStatus('current')
phyULMeanNLPRB69 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB69.setStatus('current')
phyULMeanNLPRB70 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB70.setStatus('current')
phyULMeanNLPRB71 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB71.setStatus('current')
phyULMeanNLPRB72 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB72.setStatus('current')
phyULMeanNLPRB73 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB73.setStatus('current')
phyULMeanNLPRB74 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB74.setStatus('current')
phyULMeanNLPRB75 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB75.setStatus('current')
phyULMeanNLPRB76 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB76.setStatus('current')
phyULMeanNLPRB77 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB77.setStatus('current')
phyULMeanNLPRB78 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB78.setStatus('current')
phyULMeanNLPRB79 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB79.setStatus('current')
phyULMeanNLPRB80 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB80.setStatus('current')
phyULMeanNLPRB81 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB81.setStatus('current')
phyULMeanNLPRB82 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB82.setStatus('current')
phyULMeanNLPRB83 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB83.setStatus('current')
phyULMeanNLPRB84 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB84.setStatus('current')
phyULMeanNLPRB85 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB85.setStatus('current')
phyULMeanNLPRB86 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB86.setStatus('current')
phyULMeanNLPRB87 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB87.setStatus('current')
phyULMeanNLPRB88 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB88.setStatus('current')
phyULMeanNLPRB89 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB89.setStatus('current')
phyULMeanNLPRB90 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB90.setStatus('current')
phyULMeanNLPRB91 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB91.setStatus('current')
phyULMeanNLPRB92 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB92.setStatus('current')
phyULMeanNLPRB93 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB93.setStatus('current')
phyULMeanNLPRB94 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB94.setStatus('current')
phyULMeanNLPRB95 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB95.setStatus('current')
phyULMeanNLPRB96 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB96.setStatus('current')
phyULMeanNLPRB97 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB97.setStatus('current')
phyULMeanNLPRB98 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB98.setStatus('current')
phyULMeanNLPRB99 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 17, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanNLPRB99.setStatus('current')
cellmaxripperprbTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18), )
if mibBuilder.loadTexts: cellmaxripperprbTable.setStatus('current')
cellmaxripperprbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellmaxripperprbLcId"))
if mibBuilder.loadTexts: cellmaxripperprbEntry.setStatus('current')
cellmaxripperprbLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellmaxripperprbLcId.setStatus('current')
cellmaxripperprbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellmaxripperprbRowStatus.setStatus('current')
phyULMaxNLPRB00 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB00.setStatus('current')
phyULMaxNLPRB01 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB01.setStatus('current')
phyULMaxNLPRB02 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB02.setStatus('current')
phyULMaxNLPRB03 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB03.setStatus('current')
phyULMaxNLPRB04 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB04.setStatus('current')
phyULMaxNLPRB05 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB05.setStatus('current')
phyULMaxNLPRB06 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB06.setStatus('current')
phyULMaxNLPRB07 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB07.setStatus('current')
phyULMaxNLPRB08 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB08.setStatus('current')
phyULMaxNLPRB09 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB09.setStatus('current')
phyULMaxNLPRB10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB10.setStatus('current')
phyULMaxNLPRB11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB11.setStatus('current')
phyULMaxNLPRB12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB12.setStatus('current')
phyULMaxNLPRB13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB13.setStatus('current')
phyULMaxNLPRB14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB14.setStatus('current')
phyULMaxNLPRB15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB15.setStatus('current')
phyULMaxNLPRB16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB16.setStatus('current')
phyULMaxNLPRB17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB17.setStatus('current')
phyULMaxNLPRB18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB18.setStatus('current')
phyULMaxNLPRB19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB19.setStatus('current')
phyULMaxNLPRB20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB20.setStatus('current')
phyULMaxNLPRB21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB21.setStatus('current')
phyULMaxNLPRB22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB22.setStatus('current')
phyULMaxNLPRB23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB23.setStatus('current')
phyULMaxNLPRB24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB24.setStatus('current')
phyULMaxNLPRB25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB25.setStatus('current')
phyULMaxNLPRB26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB26.setStatus('current')
phyULMaxNLPRB27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB27.setStatus('current')
phyULMaxNLPRB28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB28.setStatus('current')
phyULMaxNLPRB29 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB29.setStatus('current')
phyULMaxNLPRB30 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB30.setStatus('current')
phyULMaxNLPRB31 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB31.setStatus('current')
phyULMaxNLPRB32 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB32.setStatus('current')
phyULMaxNLPRB33 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB33.setStatus('current')
phyULMaxNLPRB34 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB34.setStatus('current')
phyULMaxNLPRB35 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB35.setStatus('current')
phyULMaxNLPRB36 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB36.setStatus('current')
phyULMaxNLPRB37 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB37.setStatus('current')
phyULMaxNLPRB38 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB38.setStatus('current')
phyULMaxNLPRB39 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB39.setStatus('current')
phyULMaxNLPRB40 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB40.setStatus('current')
phyULMaxNLPRB41 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB41.setStatus('current')
phyULMaxNLPRB42 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB42.setStatus('current')
phyULMaxNLPRB43 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB43.setStatus('current')
phyULMaxNLPRB44 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB44.setStatus('current')
phyULMaxNLPRB45 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB45.setStatus('current')
phyULMaxNLPRB46 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB46.setStatus('current')
phyULMaxNLPRB47 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB47.setStatus('current')
phyULMaxNLPRB48 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB48.setStatus('current')
phyULMaxNLPRB49 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB49.setStatus('current')
phyULMaxNLPRB50 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB50.setStatus('current')
phyULMaxNLPRB51 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB51.setStatus('current')
phyULMaxNLPRB52 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB52.setStatus('current')
phyULMaxNLPRB53 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB53.setStatus('current')
phyULMaxNLPRB54 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB54.setStatus('current')
phyULMaxNLPRB55 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB55.setStatus('current')
phyULMaxNLPRB56 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB56.setStatus('current')
phyULMaxNLPRB57 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB57.setStatus('current')
phyULMaxNLPRB58 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB58.setStatus('current')
phyULMaxNLPRB59 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB59.setStatus('current')
phyULMaxNLPRB60 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB60.setStatus('current')
phyULMaxNLPRB61 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB61.setStatus('current')
phyULMaxNLPRB62 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB62.setStatus('current')
phyULMaxNLPRB63 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB63.setStatus('current')
phyULMaxNLPRB64 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB64.setStatus('current')
phyULMaxNLPRB65 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB65.setStatus('current')
phyULMaxNLPRB66 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB66.setStatus('current')
phyULMaxNLPRB67 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB67.setStatus('current')
phyULMaxNLPRB68 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB68.setStatus('current')
phyULMaxNLPRB69 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB69.setStatus('current')
phyULMaxNLPRB70 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB70.setStatus('current')
phyULMaxNLPRB71 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB71.setStatus('current')
phyULMaxNLPRB72 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB72.setStatus('current')
phyULMaxNLPRB73 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB73.setStatus('current')
phyULMaxNLPRB74 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB74.setStatus('current')
phyULMaxNLPRB75 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB75.setStatus('current')
phyULMaxNLPRB76 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB76.setStatus('current')
phyULMaxNLPRB77 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB77.setStatus('current')
phyULMaxNLPRB78 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB78.setStatus('current')
phyULMaxNLPRB79 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB79.setStatus('current')
phyULMaxNLPRB80 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB80.setStatus('current')
phyULMaxNLPRB81 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB81.setStatus('current')
phyULMaxNLPRB82 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB82.setStatus('current')
phyULMaxNLPRB83 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB83.setStatus('current')
phyULMaxNLPRB84 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB84.setStatus('current')
phyULMaxNLPRB85 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB85.setStatus('current')
phyULMaxNLPRB86 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB86.setStatus('current')
phyULMaxNLPRB87 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB87.setStatus('current')
phyULMaxNLPRB88 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB88.setStatus('current')
phyULMaxNLPRB89 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB89.setStatus('current')
phyULMaxNLPRB90 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB90.setStatus('current')
phyULMaxNLPRB91 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB91.setStatus('current')
phyULMaxNLPRB92 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB92.setStatus('current')
phyULMaxNLPRB93 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB93.setStatus('current')
phyULMaxNLPRB94 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB94.setStatus('current')
phyULMaxNLPRB95 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB95.setStatus('current')
phyULMaxNLPRB96 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB96.setStatus('current')
phyULMaxNLPRB97 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB97.setStatus('current')
phyULMaxNLPRB98 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB98.setStatus('current')
phyULMaxNLPRB99 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 18, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMaxNLPRB99.setStatus('current')
plThroughputCapacityULTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 19), )
if mibBuilder.loadTexts: plThroughputCapacityULTable.setStatus('current')
plThroughputCapacityULEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 19, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "plThroughputCapacityULLcId"))
if mibBuilder.loadTexts: plThroughputCapacityULEntry.setStatus('current')
plThroughputCapacityULLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: plThroughputCapacityULLcId.setStatus('current')
plThroughputCapacityULRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 19, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plThroughputCapacityULRowStatus.setStatus('current')
plThroughputUL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plThroughputUL.setStatus('current')
plThroughputCapacityDLTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 20), )
if mibBuilder.loadTexts: plThroughputCapacityDLTable.setStatus('current')
plThroughputCapacityDLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 20, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "plThroughputCapacityDLLcId"))
if mibBuilder.loadTexts: plThroughputCapacityDLEntry.setStatus('current')
plThroughputCapacityDLLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: plThroughputCapacityDLLcId.setStatus('current')
plThroughputCapacityDLRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 20, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plThroughputCapacityDLRowStatus.setStatus('current')
plThroughputDL = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plThroughputDL.setStatus('current')
cellavgripTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 21), )
if mibBuilder.loadTexts: cellavgripTable.setStatus('current')
cellavgripEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 21, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellavgripLcId"))
if mibBuilder.loadTexts: cellavgripEntry.setStatus('current')
cellavgripLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellavgripLcId.setStatus('current')
cellavgripRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 21, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellavgripRowStatus.setStatus('current')
phyULMeanRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyULMeanRIP.setStatus('current')
plrssiIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22), )
if mibBuilder.loadTexts: plrssiIndexTable.setStatus('current')
plrssiIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "plrssiIndexLcId"))
if mibBuilder.loadTexts: plrssiIndexEntry.setStatus('current')
plrssiIndexLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: plrssiIndexLcId.setStatus('current')
plrssiIndexRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plrssiIndexRowStatus.setStatus('current')
plReceivePowerIndex0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex0.setStatus('current')
plReceivePowerIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex1.setStatus('current')
plReceivePowerIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex2.setStatus('current')
plReceivePowerIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex3.setStatus('current')
plReceivePowerIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex4.setStatus('current')
plReceivePowerIndex5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex5.setStatus('current')
plReceivePowerIndex6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex6.setStatus('current')
plReceivePowerIndex7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex7.setStatus('current')
plReceivePowerIndex8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex8.setStatus('current')
plReceivePowerIndex9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex9.setStatus('current')
plReceivePowerIndex10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex10.setStatus('current')
plReceivePowerIndex11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex11.setStatus('current')
plReceivePowerIndex12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex12.setStatus('current')
plReceivePowerIndex13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex13.setStatus('current')
plReceivePowerIndex14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex14.setStatus('current')
plReceivePowerIndex15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex15.setStatus('current')
plReceivePowerIndex16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex16.setStatus('current')
plReceivePowerIndex17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex17.setStatus('current')
plReceivePowerIndex18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex18.setStatus('current')
plReceivePowerIndex19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex19.setStatus('current')
plReceivePowerIndex20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex20.setStatus('current')
plReceivePowerIndex21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex21.setStatus('current')
plReceivePowerIndex22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex22.setStatus('current')
plReceivePowerIndex23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex23.setStatus('current')
plReceivePowerIndex24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerIndex24.setStatus('current')
plReceivePowerUserIndex0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex0.setStatus('current')
plReceivePowerUserIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex1.setStatus('current')
plReceivePowerUserIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex2.setStatus('current')
plReceivePowerUserIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex3.setStatus('current')
plReceivePowerUserIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex4.setStatus('current')
plReceivePowerUserIndex5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex5.setStatus('current')
plReceivePowerUserIndex6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex6.setStatus('current')
plReceivePowerUserIndex7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex7.setStatus('current')
plReceivePowerUserIndex8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex8.setStatus('current')
plReceivePowerUserIndex9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex9.setStatus('current')
plReceivePowerUserIndex10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex10.setStatus('current')
plReceivePowerUserIndex11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex11.setStatus('current')
plReceivePowerUserIndex12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex12.setStatus('current')
plReceivePowerUserIndex13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex13.setStatus('current')
plReceivePowerUserIndex14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex14.setStatus('current')
plReceivePowerUserIndex15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex15.setStatus('current')
plReceivePowerUserIndex16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex16.setStatus('current')
plReceivePowerUserIndex17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex17.setStatus('current')
plReceivePowerUserIndex18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex18.setStatus('current')
plReceivePowerUserIndex19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex19.setStatus('current')
plReceivePowerUserIndex20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex20.setStatus('current')
plReceivePowerUserIndex21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex21.setStatus('current')
plReceivePowerUserIndex22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex22.setStatus('current')
plReceivePowerUserIndex23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex23.setStatus('current')
plReceivePowerUserIndex24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 5, 22, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plReceivePowerUserIndex24.setStatus('current')
omrelatedOriginCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6))
s1InterfaceIPStatTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 1), )
if mibBuilder.loadTexts: s1InterfaceIPStatTable.setStatus('current')
s1InterfaceIPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "s1InterfaceIPStatEthRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "s1InterfaceIPStatEthShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "s1InterfaceIPStatEthSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "s1InterfaceIPStatEthPhyPortId"))
if mibBuilder.loadTexts: s1InterfaceIPStatEntry.setStatus('current')
s1InterfaceIPStatEthRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: s1InterfaceIPStatEthRackNo.setStatus('current')
s1InterfaceIPStatEthShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: s1InterfaceIPStatEthShelfNo.setStatus('current')
s1InterfaceIPStatEthSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: s1InterfaceIPStatEthSlotNo.setStatus('current')
s1InterfaceIPStatEthPhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: s1InterfaceIPStatEthPhyPortId.setStatus('current')
s1InterfaceIPStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 1, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1InterfaceIPStatRowStatus.setStatus('current')
s1InNbrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1InNbrOctets.setStatus('current')
s1OutNbrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1OutNbrOctets.setStatus('current')
s1InterfaceTrafficStat = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 2))
s1InNbrOctetsUserPlane = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1InNbrOctetsUserPlane.setStatus('current')
s1OutNbrOctetsUserPlane = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1OutNbrOctetsUserPlane.setStatus('current')
x2InterfaceTrafficStat = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 3))
x2InNbrOctets = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x2InNbrOctets.setStatus('current')
x2OutNbrOctets = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x2OutNbrOctets.setStatus('current')
x2InNbrOctetsUserPlane = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x2InNbrOctetsUserPlane.setStatus('current')
x2OutNbrOctetsUserPlane = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x2OutNbrOctetsUserPlane.setStatus('current')
cpuUsageStatTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 4), )
if mibBuilder.loadTexts: cpuUsageStatTable.setStatus('current')
cpuUsageStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cpuUsageStatProcRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cpuUsageStatProcShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cpuUsageStatProcSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "cpuUsageStatProcIndexOnBoard"))
if mibBuilder.loadTexts: cpuUsageStatEntry.setStatus('current')
cpuUsageStatProcRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: cpuUsageStatProcRackNo.setStatus('current')
cpuUsageStatProcShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: cpuUsageStatProcShelfNo.setStatus('current')
cpuUsageStatProcSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: cpuUsageStatProcSlotNo.setStatus('current')
cpuUsageStatProcIndexOnBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: cpuUsageStatProcIndexOnBoard.setStatus('current')
cpuUsageStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 4, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUsageStatRowStatus.setStatus('current')
ospPeakCpuUsageRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospPeakCpuUsageRatio.setStatus('current')
ospMeanCpuUsageRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospMeanCpuUsageRatio.setStatus('current')
sctpAssoPMDataTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5), )
if mibBuilder.loadTexts: sctpAssoPMDataTable.setStatus('current')
sctpAssoPMDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "sctpAssoPMDataSctpIndex"))
if mibBuilder.loadTexts: sctpAssoPMDataEntry.setStatus('current')
sctpAssoPMDataSctpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 81)))
if mibBuilder.loadTexts: sctpAssoPMDataSctpIndex.setStatus('current')
sctpAssoPMDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctpAssoPMDataRowStatus.setStatus('current')
sigSctpDataChunkSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigSctpDataChunkSent.setStatus('current')
sigSctpDataChunkReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigSctpDataChunkReceived.setStatus('current')
sigSctpDataChunkReSentUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigSctpDataChunkReSentUl.setStatus('current')
sigSctpCongestionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigSctpCongestionDuration.setStatus('current')
sigNbrSctpCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigNbrSctpCongestion.setStatus('current')
sigSctpUnavailableDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigSctpUnavailableDuration.setStatus('current')
sigNbrSctpUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigNbrSctpUnavailable.setStatus('current')
sigSctpDataChunkReSentDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigSctpDataChunkReSentDl.setStatus('current')
sigSctpDataChunkDropUl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigSctpDataChunkDropUl.setStatus('current')
sigSctpDataChunkDropDl = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigSctpDataChunkDropDl.setStatus('current')
sigSctpHearbeatReq = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigSctpHearbeatReq.setStatus('current')
sigSctpHearbeatResp = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigSctpHearbeatResp.setStatus('current')
ethPortDataStatTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 6), )
if mibBuilder.loadTexts: ethPortDataStatTable.setStatus('current')
ethPortDataStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 6, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ethPortDataStatEthRackNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ethPortDataStatEthShelfNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ethPortDataStatEthSlotNo"), (0, "DTM-TD-LTE-ENODEB-ENBMIB", "ethPortDataStatEthPhyPortId"))
if mibBuilder.loadTexts: ethPortDataStatEntry.setStatus('current')
ethPortDataStatEthRackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: ethPortDataStatEthRackNo.setStatus('current')
ethPortDataStatEthShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: ethPortDataStatEthShelfNo.setStatus('current')
ethPortDataStatEthSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: ethPortDataStatEthSlotNo.setStatus('current')
ethPortDataStatEthPhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: ethPortDataStatEthPhyPortId.setStatus('current')
ethPortDataStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 6, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortDataStatRowStatus.setStatus('current')
eqptMacOctSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqptMacOctSent.setStatus('current')
eqptMacOctRecieved = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqptMacOctRecieved.setStatus('current')
enbCpuUsageStat = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 7))
enbOSPPeakCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enbOSPPeakCpuUsage.setStatus('current')
enbOSPMeanCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enbOSPMeanCpuUsage.setStatus('current')
signalSoftwareCollection = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 8))
signaldataPktNumUl = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signaldataPktNumUl.setStatus('current')
signaldataByteNumUl = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signaldataByteNumUl.setStatus('current')
cellAvailabilityTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 9), )
if mibBuilder.loadTexts: cellAvailabilityTable.setStatus('current')
cellAvailabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 9, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "cellAvailabilityLcId"))
if mibBuilder.loadTexts: cellAvailabilityEntry.setStatus('current')
cellAvailabilityLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cellAvailabilityLcId.setStatus('current')
cellAvailabilityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 9, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAvailabilityRowStatus.setStatus('current')
cellAvailDur = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellAvailDur.setStatus('current')
cellUnavailDurSys = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellUnavailDurSys.setStatus('current')
cellUnavailDurManual = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellUnavailDurManual.setStatus('current')
cellUnavailDurEnergySaving = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellUnavailDurEnergySaving.setStatus('current')
cellUnavailDurS1Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellUnavailDurS1Fail.setStatus('current')
eNBUnavailableDuring = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 10))
enbUnavailDur = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enbUnavailDur.setStatus('current')
s1QualityStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 11))
s1SentDiagosisTotalPacket = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1SentDiagosisTotalPacket.setStatus('current')
s1ReceivedDiagosisTotalPacket = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ReceivedDiagosisTotalPacket.setStatus('current')
s1DiagosisPacketTotalDelay = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1DiagosisPacketTotalDelay.setStatus('current')
s1DiagosisPacketTotalJitter = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1DiagosisPacketTotalJitter.setStatus('current')
mrFileStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 12))
mrMreFileReq = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 12, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrMreFileReq.setStatus('current')
mrMreFileSucc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 12, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrMreFileSucc.setStatus('current')
mrMrsFileReq = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrMrsFileReq.setStatus('current')
mrMrsFileSucc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrMrsFileSucc.setStatus('current')
mrMroueFileReq = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrMroueFileReq.setStatus('current')
mrMroueFileSucc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 12, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrMroueFileSucc.setStatus('current')
mrMROPLRFileReq = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 12, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrMROPLRFileReq.setStatus('current')
mrMROPLRFileSucc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 12, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrMROPLRFileSucc.setStatus('current')
mrMronoueFileReq = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 12, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrMronoueFileReq.setStatus('current')
mrMronoueFileSucc = MibScalar((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 6, 12, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrMronoueFileSucc.setStatus('current')
rlcrelatedOriginCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7))
pdcpSduDlDiscRatioTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1), )
if mibBuilder.loadTexts: pdcpSduDlDiscRatioTable.setStatus('current')
pdcpSduDlDiscRatioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "pdcpSduDlDiscRatioLcId"))
if mibBuilder.loadTexts: pdcpSduDlDiscRatioEntry.setStatus('current')
pdcpSduDlDiscRatioLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: pdcpSduDlDiscRatioLcId.setStatus('current')
pdcpSduDlDiscRatioRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDlDiscRatioRowStatus.setStatus('current')
pdcpSduSendTotalDataNumQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDataNumQci1.setStatus('current')
pdcpSduSendTotalDataNumQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDataNumQci2.setStatus('current')
pdcpSduSendTotalDataNumQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDataNumQci3.setStatus('current')
pdcpSduSendTotalDataNumQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDataNumQci4.setStatus('current')
pdcpSduSendTotalDataNumQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDataNumQci5.setStatus('current')
pdcpSduSendTotalDataNumQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDataNumQci6.setStatus('current')
pdcpSduSendTotalDataNumQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDataNumQci7.setStatus('current')
pdcpSduSendTotalDataNumQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDataNumQci8.setStatus('current')
pdcpSduSendTotalDataNumQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduSendTotalDataNumQci9.setStatus('current')
pdcpSduDiscTotalDataNumQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDiscTotalDataNumQci1.setStatus('current')
pdcpSduDiscTotalDataNumQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDiscTotalDataNumQci2.setStatus('current')
pdcpSduDiscTotalDataNumQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDiscTotalDataNumQci3.setStatus('current')
pdcpSduDiscTotalDataNumQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDiscTotalDataNumQci4.setStatus('current')
pdcpSduDiscTotalDataNumQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDiscTotalDataNumQci5.setStatus('current')
pdcpSduDiscTotalDataNumQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDiscTotalDataNumQci6.setStatus('current')
pdcpSduDiscTotalDataNumQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDiscTotalDataNumQci7.setStatus('current')
pdcpSduDiscTotalDataNumQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDiscTotalDataNumQci8.setStatus('current')
pdcpSduDiscTotalDataNumQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpSduDiscTotalDataNumQci9.setStatus('current')
pdcpUpPktDiscardRateDlEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 200), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDiscardRateDlEnb.setStatus('current')
pdcpUpPktDiscardRateDlQci1Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 201), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDiscardRateDlQci1Enb.setStatus('current')
pdcpUpPktDiscardRateDlQci2Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 202), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDiscardRateDlQci2Enb.setStatus('current')
pdcpUpPktDiscardRateDlQci3Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 203), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDiscardRateDlQci3Enb.setStatus('current')
pdcpUpPktDiscardRateDlQci4Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 204), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDiscardRateDlQci4Enb.setStatus('current')
pdcpUpPktDiscardRateDlQci5Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 205), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDiscardRateDlQci5Enb.setStatus('current')
pdcpUpPktDiscardRateDlQci6Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 206), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDiscardRateDlQci6Enb.setStatus('current')
pdcpUpPktDiscardRateDlQci7Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 207), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDiscardRateDlQci7Enb.setStatus('current')
pdcpUpPktDiscardRateDlQci8Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 208), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDiscardRateDlQci8Enb.setStatus('current')
pdcpUpPktDiscardRateDlQci9Enb = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 1, 1, 209), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpUpPktDiscardRateDlQci9Enb.setStatus('current')
ipThpDlTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2), )
if mibBuilder.loadTexts: ipThpDlTable.setStatus('current')
ipThpDlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "ipThpDlLcId"))
if mibBuilder.loadTexts: ipThpDlEntry.setStatus('current')
ipThpDlLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: ipThpDlLcId.setStatus('current')
ipThpDlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipThpDlRowStatus.setStatus('current')
drbThpTimeDlSum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbThpTimeDlSum.setStatus('current')
drbThpTimeDlQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbThpTimeDlQci1.setStatus('current')
drbThpTimeDlQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbThpTimeDlQci2.setStatus('current')
drbThpTimeDlQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbThpTimeDlQci3.setStatus('current')
drbThpTimeDlQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbThpTimeDlQci4.setStatus('current')
drbThpTimeDlQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbThpTimeDlQci5.setStatus('current')
drbThpTimeDlQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbThpTimeDlQci6.setStatus('current')
drbThpTimeDlQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbThpTimeDlQci7.setStatus('current')
drbThpTimeDlQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbThpTimeDlQci8.setStatus('current')
drbThpTimeDlQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbThpTimeDlQci9.setStatus('current')
drbBurstDataThpDLSum = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpDLSum.setStatus('current')
drbBurstDataThpDLQci1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpDLQci1.setStatus('current')
drbBurstDataThpDLQci2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpDLQci2.setStatus('current')
drbBurstDataThpDLQci3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpDLQci3.setStatus('current')
drbBurstDataThpDLQci4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpDLQci4.setStatus('current')
drbBurstDataThpDLQci5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpDLQci5.setStatus('current')
drbBurstDataThpDLQci6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpDLQci6.setStatus('current')
drbBurstDataThpDLQci7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpDLQci7.setStatus('current')
drbBurstDataThpDLQci8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpDLQci8.setStatus('current')
drbBurstDataThpDLQci9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drbBurstDataThpDLQci9.setStatus('current')
caThroughputTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 3), )
if mibBuilder.loadTexts: caThroughputTable.setStatus('current')
caThroughputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 3, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "caThroughputLcId"))
if mibBuilder.loadTexts: caThroughputEntry.setStatus('current')
caThroughputLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: caThroughputLcId.setStatus('current')
caThroughputRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caThroughputRowStatus.setStatus('current')
pdcpThpCaActiveDl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThpCaActiveDl2CC.setStatus('current')
pdcpThpCaActiveUl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThpCaActiveUl2CC.setStatus('current')
macCaActiveBurstDataThPDl2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveBurstDataThPDl2CC.setStatus('current')
macCaActiveThrpTimeDL2CC = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveThrpTimeDL2CC.setStatus('current')
pdcpThpCaActiveDl2CCTF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcpThpCaActiveDl2CCTF.setStatus('current')
macCaActiveBurstDataThPDl2CCTF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveBurstDataThPDl2CCTF.setStatus('current')
macCaActiveThrpTimeDL2CCTF = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macCaActiveThrpTimeDL2CCTF.setStatus('current')
hoAbnormalIntraCellTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 4), )
if mibBuilder.loadTexts: hoAbnormalIntraCellTable.setStatus('current')
hoAbnormalIntraCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 4, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "hoAbnormalIntraCellLcId"))
if mibBuilder.loadTexts: hoAbnormalIntraCellEntry.setStatus('current')
hoAbnormalIntraCellLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: hoAbnormalIntraCellLcId.setStatus('current')
hoAbnormalIntraCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 4, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoAbnormalIntraCellRowStatus.setStatus('current')
hoSuccOutRlcIntraCell = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoSuccOutRlcIntraCell.setStatus('current')
hoIntraCellAbnormalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hoIntraCellAbnormalStat.setStatus('current')
rlcPresetPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5), )
if mibBuilder.loadTexts: rlcPresetPerformanceTable.setStatus('current')
rlcPresetPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rlcPresetPerformanceLcId"))
if mibBuilder.loadTexts: rlcPresetPerformanceEntry.setStatus('current')
rlcPresetPerformanceLcId = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: rlcPresetPerformanceLcId.setStatus('current')
rlcPresetPerformanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPresetPerformanceRowStatus.setStatus('current')
rlcPreset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset1.setStatus('current')
rlcPreset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset2.setStatus('current')
rlcPreset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset3.setStatus('current')
rlcPreset4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset4.setStatus('current')
rlcPreset5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset5.setStatus('current')
rlcPreset6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset6.setStatus('current')
rlcPreset7 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset7.setStatus('current')
rlcPreset8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset8.setStatus('current')
rlcPreset9 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset9.setStatus('current')
rlcPreset10 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset10.setStatus('current')
rlcPreset11 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset11.setStatus('current')
rlcPreset12 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset12.setStatus('current')
rlcPreset13 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset13.setStatus('current')
rlcPreset14 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset14.setStatus('current')
rlcPreset15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset15.setStatus('current')
rlcPreset16 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset16.setStatus('current')
rlcPreset17 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset17.setStatus('current')
rlcPreset18 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset18.setStatus('current')
rlcPreset19 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset19.setStatus('current')
rlcPreset20 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset20.setStatus('current')
rlcPreset21 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset21.setStatus('current')
rlcPreset22 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset22.setStatus('current')
rlcPreset23 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset23.setStatus('current')
rlcPreset24 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset24.setStatus('current')
rlcPreset25 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset25.setStatus('current')
rlcPreset26 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset26.setStatus('current')
rlcPreset27 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset27.setStatus('current')
rlcPreset28 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset28.setStatus('current')
rlcPreset29 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset29.setStatus('current')
rlcPreset30 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset30.setStatus('current')
rlcPreset31 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset31.setStatus('current')
rlcPreset32 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset32.setStatus('current')
rlcPreset33 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset33.setStatus('current')
rlcPreset34 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset34.setStatus('current')
rlcPreset35 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset35.setStatus('current')
rlcPreset36 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset36.setStatus('current')
rlcPreset37 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset37.setStatus('current')
rlcPreset38 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset38.setStatus('current')
rlcPreset39 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset39.setStatus('current')
rlcPreset40 = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 7, 5, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlcPreset40.setStatus('current')
rrurelatedOriginCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 8))
rruTransPowerTable = MibTable((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 8, 1), )
if mibBuilder.loadTexts: rruTransPowerTable.setStatus('current')
rruTransPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 8, 1, 1), ).setIndexNames((0, "DTM-TD-LTE-ENODEB-ENBMIB", "rruTransPowerTopoRRUNo"))
if mibBuilder.loadTexts: rruTransPowerEntry.setStatus('current')
rruTransPowerTopoRRUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 191)))
if mibBuilder.loadTexts: rruTransPowerTopoRRUNo.setStatus('current')
rruTransPowerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rruTransPowerRowStatus.setStatus('current')
phyRruMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyRruMaxTxPower.setStatus('current')
phyRruMeanTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5105, 100, 2, 100, 1, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyRruMeanTxPower.setStatus('current')
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", dlCAPwrCfiTh1=dlCAPwrCfiTh1, sntpPeriodicSynchronizedPeriod=sntpPeriodicSynchronizedPeriod, b1MeasFilterCoeffGeran=b1MeasFilterCoeffGeran, remoteClkModuleHardwareVersion=remoteClkModuleHardwareVersion, macNbrErrTbUlMassiveMimoSM4=macNbrErrTbUlMassiveMimoSM4, cellShareNetMcc=cellShareNetMcc, efdAlarmType=efdAlarmType, plRiaCellRowStatus=plRiaCellRowStatus, fileTypeLimitFileMaxPreservingDay=fileTypeLimitFileMaxPreservingDay, raeBmIndicatEntry=raeBmIndicatEntry, mmeIndex=mmeIndex, icic=icic, rlcPreset1=rlcPreset1, macNbrRbDlMassiveMimoSM14=macNbrRbDlMassiveMimoSM14, ofpPortSlotNo=ofpPortSlotNo, plsfn7Prb80RIPAvg=plsfn7Prb80RIPAvg, pdcpVideoReserver11VideoActive=pdcpVideoReserver11VideoActive, macUpAlgorithmUlAntSelectThresSinrHigh=macUpAlgorithmUlAntSelectThresSinrHigh, topoRRUCarrier8ULPowerValue=topoRRUCarrier8ULPowerValue, srvccRowStatus=srvccRowStatus, plsfn6Prb71RIPAvg=plsfn6Prb71RIPAvg, rrcRejectConnEstabIllegalUE=rrcRejectConnEstabIllegalUE, rrcRbcCaseRelP7=rrcRbcCaseRelP7, plsfn3Prb83RIPAvg=plsfn3Prb83RIPAvg, scheTimesAcoordingSFNEntry=scheTimesAcoordingSFNEntry, hoAvgTimeInterEnbX2=hoAvgTimeInterEnbX2, lcAcProbFactorForSignal2=lcAcProbFactorForSignal2, alteration=alteration, syslogMsgHostName=syslogMsgHostName, lbc40FcCpuLoadTag=lbc40FcCpuLoadTag, rrcRecoverIotUPNum=rrcRecoverIotUPNum, hsdpaCellSelectRowStatus=hsdpaCellSelectRowStatus, boardPowerState=boardPowerState, pdcpUpPktDelayDlQci6Enb=pdcpUpPktDelayDlQci6Enb, tdsLcCellParaId=tdsLcCellParaId, phyULMaxNLPRB27=phyULMaxNLPRB27, plsfn9Prb35RIPAvg=plsfn9Prb35RIPAvg, spsOptmzRlcSegFlag=spsOptmzRlcSegFlag, topoRRUPAAverageCurrentValue=topoRRUPAAverageCurrentValue, boardTempDescription=boardTempDescription, ulPwrPuschDci3or3aMinPeriod=ulPwrPuschDci3or3aMinPeriod, cellInterRatCdmaHRPDSfMedium=cellInterRatCdmaHRPDSfMedium, lmcTable=lmcTable, cellAntWeightPhase3=cellAntWeightPhase3, airConditionerIndex=airConditionerIndex, voipRohcDecompFailUl=voipRohcDecompFailUl, s1PathSwichNoResp=s1PathSwichNoResp, pdcpDlAirSduSendTotalNumberQci1=pdcpDlAirSduSendTotalNumberQci1, mrDocRptMRESwitch=mrDocRptMRESwitch, hoCancelInterFreqInterEnbS1HandOverSucc=hoCancelInterFreqInterEnbS1HandOverSucc, omTestHeartbeatPeriod=omTestHeartbeatPeriod, almActUploadRegInfoTable=almActUploadRegInfoTable, iubOFPortTable=iubOFPortTable, boardSoftwareFileVersion=boardSoftwareFileVersion, pmExpValueUnsigned32Val=pmExpValueUnsigned32Val, contextAttReleNBNbrTransfer=contextAttReleNBNbrTransfer, macTestSwitchInfoDlOneStreamBfUsePort8=macTestSwitchInfoDlOneStreamBfUsePort8, activeAlarmSubCauseNo=activeAlarmSubCauseNo, erabEstabInitFailNbrQci1Transport=erabEstabInitFailNbrQci1Transport, sctpTimerRTOInitial=sctpTimerRTOInitial, scheTimesAcoordingSFNTable=scheTimesAcoordingSFNTable, rlcrelatedOriginCounter=rlcrelatedOriginCounter, alarmNotiNEVer=alarmNotiNEVer, peripheralFileVersion=peripheralFileVersion, emSmokeLocation=emSmokeLocation, pdcpThrpTimeDL=pdcpThrpTimeDL, cellReselectIntraFreqTable=cellReselectIntraFreqTable, hoAttOutInterFreqX2=hoAttOutInterFreqX2, emThunderboltIndex=emThunderboltIndex, sjm1Entry=sjm1Entry, cellAdjUtraTddCellRAC=cellAdjUtraTddCellRAC, macNbrTbDlMassiveMimoSM7=macNbrTbDlMassiveMimoSM7, cellCdma2000ParaCdma1XrttCsfbRegMultiSidInd=cellCdma2000ParaCdma1XrttCsfbRegMultiSidInd, sysPrintMode=sysPrintMode, hsdpaEFACHSchedEntry=hsdpaEFACHSchedEntry, plsfn2Prb61RIPAvg=plsfn2Prb61RIPAvg, pucch2AntePortActivatedPUCCH2Flag=pucch2AntePortActivatedPUCCH2Flag, erabEstabAddFailNbrQci2Other=erabEstabAddFailNbrQci2Other, lmcMlbLoadRestoreThUl=lmcMlbLoadRestoreThUl, plsfn5Prb21RIPAvg=plsfn5Prb21RIPAvg, hoSuccIncInterFreqX2=hoSuccIncInterFreqX2, imaGrpActiveThreshold=imaGrpActiveThreshold, icicLcId=icicLcId, acCfgPowAttenuRange=acCfgPowAttenuRange, hlGlobalTestSwitchInfo=hlGlobalTestSwitchInfo, nbrscheprbdlMcs21=nbrscheprbdlMcs21, macSwitchInfoCceOffsetRatioCfi2=macSwitchInfoCceOffsetRatioCfi2, contextAttReleNBNbrUELostN=contextAttReleNBNbrUELostN, phyCfgUncertainCQISwitch=phyCfgUncertainCQISwitch, cellAcBarList2ForOrigiCalls=cellAcBarList2ForOrigiCalls, eNBPathShutdownLowThreshold=eNBPathShutdownLowThreshold, invRhubRealUnitType=invRhubRealUnitType, macOctUlMassiveMimoSM3=macOctUlMassiveMimoSM3, alarmCauseCompressionRepetitions=alarmCauseCompressionRepetitions, macSwitchTestInfoLcId=macSwitchTestInfoLcId, mdtDataFormat=mdtDataFormat, plsfn8Prb57RIPAvg=plsfn8Prb57RIPAvg, macUpAlgorithmSrsTaSwitch=macUpAlgorithmSrsTaSwitch, managerHeartbeatToleranceRetrys=managerHeartbeatToleranceRetrys, activeAlarmEntry=activeAlarmEntry, coMPUeNumberLcId=coMPUeNumberLcId, plsfn2Prb52RIPAvg=plsfn2Prb52RIPAvg, rrcCAConfigNbrSCellDl2CC=rrcCAConfigNbrSCellDl2CC, rruPrbDlQci8Num=rruPrbDlQci8Num, plsfn4Prb12RIPAvg=plsfn4Prb12RIPAvg, pciAlgorithmSwitch=pciAlgorithmSwitch, sctpRowStatus=sctpRowStatus, rlcPreset16=rlcPreset16, tdsNetLcCellPortionNum=tdsNetLcCellPortionNum, hsdpaCQIStep=hsdpaCQIStep, srsValidNofCycShift=srsValidNofCycShift, rrcMchCaseRelP7=rrcMchCaseRelP7, topoRRUAccessDlTimeDelay=topoRRUAccessDlTimeDelay, netRHUBAccessRackNo=netRHUBAccessRackNo, managerAlterationReportSwitch=managerAlterationReportSwitch, configProcNotiNEID=configProcNotiNEID, cdlResourceStatusUpdateMsgTrigger=cdlResourceStatusUpdateMsgTrigger, sjm1SnrLowThreshold16Qam=sjm1SnrLowThreshold16Qam, amrDlVoipPacketWb6=amrDlVoipPacketWb6, macTestSwitchInfoLcId=macTestSwitchInfoLcId, twampLinkEntry=twampLinkEntry, tbNbrInitDlQpsk=tbNbrInitDlQpsk, hoToGsmSuccOutPrepPerRelation=hoToGsmSuccOutPrepPerRelation, reservedENBL1Para2=reservedENBL1Para2, gpsElevation=gpsElevation, hsupaQosCongJudgeThreshold=hsupaQosCongJudgeThreshold, hsdpaSFCIubDelay=hsdpaSFCIubDelay, lbcLcId=lbcLcId, reservedCellL2Para1=reservedCellL2Para1, macNbrErrTbDlMassiveMimoSM5=macNbrErrTbDlMassiveMimoSM5, pdcpUlAirSduDropTotalNumberQci8=pdcpUlAirSduDropTotalNumberQci8, plsfn5Prb44RIPAvg=plsfn5Prb44RIPAvg, pdcpDlAirSduSendTotalNumberQci2=pdcpDlAirSduSendTotalNumberQci2, rrcConnEstabTimeMeanMtAccess=rrcConnEstabTimeMeanMtAccess, plReceivePowerUserIndex23=plReceivePowerUserIndex23, erabRelEnbNbrOMIntervention=erabRelEnbNbrOMIntervention, hoFailPrepOutIntraFreqS1SourceFail=hoFailPrepOutIntraFreqS1SourceFail, iubTrafficCategoryTypeTable=iubTrafficCategoryTypeTable, erabActiveMeanNbrULQci7=erabActiveMeanNbrULQci7, cellSelectCsgInd=cellSelectCsgInd, plsfn7Prb88RIPAvg=plsfn7Prb88RIPAvg, hoOutAttIntraFreqRadio=hoOutAttIntraFreqRadio, plsfn8Prb03RIPAvg=plsfn8Prb03RIPAvg, ulPwrDeltaMcsEnabled=ulPwrDeltaMcsEnabled, rrcRbcCaseRelP4=rrcRbcCaseRelP4, mrUeCellCompIdRptDirectory=mrUeCellCompIdRptDirectory, netRRUJamResistantSetRange=netRRUJamResistantSetRange, reservedCellL3Para5=reservedCellL3Para5, plsfn2Prb67RIPAvg=plsfn2Prb67RIPAvg, srbSendRlcCfgId=srbSendRlcCfgId, plsfn4Prb98RIPAvg=plsfn4Prb98RIPAvg, rlcPreset8=rlcPreset8, macNbrTbDLRank1=macNbrTbDLRank1, packHotPackRollbackResult=packHotPackRollbackResult, dlPATSpeeffthred2TM8=dlPATSpeeffthred2TM8, macUpMuMiMoMcsBackOff17=macUpMuMiMoMcsBackOff17, macUpAlgorithm64QAMPUSCHTargetSinrUpLimit=macUpAlgorithm64QAMPUSCHTargetSinrUpLimit, lbc40FcFobiddenQciBitMap=lbc40FcFobiddenQciBitMap, cellavgripTable=cellavgripTable, ccStepUpEhich=ccStepUpEhich, dlCAPwrTargetSinr2Cce2=dlCAPwrTargetSinr2Cce2, rrcConnEstabTimeMeanHighPriorityAccess=rrcConnEstabTimeMeanHighPriorityAccess, ulCompFuncSwitch=ulCompFuncSwitch, tbNbrSuccInitUl16QAM=tbNbrSuccInitUl16QAM, a3RptAmount=a3RptAmount, rrcPreset18=rrcPreset18, ofpSelfAdaptiveCtrlTime=ofpSelfAdaptiveCtrlTime, erabRelEnbNbrQci5=erabRelEnbNbrQci5, srvccSuccOutDelay=srvccSuccOutDelay, enbOSPPeakCpuUsage=enbOSPPeakCpuUsage, hoIntraSysVolteLBCOutAtt=hoIntraSysVolteLBCOutAtt, ftpServerPassword=ftpServerPassword, rrcProcofRUELcId=rrcProcofRUELcId, s1InterfaceIPStatEthRackNo=s1InterfaceIPStatEthRackNo, invShelfDescription=invShelfDescription, hoFailOutX2QuaReEtOenbRcf=hoFailOutX2QuaReEtOenbRcf, ofPortPhyPortId=ofPortPhyPortId, raeFileRowStatus=raeFileRowStatus, eventA1Table=eventA1Table, macSwitchTestInfoEntry=macSwitchTestInfoEntry, a4CfgId=a4CfgId, logFileConfigurationTable=logFileConfigurationTable, nodebBlockStateNotifications=nodebBlockStateNotifications, lbc40FcUlPrbDifferTh=lbc40FcUlPrbDifferTh, lbcPrbMeasurementControl=lbcPrbMeasurementControl, plUsrLogPucchCatchDataAckValue=plUsrLogPucchCatchDataAckValue, dlPATDeltapowerup=dlPATDeltapowerup, baseBandwidthSocIndex=baseBandwidthSocIndex, hsdpaCQIMaxDiff=hsdpaCQIMaxDiff, raeAntAdvancedParam=raeAntAdvancedParam, hsdpaCellSchedAdjRate=hsdpaCellSchedAdjRate, plsfn1Prb11RIPAvg=plsfn1Prb11RIPAvg, drbUEActiveUl=drbUEActiveUl, tdsNetLcLocalCellId=tdsNetLcLocalCellId, debugUploadEntry=debugUploadEntry, reservedCellL1Para9=reservedCellL1Para9, cellAntWeightAmplitude18=cellAntWeightAmplitude18, alarmNotiSeverity=alarmNotiSeverity, sfn7maxripTable=sfn7maxripTable, atuGoldUeIMSI39=atuGoldUeIMSI39, rrcPreset34=rrcPreset34, macTestSwitchInfoBsrBoSwitch=macTestSwitchInfoBsrBoSwitch, rrcCellPucch1BcsRel=rrcCellPucch1BcsRel, mroCellParaAdjRatioTh=mroCellParaAdjRatioTh, plsfn8Prb66RIPAvg=plsfn8Prb66RIPAvg, icicUlPmax=icicUlPmax, macschecceusedsfn3=macschecceusedsfn3, phyULMaxNLPRB88=phyULMaxNLPRB88, plsfn2Prb71RIPAvg=plsfn2Prb71RIPAvg, macDownlinkEff22Tm3=macDownlinkEff22Tm3, harqMaxUlTx=harqMaxUlTx, alarmBoxMute=alarmBoxMute, bfdRowStatus=bfdRowStatus, arpStatusDstIp=arpStatusDstIp, topoSetRRUCalAIqRxNom=topoSetRRUCalAIqRxNom, remoteLmtRouteGatewayIpAddress=remoteLmtRouteGatewayIpAddress, holbcProcInterEnbTable=holbcProcInterEnbTable, rlcPreset21=rlcPreset21, plsfn7Prb34RIPAvg=plsfn7Prb34RIPAvg, cellAdjCdma2000CellArfcn=cellAdjCdma2000CellArfcn, cellAdjRelationDelInfo=cellAdjRelationDelInfo, topoSetRRURETAntRCUNo=topoSetRRURETAntRCUNo, plsfn1Prb04RIPAvg=plsfn1Prb04RIPAvg, radioCarrierIFUPathNo=radioCarrierIFUPathNo, topoRRUCarrier3ULPowerValue=topoRRUCarrier3ULPowerValue, a5Hysteresis=a5Hysteresis, cellAccessRestrictTable=cellAccessRestrictTable, contextAttReleNBNbrUserInactivity=contextAttReleNBNbrUserInactivity, rruPrbDlUsedNum=rruPrbDlUsedNum, puschRrGroupAssignPusch=puschRrGroupAssignPusch, transactionResultNotiAddition=transactionResultNotiAddition, rruPrbUlQci9Num=rruPrbUlQci9Num, cellShedRrModifyPeriodCoeff=cellShedRrModifyPeriodCoeff, phyULMeanNLPRB05=phyULMeanNLPRB05, videoPerfOfPdcpEntry=videoPerfOfPdcpEntry, topoRHUBTemperature=topoRHUBTemperature, plRiaRptCharactSeqCheckNum=plRiaRptCharactSeqCheckNum, equipLoginPassword=equipLoginPassword, maintenceStateNotify=maintenceStateNotify, baseBandCarrierTxPath7CalFactorQ=baseBandCarrierTxPath7CalFactorQ, contextAttRelMMENbrRadioNetworkLayer=contextAttRelMMENbrRadioNetworkLayer, networkElementPlanCell=networkElementPlanCell, configProcessNotify=configProcessNotify, mdtLoggedMDTAbsoluteTime=mdtLoggedMDTAbsoluteTime, invShelfRowStatus=invShelfRowStatus, hsdpaPFTcSlideWindowSize=hsdpaPFTcSlideWindowSize, plsfn4Prb09RIPAvg=plsfn4Prb09RIPAvg, sysStartIsNoClkSrcMode=sysStartIsNoClkSrcMode, macDownlinkMuMiMoMcsBackoff16=macDownlinkMuMiMoMcsBackoff16, swPackPlanTypeIndex=swPackPlanTypeIndex, raeBmIndicatTiltRangeH=raeBmIndicatTiltRangeH, hsdpaCqiPwrCtrlDownStepQpsk=hsdpaCqiPwrCtrlDownStepQpsk, procIndexOnBoard=procIndexOnBoard, ethernetPortEntry=ethernetPortEntry)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", erabNbrReqRelEnbQci8=erabNbrReqRelEnbQci8, tdsLcPrimaryCarrierBand=tdsLcPrimaryCarrierBand, eventB1Entry=eventB1Entry, cellAdjDelCellNetworkType=cellAdjDelCellNetworkType, pdcpVideoUtcpkgMaxSize=pdcpVideoUtcpkgMaxSize, a4TrigQuantity=a4TrigQuantity, topoSetRRUPortAntArrayNo=topoSetRRUPortAntArrayNo, traceTaskCollectEntityPort=traceTaskCollectEntityPort, icicCenterUeUlPrbSchedPri1=icicCenterUeUlPrbSchedPri1, hoSucOutInterFreqS1=hoSucOutInterFreqS1, plsfn9Prb52RIPAvg=plsfn9Prb52RIPAvg, sctpTimer=sctpTimer, phyULMaxNLPRB75=phyULMaxNLPRB75, erabModQoSAttNbrQci7=erabModQoSAttNbrQci7, configFileTable=configFileTable, macPrbUtilizationSILcId=macPrbUtilizationSILcId, rrcConnEstabTimeMaxMoSignalling=rrcConnEstabTimeMaxMoSignalling, hoNcHoPreSuccM=hoNcHoPreSuccM, taPerformanceLcId=taPerformanceLcId, phyCfgPucchExTendCpFmt1ActiveThred2Ant=phyCfgPucchExTendCpFmt1ActiveThred2Ant, cellUlIot=cellUlIot, b2ThresholdRsrp=b2ThresholdRsrp, a6Hysteresis=a6Hysteresis, douAdjcHandOverProcedureRowStatus=douAdjcHandOverProcedureRowStatus, circuitPackRowStatus=circuitPackRowStatus, hoFailPrepIncIntraFreqX2Others=hoFailPrepIncIntraFreqX2Others, hsupaCellSelectNode=hsupaCellSelectNode, saalTmrCcVal=saalTmrCcVal, erabEstabAddSuccNbrQci7=erabEstabAddSuccNbrQci7, apHoInteractWithErabModInterNBFail=apHoInteractWithErabModInterNBFail, extendDrbDataforwardFlag=extendDrbDataforwardFlag, plsfn4Prb73RIPAvg=plsfn4Prb73RIPAvg, twampLinkTable=twampLinkTable, macUpAlgorithmUlAntSelectThresSinrMedium=macUpAlgorithmUlAntSelectThresSinrMedium, pmTaskReportInterval=pmTaskReportInterval, rruPathVSWR=rruPathVSWR, hsDirectionalHoAttOut=hsDirectionalHoAttOut, phyULMeanNLPRB92=phyULMeanNLPRB92, ipThpUlEntry=ipThpUlEntry, macDownlinkRetransMCScanbeChanged=macDownlinkRetransMCScanbeChanged, eNBEnergyConservStartTimeMinute=eNBEnergyConservStartTimeMinute, alarmNotiRepeatTimes=alarmNotiRepeatTimes, atuUeIMSI1=atuUeIMSI1, macDownlinkCqiFirstBler=macDownlinkCqiFirstBler, macDownlinkTm7SfbcPort5=macDownlinkTm7SfbcPort5, linkAggregation=linkAggregation, plReceivePowerIndex15=plReceivePowerIndex15, cacPositionRedirectionSwith=cacPositionRedirectionSwith, macUpMuMiMoMcsBackOff18=macUpMuMiMoMcsBackOff18, contextSuccModCsfb=contextSuccModCsfb, topoRRUSupportCellWorkMode=topoRRUSupportCellWorkMode, irathoFailPrepIncUtranPerFailure=irathoFailPrepIncUtranPerFailure, extendDrbTable=extendDrbTable, lcAcUeThForMoc3=lcAcUeThForMoc3, topoRHUBSystemTime=topoRHUBSystemTime, plUsrLogDlBlerThreshlod=plUsrLogDlBlerThreshlod, atuByIpFlag=atuByIpFlag, alarmBoxManufacturer=alarmBoxManufacturer, rruTypeTable=rruTypeTable, plsfn1Prb63RIPAvg=plsfn1Prb63RIPAvg, plsfn9Prb75RIPAvg=plsfn9Prb75RIPAvg, b1ThresholdRscpUtra=b1ThresholdRscpUtra, sfn4avgripEntry=sfn4avgripEntry, daughterBoardNo=daughterBoardNo, phyULMaxNLPRB68=phyULMaxNLPRB68, reservedENBOmPara3=reservedENBOmPara3, cellPrbUlPrbInfo=cellPrbUlPrbInfo, swPackCustRunningDownloadTime=swPackCustRunningDownloadTime, userLockedState=userLockedState, spsOptmzEntry=spsOptmzEntry, rrcCAConfigMaxNbrPCellDl2CCTF=rrcCAConfigMaxNbrPCellDl2CCTF, chacActiveUeUltraLoadTh=chacActiveUeUltraLoadTh, pciAlgorithmInfo=pciAlgorithmInfo, pdcpSduDropTotalDateLenQci8=pdcpSduDropTotalDateLenQci8, debugUpload=debugUpload, ipAddrLocalIpMask=ipAddrLocalIpMask, netLcComponentLcId=netLcComponentLcId, plsfn2Prb16RIPAvg=plsfn2Prb16RIPAvg, macNbrTbDLRank4=macNbrTbDLRank4, macTestSwitchInfoUlMcs=macTestSwitchInfoUlMcs, plsfn6Prb33RIPAvg=plsfn6Prb33RIPAvg, hoOutFailMLBTooEarlyType2=hoOutFailMLBTooEarlyType2, timerHcPrepare=timerHcPrepare, baseBandCarrierEngagedState=baseBandCarrierEngagedState, retAntRCUSubtoRRUNo=retAntRCUSubtoRRUNo, airConditionerEntry=airConditionerEntry, handOverProcTimeInterEnbRowStatus=handOverProcTimeInterEnbRowStatus, sscStartTime1=sscStartTime1, erabInterWithHandOverEntry=erabInterWithHandOverEntry, userHandoverUserPwd=userHandoverUserPwd, cellAdjCdma2000FreqIndex=cellAdjCdma2000FreqIndex, hlSctSourceShelfNo=hlSctSourceShelfNo, cellLccTable=cellLccTable, lccEntry=lccEntry, macSwitchTestInfoUlPrescheInterval=macSwitchTestInfoUlPrescheInterval, macTestSwitchLogRecordType=macTestSwitchLogRecordType, omLinkIndex=omLinkIndex, lbc40FcUeListStrategy=lbc40FcUeListStrategy, phyCfgContinIotMeasTimes=phyCfgContinIotMeasTimes, hsdpaCqiPwrCtrlUpStepHigh=hsdpaCqiPwrCtrlUpStepHigh, hoFailPrepIncInterFreqS1DrbID=hoFailPrepIncInterFreqS1DrbID, hoAttOutPrepInterFreqX2=hoAttOutPrepInterFreqX2, srsHoppingBandWidth=srsHoppingBandWidth, lbc40FcStrategyRollbackTag=lbc40FcStrategyRollbackTag, srbLochDefaultCfgFlag=srbLochDefaultCfgFlag, pdcpVideoParamEntry=pdcpVideoParamEntry, netAntArrayLocation=netAntArrayLocation, mirrorFunction=mirrorFunction, nbrschetimesulMcs24=nbrschetimesulMcs24, phyULMeanNLPRB70=phyULMeanNLPRB70, phyULMaxNLPRB87=phyULMaxNLPRB87, cellIotNotificationNode=cellIotNotificationNode, dryContactAlarmState=dryContactAlarmState, rruPathRRUNo=rruPathRRUNo, macDownlinkMuMiMoAlgorithmLcId=macDownlinkMuMiMoAlgorithmLcId, macSwitchInfoCellCombinedDlSwitch=macSwitchInfoCellCombinedDlSwitch, plsfn9Prb46RIPAvg=plsfn9Prb46RIPAvg, hlTestSwitchSrsTestSwitch=hlTestSwitchSrsTestSwitch, ueMatchConfig=ueMatchConfig, csirsPortnum=csirsPortnum, a6MeasPurpose=a6MeasPurpose, nbrschetimesdlMcs20=nbrschetimesdlMcs20, macUpAlgorithmMCSHighLevelOptFlag=macUpAlgorithmMCSHighLevelOptFlag, macTestSwitchInfoVoLTECdlStatPeriod=macTestSwitchInfoVoLTECdlStatPeriod, reservedCellL2Para3=reservedCellL2Para3, hoFailIncIntraFreqInterCellIntraEnbPucch=hoFailIncIntraFreqInterCellIntraEnbPucch, plsfn6Prb32RIPAvg=plsfn6Prb32RIPAvg, cellPrbRatioLcId=cellPrbRatioLcId, cellAntWeightPhase22=cellAntWeightPhase22, radioCarrierRowStatus=radioCarrierRowStatus, traceUeSrvInetAddr=traceUeSrvInetAddr, irathoSuccPrepOutGprs=irathoSuccPrepOutGprs, remoteLmtRouteShelfNo=remoteLmtRouteShelfNo, atuHoInterFrqCfgSwitch=atuHoInterFrqCfgSwitch, cellAcBarList4ForOrigiCalls=cellAcBarList4ForOrigiCalls, b2Threshold2EcnoUtra=b2Threshold2EcnoUtra, phyCfgPuschAckActiveSwitch=phyCfgPuschAckActiveSwitch, sscX2Bitmap=sscX2Bitmap, omLinkRackNo=omLinkRackNo, hsupaCellSelectEntry=hsupaCellSelectEntry, cacLcId=cacLcId, rhubEtherRHUBNo=rhubEtherRHUBNo, macOctDlMassiveMimoSM2=macOctDlMassiveMimoSM2, chacActiveUeRBTh=chacActiveUeRBTh, topoRRUBandCapBandNo=topoRRUBandCapBandNo, hlSctSourceCoreIndex=hlSctSourceCoreIndex, sysX2CreateMode=sysX2CreateMode, circuitPackVendorUnitTypeNumber=circuitPackVendorUnitTypeNumber, antWeightAmplitude7=antWeightAmplitude7, plADIUlPwrPuschPowerSwitch=plADIUlPwrPuschPowerSwitch, cellInterRatGeranSfHigh=cellInterRatGeranSfHigh, plsfn3Prb79RIPAvg=plsfn3Prb79RIPAvg, topoRRUSystemContact=topoRRUSystemContact, macBlerEntry=macBlerEntry, topoRRUAccessSlotNo=topoRRUAccessSlotNo, fileUpTransType=fileUpTransType, atuGoldUeIMSI23=atuGoldUeIMSI23, icicDlPrbLenForEdgeUe=icicDlPrbLenForEdgeUe, airCondReturnAirHumidity=airCondReturnAirHumidity, ethernetOAMReceiveLinkState=ethernetOAMReceiveLinkState, pdcpRatioOfRUERowStatus=pdcpRatioOfRUERowStatus, multiBandLcId=multiBandLcId, cellUnavailDurManual=cellUnavailDurManual, macNbrErrTbUlMassiveMimoSM7=macNbrErrTbUlMassiveMimoSM7, rbSuccEstabQci7=rbSuccEstabQci7, plsfn9Prb92RIPAvg=plsfn9Prb92RIPAvg, lbcDlS1TnlTh1=lbcDlS1TnlTh1, macUpAlgorithmQci9NewPfScale=macUpAlgorithmQci9NewPfScale, procCoreIndexSameType=procCoreIndexSameType, plsfn5Prb25RIPAvg=plsfn5Prb25RIPAvg, raeWeightingFactorsAmplitude3=raeWeightingFactorsAmplitude3, rlcPreset13=rlcPreset13, rhubEthActurlSpeed=rhubEthActurlSpeed, sctpStatus=sctpStatus, hsdpaCQINACKLostRate=hsdpaCQINACKLostRate, rrcPresetPerformanceTable=rrcPresetPerformanceTable, pdcpUlAirSduDropTotalNumberQci7=pdcpUlAirSduDropTotalNumberQci7, airCondUnderTemperatureAlarmState=airCondUnderTemperatureAlarmState, plsfn1Prb85RIPAvg=plsfn1Prb85RIPAvg, traceTaskPlmnMnc=traceTaskPlmnMnc, eNBMBSFNShutdownHighThreshold=eNBMBSFNShutdownHighThreshold, cellAlgorithm=cellAlgorithm, pdcpBbuSourceTable=pdcpBbuSourceTable, hoInterEnbX2LBCPrepOut=hoInterEnbX2LBCPrepOut, chacAcBarActInterval=chacAcBarActInterval, remoteClockModuleEntry=remoteClockModuleEntry, arpStatusRowStatus=arpStatusRowStatus, erabModProcEntry=erabModProcEntry, plsfn5Prb51RIPAvg=plsfn5Prb51RIPAvg, cellAdjGeranCellCellId=cellAdjGeranCellCellId, raeRFPortsNum=raeRFPortsNum, macPhrIndex63=macPhrIndex63, cacS1BandwidthTag=cacS1BandwidthTag, hlTestSwitch256QAMSwitch=hlTestSwitch256QAMSwitch, hoSuccOutIntraFreqS1=hoSuccOutIntraFreqS1, plsfn0Prb57RIPAvg=plsfn0Prb57RIPAvg, baseBandwidthMainDspFlag=baseBandwidthMainDspFlag, plsfn8Prb19RIPAvg=plsfn8Prb19RIPAvg, erabEstabInitFailNbrRadioInterfaceFailure=erabEstabInitFailNbrRadioInterfaceFailure, phyULMaxNLPRB85=phyULMaxNLPRB85, rruPrbDlQci5Num=rruPrbDlQci5Num, plsfn9Prb47RIPAvg=plsfn9Prb47RIPAvg, erabEstabInitFailNbrAlgoNotSupported=erabEstabInitFailNbrAlgoNotSupported, plrssiTable=plrssiTable, lbcAdjCellUlPrbUsageTh4=lbcAdjCellUlPrbUsageTh4, phyTA11=phyTA11, pdcpUpPktLossRateDlQci2Enb=pdcpUpPktLossRateDlQci2Enb, acCfgInterferenceThreshold=acCfgInterferenceThreshold, eNb=eNb, netRRUPGCSwitch=netRRUPGCSwitch, hsupaQosEntry=hsupaQosEntry, fcSpsHspdschDlpcSwitch=fcSpsHspdschDlpcSwitch, sctpStreamLinkId=sctpStreamLinkId, extendDrbMode=extendDrbMode, plsfn1Prb03RIPAvg=plsfn1Prb03RIPAvg, topoSetRRUTdsCalPinRxNom=topoSetRRUTdsCalPinRxNom, phyCfgPucchExTendCpFmt1ActiveThred1Ant=phyCfgPucchExTendCpFmt1ActiveThred1Ant, procCoreNum=procCoreNum, handOverIntraCellEntry=handOverIntraCellEntry, cellAcBarList2ForVideo=cellAcBarList2ForVideo, swPackUpgradeControlSwitch=swPackUpgradeControlSwitch, eventSynchronizationNEType=eventSynchronizationNEType, phyULMeanNLPRB98=phyULMeanNLPRB98, erabRelFailNbrAbstractSyntaxError=erabRelFailNbrAbstractSyntaxError, rtIotEventLogSwitch=rtIotEventLogSwitch, sctpLocalIpAddrIndex3=sctpLocalIpAddrIndex3, lbcUserReDirectTag=lbcUserReDirectTag, rruOpticalTransceiverTable=rruOpticalTransceiverTable, ipThroughputCapacityRowStatus=ipThroughputCapacityRowStatus, e1LinkLcvCnt=e1LinkLcvCnt, cellCfg=cellCfg, macCaActiveMacThruPCellUl=macCaActiveMacThruPCellUl, hlGlobalTestSwitchUeNumPeriodLpm=hlGlobalTestSwitchUeNumPeriodLpm, rrcErabModInteractWithHo=rrcErabModInteractWithHo, activeUERowStatus=activeUERowStatus, pdcpIPThroughputDlQci6=pdcpIPThroughputDlQci6, alcapTotalLinks=alcapTotalLinks, rrcPreset33=rrcPreset33, configFileAutoUpgradeIndicator=configFileAutoUpgradeIndicator, hsdpaTfrcGranularity=hsdpaTfrcGranularity, heatExProtocolVersion=heatExProtocolVersion, pdcpUpPktDiscardRateDlQci2Enb=pdcpUpPktDiscardRateDlQci2Enb, cqiPucch2Index9=cqiPucch2Index9, nbrschetimesulMcs2=nbrschetimesulMcs2, comp=comp, swPackPlanDownloadIndicator=swPackPlanDownloadIndicator, macSwitchInfoTable=macSwitchInfoTable, macUpAlgorithmVolteMaxSchMcs=macUpAlgorithmVolteMaxSchMcs, srbNbrScheTimesSfn4=srbNbrScheTimesSfn4, hsupaCongestCtrlLcId=hsupaCongestCtrlLcId, erabNbrRowStatus=erabNbrRowStatus, eutraAdjCellMeasRowStatus=eutraAdjCellMeasRowStatus, plsfn2Prb76RIPAvg=plsfn2Prb76RIPAvg, b2NetworkType=b2NetworkType)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", irathoFailPrepOutGprsSyntaxError=irathoFailPrepOutGprsSyntaxError, lbcRedirectionFreqBand=lbcRedirectionFreqBand, pdcpSduDiscTotalDataNumQci3=pdcpSduDiscTotalDataNumQci3, rruLendToPCellPrbTotUl=rruLendToPCellPrbTotUl, erabEstabAddFailNbrS1IntraSystemHoTrig=erabEstabAddFailNbrS1IntraSystemHoTrig, radioCarrierCellStatus=radioCarrierCellStatus, invRackEntry=invRackEntry, userLogOutNoOpTime=userLogOutNoOpTime, iubIPPathRowStatus=iubIPPathRowStatus, peripheralPackPlanPackType=peripheralPackPlanPackType, spsProcNum=spsProcNum, outerAlarmBoxEntry=outerAlarmBoxEntry, netPlanControlLcConfigSwitch=netPlanControlLcConfigSwitch, reservedCellL3Para8=reservedCellL3Para8, phyCfgDlTestAmp2=phyCfgDlTestAmp2, srvccFailOutGeranQuaMme=srvccFailOutGeranQuaMme, euePeriodReportEntry=euePeriodReportEntry, mrFileDirectory=mrFileDirectory, hoFailPrepIncInterFreqS1Pucch=hoFailPrepIncInterFreqS1Pucch, s1hoCancelProcInterEnbTable=s1hoCancelProcInterEnbTable, ofpPortModuleS9um100MLen=ofpPortModuleS9um100MLen, clockSourceEntry=clockSourceEntry, plsfn1Prb45RIPAvg=plsfn1Prb45RIPAvg, rruTypeManufacturerIndex=rruTypeManufacturerIndex, plsfn2Prb99RIPAvg=plsfn2Prb99RIPAvg, gsmCellSignalTxRxSwitch=gsmCellSignalTxRxSwitch, periodCalibrationTxPeakPosShift=periodCalibrationTxPeakPosShift, contextFailInitalSetupNbrTransResNotAvailable=contextFailInitalSetupNbrTransResNotAvailable, ccSpbSnrMin=ccSpbSnrMin, plsfn6Prb92RIPAvg=plsfn6Prb92RIPAvg, cellReselectionInterRatTable=cellReselectionInterRatTable, pmExpObjectID=pmExpObjectID, hsdpaCellSelectNotSchedTime=hsdpaCellSelectNotSchedTime, rrcLpmCaseRelP9=rrcLpmCaseRelP9, plsfn8Prb89RIPAvg=plsfn8Prb89RIPAvg, lbcFastHoMaxUserNum=lbcFastHoMaxUserNum, configFileInfo=configFileInfo, macCaActiveMaxNbrSCellDl=macCaActiveMaxNbrSCellDl, pmExpValueTable=pmExpValueTable, iubOFPortSlotId=iubOFPortSlotId, icicMacSemiStaticConfUlM1=icicMacSemiStaticConfUlM1, clockSourceTable=clockSourceTable, hoAttOutIntraEnbInterFreqQci2=hoAttOutIntraEnbInterFreqQci2, qolRowStatus=qolRowStatus, macTestSwitchInfoPowerProtectSwitch=macTestSwitchInfoPowerProtectSwitch, hlTestSwitchLcId=hlTestSwitchLcId, raeUseingWeightEntry=raeUseingWeightEntry, antWeightHalfPowerBeamWidth=antWeightHalfPowerBeamWidth, eueTimerT304=eueTimerT304, equipMaintenceState=equipMaintenceState, resChkHlGlobalTestSwitchUeActiveLimit=resChkHlGlobalTestSwitchUeActiveLimit, plPreamblePwrRowStatus=plPreamblePwrRowStatus, raeSubIndexNo=raeSubIndexNo, raeWeightingFactorsPhase3=raeWeightingFactorsPhase3, pdcpIPThroughputUlQci7=pdcpIPThroughputUlQci7, atuUeIMSI4=atuUeIMSI4, almActUploadInetAddr=almActUploadInetAddr, pdcpHeaderCompressionFlag=pdcpHeaderCompressionFlag, eNBMacSymbolShutSwitch=eNBMacSymbolShutSwitch, eNBPerformanceManagement=eNBPerformanceManagement, cacPositionTAMeasType=cacPositionTAMeasType, baseBandCarrierTxPath6CalFactorI=baseBandCarrierTxPath6CalFactorI, macTestSwitchInfoDlAmcSwitch=macTestSwitchInfoDlAmcSwitch, plRiaPrbThresh=plRiaPrbThresh, netLocalCellCtrl=netLocalCellCtrl, netSetRRUPortSubtoTdsLocalCellId=netSetRRUPortSubtoTdsLocalCellId, sjm1RoundPeriod=sjm1RoundPeriod, ueAdaptiveLcId=ueAdaptiveLcId, plsfn4Prb68RIPAvg=plsfn4Prb68RIPAvg, radioBandIndexOnRRUPath=radioBandIndexOnRRUPath, harqRowStatus=harqRowStatus, hsdpaHarqRv16Qam3=hsdpaHarqRv16Qam3, macScheTimeDlCentreUser=macScheTimeDlCentreUser, cellCACellLcId=cellCACellLcId, topoRRUJamResistantRange=topoRRUJamResistantRange, netLocalCellEntry=netLocalCellEntry, plsfn0Prb48RIPAvg=plsfn0Prb48RIPAvg, plsfn0Prb81RIPAvg=plsfn0Prb81RIPAvg, tdsNodeBCODCHLoopUserId=tdsNodeBCODCHLoopUserId, invRruInventoryUnitType=invRruInventoryUnitType, cellCellShutdownState=cellCellShutdownState, userTable=userTable, erabModQoSFailNbrRadioInterfaceFailure=erabModQoSFailNbrRadioInterfaceFailure, plsfn7Prb52RIPAvg=plsfn7Prb52RIPAvg, macSwitchTestInfoUlBoSize=macSwitchTestInfoUlBoSize, ipoaChNb2RncScrMcr=ipoaChNb2RncScrMcr, atuGoldUeIMSI29=atuGoldUeIMSI29, erabThpTimeUlQci7=erabThpTimeUlQci7, plRiaInterferenceCheckPeriod=plRiaInterferenceCheckPeriod, raeRestoreFactoryWeightingFactorsTrigger=raeRestoreFactoryWeightingFactorsTrigger, plsfn6Prb94RIPAvg=plsfn6Prb94RIPAvg, hoIntraSysVolteLBCOutSucc=hoIntraSysVolteLBCOutSucc, erabRelMmeNbrUENotAvailableforPS=erabRelMmeNbrUENotAvailableforPS, plsfn8PrbG1RIPMax=plsfn8PrbG1RIPMax, carrierRuTs3Info=carrierRuTs3Info, invPortEntry=invPortEntry, srsCycshift2=srsCycshift2, adjeNBIndex=adjeNBIndex, hsupaSpsSchedNode=hsupaSpsSchedNode, lteFddTddHORowStatus=lteFddTddHORowStatus, pdcpRatioOfRUELcId=pdcpRatioOfRUELcId, fileTransNotificationNode=fileTransNotificationNode, cellCenterFreq=cellCenterFreq, pdcpVideoReserver2VideoActive=pdcpVideoReserver2VideoActive, plsfn8Prb73RIPAvg=plsfn8Prb73RIPAvg, equipStartupNotiNEType=equipStartupNotiNEType, hoSuccPrepIncIntraFreqX2=hoSuccPrepIncIntraFreqX2, ethernetOAMPeerMac=ethernetOAMPeerMac, netRHUBFiberLength=netRHUBFiberLength, plsfn6Prb67RIPAvg=plsfn6Prb67RIPAvg, erabRelEnbNbrQci4=erabRelEnbNbrQci4, rrcPreset31=rrcPreset31, phyULMaxNLPRB53=phyULMaxNLPRB53, softwarePackEntry=softwarePackEntry, antWeightAmplitude3=antWeightAmplitude3, perfOfMacForTestEntry=perfOfMacForTestEntry, macNbrRbDlTm8SFBC=macNbrRbDlTm8SFBC, boardApplicationType=boardApplicationType, reservedCellL1Para10=reservedCellL1Para10, netLocalCellGrpMode=netLocalCellGrpMode, rrcSuccConnEstabMtAccess=rrcSuccConnEstabMtAccess, a5RowStatus=a5RowStatus, csirsSignalConfig=csirsSignalConfig, netAntArrayType=netAntArrayType, traceTaskCollectEntityInetAddrType=traceTaskCollectEntityInetAddrType, plRiaCellSpecialTsCfgSwitch=plRiaCellSpecialTsCfgSwitch, plsfn6Prb95RIPAvg=plsfn6Prb95RIPAvg, pdcpUpPktDelayDlQci7Enb=pdcpUpPktDelayDlQci7Enb, hsdpaHarqTable=hsdpaHarqTable, csirsRowStatus=csirsRowStatus, erabEstabAddSuccNbrQci6=erabEstabAddSuccNbrQci6, plsfn4Prb92RIPAvg=plsfn4Prb92RIPAvg, e1LinkImaNeRxState=e1LinkImaNeRxState, atuQRxlevMin=atuQRxlevMin, omTestCdlRandomGroupTime=omTestCdlRandomGroupTime, pdcpUlAirSduSendTotalNumberQci7=pdcpUlAirSduSendTotalNumberQci7, pucch3ResSize=pucch3ResSize, erabEstabAddFailNbrTransportResNotAvailable=erabEstabAddFailNbrTransportResNotAvailable, cellUlIotEntry=cellUlIotEntry, plsfn0Prb02RIPAvg=plsfn0Prb02RIPAvg, saalConnAalIntState=saalConnAalIntState, macPreset30=macPreset30, rruPrbDlTotalNum=rruPrbDlTotalNum, macPrbUsedNumULHighSpeedUser=macPrbUsedNumULHighSpeedUser, rrcConnEstabTimeMaxHighPriorityAccess=rrcConnEstabTimeMaxHighPriorityAccess, heatExRowStatus=heatExRowStatus, erabActiveMeanNbrDLQci1=erabActiveMeanNbrDLQci1, plsfn8PrbG20RIPMax=plsfn8PrbG20RIPMax, cellSelectQQualMinFlag=cellSelectQQualMinFlag, macUpAlgorithmCqiModifySnrDefaultDec=macUpAlgorithmCqiModifySnrDefaultDec, cellGeranFreqPMaxGeran=cellGeranFreqPMaxGeran, plsfn0Prb24RIPAvg=plsfn0Prb24RIPAvg, cellReselIntraFreqPmaxFlag=cellReselIntraFreqPmaxFlag, fcTpcCombSwitch=fcTpcCombSwitch, hoAttOutPrepIntraEnbQuality=hoAttOutPrepIntraEnbQuality, plsfn4Prb36RIPAvg=plsfn4Prb36RIPAvg, cellAdjCdma2000CellBandclass=cellAdjCdma2000CellBandclass, airCondSupplyAirHumidity=airCondSupplyAirHumidity, srbRecvRlcCfgId=srbRecvRlcCfgId, saalPeakRate=saalPeakRate, pdcpPresetPerformanceLcId=pdcpPresetPerformanceLcId, remoteClkModuleTemperature=remoteClkModuleTemperature, cellAntWeightAmplitude11=cellAntWeightAmplitude11, equipLicenseInfo=equipLicenseInfo, fileUploadTable=fileUploadTable, lcAcBarTimeForMoc1=lcAcBarTimeForMoc1, s1ResetByMMEMiscellaneous=s1ResetByMMEMiscellaneous, plsfn8Prb70RIPAvg=plsfn8Prb70RIPAvg, plsfn9Prb67RIPAvg=plsfn9Prb67RIPAvg, erabEstabAddAttNbrQci6=erabEstabAddAttNbrQci6, equipOperationalState=equipOperationalState, sjm1=sjm1, phyCfgDlTestAmp3=phyCfgDlTestAmp3, macTestSwitchInfoAccessStubSwitch=macTestSwitchInfoAccessStubSwitch, b2RptAmount=b2RptAmount, userFailLimits=userFailLimits, macDownlinkEffTableSwitchPeriod=macDownlinkEffTableSwitchPeriod, topoRRUMainRecvAntCalPortNo=topoRRUMainRecvAntCalPortNo, swPackCustRunningRelyVesion=swPackCustRunningRelyVesion, pdcpVideoReserver17VideoActive=pdcpVideoReserver17VideoActive, atuGoldUeIMSI14=atuGoldUeIMSI14, eNBSymbolSwitch=eNBSymbolSwitch, sdPeakSideDiffThres=sdPeakSideDiffThres, raeGeneralAntArrayNo=raeGeneralAntArrayNo, caActiveNumThr=caActiveNumThr, cellCompStatisticNetLcComponentIndex=cellCompStatisticNetLcComponentIndex, vlanConfigIpAddressType=vlanConfigIpAddressType, eNBCellShutdownStrategySwitch=eNBCellShutdownStrategySwitch, hsdpaSpiNonGBRDelta=hsdpaSpiNonGBRDelta, schePrbAcoordingMCSLcId=schePrbAcoordingMCSLcId, ethernetOAMDiscoveryState=ethernetOAMDiscoveryState, hoSuccPrepOutInterFreqS1=hoSuccPrepOutInterFreqS1, drbBurstDataThpDLQci1=drbBurstDataThpDLQci1, erabActiveMaxNbrDLQci6=erabActiveMaxNbrDLQci6, configProcSrcRequestID=configProcSrcRequestID, contextAttReleNBNbrCSFallbackTriggered=contextAttReleNBNbrCSFallbackTriggered, cellUlIotRTMonitorTaskPeriod=cellUlIotRTMonitorTaskPeriod, timeSlotTypeIndex=timeSlotTypeIndex, plsfn1Prb33RIPAvg=plsfn1Prb33RIPAvg, transactionResultNotiTime=transactionResultNotiTime, cellAvailCapLcId=cellAvailCapLcId, cellGeranFreqQoffset=cellGeranFreqQoffset, pmExpObjectIndex=pmExpObjectIndex, topoRRUMainBrdCurrentValue=topoRRUMainBrdCurrentValue, atuGoldUeIMSI13=atuGoldUeIMSI13, plCellTransPowerMax=plCellTransPowerMax, plsfn1Prb89RIPAvg=plsfn1Prb89RIPAvg, netAntArrayVendorIndex=netAntArrayVendorIndex, fileUpFTPDirectory=fileUpFTPDirectory, ofpPortGsmSetFlag=ofpPortGsmSetFlag, drbPdcpSduTotalNumberDlQci8=drbPdcpSduTotalNumberDlQci8, hsdpaTfrcCtrlChSdmaDegree=hsdpaTfrcCtrlChSdmaDegree, outDoorCabinetEntry=outDoorCabinetEntry, x2hoCancelProcInterEnbLcId=x2hoCancelProcInterEnbLcId, interRatHcRowStatus=interRatHcRowStatus, cellSoftLicenseEntry=cellSoftLicenseEntry, ulPwrMsg3PowerCtrlSwitch=ulPwrMsg3PowerCtrlSwitch, phyULMeanNLPRB30=phyULMeanNLPRB30, rruPathRRUGsmCellInputPwr=rruPathRRUGsmCellInputPwr, phyCfgIotRelativeHighAlarmPRBnumR=phyCfgIotRelativeHighAlarmPRBnumR, swPackRunningRelyVesion=swPackRunningRelyVesion, plsfn2Prb97RIPAvg=plsfn2Prb97RIPAvg, tbSRBInitDl16QAM=tbSRBInitDl16QAM, remoteClkModuleAntennaDelay=remoteClkModuleAntennaDelay, plsfn7Prb24RIPAvg=plsfn7Prb24RIPAvg, ipoaChNb2RncCcr=ipoaChNb2RncCcr, plsfn2Prb54RIPAvg=plsfn2Prb54RIPAvg, rrcPreset19=rrcPreset19, plsfn4Prb08RIPAvg=plsfn4Prb08RIPAvg, srvccSuccOutPrepGeranCoverage=srvccSuccOutPrepGeranCoverage, saalSscopMaxCC=saalSscopMaxCC, macPhrIndex9=macPhrIndex9, omTestInfo=omTestInfo, arpLearningPeriod=arpLearningPeriod, nbapAuditTrigger=nbapAuditTrigger, initCalibrationAnt1RxStatus=initCalibrationAnt1RxStatus, erabRelAttNbrQci1=erabRelAttNbrQci1, sigNbrSctpUnavailable=sigNbrSctpUnavailable, netRHUBLocation=netRHUBLocation, pdcpSduSendTotalDataNumQci6=pdcpSduSendTotalDataNumQci6, plsfn8Prb05RIPAvg=plsfn8Prb05RIPAvg, sdPeakSideDiffCollThres=sdPeakSideDiffCollThres, cellReselIntraFreqRowStatus=cellReselIntraFreqRowStatus, hoToGsmSuccOutPerRelation=hoToGsmSuccOutPerRelation, extendDrbRecvRlcCfgId=extendDrbRecvRlcCfgId, plsfn8Prb56RIPAvg=plsfn8Prb56RIPAvg, cellInterFreqSpeedStateScaleFactorsFlag=cellInterFreqSpeedStateScaleFactorsFlag, hoFailPrepIncInterFreqIntraEnbOthers=hoFailPrepIncInterFreqIntraEnbOthers, erabNbrReqRelEnbByHOQCI1=erabNbrReqRelEnbByHOQCI1, plsfn5Prb63RIPAvg=plsfn5Prb63RIPAvg, hoSuccPrepOutFddTddS1=hoSuccPrepOutFddTddS1, hsdpaSFCEFACHBLThresholdHigh=hsdpaSFCEFACHBLThresholdHigh, cellTable=cellTable, heatExManufacturer=heatExManufacturer)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", macUpAlgorithmFilterFactorForPuschSINR=macUpAlgorithmFilterFactorForPuschSINR, erabHoFailQci9=erabHoFailQci9, cellCdma2000ParaCdma1XrttCsfbRegFrgnNidRegInd=cellCdma2000ParaCdma1XrttCsfbRegFrgnNidRegInd, cellAdjUtraTddDirectTunnelFlag=cellAdjUtraTddDirectTunnelFlag, macPhrIndex12=macPhrIndex12, hsupaCommSchedNode=hsupaCommSchedNode, macUpAlgorithmCqiMaxModifyFlag=macUpAlgorithmCqiMaxModifyFlag, phyULMaxNLPRB91=phyULMaxNLPRB91, cellCAParaEntry=cellCAParaEntry, sfn8maxripLcId=sfn8maxripLcId, amrDlVoipPacketWb1=amrDlVoipPacketWb1, atuGoldUeIMSI34=atuGoldUeIMSI34, cellCdmaBandClassInfoEntry=cellCdmaBandClassInfoEntry, topoRRUCarrier18ULPowerValue=topoRRUCarrier18ULPowerValue, hoAbnormalIntraCellLcId=hoAbnormalIntraCellLcId, plsfn9Prb23RIPAvg=plsfn9Prb23RIPAvg, e1CRCErrorAlarmGenThreshold=e1CRCErrorAlarmGenThreshold, pdcpJRThrput=pdcpJRThrput, integrityAlgorithmEntry=integrityAlgorithmEntry, plsfn1Prb27RIPAvg=plsfn1Prb27RIPAvg, dlCAPwrTargetSinr4Cce3=dlCAPwrTargetSinr4Cce3, equipPhyID=equipPhyID, reservedENBParaInfo=reservedENBParaInfo, hsdpaAlgorithmNode=hsdpaAlgorithmNode, hoFailPrepIncInterFreqX2PerEncodeFail=hoFailPrepIncInterFreqX2PerEncodeFail, a2TimetoTrig=a2TimetoTrig, icicUlPrbLenForEdgeUe=icicUlPrbLenForEdgeUe, macDownlinkQci8NewPfScale=macDownlinkQci8NewPfScale, plReceivePowerIndex17=plReceivePowerIndex17, s1SentDiagosisTotalPacket=s1SentDiagosisTotalPacket, b1NetworkType=b1NetworkType, cellGeranFreqExplicitArfcns9=cellGeranFreqExplicitArfcns9, plsfn8Prb41RIPAvg=plsfn8Prb41RIPAvg, macNbrRbDlTm9RANK2BF=macNbrRbDlTm9RANK2BF, phyULMaxNLPRB16=phyULMaxNLPRB16, arpConfigInfo=arpConfigInfo, dlCAPwrTargetSinrPhich=dlCAPwrTargetSinrPhich, rrcConnEstabTimeRowStatus=rrcConnEstabTimeRowStatus, icicMacStaticConfM2=icicMacStaticConfM2, macPrbUsedNumULLowSpeedUser=macPrbUsedNumULLowSpeedUser, localCarrierFpToDdPchs=localCarrierFpToDdPchs, hoFailPrepIncInterFreqX2HandoverRestrictList=hoFailPrepIncInterFreqX2HandoverRestrictList, rruPathAntDelayFactor=rruPathAntDelayFactor, macUpAlgorithmUlAntSelectThresSinrLow=macUpAlgorithmUlAntSelectThresSinrLow, emHumidityUpperLimit=emHumidityUpperLimit, macCaActiveNbrPCellUl2CC=macCaActiveNbrPCellUl2CC, plsfn3Prb89RIPAvg=plsfn3Prb89RIPAvg, erabEstabAddFailNbrInvalidQosCombination=erabEstabAddFailNbrInvalidQosCombination, rrcTFCACapUserMaxNbrTddPCell=rrcTFCACapUserMaxNbrTddPCell, netRHUBOfp1AccessOfpPortNo=netRHUBOfp1AccessOfpPortNo, rruOptTransVendorName=rruOptTransVendorName, sfn8maxripRowStatus=sfn8maxripRowStatus, reservedENBL2Para5=reservedENBL2Para5, acCfgRowStatus=acCfgRowStatus, cellShedSib8Flag=cellShedSib8Flag, raeGeneralLowFreqBuf=raeGeneralLowFreqBuf, iubIPPathMaxTxBandwidth=iubIPPathMaxTxBandwidth, plsfn0Prb10RIPAvg=plsfn0Prb10RIPAvg, erabThpTimeUlSum=erabThpTimeUlSum, pucchRrN1PucchAN=pucchRrN1PucchAN, traceUeSrvPort=traceUeSrvPort, rruOptTransTemperature=rruOptTransTemperature, pdcpDlPacketDelayEntry=pdcpDlPacketDelayEntry, antWeightPhase5=antWeightPhase5, topoRRUTxConstFlag=topoRRUTxConstFlag, spsOptmzVoIPStatTimer=spsOptmzVoIPStatTimer, macPhrIndex5=macPhrIndex5, erabEstabInitSuccNbrQci5=erabEstabInitSuccNbrQci5, hsdpaSFCBLThresholdHigh=hsdpaSFCBLThresholdHigh, netBoardEntry=netBoardEntry, macUpAlgorithmQci8NewPfScale=macUpAlgorithmQci8NewPfScale, erabRelEnbNbrUnspecified=erabRelEnbNbrUnspecified, macCASCellDeactiveSucc=macCASCellDeactiveSucc, hlGlobalTestSwitchCapsThreshold=hlGlobalTestSwitchCapsThreshold, plReceivePowerIndex18=plReceivePowerIndex18, mbmsSubFrmAllcFourFrames=mbmsSubFrmAllcFourFrames, staticTrafficPara=staticTrafficPara, hsupaTfrcNonSdPcDelta=hsupaTfrcNonSdPcDelta, macTestSwitchInfoHoMsg2PRBThreshold=macTestSwitchInfoHoMsg2PRBThreshold, mibAuthorizationIndex=mibAuthorizationIndex, cellUtraFreqLcId=cellUtraFreqLcId, nbrschetimesdlMcs5=nbrschetimesdlMcs5, adjeNBSctpIndex=adjeNBSctpIndex, erabRelMmeNbrCSFallbackTriggered=erabRelMmeNbrCSFallbackTriggered, ulPowerControlEntry=ulPowerControlEntry, lmcMlbOcnAdjustLowerLimit=lmcMlbOcnAdjustLowerLimit, reservedCellL2Para10=reservedCellL2Para10, plsfn5Prb15RIPAvg=plsfn5Prb15RIPAvg, ethernetPortTable=ethernetPortTable, emTheftRowStatus=emTheftRowStatus, equivalentPRBUsageRowStatus=equivalentPRBUsageRowStatus, topoRRUBandCapCarrierNum=topoRRUBandCapCarrierNum, fcSichBlerTarget=fcSichBlerTarget, hoAttOutInterEnbX2InterFreqQci2=hoAttOutInterEnbX2InterFreqQci2, mdtManageEnableSwitch=mdtManageEnableSwitch, pdcpVideoReserver13VideoActive=pdcpVideoReserver13VideoActive, retAntFrquencyBand=retAntFrquencyBand, hsdpaSpsSchedSilentPktTh=hsdpaSpsSchedSilentPktTh, erabNbrReqRelEnbQci7=erabNbrReqRelEnbQci7, pdcpPreset17=pdcpPreset17, cellUtraFreqCarrierFreq=cellUtraFreqCarrierFreq, drbUEActiveDlQci8=drbUEActiveDlQci8, plPreambeRevNumTable=plPreambeRevNumTable, netRRUAccessBoardType=netRRUAccessBoardType, nbrschetimesdlMcs11=nbrschetimesdlMcs11, rlcPreset9=rlcPreset9, swPackPlanRowStatus=swPackPlanRowStatus, syslogServerInetAddrType=syslogServerInetAddrType, hcFailStaTime=hcFailStaTime, hoHoPreSuccTarget=hoHoPreSuccTarget, interRatHcEntry=interRatHcEntry, cqiCfgEntry=cqiCfgEntry, plsfn5Prb26RIPAvg=plsfn5Prb26RIPAvg, macNbrErrTbDlMassiveMimoSM14=macNbrErrTbDlMassiveMimoSM14, pubAlgorithmParaEntry=pubAlgorithmParaEntry, macNbrTbDlTm1=macNbrTbDlTm1, pdcpThrpTimeULQci3=pdcpThrpTimeULQci3, cpuCAPSTh=cpuCAPSTh, s1FlexDefMmePlmnMnc=s1FlexDefMmePlmnMnc, hsdpaSFCMacehsExtPDUNum=hsdpaSFCMacehsExtPDUNum, fileTransNEDirectory=fileTransNEDirectory, macNbrRbDlTm8RANK2BF=macNbrRbDlTm8RANK2BF, fcScchInitSirTarget=fcScchInitSirTarget, sctpLocalIpAddrIndex1=sctpLocalIpAddrIndex1, sjm1HighSpeedAlgorithmSwitch=sjm1HighSpeedAlgorithmSwitch, macNbrErrTbDlMassiveMimoSM7=macNbrErrTbDlMassiveMimoSM7, routeRelationTable=routeRelationTable, equipStartupNotify=equipStartupNotify, radioCarrierTable=radioCarrierTable, pdcpSduSendTotalDataNumQci8=pdcpSduSendTotalDataNumQci8, alarmGeneralManagement=alarmGeneralManagement, fcScchInitPwrRecursionFactor1=fcScchInitPwrRecursionFactor1, hsupaSpsSchedDelta16QAM=hsupaSpsSchedDelta16QAM, initCalibrationAnt5TxStatus=initCalibrationAnt5TxStatus, voipLosActivePackerCopyDl=voipLosActivePackerCopyDl, macSwitchInfoSignalConMsg2BISwitch=macSwitchInfoSignalConMsg2BISwitch, macscheCceUsed=macscheCceUsed, cellAdjCdma2000CellTable=cellAdjCdma2000CellTable, rhubOptTransBitRate=rhubOptTransBitRate, macDownlinkCqiFixP=macDownlinkCqiFixP, ipoaChVPI=ipoaChVPI, carrierTs4ISCP=carrierTs4ISCP, hoFailPrepIncInterFreqX2Pucch=hoFailPrepIncInterFreqX2Pucch, lbcAdjCellUlS1TnlTh3=lbcAdjCellUlS1TnlTh3, erabRelMmeNbrUnspecifiedNas=erabRelMmeNbrUnspecifiedNas, plsfn8Prb07RIPAvg=plsfn8Prb07RIPAvg, b2MeasQuantityCdma2000=b2MeasQuantityCdma2000, plRiaCellCfgTable=plRiaCellCfgTable, eNBSymbolShutdownHighThreshold=eNBSymbolShutdownHighThreshold, macUpMuMiMoMcsBackOff22=macUpMuMiMoMcsBackOff22, mmeCfgCapacity=mmeCfgCapacity, topoRRUULPowerRowStatus=topoRRUULPowerRowStatus, tdsNodeBIubSmoothRandomData=tdsNodeBIubSmoothRandomData, rrcCpmCaseRelP9=rrcCpmCaseRelP9, macNbrRbDlTm9RANK3BF=macNbrRbDlTm9RANK3BF, raeBmIndicatSubIndexNo=raeBmIndicatSubIndexNo, rrcFailConnReconfigSrs=rrcFailConnReconfigSrs, fcScchBfGapThreshold=fcScchBfGapThreshold, plsfn9Prb77RIPAvg=plsfn9Prb77RIPAvg, plsfn6Prb19RIPAvg=plsfn6Prb19RIPAvg, topoRRUCarrier12ULPowerValue=topoRRUCarrier12ULPowerValue, caPerformanceByRRCEntry=caPerformanceByRRCEntry, atuDlImsiOrIpAtuUeNum=atuDlImsiOrIpAtuUeNum, loggedMdtPlmnMcc=loggedMdtPlmnMcc, sctpPeerIpAddr2=sctpPeerIpAddr2, boardSlotNo=boardSlotNo, dlCAPwrTargetSinr8Cce2=dlCAPwrTargetSinr8Cce2, macDownlinkMuMiMoMcsBackoff18=macDownlinkMuMiMoMcsBackoff18, fcMinRxpUlpc=fcMinRxpUlpc, macPreset18=macPreset18, saalConnTxStatPdus=saalConnTxStatPdus, netRRURootAlarmState7=netRRURootAlarmState7, macPhrIndex28=macPhrIndex28, plsfn8Prb00RIPAvg=plsfn8Prb00RIPAvg, plReceivePowerIndex1=plReceivePowerIndex1, plsfn8Prb54RIPAvg=plsfn8Prb54RIPAvg, rrcPreset6=rrcPreset6, macPhrIndex55=macPhrIndex55, plsfn9Prb55RIPAvg=plsfn9Prb55RIPAvg, raeModelNumber=raeModelNumber, plsfn0Prb19RIPAvg=plsfn0Prb19RIPAvg, pdcpUpPktDelayDlEnb=pdcpUpPktDelayDlEnb, erabEstabInitSuccNbrQci6=erabEstabInitSuccNbrQci6, plsfn0Prb46RIPAvg=plsfn0Prb46RIPAvg, plRipCellCfgTable=plRipCellCfgTable, saalValleyRate=saalValleyRate, rlcPreset15=rlcPreset15, managerTrapPort=managerTrapPort, cellAdjUtraTddCellCellId=cellAdjUtraTddCellCellId, anrRemThForActiveTimes=anrRemThForActiveTimes, cellReselectionInterRatEntry=cellReselectionInterRatEntry, tdsSysCarrierSlotISCPDetectPeriod=tdsSysCarrierSlotISCPDetectPeriod, hoFailPrepIncIntraFreqIntraEnbSrs=hoFailPrepIncIntraFreqIntraEnbSrs, srsDuration=srsDuration, macMumimoThrputUlRank1=macMumimoThrputUlRank1, erabEstabAddSuccNbrQci3=erabEstabAddSuccNbrQci3, nbrscheprbdlMcs0=nbrscheprbdlMcs0, plsfn3Prb33RIPAvg=plsfn3Prb33RIPAvg, plsfn5Prb67RIPAvg=plsfn5Prb67RIPAvg, sjm1RnAlgorithmSwitch=sjm1RnAlgorithmSwitch, invPortDescription=invPortDescription, retAntPowerSwitch=retAntPowerSwitch, hsdpaCQIReviseTable=hsdpaCQIReviseTable, pdcpUpPktLossRateDlQci4Enb=pdcpUpPktLossRateDlQci4Enb, ccHichFmAckUser2=ccHichFmAckUser2, rrcLpmCaseRelP8=rrcLpmCaseRelP8, macTestSwitchInfoCqiTm8RiTMSwitch=macTestSwitchInfoCqiTm8RiTMSwitch, macschecceusedratiosfn1=macschecceusedratiosfn1, rrcCpmCaseRelP5=rrcCpmCaseRelP5, phyTA3=phyTA3, topoRRULocalOscillationState2=topoRRULocalOscillationState2, plsfn7Prb73RIPAvg=plsfn7Prb73RIPAvg, macschecceusedsfn0=macschecceusedsfn0, pubAlgorithmParaLcId=pubAlgorithmParaLcId, phyCfgRipPMReportDelta=phyCfgRipPMReportDelta, csirsSubsfnConfig=csirsSubsfnConfig, rrcRbcCaseRelP10=rrcRbcCaseRelP10, saalConnTxErrorPdus=saalConnTxErrorPdus, plsfn7Prb16RIPAvg=plsfn7Prb16RIPAvg, plsfn3Prb52RIPAvg=plsfn3Prb52RIPAvg, eventA3Entry=eventA3Entry, plsfn1Prb10RIPAvg=plsfn1Prb10RIPAvg, sfn0avgripEntry=sfn0avgripEntry, phyULMeanNLPRB65=phyULMeanNLPRB65, sfn5avgripLcId=sfn5avgripLcId, volteHOSuccOutInterEnbX2InterFreq=volteHOSuccOutInterEnbX2InterFreq, erabReleNBEntry=erabReleNBEntry, macTestSwitchInfoDediCceNum=macTestSwitchInfoDediCceNum, pdcpVideoPkgPeriodT=pdcpVideoPkgPeriodT, rrcAttConnReconfigMeasCfg=rrcAttConnReconfigMeasCfg, accessUserRowStatus=accessUserRowStatus, adjeNBTable=adjeNBTable, lcGrpRowStatus=lcGrpRowStatus, irathoFailPrepOutUtranOverTime=irathoFailPrepOutUtranOverTime, swPackPlanScheduleDownloadTime=swPackPlanScheduleDownloadTime, mdtTCEIpaddr=mdtTCEIpaddr, hsupaQosCSPIDivPointFirst=hsupaQosCSPIDivPointFirst, plsfn7Prb55RIPAvg=plsfn7Prb55RIPAvg, pucch2AntePortActivatedPUCCHFormat3R10Flag=pucch2AntePortActivatedPUCCHFormat3R10Flag, phyCfgSrsUePowerCqiThre=phyCfgSrsUePowerCqiThre, gpsShelfNo=gpsShelfNo, sfn7maxripRowStatus=sfn7maxripRowStatus, macDownlinkFsPrbMax=macDownlinkFsPrbMax, macThrpTimeCaActiveDL2CC=macThrpTimeCaActiveDL2CC, volteHOFailOutPrepFail=volteHOFailOutPrepFail, fcBfThreshold=fcBfThreshold, lmcMlbTrueAdjCellJudge=lmcMlbTrueAdjCellJudge, qolMode=qolMode, hlTestBadCoverageHoDelaySwitch=hlTestBadCoverageHoDelaySwitch, daughterBoardVendorUnitFamilyType=daughterBoardVendorUnitFamilyType, emThunderboltTable=emThunderboltTable, cellRsPowerDelta=cellRsPowerDelta, plsfn6Prb75RIPAvg=plsfn6Prb75RIPAvg, pdcpSduDiscTotalDataNumQci9=pdcpSduDiscTotalDataNumQci9)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", apS1apRelP3=apS1apRelP3, alarmCauseVersion=alarmCauseVersion, phyULMeanNLPRB77=phyULMeanNLPRB77, erabRelMmeNbrQci1RadioNetwork=erabRelMmeNbrQci1RadioNetwork, erabExistNbrLcId=erabExistNbrLcId, plReceivePowerAvg=plReceivePowerAvg, timeSlot=timeSlot, sigSctpDataChunkSent=sigSctpDataChunkSent, pdcpVideoKeyWordsLcId=pdcpVideoKeyWordsLcId, macUpMuMiMoMcsBackOff21=macUpMuMiMoMcsBackOff21, ulCompEntry=ulCompEntry, plsfn6Prb43RIPAvg=plsfn6Prb43RIPAvg, carrierUpTs2CofStatus=carrierUpTs2CofStatus, voipRtpPacketLosUl=voipRtpPacketLosUl, topoRRUBandCap20MCarrierNum=topoRRUBandCap20MCarrierNum, cdlSwitch=cdlSwitch, cdlFileSize=cdlFileSize, lmcPrbDlCongestRestoreTh=lmcPrbDlCongestRestoreTh, plsfn2Prb55RIPAvg=plsfn2Prb55RIPAvg, daughterBoardShelfNo=daughterBoardShelfNo, lbcUlHardwardTh1=lbcUlHardwardTh1, hsdpaHarqRvQpsk4=hsdpaHarqRvQpsk4, macDownlinkCqi22SfbcTm4=macDownlinkCqi22SfbcTm4, hoAttIncIntraFreqX2=hoAttIncIntraFreqX2, pdcpVideoLargePkgNumTH=pdcpVideoLargePkgNumTH, antUseingWeightPhase1=antUseingWeightPhase1, plsfn3Prb88RIPAvg=plsfn3Prb88RIPAvg, hoPenaltyEutra=hoPenaltyEutra, a5RptInterval=a5RptInterval, timeSlotTypeNeighCell28=timeSlotTypeNeighCell28, boardShelfNo=boardShelfNo, plsfn9Prb42RIPAvg=plsfn9Prb42RIPAvg, lcConfigCellPerfReportSwitch=lcConfigCellPerfReportSwitch, snmpInterProcess=snmpInterProcess, macDownlinkMuMiMoMcsBackoff25=macDownlinkMuMiMoMcsBackoff25, timeSlotTypeNeighCell9=timeSlotTypeNeighCell9, erabRelActNbrQci5=erabRelActNbrQci5, adjeNBPlmnMnc=adjeNBPlmnMnc, invRackTable=invRackTable, macCaActiveMaxNbrSCellUl=macCaActiveMaxNbrSCellUl, retAntInstallationDate=retAntInstallationDate, erabNbrExistQCI1=erabNbrExistQCI1, rrcRbcCaseRelP3=rrcRbcCaseRelP3, plsfn0Prb09RIPAvg=plsfn0Prb09RIPAvg, reverseOperation=reverseOperation, macDownlinkCqi12Tm3=macDownlinkCqi12Tm3, e1LinkImaFeTxState=e1LinkImaFeTxState, plUsrLogPucchCatchDataSfn=plUsrLogPucchCatchDataSfn, extendDrbS1ResMapCoef=extendDrbS1ResMapCoef, macSwitchInfoextendRrcReestablishSwitch=macSwitchInfoextendRrcReestablishSwitch, plrssiIndexLcId=plrssiIndexLcId, phyCfgPucchNormalCpFmt1ActiveThred6Ant=phyCfgPucchNormalCpFmt1ActiveThred6Ant, lte=lte, spsCfgTable=spsCfgTable, cellAdjUtraFddCellArfcn=cellAdjUtraFddCellArfcn, timerRrcReestablishUeContext=timerRrcReestablishUeContext, hlGlobalTestDrbInteractionWithHcTag=hlGlobalTestDrbInteractionWithHcTag, ipoaChRnc2NbClr=ipoaChRnc2NbClr, omrelatedOriginCounter=omrelatedOriginCounter, erabModProcRowStatus=erabModProcRowStatus, hoAttOutIntraCell=hoAttOutIntraCell, erabNbrReqRelEnbQci2=erabNbrReqRelEnbQci2, raeWeightingFactorsPhase1=raeWeightingFactorsPhase1, vlanConfigVlanId=vlanConfigVlanId, rootNode=rootNode, s1PathSwichLcId=s1PathSwichLcId, sscStartMinute5=sscStartMinute5, hoFailPrepIncIntraFreqX2DrbID=hoFailPrepIncIntraFreqX2DrbID, harqLcId=harqLcId, topoRRUOfp1AccessOfpPortNo=topoRRUOfp1AccessOfpPortNo, a3CfgId=a3CfgId, localCarrierFpFromDdPchs=localCarrierFpFromDdPchs, plsfn3Prb97RIPAvg=plsfn3Prb97RIPAvg, sscEndTime2=sscEndTime2, cellmaxripperprbEntry=cellmaxripperprbEntry, almActUploadSwitch=almActUploadSwitch, twampRemoteIPAddr=twampRemoteIPAddr, hlGlobalTestSwitchpciAlgorithmSwitchTLS=hlGlobalTestSwitchpciAlgorithmSwitchTLS, adjeNB=adjeNB, mdtImmediateMDTReportType=mdtImmediateMDTReportType, topoRRUCarrier23ULPowerValue=topoRRUCarrier23ULPowerValue, atuUlOrDlScheSRLmint=atuUlOrDlScheSRLmint, hoFailPrepIncInterFreqS1SPS=hoFailPrepIncInterFreqS1SPS, plsfn1Prb26RIPAvg=plsfn1Prb26RIPAvg, cellUlAnteIotRowStatus=cellUlAnteIotRowStatus, antWeightPhase4=antWeightPhase4, plsfn6Prb15RIPAvg=plsfn6Prb15RIPAvg, macCellCompUeNumQci4=macCellCompUeNumQci4, netRRUAccessShelfNo=netRRUAccessShelfNo, cpuHighLoadTh=cpuHighLoadTh, rruPathVgsValue4=rruPathVgsValue4, macschecceallsfn0=macschecceallsfn0, plsfn2Prb19RIPAvg=plsfn2Prb19RIPAvg, plsfn3Prb86RIPAvg=plsfn3Prb86RIPAvg, erabActiveMaxNbrDLQci3=erabActiveMaxNbrDLQci3, procSoftCoreLoad=procSoftCoreLoad, acCfgLcId=acCfgLcId, rruPrbUlQci5Num=rruPrbUlQci5Num, tdsNodeBSysRncDisaStatus=tdsNodeBSysRncDisaStatus, macDownlinkMuMiMoMcsBackoff7=macDownlinkMuMiMoMcsBackoff7, hoFailIncInterFreqInterCellIntraEnbSPS=hoFailIncInterFreqInterCellIntraEnbSPS, a2MdtRptThresholdRsrp=a2MdtRptThresholdRsrp, invRhubDateOfManufacture=invRhubDateOfManufacture, macPhrIndex43=macPhrIndex43, hsupaQosQueWeightA=hsupaQosQueWeightA, reservedCellL2Para2=reservedCellL2Para2, erabEstabInitAttNbrQci3=erabEstabInitAttNbrQci3, macTestSwitchInfolimitDlMcs=macTestSwitchInfolimitDlMcs, macNbrErrTbDlMassiveMimoSM16=macNbrErrTbDlMassiveMimoSM16, rrcConnReEstabInterEnbUEContextAtt=rrcConnReEstabInterEnbUEContextAtt, macPreset28=macPreset28, ueInfoStaticsEntry=ueInfoStaticsEntry, phyNbrCqi6=phyNbrCqi6, voLTEHandOverInTDLTERowStatus=voLTEHandOverInTDLTERowStatus, cellUlIotRowStatus=cellUlIotRowStatus, hsdpaSpiDiscardTimer=hsdpaSpiDiscardTimer, recvRlcCfgId=recvRlcCfgId, mbmsLcId=mbmsLcId, drbUEActiveUlQci1=drbUEActiveUlQci1, hoFailIncIntraFreqInterCellIntraEnbSrs=hoFailIncIntraFreqInterCellIntraEnbSrs, apS1apRelP9=apS1apRelP9, a3MeasAlgoType=a3MeasAlgoType, cellAcBarForVideoFlag=cellAcBarForVideoFlag, reservedCellL1Para1=reservedCellL1Para1, macTestPmiWeightFactor2ed=macTestPmiWeightFactor2ed, emThunderboltLocation=emThunderboltLocation, b2Threshold2RssiGeran=b2Threshold2RssiGeran, hlGlobalTestSwitchExtendRrcReestablishTag=hlGlobalTestSwitchExtendRrcReestablishTag, cellShareNetMnc=cellShareNetMnc, eventB2Entry=eventB2Entry, hoCancelInterFreqInterEnbX2HandOverSucc=hoCancelInterFreqInterEnbX2HandOverSucc, hlTestSwitchRowStatus=hlTestSwitchRowStatus, ulCompMcsOffset=ulCompMcsOffset, mibAuthorizationMIBOID=mibAuthorizationMIBOID, phyULMeanNLPRB55=phyULMeanNLPRB55, ipPathMaxRxBandwidth=ipPathMaxRxBandwidth, s1ErrorIndicatByMMEProtocol=s1ErrorIndicatByMMEProtocol, cellAntWeightRowStatus=cellAntWeightRowStatus, macPreset35=macPreset35, pdcpUpPktDelayDlQci1Enb=pdcpUpPktDelayDlQci1Enb, nbrschetimesulMcs1=nbrschetimesulMcs1, localCarrierPchs=localCarrierPchs, plsfn6Prb91RIPAvg=plsfn6Prb91RIPAvg, topoRRUAccessRHUBNo=topoRRUAccessRHUBNo, transaction=transaction, erabModProcLcId=erabModProcLcId, pmDerivedCounterExpressionDefine=pmDerivedCounterExpressionDefine, emWaterRowStatus=emWaterRowStatus, topoRRUTRxConstType=topoRRUTRxConstType, plsfn7Prb23RIPAvg=plsfn7Prb23RIPAvg, hsdpaCQIReviseEntry=hsdpaCQIReviseEntry, retAntOperatingBand3=retAntOperatingBand3, cellInterFreqMrLimitForConnect=cellInterFreqMrLimitForConnect, plsfn4Prb37RIPAvg=plsfn4Prb37RIPAvg, fcAgchPwrGap=fcAgchPwrGap, rruTypePortTable=rruTypePortTable, rruPrbDlQci6Num=rruPrbDlQci6Num, cellAdjDelCellCdma2000Bandclass=cellAdjDelCellCdma2000Bandclass, hsdpaCQIInstantWinSize=hsdpaCQIInstantWinSize, calcellCalModeSwitch=calcellCalModeSwitch, alarmCauseCompressionInterval=alarmCauseCompressionInterval, invIocTable=invIocTable, cellCdma2000ParaCdma1XrttCsfbRegParamRegInd=cellCdma2000ParaCdma1XrttCsfbRegParamRegInd, phyULMeanNLPRB09=phyULMeanNLPRB09, erabModQoSFailNbrS1IntraSystemHoTrig=erabModQoSFailNbrS1IntraSystemHoTrig, plsfn3Prb32RIPAvg=plsfn3Prb32RIPAvg, nbrschetimesulMcs20=nbrschetimesulMcs20, ulPwrSrsOffsetAp=ulPwrSrsOffsetAp, hlGlobalTestSwitchOverlapStd=hlGlobalTestSwitchOverlapStd, rrcCAndRCheckOfCellRowStatus=rrcCAndRCheckOfCellRowStatus, sjm1RecursionFactor=sjm1RecursionFactor, macschecceusedsfn7=macschecceusedsfn7, b2LcId=b2LcId, airCondVoltage=airCondVoltage, saalConnTxErPdus=saalConnTxErPdus, tdsLcCellAvailbilityStatus=tdsLcCellAvailbilityStatus, sjm1BfThreshold=sjm1BfThreshold, cacPositionReaccesNum=cacPositionReaccesNum, contextFailModNbrRadioInterfaceFailure=contextFailModNbrRadioInterfaceFailure, pdcpBbuSourceShelfNo=pdcpBbuSourceShelfNo, phyCfgPucchExTendCpFmt1ActiveThred4Ant=phyCfgPucchExTendCpFmt1ActiveThred4Ant, userIndex=userIndex, gpsUnlockReason=gpsUnlockReason, plReceivePowerUserIndex3=plReceivePowerUserIndex3, erabRelMmeNbrInterRATRedirection=erabRelMmeNbrInterRATRedirection, rrcPreset24=rrcPreset24, ruePdcpSduBitLenDlQci254=ruePdcpSduBitLenDlQci254, tdsLcMaxCombinationAntNum=tdsLcMaxCombinationAntNum, rruPrbUlQci2Num=rruPrbUlQci2Num, rruCompPrbTotUl=rruCompPrbTotUl, antUseingWeightAmplitude6=antUseingWeightAmplitude6, erabActiveMeanNbrDLQci9=erabActiveMeanNbrDLQci9, plRiaInterferenceCheckPeriodNum=plRiaInterferenceCheckPeriodNum, phyCfgBFInterleaveFlag=phyCfgBFInterleaveFlag, syslogServerMsgSendEncapsulation=syslogServerMsgSendEncapsulation, mroHysteresisStep=mroHysteresisStep, emEquipmentOperationState=emEquipmentOperationState, rrcCAConfigMaxNbrSCellUl2CC=rrcCAConfigMaxNbrSCellUl2CC, s1ResetByMMETransport=s1ResetByMMETransport, cellCdma2000ParaPreRegZoneId3=cellCdma2000ParaPreRegZoneId3, sscEndMinute5=sscEndMinute5, nbrscheprbdlMcs20=nbrscheprbdlMcs20, rlcPreset3=rlcPreset3, mrStartTime2=mrStartTime2, macCaActiveThrpTimeUL2CC=macCaActiveThrpTimeUL2CC, cellAntWeightAmplitude2=cellAntWeightAmplitude2, plRssiAvgC1=plRssiAvgC1, macMimoSecondPeriod=macMimoSecondPeriod, macPreset14=macPreset14, cellCompanyVideoReserver9VideoNum=cellCompanyVideoReserver9VideoNum, cellReselIntraFreqSpeedStateScaleFactorsMedium=cellReselIntraFreqSpeedStateScaleFactorsMedium, plsfn5Prb66RIPAvg=plsfn5Prb66RIPAvg, pdcpUpPktLossRateUlQci8Enb=pdcpUpPktLossRateUlQci8Enb, rrcPreset40=rrcPreset40, plsfn0Prb66RIPAvg=plsfn0Prb66RIPAvg, plReceivePowerUserIndex5=plReceivePowerUserIndex5, volteHOAttOutIntraEnbInterFreq=volteHOAttOutIntraEnbInterFreq, srvccSuccOutPrepGeranQuality=srvccSuccOutPrepGeranQuality, macNbrTbDlTm4=macNbrTbDlTm4, icicEdgeUeDlPrbSchedPri1=icicEdgeUeDlPrbSchedPri1, plsfn1Prb70RIPAvg=plsfn1Prb70RIPAvg, atuUldataTendcellBand=atuUldataTendcellBand, erabActiveMeanNbrULQci5=erabActiveMeanNbrULQci5, topoRHUBAccessSlotNo=topoRHUBAccessSlotNo, drbBurstDataThpULQci1=drbBurstDataThpULQci1, euePeriodRptRptQuantity=euePeriodRptRptQuantity, rbSuccEstabQci1=rbSuccEstabQci1, dlCAPwrCfiModT2=dlCAPwrCfiModT2, topoRRUSupportSingleAntCal=topoRRUSupportSingleAntCal, cellCdmaBandClassInfoPriority=cellCdmaBandClassInfoPriority, pdcpDlAirSduDropTotalNumberQci3=pdcpDlAirSduDropTotalNumberQci3, cellFrameType=cellFrameType, erabEstabAddAttNbrQci1=erabEstabAddAttNbrQci1, cellAdjCellHCFlag=cellAdjCellHCFlag, trafficCategoryEnableMacQos=trafficCategoryEnableMacQos, sjm1SichAcdSwitch=sjm1SichAcdSwitch, sjm1LocalCellId=sjm1LocalCellId, plsfn6Prb16RIPAvg=plsfn6Prb16RIPAvg, rrcConnReconfigProcLcId=rrcConnReconfigProcLcId, topoRRUSystemTime=topoRRUSystemTime, rrcConnReleaseIllegalUE=rrcConnReleaseIllegalUE, hlTestSwitchUlStartPrbNoForEdgeUe=hlTestSwitchUlStartPrbNoForEdgeUe, macDownlinkQci9NewPfScale=macDownlinkQci9NewPfScale, cellInterRatTreselectionCdmaHRPDSfFlag=cellInterRatTreselectionCdmaHRPDSfFlag, eNBCellShutdownHighThreshold=eNBCellShutdownHighThreshold, lbcHoOutPRBUsageUl=lbcHoOutPRBUsageUl, phyCfgDlTestOfdm=phyCfgDlTestOfdm, invRruEntry=invRruEntry, topoAntArrayPosition=topoAntArrayPosition, tdsNetPlanControlLcConfigSwitch=tdsNetPlanControlLcConfigSwitch, sfn1avgripLcId=sfn1avgripLcId, phyNbrCqi15=phyNbrCqi15, procCoreRowStatus=procCoreRowStatus, caCrossCarrierSchedulingSwitch=caCrossCarrierSchedulingSwitch)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", pathNb2RncMbs=pathNb2RncMbs, netLcFreqBandWidth=netLcFreqBandWidth, ethPortGigabitSwitch=ethPortGigabitSwitch, plsfn2Prb83RIPAvg=plsfn2Prb83RIPAvg, plsfn4Prb48RIPAvg=plsfn4Prb48RIPAvg, b1RptAmount=b1RptAmount, atuSmallPrbNumUsedFlag=atuSmallPrbNumUsedFlag, caUlBsrAllocPeriod=caUlBsrAllocPeriod, imaGrpStartLinkId=imaGrpStartLinkId, plsfn4Prb71RIPAvg=plsfn4Prb71RIPAvg, plsfn0Prb69RIPAvg=plsfn0Prb69RIPAvg, plsfn0Prb79RIPAvg=plsfn0Prb79RIPAvg, plsfn5Prb06RIPAvg=plsfn5Prb06RIPAvg, cellSpecialCalCfgTable=cellSpecialCalCfgTable, irathoSuccPrepIncGprs=irathoSuccPrepIncGprs, imaGrpRxFrameLen=imaGrpRxFrameLen, srvccFailPrepOutUtranOther=srvccFailPrepOutUtranOther, eueMeasCellRsrpFilterCoeff=eueMeasCellRsrpFilterCoeff, cfgFileAmalgamTrigger=cfgFileAmalgamTrigger, equipStartupNotificationObjects=equipStartupNotificationObjects, ethernetOAMPDUMaxLength=ethernetOAMPDUMaxLength, erabRelEnbNbrQci9=erabRelEnbNbrQci9, chacRejectdepriTimer=chacRejectdepriTimer, mroNotiAdjCellCenterFreq=mroNotiAdjCellCenterFreq, netRRURowStatus=netRRURowStatus, plsfn3Prb17RIPAvg=plsfn3Prb17RIPAvg, rrcCASCellReleaseAtt=rrcCASCellReleaseAtt, caSCellConfigAlgorithm=caSCellConfigAlgorithm, macTestSwitchInfoPcfichSwitch=macTestSwitchInfoPcfichSwitch, procShelfNo=procShelfNo, mdtTCEIpaddrType=mdtTCEIpaddrType, raePortInfoFreq=raePortInfoFreq, anrNotiResult=anrNotiResult, geranFeature=geranFeature, pdcpUpOctDlEdgeUser=pdcpUpOctDlEdgeUser, macSwitchTestInfoTm9MsmTLS=macSwitchTestInfoTm9MsmTLS, hoOutSuccMLBMro=hoOutSuccMLBMro, cellmaxripperprbRowStatus=cellmaxripperprbRowStatus, interRatHcLcId=interRatHcLcId, plsfn4Prb88RIPAvg=plsfn4Prb88RIPAvg, macTestPmiReportErrorNum=macTestPmiReportErrorNum, lccLcId=lccLcId, phyCfgWBFCalFlag=phyCfgWBFCalFlag, phyULMeanNLPRB29=phyULMeanNLPRB29, interRatPsR10FinalNetwork=interRatPsR10FinalNetwork, phyCfgPucchExTendCpFmt1ActiveThred3Ant=phyCfgPucchExTendCpFmt1ActiveThred3Ant, encryptAlgorithmType=encryptAlgorithmType, cellAcBarList1ForSigalling=cellAcBarList1ForSigalling, rtRelatPeerIp=rtRelatPeerIp, plRssiAvgC22=plRssiAvgC22, pdcpPreset35=pdcpPreset35, macPhrIndex3=macPhrIndex3, hsdpaQosSwitch=hsdpaQosSwitch, fileTransNotification=fileTransNotification, rlcPresetPerformanceRowStatus=rlcPresetPerformanceRowStatus, macSwitchInfoSignalConTimerPeriod=macSwitchInfoSignalConTimerPeriod, sscEndMinute4=sscEndMinute4, nbrscheprbdlMcs24=nbrscheprbdlMcs24, cellGeranFreqVariableBitMapOfArfcns12=cellGeranFreqVariableBitMapOfArfcns12, erabEstabAddSuccNbrQci4=erabEstabAddSuccNbrQci4, mbmsRadioFrmAllcOffset=mbmsRadioFrmAllcOffset, euePeriodRptNetworkType=euePeriodRptNetworkType, pdcchCceDlMeanEntry=pdcchCceDlMeanEntry, rrcPreset17=rrcPreset17, rrcConnReEstabProcLcId=rrcConnReEstabProcLcId, erabNbrEstabSumQci2=erabNbrEstabSumQci2, plUsrLogUlReportDuration=plUsrLogUlReportDuration, peripheralPackPlanActivateIndicator=peripheralPackPlanActivateIndicator, cacEmergencyPriorTag=cacEmergencyPriorTag, pdcpVideoPreset6=pdcpVideoPreset6, s1InterfaceIPStatTable=s1InterfaceIPStatTable, rapidIOSwitch=rapidIOSwitch, pdcpVideoRecogSucMax=pdcpVideoRecogSucMax, plsfn2Prb11RIPAvg=plsfn2Prb11RIPAvg, rruTypeFamilyName=rruTypeFamilyName, a3Offset=a3Offset, ccOlpcRecursionFactor=ccOlpcRecursionFactor, cellReselComNCRM=cellReselComNCRM, erabActiveMaxNbrDLQci8=erabActiveMaxNbrDLQci8, handOverProcIntraEnbEntry=handOverProcIntraEnbEntry, cellAdjCellLac=cellAdjCellLac, cdlServerInetAddr=cdlServerInetAddr, cellAntWeightPhase12=cellAntWeightPhase12, antUseingWeightPhase6=antUseingWeightPhase6, plsfn4Prb72RIPAvg=plsfn4Prb72RIPAvg, atuVideoTendcellFreq=atuVideoTendcellFreq, plUsrLogReportType=plUsrLogReportType, atuGoldUeIMSI6=atuGoldUeIMSI6, saalConnRxBufferInUseCntr=saalConnRxBufferInUseCntr, saalCommon=saalCommon, phichResource=phichResource, lmcPrbDlCongestionTh=lmcPrbDlCongestionTh, sscStartTime4=sscStartTime4, plsfn3Prb67RIPAvg=plsfn3Prb67RIPAvg, macUpMuMiMoMcsBackOff23=macUpMuMiMoMcsBackOff23, almActUploadBoardType=almActUploadBoardType, boardLedTable=boardLedTable, plsfn1Prb01RIPAvg=plsfn1Prb01RIPAvg, macDownlinkMuMiMoMcsBackoff22=macDownlinkMuMiMoMcsBackoff22, plsfn5Prb72RIPAvg=plsfn5Prb72RIPAvg, macSRBTbDlTm5=macSRBTbDlTm5, macOctDlMassiveMimoSM8=macOctDlMassiveMimoSM8, radioBandTable=radioBandTable, drxQciLongCycleB=drxQciLongCycleB, ipPathRowStatus=ipPathRowStatus, plsfn9Prb60RIPAvg=plsfn9Prb60RIPAvg, apConnReEstabInterEnbScRecRlf=apConnReEstabInterEnbScRecRlf, macVipNumDisconfGv=macVipNumDisconfGv, plsfn6Prb07RIPAvg=plsfn6Prb07RIPAvg, cellAdjCdma2000CellPhyCellId=cellAdjCdma2000CellPhyCellId, heatExReturnAirTemperature=heatExReturnAirTemperature, tbNbrInitUl64QAM=tbNbrInitUl64QAM, saalConnNb2RncCcr=saalConnNb2RncCcr, peripheralEquipment=peripheralEquipment, erabEstabAddFailNbrQci1RadioResNotAvailable=erabEstabAddFailNbrQci1RadioResNotAvailable, dlCAPwrCce4CqiThreshHold=dlCAPwrCce4CqiThreshHold, raeGroupsRowStatus=raeGroupsRowStatus, contextAttRelMMENbrUENotAvailableforPS=contextAttRelMMENbrUENotAvailableforPS, irathoFailPrepIncUtranInstFailure=irathoFailPrepIncUtranInstFailure, gsmCell=gsmCell, bfdEchoTimes=bfdEchoTimes, raHiSpeedFlag=raHiSpeedFlag, cellAntCalTrigger=cellAntCalTrigger, pdcpBbuSourceEngagedState=pdcpBbuSourceEngagedState, plsfn8Prb33RIPAvg=plsfn8Prb33RIPAvg, cellAdjEutraCellIndex=cellAdjEutraCellIndex, macDownlinkMuMiMoMcsBackoff9=macDownlinkMuMiMoMcsBackoff9, invRackVendorName=invRackVendorName, pubAlgorithmParaHSpdSwitch=pubAlgorithmParaHSpdSwitch, plsfn7Prb13RIPAvg=plsfn7Prb13RIPAvg, rruOptTransRxPower=rruOptTransRxPower, plsfn7Prb61RIPAvg=plsfn7Prb61RIPAvg, cellUlIotValue=cellUlIotValue, plsfn6Prb10RIPAvg=plsfn6Prb10RIPAvg, nbrscheprbdlMcs8=nbrscheprbdlMcs8, netIROptPlanTable=netIROptPlanTable, spsOptmzDlLoseCopyFlag=spsOptmzDlLoseCopyFlag, hoFailPrepIncInterFreqS1SecurityFailure=hoFailPrepIncInterFreqS1SecurityFailure, macNbrErrTbDlMassiveMimoSM2=macNbrErrTbDlMassiveMimoSM2, fcMinCIRThreshold=fcMinCIRThreshold, plsfn4Prb93RIPAvg=plsfn4Prb93RIPAvg, plsfn7PrbG20RIPMax=plsfn7PrbG20RIPMax, sfn3avgripEntry=sfn3avgripEntry, macDownlinkMuMiMoPowerDeductFactor=macDownlinkMuMiMoPowerDeductFactor, plsfn7Prb03RIPAvg=plsfn7Prb03RIPAvg, macVipNumGoldVoice=macVipNumGoldVoice, ftpServerInetAddr=ftpServerInetAddr, plsfn2Prb26RIPAvg=plsfn2Prb26RIPAvg, activeUEEntry=activeUEEntry, contextAttRelMMENbrCSFallbackTriggered=contextAttRelMMENbrCSFallbackTriggered, plsfn6Prb04RIPAvg=plsfn6Prb04RIPAvg, PYSNMP_MODULE_ID=dtm, plsfn0Prb06RIPAvg=plsfn0Prb06RIPAvg, radioCarrierBand=radioCarrierBand, puschRrHopMode=puschRrHopMode, raeWeightingFactorsAmplitude6=raeWeightingFactorsAmplitude6, pdcpSduSendTotalDataNumQci4=pdcpSduSendTotalDataNumQci4, dlCAPwrLcId=dlCAPwrLcId, erabRelEnbNbrQci1ReEstabFail=erabRelEnbNbrQci1ReEstabFail, timerInterRatUtraPsHc=timerInterRatUtraPsHc, rrcMchCaseRelP4=rrcMchCaseRelP4, pdcpVideoRecogSucAvg=pdcpVideoRecogSucAvg, omLinkMacPri=omLinkMacPri, amrDlVoipPacketWb4=amrDlVoipPacketWb4, x2AbnormalProc=x2AbnormalProc, ipoaChPortId=ipoaChPortId, cellAdjGeranCellRAC=cellAdjGeranCellRAC, dlCompRowStatus=dlCompRowStatus, pagingProcRowStatus=pagingProcRowStatus, cellReselComThreshServLowQFlag=cellReselComThreshServLowQFlag, plsfn7Prb33RIPAvg=plsfn7Prb33RIPAvg, raeWeightingFactorsPhase2=raeWeightingFactorsPhase2, cellTypeFlag=cellTypeFlag, hoFailPrepIncInterFreqX2LoChID=hoFailPrepIncInterFreqX2LoChID, cellCRSBoostingSwitch=cellCRSBoostingSwitch, cellAdjUtraFddCellPlmnMcc=cellAdjUtraFddCellPlmnMcc, plsfn1Prb29RIPAvg=plsfn1Prb29RIPAvg, raeBroadcastBeamWidthBuf=raeBroadcastBeamWidthBuf, qolEntry=qolEntry, macPresetPerformanceLcId=macPresetPerformanceLcId, plsfn7Prb68RIPAvg=plsfn7Prb68RIPAvg, plsfn2Prb07RIPAvg=plsfn2Prb07RIPAvg, eventB2Table=eventB2Table, cellInterFreqReselPriorityFlag=cellInterFreqReselPriorityFlag, invPortLocation=invPortLocation, fileClearFolderName=fileClearFolderName, netLocalCellGrpEntry=netLocalCellGrpEntry, plsfn5Prb46RIPAvg=plsfn5Prb46RIPAvg, gfiIndex=gfiIndex, ulPwrPuschTpcFormatChoice=ulPwrPuschTpcFormatChoice, clkCommHoldoverTime=clkCommHoldoverTime, coolingNormalMinTemperature=coolingNormalMinTemperature, macTestSwitchInfoMaxMsg3Mcs=macTestSwitchInfoMaxMsg3Mcs, drbBurstDataThpDLQci6=drbBurstDataThpDLQci6, softLicenseDlSfBalanceCoeff=softLicenseDlSfBalanceCoeff, hoAttOutIntraFreq=hoAttOutIntraFreq, pdcpThrpTimeDLQci6=pdcpThrpTimeDLQci6, heatExInnerFanState=heatExInnerFanState, plsfn0Prb73RIPAvg=plsfn0Prb73RIPAvg, hsupaQosCongWaitTime=hsupaQosCongWaitTime, erabActiveMaxNbrULQci8=erabActiveMaxNbrULQci8, macPrbUtilizationDlMax=macPrbUtilizationDlMax, drbUEActiveUlQci9=drbUEActiveUlQci9, mroA2ThBaseHighTh=mroA2ThBaseHighTh, peripheralPackPlanSubPackNumber=peripheralPackPlanSubPackNumber, phyCfgHighSpeedDlModifyFreqShiftPeriod=phyCfgHighSpeedDlModifyFreqShiftPeriod, hsdpaHarqRv16Qam8=hsdpaHarqRv16Qam8, sessiontimeerabQci1=sessiontimeerabQci1, topoRRULocation=topoRRULocation, plsfn2Prb66RIPAvg=plsfn2Prb66RIPAvg, lcConfigTrigger=lcConfigTrigger, softwareNB=softwareNB, macDownlinkAckInactReleaseUeSwitch=macDownlinkAckInactReleaseUeSwitch, videoScheduleMode=videoScheduleMode, hcPubAlgorithmParaHSpdCellStatus=hcPubAlgorithmParaHSpdCellStatus, s1ResetByeNBReleaseDueToEutran=s1ResetByeNBReleaseDueToEutran, a2MeasAlgoType=a2MeasAlgoType, pdcpDlPacketDelayLcId=pdcpDlPacketDelayLcId, erabEstabAddAttNbrQci7=erabEstabAddAttNbrQci7, macSwitchInfoTm8MuSuMimoSwitch=macSwitchInfoTm8MuSuMimoSwitch, pdcpSduSendTotalDataNumQci9=pdcpSduSendTotalDataNumQci9, cacUlPrbTh=cacUlPrbTh, erabRelEnbNbrUELostN=erabRelEnbNbrUELostN, sjm1PuchDeltaSnr=sjm1PuchDeltaSnr, cellAcBarList4ForVideo=cellAcBarList4ForVideo, netRRURootAlarmType7=netRRURootAlarmType7, x2InNbrOctetsUserPlane=x2InNbrOctetsUserPlane, plsfn4Prb13RIPAvg=plsfn4Prb13RIPAvg, plsfn5Prb58RIPAvg=plsfn5Prb58RIPAvg, fileTransNotiFileTaskId=fileTransNotiFileTaskId, plsfn8Prb83RIPAvg=plsfn8Prb83RIPAvg, cellAntWeightPhase23=cellAntWeightPhase23, swPackRunningRowStatus=swPackRunningRowStatus, managerPerformanceReportSwitch=managerPerformanceReportSwitch, plsfn7Prb83RIPAvg=plsfn7Prb83RIPAvg, rrcFailConnReconfigMobilityFailure=rrcFailConnReconfigMobilityFailure, vipSafeguardEntry=vipSafeguardEntry, plsfn8Prb87RIPAvg=plsfn8Prb87RIPAvg, hoFailPrepOutIntraFreqX2Fail=hoFailPrepOutIntraFreqX2Fail, cellAdjCellIndex=cellAdjCellIndex, loggedMdtCellEnbGlobalId=loggedMdtCellEnbGlobalId, peripheralFileIndex=peripheralFileIndex, plsfn6Prb81RIPAvg=plsfn6Prb81RIPAvg, highSpeedStatisticTable=highSpeedStatisticTable, fcPdschModulationDelta=fcPdschModulationDelta, plsfn5Prb40RIPAvg=plsfn5Prb40RIPAvg, erabNbrMeanEstabQci2=erabNbrMeanEstabQci2, caThroughputRowStatus=caThroughputRowStatus, macTestSwitchInfoScrambleStartPrbPosition=macTestSwitchInfoScrambleStartPrbPosition, plsfn7Prb47RIPAvg=plsfn7Prb47RIPAvg, phyULMaxNLPRB28=phyULMaxNLPRB28, fileTransObjects=fileTransObjects, cellSpecialCalCfgEntry=cellSpecialCalCfgEntry, ccLocalCellId=ccLocalCellId)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", sessiontimeerabQci6=sessiontimeerabQci6, macPresetPerformanceRowStatus=macPresetPerformanceRowStatus, cellSoftLicense932Fun=cellSoftLicense932Fun, macSRBTbDlTm2=macSRBTbDlTm2, debugUploadShelfNo=debugUploadShelfNo, lmcUlPrbRestoreTh=lmcUlPrbRestoreTh, opFuncCdma2000Flag=opFuncCdma2000Flag, erabModQoSFailNbrUnspecifiedFailure=erabModQoSFailNbrUnspecifiedFailure, hsupaSpsSchedDynamicSDThFactor=hsupaSpsSchedDynamicSDThFactor, cellSelectQRxlevMinOffsetFlag=cellSelectQRxlevMinOffsetFlag, hsupaTfrcPwCtrlType=hsupaTfrcPwCtrlType, plsfn8Prb85RIPAvg=plsfn8Prb85RIPAvg, topoRRUCarrier21ULPowerValue=topoRRUCarrier21ULPowerValue, macPhrIndex14=macPhrIndex14, rrcConnReEstabAttReConfigFail=rrcConnReEstabAttReConfigFail, plsfn4Prb21RIPAvg=plsfn4Prb21RIPAvg, videoMinBRSwitch=videoMinBRSwitch, mroStage=mroStage, erabActiveNumberRowStatus=erabActiveNumberRowStatus, saalConnRnc2NbPcr=saalConnRnc2NbPcr, hoFailIncInterFreqInterCellIntraEnbPucch=hoFailIncInterFreqInterCellIntraEnbPucch, b2MeasFilterCoeffGeran=b2MeasFilterCoeffGeran, ulPwrPHRSwitch=ulPwrPHRSwitch, tdsNodeBSysDwptsSendMode=tdsNodeBSysDwptsSendMode, hoFailPrepIncInterFreqIntraEnbSrs=hoFailPrepIncInterFreqIntraEnbSrs, nbapMbmsNode=nbapMbmsNode, plsfn9Prb45RIPAvg=plsfn9Prb45RIPAvg, cellAdjUtraTddCellRim=cellAdjUtraTddCellRim, phyULMaxNLPRB95=phyULMaxNLPRB95, douAdjcHOProToGsmCellAdjCellIndex=douAdjcHOProToGsmCellAdjCellIndex, cellAntWeightAmplitude10=cellAntWeightAmplitude10, sjm1RoundSwitchSmartAnt=sjm1RoundSwitchSmartAnt, timeSlotTypeNeighCell17=timeSlotTypeNeighCell17, retAntSectorID=retAntSectorID, atuGoldUeIMSI25=atuGoldUeIMSI25, hsdpaCQIReviseSwitch=hsdpaCQIReviseSwitch, macTestSwitchInfoPdschPwrProtectSwitch=macTestSwitchInfoPdschPwrProtectSwitch, plsfn1Prb75RIPAvg=plsfn1Prb75RIPAvg, cellAcBarList4ForVoice=cellAcBarList4ForVoice, hoSuccOutPrepInterEnbS1IntraFreqQci2=hoSuccOutPrepInterEnbS1IntraFreqQci2, cellCdma2000ParaHRPDFlag=cellCdma2000ParaHRPDFlag, caScellActualPrbActiveThrDl=caScellActualPrbActiveThrDl, eNBMeasComFilterCoeffForPrbNum=eNBMeasComFilterCoeffForPrbNum, tdsSysRruAcRxDelay=tdsSysRruAcRxDelay, hcServRsrpTh=hcServRsrpTh, drbUEActiveUlQci6=drbUEActiveUlQci6, cacPositionAoAEndTreshhold=cacPositionAoAEndTreshhold, invShelfTable=invShelfTable, contextFailModNbrAbstractSyntaxError=contextFailModNbrAbstractSyntaxError, s1FailSetupNbrUserPlaneResourcesNotEnough=s1FailSetupNbrUserPlaneResourcesNotEnough, acCfgAvePowAttenuRange=acCfgAvePowAttenuRange, rruPathRpdValue=rruPathRpdValue, puschbetaOffsetRIIndexMC=puschbetaOffsetRIIndexMC, softLicenseLcId=softLicenseLcId, macSRBAckdTbUl=macSRBAckdTbUl, licenseFeatureSupportable=licenseFeatureSupportable, plsfn9Prb80RIPAvg=plsfn9Prb80RIPAvg, gpsSlotNo=gpsSlotNo, mroNotiNEType=mroNotiNEType, nbrscheprbulMcs22=nbrscheprbulMcs22, macNbrTbDlMassiveMimoSM2=macNbrTbDlMassiveMimoSM2, plUsrLogDlDataLargePeriod=plUsrLogDlDataLargePeriod, netAntArrayDistance=netAntArrayDistance, sigSctpCongestionDuration=sigSctpCongestionDuration, pdcpRatioOfRUEEntry=pdcpRatioOfRUEEntry, eventA5Table=eventA5Table, pdcpDiscardTimerExCfg=pdcpDiscardTimerExCfg, contextAttRelMMENbrInterRATRedirection=contextAttRelMMENbrInterRATRedirection, hoSuccOutInterEnbX2InterFreqQci2=hoSuccOutInterEnbX2InterFreqQci2, timerRrcConnRel=timerRrcConnRel, phyCfgSpeedDetectShortT=phyCfgSpeedDetectShortT, hsdpaHarqRv16Qam1New=hsdpaHarqRv16Qam1New, pdcpSduDlDropRatioRowStatus=pdcpSduDlDropRatioRowStatus, phyCfgAoaWeightFactor=phyCfgAoaWeightFactor, s1SuccResetByeNB=s1SuccResetByeNB, cellCdma2000ParaPreRegAllowed=cellCdma2000ParaPreRegAllowed, macTestSwitchInfoScramblePowerMargin=macTestSwitchInfoScramblePowerMargin, drxQciShortCycleTimer=drxQciShortCycleTimer, omLinkStatInPkts=omLinkStatInPkts, alterationNotiSends=alterationNotiSends, rrcConnReEstabInterEnbScSentRp=rrcConnReEstabInterEnbScSentRp, rruPreambleContentionTimesGroupB=rruPreambleContentionTimesGroupB, plsfn7PrbG2RIPMax=plsfn7PrbG2RIPMax, macNbrRbDlMassiveMimoSM16=macNbrRbDlMassiveMimoSM16, caThroughputEntry=caThroughputEntry, macDownlinkDlStep=macDownlinkDlStep, licenseFeatureAuthorizedState=licenseFeatureAuthorizedState, macNbrTbDLRank3=macNbrTbDLRank3, macDownlinkEffTm37=macDownlinkEffTm37, sscEndTime5=sscEndTime5, phyULMeanNLPRB40=phyULMeanNLPRB40, localCarrierhsdpaCtrlSDMACapability=localCarrierhsdpaCtrlSDMACapability, hcBlerWaitA4Time=hcBlerWaitA4Time, plRiaCellLcId=plRiaCellLcId, hsHighSpeedUserRelocation=hsHighSpeedUserRelocation, fcHichDpchOffsetTxaUser1=fcHichDpchOffsetTxaUser1, erabEstabAddFailNbrQci2RadioResNotAvailable=erabEstabAddFailNbrQci2RadioResNotAvailable, macschecfi3ratio=macschecfi3ratio, erabRelHoProcEntry=erabRelHoProcEntry, topoRRUBspMainStatus=topoRRUBspMainStatus, cellUlAnteIotValue=cellUlAnteIotValue, remoteLmtRouteSlotNo=remoteLmtRouteSlotNo, equivalentPRBUsageTable=equivalentPRBUsageTable, macPhrIndex58=macPhrIndex58, ccRachErrorRatio=ccRachErrorRatio, plsfn3Prb81RIPAvg=plsfn3Prb81RIPAvg, rhubOptTransTemperature=rhubOptTransTemperature, eueMeasCellSMeasureRsrp=eueMeasCellSMeasureRsrp, s1ResetByeNBOMIntervention=s1ResetByeNBOMIntervention, cellAdjDelCellLac=cellAdjDelCellLac, gpsRowStatus=gpsRowStatus, pdcpIPThroughputDlQci3=pdcpIPThroughputDlQci3, plsfn8Prb81RIPAvg=plsfn8Prb81RIPAvg, timerInterRatUtraPsHcPrepare=timerInterRatUtraPsHcPrepare, plsfn0Prb55RIPAvg=plsfn0Prb55RIPAvg, opFuncDrxDelayTimer=opFuncDrxDelayTimer, erabNbrExistQCI4=erabNbrExistQCI4, e1LinkLocMf=e1LinkLocMf, irathoSuccPrepOutUtran=irathoSuccPrepOutUtran, a1RptInterval=a1RptInterval, tdsLcCalibrationMode=tdsLcCalibrationMode, plsfn1Prb92RIPAvg=plsfn1Prb92RIPAvg, hoFailPrepIncInterFreqIntraEnbParameterError=hoFailPrepIncInterFreqIntraEnbParameterError, swPackCustomerPlanScheduleActivateTime=swPackCustomerPlanScheduleActivateTime, handoverInERABNbrTable=handoverInERABNbrTable, plsfn5Prb77RIPAvg=plsfn5Prb77RIPAvg, timerS1Setup=timerS1Setup, rruOptTransTxPower=rruOptTransTxPower, drbBucketSizeDuration=drbBucketSizeDuration, hsdpaHarqRv64Qam2=hsdpaHarqRv64Qam2, debugUploadRackNo=debugUploadRackNo, phyULMeanNLPRB81=phyULMeanNLPRB81, plRiaLogServerInetAddrType=plRiaLogServerInetAddrType, hoFailOutInterFreqS1NoRsp=hoFailOutInterFreqS1NoRsp, b2Hysteresis=b2Hysteresis, cmdAuthorizationTable=cmdAuthorizationTable, rhubEtherOutputCurrent=rhubEtherOutputCurrent, plsfn8PrbG3RIPMax=plsfn8PrbG3RIPMax, spsImplicitRelAfter=spsImplicitRelAfter, erabEstabAddFailNbrWeakCoverageQci1=erabEstabAddFailNbrWeakCoverageQci1, macPreset16=macPreset16, hoInterSysVolteLBCOutSucc=hoInterSysVolteLBCOutSucc, rruPathVgsValue2=rruPathVgsValue2, sigSctpUnavailableDuration=sigSctpUnavailableDuration, pdcpIPThroughputDlQci1=pdcpIPThroughputDlQci1, macBbuSourceSlotNo=macBbuSourceSlotNo, pmExpressionEntry=pmExpressionEntry, macPreset4=macPreset4, maintenceStateValue=maintenceStateValue, cellavgripEntry=cellavgripEntry, macNbrErrTbDlMassiveMimoSM13=macNbrErrTbDlMassiveMimoSM13, spsOptmzUpAlgExplctRlThr=spsOptmzUpAlgExplctRlThr, erabEstabAddFailNbrQci1Other=erabEstabAddFailNbrQci1Other, dlCompTable=dlCompTable, rrcHcCaseRelP10=rrcHcCaseRelP10, cellavgripperprbEntry=cellavgripperprbEntry, drbPdcpSduBitLenDlQci5=drbPdcpSduBitLenDlQci5, apCAndRCheckOfEnb=apCAndRCheckOfEnb, daughterBoardVendorUnitTypeNumber=daughterBoardVendorUnitTypeNumber, mlbNotiNEID=mlbNotiNEID, macTestSwitchInfoEntry=macTestSwitchInfoEntry, pdschLcId=pdschLcId, macMumimoThrputUlRank2=macMumimoThrputUlRank2, plsfn5Prb42RIPAvg=plsfn5Prb42RIPAvg, activeAlarmType=activeAlarmType, initCalibrationAnt3RxStatus=initCalibrationAnt3RxStatus, syslogServerPort=syslogServerPort, hoCoverHoleSum=hoCoverHoleSum, erabModQoSSuccNbrQci5=erabModQoSSuccNbrQci5, hlSctSourceEntry=hlSctSourceEntry, eNBMeasComPeriodicForIot=eNBMeasComPeriodicForIot, eventGeneralEventTraps=eventGeneralEventTraps, sjm1ThreshIrtPiip=sjm1ThreshIrtPiip, puschbetaOffsetCQIIndex=puschbetaOffsetCQIIndex, cellGeranFreqVariableBitMapOfArfcns11=cellGeranFreqVariableBitMapOfArfcns11, nbrschetimesdlMcs9=nbrschetimesdlMcs9, mbmsSubFrmAllcOneFrame=mbmsSubFrmAllcOneFrame, rruPathVgsValue1=rruPathVgsValue1, netLocalCellCtrlTable=netLocalCellCtrlTable, mroPingPangHoNumTh=mroPingPangHoNumTh, rruCalcPathTable=rruCalcPathTable, hoFailOutHoPrepTimeOut=hoFailOutHoPrepTimeOut, extendDrbPER=extendDrbPER, activeAlarmManagement=activeAlarmManagement, plsfn2Prb64RIPAvg=plsfn2Prb64RIPAvg, carrierTs3ISCP=carrierTs3ISCP, macTestPmiWeightFactor=macTestPmiWeightFactor, swPackRunningZipType=swPackRunningZipType, macNbrSuccTbDl=macNbrSuccTbDl, a1LcId=a1LcId, pdcpUlAirSduSendTotalNumberQci5=pdcpUlAirSduSendTotalNumberQci5, pdcpPreset27=pdcpPreset27, fileTransFileName=fileTransFileName, mroA5Th2BaseHighTh=mroA5Th2BaseHighTh, daughterBoardSlotNo=daughterBoardSlotNo, pdcpSduSendTotalDateLenQci1=pdcpSduSendTotalDateLenQci1, hsupaCellSelectLcId=hsupaCellSelectLcId, cellGeranFreqIndex=cellGeranFreqIndex, imaGrpLinkNum=imaGrpLinkNum, sjm1DasIscpPathMaxThreshold=sjm1DasIscpPathMaxThreshold, puschTtiBundling=puschTtiBundling, cellGeranFreqNumberOfVarialbeBitMapArfcns=cellGeranFreqNumberOfVarialbeBitMapArfcns, rrcPreset16=rrcPreset16, hlSctSourceUsableState=hlSctSourceUsableState, rruPathBand=rruPathBand, cacTable=cacTable, plsfn2Prb96RIPAvg=plsfn2Prb96RIPAvg, invPortSlotNo=invPortSlotNo, hoOutFailTooLate=hoOutFailTooLate, reverseOperationRowStatus=reverseOperationRowStatus, pdcpUpPktLossRateUlQci2Enb=pdcpUpPktLossRateUlQci2Enb, omLinkMaxTxBandwidth=omLinkMaxTxBandwidth, localCarrierCarrierOperationalState=localCarrierCarrierOperationalState, caSCellSINRAbsThr=caSCellSINRAbsThr, cellAdjUtraTddCellLAC=cellAdjUtraTddCellLAC, plReportType=plReportType, softwarePackPlanTable=softwarePackPlanTable, drbPdcpSduTotalNumberDlQci6=drbPdcpSduTotalNumberDlQci6, rrcErabSetupInteractWithHo=rrcErabSetupInteractWithHo, plsfn4Prb99RIPAvg=plsfn4Prb99RIPAvg, plRssiAvgC10=plRssiAvgC10, plsfn4Prb39RIPAvg=plsfn4Prb39RIPAvg, handOverProcTimeInterEnbEntry=handOverProcTimeInterEnbEntry, sdCfgThresholdDetection=sdCfgThresholdDetection, macPreset24=macPreset24, pdcpUpPktDiscardRateDlQci4Enb=pdcpUpPktDiscardRateDlQci4Enb, raeFileNameLen=raeFileNameLen, lmcUlPrbHighLoadTh=lmcUlPrbHighLoadTh, topoRHUBAccessBoardType=topoRHUBAccessBoardType, tdsSysnfdetect=tdsSysnfdetect, saalNmbDlcs=saalNmbDlcs, hoSuccPrepOutIntraFreqX2=hoSuccPrepOutIntraFreqX2, plsfn1Prb40RIPAvg=plsfn1Prb40RIPAvg, plsfn7PrbG13RIPMax=plsfn7PrbG13RIPMax, hcCSHoCfgSwitch=hcCSHoCfgSwitch, puschdmrsWithOCCActivedR10Flag=puschdmrsWithOCCActivedR10Flag, invAntArrayRowStatus=invAntArrayRowStatus, macDownlinkDecEff22Tm3=macDownlinkDecEff22Tm3, imaGrpNumRxLinks=imaGrpNumRxLinks, phrTable=phrTable, macUpAlgorithmMCSThrshldfrDsblTTIbndlng=macUpAlgorithmMCSThrshldfrDsblTTIbndlng, rrcFailConnEstabPerEncodeFail=rrcFailConnEstabPerEncodeFail, dlCAPwrTargetSinr2Cce3=dlCAPwrTargetSinr2Cce3, sndRlcCfgEntry=sndRlcCfgEntry, sctpSignalBearStatus=sctpSignalBearStatus, macTestSwitchUlRetxPrbSwitch=macTestSwitchUlRetxPrbSwitch, hsupaCellSelectTable=hsupaCellSelectTable, rrcPreset35=rrcPreset35, raeGeneralFileName=raeGeneralFileName, boardTempRackNo=boardTempRackNo, rrcConnEstabTimeMeanMoData=rrcConnEstabTimeMeanMoData, spsOptmzSidUlLoseCopyFlag=spsOptmzSidUlLoseCopyFlag, netLcRruPowerPathAdjustValue=netLcRruPowerPathAdjustValue, sscTaskRowStatus=sscTaskRowStatus)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", rruTypePortNo=rruTypePortNo, plIotLogServerInetAddrType=plIotLogServerInetAddrType, cellEntry=cellEntry, erabNbrHoIncQci3=erabNbrHoIncQci3, fcScchInitTxaOffset=fcScchInitTxaOffset, boardSoftwareFileRackNo=boardSoftwareFileRackNo, hoFailPrepIncInterFreqIntraEnbMaxUeNum=hoFailPrepIncInterFreqIntraEnbMaxUeNum, plADIIoThighThreshoffset=plADIIoThighThreshoffset, addERABEstabProcLcId=addERABEstabProcLcId, eNBCarrierShutdownLowThreshold=eNBCarrierShutdownLowThreshold, periodCalibrationRowStatus=periodCalibrationRowStatus, rrcConnReEstabFailSrsAllocFail=rrcConnReEstabFailSrsAllocFail, traceManagement=traceManagement, plsfn0Prb65RIPAvg=plsfn0Prb65RIPAvg, topoRRUBootSlaveStatus=topoRRUBootSlaveStatus, dlCAPwrPhichPowerDelta=dlCAPwrPhichPowerDelta, macTestSwitchInfoDlCodeWordSwapSwitch=macTestSwitchInfoDlCodeWordSwapSwitch, erabRelProcTable=erabRelProcTable, spsP0NominalPuschPersist=spsP0NominalPuschPersist, equipLocation=equipLocation, mrFtpServerLoginName=mrFtpServerLoginName, invAntennaArrayTable=invAntennaArrayTable, erabEstabAttNbrQci252=erabEstabAttNbrQci252, a6Offset=a6Offset, cellReselComSNonIntraSearch=cellReselComSNonIntraSearch, s1ErrorIndicatByeNBMmeUeS1apIdError=s1ErrorIndicatByeNBMmeUeS1apIdError, chandPrCfg=chandPrCfg, erabRelSuccNbrQci6=erabRelSuccNbrQci6, invRackDateOfLastService=invRackDateOfLastService, pdcpThrpTimeDLQci9=pdcpThrpTimeDLQci9, peripheralPackPlanTable=peripheralPackPlanTable, rruTransPowerRowStatus=rruTransPowerRowStatus, lcOperationalState=lcOperationalState, sctpStreamTable=sctpStreamTable, erabActiveNumberEntry=erabActiveNumberEntry, hoFailPrepIncInterFreqX2PerDecodeFail=hoFailPrepIncInterFreqX2PerDecodeFail, netRRURootAlarmState2=netRRURootAlarmState2, macCaActiveMaxNbrPCellUl2CC=macCaActiveMaxNbrPCellUl2CC, atuUeIMSI6=atuUeIMSI6, rtRelatGatewayIpAddress=rtRelatGatewayIpAddress, ulCompForceSwitch=ulCompForceSwitch, cellGeranFreqExplicitArfcns24=cellGeranFreqExplicitArfcns24, macBbuSourceIndex=macBbuSourceIndex, erabEstabInitSuccNbrQci2=erabEstabInitSuccNbrQci2, airCondInnerFanAlarmState=airCondInnerFanAlarmState, macPhrIndex22=macPhrIndex22, rrcReduceCrsPowerReq=rrcReduceCrsPowerReq, plsfn4Prb03RIPAvg=plsfn4Prb03RIPAvg, hsupaCommSchedTable=hsupaCommSchedTable, netLocalCellGroup=netLocalCellGroup, cellShedSib11Period=cellShedSib11Period, plsfn2Prb53RIPAvg=plsfn2Prb53RIPAvg, erabHoFailQci7=erabHoFailQci7, swPackRunningDownloadTime=swPackRunningDownloadTime, mroA3TTTThBaseHighTh=mroA3TTTThBaseHighTh, anrRemoveInterRatSwitch=anrRemoveInterRatSwitch, erabNbrHoIncQci7=erabNbrHoIncQci7, macUpMuMiMoMcsBackOff26=macUpMuMiMoMcsBackOff26, macDownlinkMuMiMoMcsBackoff20=macDownlinkMuMiMoMcsBackoff20, sjm1PeakPosThreshold=sjm1PeakPosThreshold, hsdpaCQIRestrictMFFlag=hsdpaCQIRestrictMFFlag, plsfn6Prb11RIPAvg=plsfn6Prb11RIPAvg, pdcpRatioSIRowStatus=pdcpRatioSIRowStatus, macNbrTbDlMassiveMimoSM13=macNbrTbDlMassiveMimoSM13, localCellGrpEntry=localCellGrpEntry, rrcPreset32=rrcPreset32, plRiaCellState=plRiaCellState, drbBurstDataThpULQci9=drbBurstDataThpULQci9, hsupaCongestCtrlIncreasePara=hsupaCongestCtrlIncreasePara, hoFailPrepIncInterFreqX2CellBlock=hoFailPrepIncInterFreqX2CellBlock, e1LinkTcLcd=e1LinkTcLcd, macPreset6=macPreset6, swPackCustomerPlanUpgradeResult=swPackCustomerPlanUpgradeResult, swPackDetailVersion=swPackDetailVersion, cellShedSib6Period=cellShedSib6Period, cacUlHcReservePrb=cacUlHcReservePrb, cellUlIotRTMonitorTaskTable=cellUlIotRTMonitorTaskTable, macCellCompUeNumQci6=macCellCompUeNumQci6, macSRBTbDLRank1=macSRBTbDLRank1, icicOiThresholed1=icicOiThresholed1, srvccAttOutUtran=srvccAttOutUtran, atuUserGapScheOptimizationSwitch=atuUserGapScheOptimizationSwitch, hoFailPrepIncIntraFreqIntraEnbTpc=hoFailPrepIncIntraFreqIntraEnbTpc, netBoardWorkMode=netBoardWorkMode, contextAttRelMMENbrRadioInterfaceFailure=contextAttRelMMENbrRadioInterfaceFailure, localCarrierScchPowerMinRate=localCarrierScchPowerMinRate, rrcPreset37=rrcPreset37, cellSpeCalCfgDwptsCqiFlag=cellSpeCalCfgDwptsCqiFlag, cellAdjGeranPlmnMcc=cellAdjGeranPlmnMcc, srbDlLoPriority=srbDlLoPriority, pmTask=pmTask, antWeightStatusIndex=antWeightStatusIndex, phyCfgContinIotMeasPeriod=phyCfgContinIotMeasPeriod, plsfn9Prb12RIPAvg=plsfn9Prb12RIPAvg, phyTA2=phyTA2, configManagement=configManagement, rruCarrierAntGrpID=rruCarrierAntGrpID, plsfn6Prb52RIPAvg=plsfn6Prb52RIPAvg, procProceduralStatus=procProceduralStatus, omTestDspTskFltSwitch=omTestDspTskFltSwitch, rruCarrierRRSNo=rruCarrierRRSNo, rrcConnReconfigProcRowStatus=rrcConnReconfigProcRowStatus, b2MaxReportCell=b2MaxReportCell, macDownlinkRi2Times=macDownlinkRi2Times, cellAntWeightPhase20=cellAntWeightPhase20, eNBEnergyConservEndTimeMinute=eNBEnergyConservEndTimeMinute, phyCfgIotScSmartAlarmPRBnumR=phyCfgIotScSmartAlarmPRBnumR, pdcpBbuSourceSlotNo=pdcpBbuSourceSlotNo, traceMsgTypeBitMap=traceMsgTypeBitMap, peripheralFileRowStatus=peripheralFileRowStatus, caUlRlcBsrAllocAlgoAlpha=caUlRlcBsrAllocAlgoAlpha, sfn8avgripRowStatus=sfn8avgripRowStatus, erabRelMmeNbrNormalRelease=erabRelMmeNbrNormalRelease, lbcDlS1TnlTh2=lbcDlS1TnlTh2, atuVoiceTendcellBand=atuVoiceTendcellBand, rruCarrierEntry=rruCarrierEntry, videoActiveLcId=videoActiveLcId, iubIPPathTable=iubIPPathTable, debugUploadPercent=debugUploadPercent, macUpAlgorithmRSSIMax=macUpAlgorithmRSSIMax, airCondWarmingSensitivity=airCondWarmingSensitivity, hoAttIncInterFreqIntraEnb=hoAttIncInterFreqIntraEnb, macTestSwitchInfoRandomScrambleSwitch=macTestSwitchInfoRandomScrambleSwitch, erabRelFailNbrTransferSyntaxError=erabRelFailNbrTransferSyntaxError, a6MeasAlgoType=a6MeasAlgoType, macDownlinkMuMiMoMcsBackoff0=macDownlinkMuMiMoMcsBackoff0, hoAttOutFddTddIntraEnb=hoAttOutFddTddIntraEnb, macSwitchTestInfoUlPrescheBatConsumpRef=macSwitchTestInfoUlPrescheBatConsumpRef, mroEventRsrpStep=mroEventRsrpStep, dlPATPadynschuSwitch=dlPATPadynschuSwitch, alarmCtrlDSPRecoverSwitch=alarmCtrlDSPRecoverSwitch, erabRelHoProcLcId=erabRelHoProcLcId, topoAntArrayVendorIndex=topoAntArrayVendorIndex, plsfn0Prb97RIPAvg=plsfn0Prb97RIPAvg, equipLongitude=equipLongitude, fileTransType=fileTransType, nbrscheprbdlMcs3=nbrscheprbdlMcs3, signaldataPktNumUl=signaldataPktNumUl, mdtRptPeriod=mdtRptPeriod, macOctDlMassiveMimoSM13=macOctDlMassiveMimoSM13, macSwitchTestInfoTCPDelayOpt=macSwitchTestInfoTCPDelayOpt, atuDLQuitPeriodThreshold=atuDLQuitPeriodThreshold, netAntArrayHalfPowerBeamWidth=netAntArrayHalfPowerBeamWidth, ethPortDataStatEthRackNo=ethPortDataStatEthRackNo, activeRRCRowStatus=activeRRCRowStatus, drbPdcpSduBitLenDlQci8=drbPdcpSduBitLenDlQci8, logFileConfigurationRowStatus=logFileConfigurationRowStatus, plsfn1Prb58RIPAvg=plsfn1Prb58RIPAvg, macPhrIndex38=macPhrIndex38, phyCfgPucchExTendCpFmt1ActiveThred8Ant=phyCfgPucchExTendCpFmt1ActiveThred8Ant, licenseFeatureRowStatus=licenseFeatureRowStatus, phyCfgIotSmartAlarmPartLowRate=phyCfgIotSmartAlarmPartLowRate, ulPwrDeltaFPucchFormat1=ulPwrDeltaFPucchFormat1, macPreset23=macPreset23, carrierTsLocalCarrierIndex=carrierTsLocalCarrierIndex, cacPositionSwitch=cacPositionSwitch, alarmBoxOption=alarmBoxOption, caScellQosPrbActiveThrDl=caScellQosPrbActiveThrDl, macTestSwitchInfoPagingSwitch=macTestSwitchInfoPagingSwitch, almActUploadRegInfoEntry=almActUploadRegInfoEntry, qolEchoMaxDelay=qolEchoMaxDelay, nodeBRRUTimeslotOffset=nodeBRRUTimeslotOffset, phyULMaxNLPRB00=phyULMaxNLPRB00, sfn0avgripTable=sfn0avgripTable, cellCellID=cellCellID, rrcConnReEstabInterEnbScfailDrbCfg=rrcConnReEstabInterEnbScfailDrbCfg, hsdpaHarqNode=hsdpaHarqNode, hsdpaHarqRv64Qam3=hsdpaHarqRv64Qam3, procSlotNo=procSlotNo, cacNgbrThFlag=cacNgbrThFlag, plsfn5Prb59RIPAvg=plsfn5Prb59RIPAvg, phyCfgIterStopThreshold=phyCfgIterStopThreshold, eNBPathShutdownReceiveSwitch=eNBPathShutdownReceiveSwitch, recvRlcCfgTable=recvRlcCfgTable, sjm1WinPwrActThFactor=sjm1WinPwrActThFactor, eNBCellShutdownPriority=eNBCellShutdownPriority, plsfn9Prb38RIPAvg=plsfn9Prb38RIPAvg, raeWeightingFactorsPhase4=raeWeightingFactorsPhase4, fcThresholdDoNothingULSC=fcThresholdDoNothingULSC, caActiveDataThr=caActiveDataThr, phyCfgIrcSwitch=phyCfgIrcSwitch, cacMaxActiveBearNumPerCellTag=cacMaxActiveBearNumPerCellTag, raeWeightingFactorsAmplitude2=raeWeightingFactorsAmplitude2, lbc40FcUeListWithPrbUsageTag=lbc40FcUeListWithPrbUsageTag, pdcpVideoYouKuVideoActive=pdcpVideoYouKuVideoActive, fcDdlbfOnSwitchAttrib=fcDdlbfOnSwitchAttrib, iubSCTPStatOutPkts=iubSCTPStatOutPkts, netRHUBChannelGain=netRHUBChannelGain, licenseCapacity=licenseCapacity, pdcpPreset26=pdcpPreset26, saalConnTxBufferInUseCntr=saalConnTxBufferInUseCntr, erabRelSuccNbrQci5=erabRelSuccNbrQci5, vlanIdTable=vlanIdTable, ofpPortLoopCheckPeriod=ofpPortLoopCheckPeriod, antWeightPhase7=antWeightPhase7, syslogConsoleManagerIndex=syslogConsoleManagerIndex, macPreset17=macPreset17, pcapFilterDscp=pcapFilterDscp, iubOFPortPortId=iubOFPortPortId, plsfn4Prb46RIPAvg=plsfn4Prb46RIPAvg, apS1apRelP8=apS1apRelP8, plPreamblePwrTable=plPreamblePwrTable, softLicenseUlBalanceSwitch=softLicenseUlBalanceSwitch, rrcConnEstabTimeLcId=rrcConnEstabTimeLcId, peripheralPackTable=peripheralPackTable, plsfn8Prb42RIPAvg=plsfn8Prb42RIPAvg, rruDtchPrbAssnMeanDlEnb=rruDtchPrbAssnMeanDlEnb, nbrscheprbdlMcs10=nbrscheprbdlMcs10, cellShedSib5Period=cellShedSib5Period, plsfn7Prb92RIPAvg=plsfn7Prb92RIPAvg, cqiPucch2Index8=cqiPucch2Index8, topoRHUBOfp2AccessOfpPortNo=topoRHUBOfp2AccessOfpPortNo, raeGeneralTable=raeGeneralTable, hoSuccPrepOutInterFreqX2=hoSuccPrepOutInterFreqX2, coolingFanLoadAdjustUpperLimit=coolingFanLoadAdjustUpperLimit, equipLoAutoUpdateSwitch=equipLoAutoUpdateSwitch, macUpAlgorithmNoPhrAdaptOptFlag=macUpAlgorithmNoPhrAdaptOptFlag, nodeBSys=nodeBSys, mroTotalPingPangTh=mroTotalPingPangTh, localCarrierOKRachs=localCarrierOKRachs, peripheralPackPlanRelyVesion=peripheralPackPlanRelyVesion, pdcpCfgId=pdcpCfgId, cellAdjCellRemoveFlag=cellAdjCellRemoveFlag, macschecceallsfn9=macschecceallsfn9, imaGrpNumTxLinksActv=imaGrpNumTxLinksActv, pubAlgorithmParaHSpdInactiveSwitch=pubAlgorithmParaHSpdInactiveSwitch, mroOffsetStep=mroOffsetStep, sigNbrSctpCongestion=sigNbrSctpCongestion, cacPositionDistanceTreshhold=cacPositionDistanceTreshhold, hoOutSuccS=hoOutSuccS, logFileConfigurationIndex=logFileConfigurationIndex, rhubEtherPortSwitch=rhubEtherPortSwitch, intraRATInterCellHOLcId=intraRATInterCellHOLcId, mrRsrpDropRatio=mrRsrpDropRatio, cpuHigLoadThTimeToTrig=cpuHigLoadThTimeToTrig, qolIndex=qolIndex, plsfn8PrbG14RIPMax=plsfn8PrbG14RIPMax, apsFpHrntiIndTimer=apsFpHrntiIndTimer, interRatSrvccLackOfConditionStrategy=interRatSrvccLackOfConditionStrategy, macUpAlgorithmSrsPowerSinrThTarget=macUpAlgorithmSrsPowerSinrThTarget, plsfn7PrbG17RIPMax=plsfn7PrbG17RIPMax, pdcpDlAirSduSendTotalNumberQci5=pdcpDlAirSduSendTotalNumberQci5, macUpMuMiMoMcsBackOff25=macUpMuMiMoMcsBackOff25, macTestSwitchInfoUlSrsSfnMcsDec=macTestSwitchInfoUlSrsSfnMcsDec, equipMaintenceStatePDFSwitch=equipMaintenceStatePDFSwitch, gsmCellSlotNo=gsmCellSlotNo, cellAntWeightPhase4=cellAntWeightPhase4, b2ThresholdpilotStrengthCdma2000=b2ThresholdpilotStrengthCdma2000, macUpAlgorithmUlCqiModifyCrcHalfSfnDiff=macUpAlgorithmUlCqiModifyCrcHalfSfnDiff, timeSlotTypeNeighCell31=timeSlotTypeNeighCell31, scheUEPerTTILcId=scheUEPerTTILcId, pdcpPreset4=pdcpPreset4, equipResetTrigger=equipResetTrigger, transCutOverTrigger=transCutOverTrigger)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", timeSlotTypeNeighCell13=timeSlotTypeNeighCell13, plRiaCharactSeqIDNo=plRiaCharactSeqIDNo, macschecceallsfn5=macschecceallsfn5, cellAdjEutraCellPhyCellId=cellAdjEutraCellPhyCellId, pdcpVideoReserver12VideoActive=pdcpVideoReserver12VideoActive, volteHOFailOutRRCReConn=volteHOFailOutRRCReConn, mrMeasCtrlCdma2000Switch=mrMeasCtrlCdma2000Switch, lbc40FcHoUeChoseStrategy=lbc40FcHoUeChoseStrategy, plsfn0Prb75RIPAvg=plsfn0Prb75RIPAvg, hlSctSourceRackNo=hlSctSourceRackNo, cellCpType=cellCpType, cellGeranFreqExplicitArfcns12=cellGeranFreqExplicitArfcns12, coolingFanEntry=coolingFanEntry, iubIPPathMacPri=iubIPPathMacPri, rrcPreset12=rrcPreset12, imaGroupInfo=imaGroupInfo, amrDlVoipPacketWb2=amrDlVoipPacketWb2, macSwitchTestInfoPdcpAmOptimizeThr=macSwitchTestInfoPdcpAmOptimizeThr, macDownlinkCqiFixVaddSumMin=macDownlinkCqiFixVaddSumMin, cellShedSib3Period=cellShedSib3Period, hsdpaSchedAlgorithm=hsdpaSchedAlgorithm, cellGeranFreqLcId=cellGeranFreqLcId, cellSelectReselect=cellSelectReselect, cellavgripperprbRowStatus=cellavgripperprbRowStatus, rlcPreset39=rlcPreset39, macDownlinkEffAveFactor=macDownlinkEffAveFactor, erabModQoSSuccNbrQci8=erabModQoSSuccNbrQci8, e1LinkImaNeTxState=e1LinkImaNeTxState, lbcUserMeasurementControl=lbcUserMeasurementControl, hoCancelIntraFreqIntraEnbX2HandOverSucc=hoCancelIntraFreqIntraEnbX2HandOverSucc, srbId=srbId, boardTempRowStatus=boardTempRowStatus, plsfn7Prb84RIPAvg=plsfn7Prb84RIPAvg, icicTestMode=icicTestMode, cellUtraFreqCellReselectionPriorityFlag=cellUtraFreqCellReselectionPriorityFlag, phyULMaxNLPRB82=phyULMaxNLPRB82, irathoAttPrepIncUtran=irathoAttPrepIncUtran, plsfn4Prb52RIPAvg=plsfn4Prb52RIPAvg, bsrPeriodicTimer=bsrPeriodicTimer, cellAdjUtraFddCellCellId=cellAdjUtraFddCellCellId, douAdjcHOProToGsmTable=douAdjcHOProToGsmTable, peripheralPackPlanPackName=peripheralPackPlanPackName, macOctDlMassiveMimoSM6=macOctDlMassiveMimoSM6, macUpMuMiMoMcsBackOff9=macUpMuMiMoMcsBackOff9, netLcCellCombineEnhancedSwitch=netLcCellCombineEnhancedSwitch, harqTable=harqTable, macPhrIndex24=macPhrIndex24, cqiLcId=cqiLcId, pdcpSduReceivedNbrLcId=pdcpSduReceivedNbrLcId, pdcpUpPktLossRateDlQci8Enb=pdcpUpPktLossRateDlQci8Enb, configfilePlanDownloadDirectory=configfilePlanDownloadDirectory, tdsNodeBTimeSlotClosedStatPeriod=tdsNodeBTimeSlotClosedStatPeriod, mrMronoueFileSucc=mrMronoueFileSucc, plsfn0Prb01RIPAvg=plsfn0Prb01RIPAvg, timeSlotTypeTable=timeSlotTypeTable, imaGrpNumTxLinks=imaGrpNumTxLinks, plsfn8Prb45RIPAvg=plsfn8Prb45RIPAvg, rlcPreset14=rlcPreset14, cellReselComTCRmaxHyst=cellReselComTCRmaxHyst, lmcVoiceNumTag=lmcVoiceNumTag, raeFileName=raeFileName, hoAttIncFddTddS1=hoAttIncFddTddS1, macUpAlgorithmIoTupMin=macUpAlgorithmIoTupMin, puschTable=puschTable, plsfn5Prb49RIPAvg=plsfn5Prb49RIPAvg, macHarqRetxRatioLcId=macHarqRetxRatioLcId, rrcMeanNbrCoMPDl=rrcMeanNbrCoMPDl, macSwitchTestInfoStartPos=macSwitchTestInfoStartPos, erabAddEstabTimeMean=erabAddEstabTimeMean, mdtFtpServerLoginName=mdtFtpServerLoginName, remoteLmtRoute=remoteLmtRoute, invShelfVersionNumber=invShelfVersionNumber, qolEchoLoss=qolEchoLoss, loggedMdtTaTable=loggedMdtTaTable, apCAndRCheckOfCellTable=apCAndRCheckOfCellTable, loggedMdtCellTable=loggedMdtCellTable, initCalibrationAnt7TxStatus=initCalibrationAnt7TxStatus, phyCfgBFGranuleDoublePort=phyCfgBFGranuleDoublePort, hoFailPrepOutInterFreqX2SourceFail=hoFailPrepOutInterFreqX2SourceFail, plsfn1Prb07RIPAvg=plsfn1Prb07RIPAvg, rrcRbcCaseRelP9=rrcRbcCaseRelP9, topoAntArrayIsRet=topoAntArrayIsRet, phyCfgPucchNormalCpFmt1ActiveThred2Ant=phyCfgPucchNormalCpFmt1ActiveThred2Ant, hoFailPrepIncIntraFreqIntraEnbMaxUeNum=hoFailPrepIncIntraFreqIntraEnbMaxUeNum, topoRRUIrE2AccessIrENo=topoRRUIrE2AccessIrENo, swPackPlanRelyVesion=swPackPlanRelyVesion, hsdpaSpsSchedRowStatus=hsdpaSpsSchedRowStatus, phyULMaxNLPRB13=phyULMaxNLPRB13, macTestSwitchInfoCqiMaxTime=macTestSwitchInfoCqiMaxTime, netBoardRackNo=netBoardRackNo, softwarePackCustomerPlanEntry=softwarePackCustomerPlanEntry, pdcpUlSduAirDropRatioLcId=pdcpUlSduAirDropRatioLcId, emSmokeIndex=emSmokeIndex, tdsNodeBIubSmoothConfigData=tdsNodeBIubSmoothConfigData, pdcpMaxCid=pdcpMaxCid, mroHoTh=mroHoTh, arpStatusEntry=arpStatusEntry, a1MaxReportCell=a1MaxReportCell, plsfn4Prb62RIPAvg=plsfn4Prb62RIPAvg, cellSelectQRxlevMin=cellSelectQRxlevMin, rrcConnReEstabSuccNonSrccell=rrcConnReEstabSuccNonSrccell, topoRRUACPowerOffsetTx=topoRRUACPowerOffsetTx, hoAttIncInterFreqX2=hoAttIncInterFreqX2, selfTransX2SetupSwitch=selfTransX2SetupSwitch, atuHarqMaxUlTx=atuHarqMaxUlTx, pdcpThrpTimeDLQci1=pdcpThrpTimeDLQci1, drbSecondaryRecvRlcCfgId=drbSecondaryRecvRlcCfgId, antUseingWeightAmplitude1=antUseingWeightAmplitude1, atuMrRecoverDelayTime=atuMrRecoverDelayTime, phyULMaxNLPRB20=phyULMaxNLPRB20, hsdpaTsRandomEntry=hsdpaTsRandomEntry, procCoreIndexOnBoard=procCoreIndexOnBoard, equipStartupNotifications=equipStartupNotifications, drbUEActiveDlQci2=drbUEActiveDlQci2, macUpAlgorithmMCSN64QAMDiff=macUpAlgorithmMCSN64QAMDiff, phyULMeanNLPRB44=phyULMeanNLPRB44, cellAcBarList2ForVoice=cellAcBarList2ForVoice, amrUlVoipPacketWb5=amrUlVoipPacketWb5, phyULMeanNLPRB46=phyULMeanNLPRB46, plsfn7Prb62RIPAvg=plsfn7Prb62RIPAvg, cellInterFreqRowStatus=cellInterFreqRowStatus, traceTaskTrcList=traceTaskTrcList, hsdpaSpi13Weight=hsdpaSpi13Weight, phyCfgPlTestPara=phyCfgPlTestPara, macNbrSuccInitTbUl64QamQci1=macNbrSuccInitTbUl64QamQci1, sessiontimeerabQci2=sessiontimeerabQci2, macMumimoRbDlRank1=macMumimoRbDlRank1, cellCompanyVideoReserver20VideoNum=cellCompanyVideoReserver20VideoNum, plsfn5Prb30RIPAvg=plsfn5Prb30RIPAvg, cellGeranFreqExplicitArfcns13=cellGeranFreqExplicitArfcns13, eventA3Table=eventA3Table, fileTypeLimitRowStatus=fileTypeLimitRowStatus, initERABEstabProcLcId=initERABEstabProcLcId, srvccSuccOutGeranQuality=srvccSuccOutGeranQuality, phyULMaxNLPRB31=phyULMaxNLPRB31, macschecceallsfn1=macschecceallsfn1, phyULMaxNLPRB03=phyULMaxNLPRB03, sscTaskEntry=sscTaskEntry, pdcpPreset31=pdcpPreset31, rrcPreset36=rrcPreset36, plsfn0Prb40RIPAvg=plsfn0Prb40RIPAvg, atmTransport=atmTransport, plADIMacTestSwitchInfoUlMaxSrbMcs=plADIMacTestSwitchInfoUlMaxSrbMcs, cacMaxActiveBearNumPerUe=cacMaxActiveBearNumPerUe, plReceivePowerUserIndex13=plReceivePowerUserIndex13, hoAttOutInterEnbX2IntraFreqQci2=hoAttOutInterEnbX2IntraFreqQci2, hoHoPreSuccSV=hoHoPreSuccSV, ulPwrDeltaTXDoffsetPUCCHFormat1R10=ulPwrDeltaTXDoffsetPUCCHFormat1R10, rrcMchCaseRelP9=rrcMchCaseRelP9, plsfn0Prb68RIPAvg=plsfn0Prb68RIPAvg, apHoInteractWithErabSetupInterNBFail=apHoInteractWithErabSetupInterNBFail, sntpSynchronizedSwitch=sntpSynchronizedSwitch, netEthPortShelfNo=netEthPortShelfNo, raSizeofPreamblesGroupA=raSizeofPreamblesGroupA, erabNbrMaxEstabQci2=erabNbrMaxEstabQci2, sfn6avgripLcId=sfn6avgripLcId, timeSlotTypeNeighCell22=timeSlotTypeNeighCell22, raeGroupsTilt=raeGroupsTilt, phrPerformEntry=phrPerformEntry, cellCdma2000ParaCdma1XrttCsfbRegRegZone=cellCdma2000ParaCdma1XrttCsfbRegRegZone, taPerformanceEntry=taPerformanceEntry, baseBandCarrierIsInterface=baseBandCarrierIsInterface, plsfn9Prb21RIPAvg=plsfn9Prb21RIPAvg, volteHOSuccOutInterEnbS1InterFreq=volteHOSuccOutInterEnbS1InterFreq, erabEstabInitFailNbrQci2AlgoNotSupported=erabEstabInitFailNbrQci2AlgoNotSupported, drbPdcpSduTotalDelayDlQci8=drbPdcpSduTotalDelayDlQci8, icicAlgoType=icicAlgoType, ccFpachNumThreshold=ccFpachNumThreshold, macUpMuMiMoMcsBackOff20=macUpMuMiMoMcsBackOff20, s1FlexDefMmeGroupId=s1FlexDefMmeGroupId, plsfn9Prb22RIPAvg=plsfn9Prb22RIPAvg, macTestSwitchInfoMbsfnCfiNum=macTestSwitchInfoMbsfnCfiNum, plReceivePowerIndex24=plReceivePowerIndex24, netRRUManufacturerIndex=netRRUManufacturerIndex, plsfn3Prb28RIPAvg=plsfn3Prb28RIPAvg, cellReselIntraFreqSpeedStateScaleFactorsHigh=cellReselIntraFreqSpeedStateScaleFactorsHigh, atuGoldUeIMSI=atuGoldUeIMSI, emTheftLocation=emTheftLocation, tdsNodeBHsupaBRUStatisticQuotiety=tdsNodeBHsupaBRUStatisticQuotiety, phyULMeanNLPRB23=phyULMeanNLPRB23, cpuUsageStatTable=cpuUsageStatTable, ospMeanCpuUsageRatio=ospMeanCpuUsageRatio, coolingTemperatureSensitivity=coolingTemperatureSensitivity, erabRelEnbNbrQci1ReConfigFail=erabRelEnbNbrQci1ReConfigFail, hsdpaCongestCtrlLcId=hsdpaCongestCtrlLcId, hlTestSwitchUplinkMimoSwitch=hlTestSwitchUplinkMimoSwitch, macDownlinkGapOptimizationDlDataScheCqiFixM=macDownlinkGapOptimizationDlDataScheCqiFixM, peripheralPackPlanUpgradeResult7=peripheralPackPlanUpgradeResult7, omLinkLocalIPAddress=omLinkLocalIPAddress, sctpTimerRTOMax=sctpTimerRTOMax, antUseingWeightPhase0=antUseingWeightPhase0, rrcCpmCaseRelP8=rrcCpmCaseRelP8, plsfn9Prb41RIPAvg=plsfn9Prb41RIPAvg, mroA5Th1BaseLowTh=mroA5Th1BaseLowTh, macschefailtimescclrratio=macschefailtimescclrratio, topoRHUBUUpTime=topoRHUBUUpTime, hsupaTfrcAlgorithmTable=hsupaTfrcAlgorithmTable, alarmNotificationObjects=alarmNotificationObjects, ruePdcpSduBitLenDlQci253=ruePdcpSduBitLenDlQci253, dlCAPowerControl=dlCAPowerControl, rruPrbDlQci1Num=rruPrbDlQci1Num, mrPHRReportDelta=mrPHRReportDelta, licenseFeatureIndex=licenseFeatureIndex, macOctUlMassiveMimoSM4=macOctUlMassiveMimoSM4, hoSuccPrepIncFddTddX2=hoSuccPrepIncFddTddX2, remoteLmtRouteTable=remoteLmtRouteTable, netRRUAccessRackNo=netRRUAccessRackNo, cellAdjEutraCellRowStatus=cellAdjEutraCellRowStatus, cellRruNo=cellRruNo, macTestSwitchLogTypeTrigger=macTestSwitchLogTypeTrigger, plsfn2Prb69RIPAvg=plsfn2Prb69RIPAvg, dlCompConfigSwitch=dlCompConfigSwitch, topoRRUAntSettingEntry=topoRRUAntSettingEntry, hoFailPrepIncIntraFreqX2CellBlock=hoFailPrepIncIntraFreqX2CellBlock, transactionControl=transactionControl, pcapFilterIpaddress1=pcapFilterIpaddress1, rruPrbDlQci3Num=rruPrbDlQci3Num, cellAdjCellCdmaPhyCellId=cellAdjCellCdmaPhyCellId, cellAntWeightPhase13=cellAntWeightPhase13, erabEstabInitFailNbrQci2Mme=erabEstabInitFailNbrQci2Mme, coolingPolicy=coolingPolicy, plTransPowerRowStatus=plTransPowerRowStatus, emEquipmentTable=emEquipmentTable, timeManagement=timeManagement, erabNbrMeanEstabQci6=erabNbrMeanEstabQci6, plsfn6Prb62RIPAvg=plsfn6Prb62RIPAvg, macNbrRbUlMassiveMimoSM8=macNbrRbUlMassiveMimoSM8, plsfn0Prb71RIPAvg=plsfn0Prb71RIPAvg, macSwitchTestInfoRTPLossThreshold=macSwitchTestInfoRTPLossThreshold, cellAdjRelationEntry=cellAdjRelationEntry, macVideoRevBitLenSucUl=macVideoRevBitLenSucUl, cellReselIntraFreqIntraSearch=cellReselIntraFreqIntraSearch, alarmNotiMaintenanceStatus=alarmNotiMaintenanceStatus, pmTaskTable=pmTaskTable, rrcLpmCaseRelP10=rrcLpmCaseRelP10, macDownlinkMuMiMoMcsBackoff11=macDownlinkMuMiMoMcsBackoff11, drxQciTable=drxQciTable, hsdpaSpi16Weight=hsdpaSpi16Weight, atuVolteRecDelayTime=atuVolteRecDelayTime, topoSetRRUPortWithAntennaRowStatus=topoSetRRUPortWithAntennaRowStatus, equipDualChannelRRUCarrierNum=equipDualChannelRRUCarrierNum, hoOutFailTooEarly=hoOutFailTooEarly, plsfn8Prb76RIPAvg=plsfn8Prb76RIPAvg, ethernetOAMSendLinkState=ethernetOAMSendLinkState, cellShedSib2Period=cellShedSib2Period, hsdpaSFCBEHighDelta=hsdpaSFCBEHighDelta, macSwitchTestInfoAutoTransLog=macSwitchTestInfoAutoTransLog, rruPrbUlQci3Num=rruPrbUlQci3Num, rrcCpmCaseRelP4=rrcCpmCaseRelP4, irathoFailPrepOutUtranTgtEpcEnbSystemFailure=irathoFailPrepOutUtranTgtEpcEnbSystemFailure, b1RptInterval=b1RptInterval, configFileSaveTime=configFileSaveTime, phyULMeanNLPRB10=phyULMeanNLPRB10, s1FlexDefMmeCode=s1FlexDefMmeCode)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", netAntArrayTdsInfoValidFlag=netAntArrayTdsInfoValidFlag, iocIndex=iocIndex, puschRrSeqHopFlag=puschRrSeqHopFlag, initCalibrationAnt4TxStatus=initCalibrationAnt4TxStatus, smallPacketBSREnlargeCoeff=smallPacketBSREnlargeCoeff, pdcpVideoReserver5VideoActive=pdcpVideoReserver5VideoActive, eNBPathRecoverDelayTime=eNBPathRecoverDelayTime, netRETAntRCURowStatus=netRETAntRCURowStatus, plRssiAvgC17=plRssiAvgC17, managerOnlineState=managerOnlineState, pdcpVideoKeyWordsVendor=pdcpVideoKeyWordsVendor, lbcAdjCellDlHardwardTh3=lbcAdjCellDlHardwardTh3, nbrscheprbulMcs11=nbrscheprbulMcs11, raeInstalledMechanicalTilt=raeInstalledMechanicalTilt, ofpPortShelfNo=ofpPortShelfNo, timer=timer, topoRRUPortBandCapabTable=topoRRUPortBandCapabTable, cellAntWeightPhase2=cellAntWeightPhase2, equipDualChannelBBUCarrierNum=equipDualChannelBBUCarrierNum, mroPingPangHoTh=mroPingPangHoTh, localCarrierInterfaceBaseBandCarrierNo=localCarrierInterfaceBaseBandCarrierNo, rhubOpticalTransceiverTable=rhubOpticalTransceiverTable, volteHOCancelOutInterEnbX2=volteHOCancelOutInterEnbX2, securityCommSetting=securityCommSetting, netRETAntRCUNo=netRETAntRCUNo, volteHOFailOutExecTimeOut=volteHOFailOutExecTimeOut, volteSchedulingLcId=volteSchedulingLcId, netEthPortIndexOnHub=netEthPortIndexOnHub, trafficCategoryQCI=trafficCategoryQCI, erabRelEnbNbrRedirectionto1xRTT=erabRelEnbNbrRedirectionto1xRTT, macTestSwitchInfoScramblePeriod=macTestSwitchInfoScramblePeriod, hlTestSwitchVolteUIProportion=hlTestSwitchVolteUIProportion, euePeriodRptPurpose=euePeriodRptPurpose, plsfn9Prb24RIPAvg=plsfn9Prb24RIPAvg, erabModQoSFailNbrInvalidQosCombination=erabModQoSFailNbrInvalidQosCombination, cellGeranFreqExplicitArfcns14=cellGeranFreqExplicitArfcns14, localCarrierPrimarySecondery=localCarrierPrimarySecondery, pdcpBbuSourceLcId=pdcpBbuSourceLcId, macTestSwitchInfoMACIcicEdgeUserCriterion=macTestSwitchInfoMACIcicEdgeUserCriterion, cellInterRatTreselectionUtra=cellInterRatTreselectionUtra, icicRowStatus=icicRowStatus, erabRelSuccNbrQci7=erabRelSuccNbrQci7, topoRRUBandCap5MCarrierNum=topoRRUBandCap5MCarrierNum, invAntArrayModel=invAntArrayModel, plsfn3Prb42RIPAvg=plsfn3Prb42RIPAvg, plsfn1Prb49RIPAvg=plsfn1Prb49RIPAvg, hsupaAlgorithmNode=hsupaAlgorithmNode, plsfn0Prb91RIPAvg=plsfn0Prb91RIPAvg, ueImsMatchConfigBandCapa=ueImsMatchConfigBandCapa, hoFailOutIntraFreqInterCellIntraEnbPerEncFail=hoFailOutIntraFreqInterCellIntraEnbPerEncFail, macSwitchInfoUlHoppingFlag=macSwitchInfoUlHoppingFlag, videoPerfOfMacRowStatus=videoPerfOfMacRowStatus, rruPrbUlTotalNum=rruPrbUlTotalNum, adjeNBMmeGroupId10=adjeNBMmeGroupId10, tbSRBInitDlQpsk=tbSRBInitDlQpsk, plsfn5Prb94RIPAvg=plsfn5Prb94RIPAvg, cellReselComNCRH=cellReselComNCRH, a3MeasPurpose=a3MeasPurpose, macNbrTbUlMassiveMimoSM6=macNbrTbUlMassiveMimoSM6, hoFailOutInterFreqInterCellIntraEnbTarExcNoRsp=hoFailOutInterFreqInterCellIntraEnbTarExcNoRsp, cellAdjUtraFddCellRncId=cellAdjUtraFddCellRncId, phyULMeanNLPRB66=phyULMeanNLPRB66, phyULMaxNLPRB89=phyULMaxNLPRB89, raMessagePowerOffsetGroupB=raMessagePowerOffsetGroupB, coolingFanShelfNo=coolingFanShelfNo, ftpServerAlarmDirectory=ftpServerAlarmDirectory, airCondWarmingStartTemperature=airCondWarmingStartTemperature, eNBEnergyConservDelayTime=eNBEnergyConservDelayTime, macNbrTbDlMassiveMimoSM11=macNbrTbDlMassiveMimoSM11, b1MeasQuantityUtraTdd=b1MeasQuantityUtraTdd, phyULMaxNLPRB18=phyULMaxNLPRB18, volteHOAttOutInterEnbX2InterFreqN=volteHOAttOutInterEnbX2InterFreqN, erabNormRelEnbNbrQci1=erabNormRelEnbNbrQci1, pdcpSduSendTotalDateLenQci2=pdcpSduSendTotalDateLenQci2, cellNetParaEntry=cellNetParaEntry, raeGroupsAntennaBearing=raeGroupsAntennaBearing, baseBandCarrierTxPath4CalFactorQ=baseBandCarrierTxPath4CalFactorQ, cellAdjGeranCellRowStatus=cellAdjGeranCellRowStatus, cellCdma2000ParaCdma1XrttCsfbRegMultiNidInd=cellCdma2000ParaCdma1XrttCsfbRegMultiNidInd, macTestSwitchSrbDlScheNumSub4=macTestSwitchSrbDlScheNumSub4, phyULMeanNLPRB73=phyULMeanNLPRB73, cellAdjEutraCellPlmnMnc=cellAdjEutraCellPlmnMnc, eqptMacOctRecieved=eqptMacOctRecieved, clkSrcIndex=clkSrcIndex, plsfn3Prb43RIPAvg=plsfn3Prb43RIPAvg, erabInitEstabTimeRowStatus=erabInitEstabTimeRowStatus, cqiPucch2Index0=cqiPucch2Index0, baseBandCarrierTxPath1CalFactorI=baseBandCarrierTxPath1CalFactorI, pdcpUlAirSduDropTotalNumberQci2=pdcpUlAirSduDropTotalNumberQci2, plsfn9Prb26RIPAvg=plsfn9Prb26RIPAvg, rrcConnReEstabFailPerEncodeFail=rrcConnReEstabFailPerEncodeFail, macPhrIndex6=macPhrIndex6, plsfn1Prb12RIPAvg=plsfn1Prb12RIPAvg, hoFailIncIntraFreqInterCellIntraEnbSecFail=hoFailIncIntraFreqInterCellIntraEnbSecFail, pdcchCceDlMeanLcId=pdcchCceDlMeanLcId, dlCAPwrRowStatus=dlCAPwrRowStatus, radioCarrierIFUNo=radioCarrierIFUNo, atuUeIMSI=atuUeIMSI, handOverInterWithERABRowStatus=handOverInterWithERABRowStatus, plsfn1Prb25RIPAvg=plsfn1Prb25RIPAvg, rrcCAndRCheckOfCellLcId=rrcCAndRCheckOfCellLcId, topoRHUBIsNetMatched=topoRHUBIsNetMatched, rruOptTransVcc=rruOptTransVcc, hlTestSwitchApSrsPeriodicity=hlTestSwitchApSrsPeriodicity, macUpAlgorithmPucchRsrpLowThr=macUpAlgorithmPucchRsrpLowThr, capacityAvailableDl=capacityAvailableDl, plsfn5Prb62RIPAvg=plsfn5Prb62RIPAvg, saalConnTxDiscardedSdus=saalConnTxDiscardedSdus, plsfn4Prb32RIPAvg=plsfn4Prb32RIPAvg, macPreset29=macPreset29, macMumimoThrpTimeUlRank2=macMumimoThrpTimeUlRank2, macDownAlgorithmVolteMaxSchMcsTag=macDownAlgorithmVolteMaxSchMcsTag, topoRRUDLMaxTimeDelayCompensation=topoRRUDLMaxTimeDelayCompensation, puschEntry=puschEntry, plsfn4Prb11RIPAvg=plsfn4Prb11RIPAvg, pdcpDlAirSduDropTotalNumberQci2=pdcpDlAirSduDropTotalNumberQci2, nbrscheprbulMcs13=nbrscheprbulMcs13, adjeNBGlobalId=adjeNBGlobalId, fcBfAlgorithmType=fcBfAlgorithmType, pdcpSduSendTotalDateLenQci8=pdcpSduSendTotalDateLenQci8, fcHichDpchOffsetTxaUser3=fcHichDpchOffsetTxaUser3, macNbrErrTbDlMassiveMimoSM6=macNbrErrTbDlMassiveMimoSM6, phyULMeanNLPRB26=phyULMeanNLPRB26, volteHOAttOutInterEnbS1InterFreqN=volteHOAttOutInterEnbS1InterFreqN, localCarrierERRRachs=localCarrierERRRachs, plsfn1Prb82RIPAvg=plsfn1Prb82RIPAvg, macPhrIndex39=macPhrIndex39, managerEntry=managerEntry, topoRRUOfp1AccessLinePosition=topoRRUOfp1AccessLinePosition, hoFailPrepOutIntraFreqS1NoRsp=hoFailPrepOutIntraFreqS1NoRsp, topoRRUULPowerEntry=topoRRUULPowerEntry, hsLowSpeedUserHoSuccOut=hsLowSpeedUserHoSuccOut, netS1IfSctpIndex=netS1IfSctpIndex, hoSuccPrepOutIntraFreqX2PartialHandover=hoSuccPrepOutIntraFreqX2PartialHandover, topoRRUClockState=topoRRUClockState, eutraAdjCellMeasTable=eutraAdjCellMeasTable, hlTestSwitchSrsShortPeriodicity=hlTestSwitchSrsShortPeriodicity, atuByIpAddr6=atuByIpAddr6, macTestSwitchInfoPucch1bcsPeakFlag=macTestSwitchInfoPucch1bcsPeakFlag, pdcpPreset15=pdcpPreset15, rbSuccEstabQci4=rbSuccEstabQci4, rrcCAConfigNbrPCellDl2CC=rrcCAConfigNbrPCellDl2CC, pdcpUpPktDiscardRateDlQci6Enb=pdcpUpPktDiscardRateDlQci6Enb, plUsrLogPucchPlLogFlag=plUsrLogPucchPlLogFlag, pathRnc2NbClr=pathRnc2NbClr, plsfn2Prb28RIPAvg=plsfn2Prb28RIPAvg, plsfn5Prb12RIPAvg=plsfn5Prb12RIPAvg, plsfn3Prb65RIPAvg=plsfn3Prb65RIPAvg, erabEstabInitFailNbrTransferSyntaxError=erabEstabInitFailNbrTransferSyntaxError, rlcPreset33=rlcPreset33, pdcpUpPktLossRateUlQci1Enb=pdcpUpPktLossRateUlQci1Enb, rrcPresetPerformanceRowStatus=rrcPresetPerformanceRowStatus, syslogMsgSends=syslogMsgSends, plsfn2Prb18RIPAvg=plsfn2Prb18RIPAvg, twampLinkIndex=twampLinkIndex, erabEstabInitFailNbrUnspecifiedFailure=erabEstabInitFailNbrUnspecifiedFailure, sfn4avgripRowStatus=sfn4avgripRowStatus, erabModQoSSuccNbrQci9=erabModQoSSuccNbrQci9, hoFailPrepIncIntraFreqIntraEnbHORestrictList=hoFailPrepIncIntraFreqIntraEnbHORestrictList, remoteClkModuleIndex=remoteClkModuleIndex, hoSuccOutInterFreqService=hoSuccOutInterFreqService, contextAttReleNBNbrUENotAvailableforPS=contextAttReleNBNbrUENotAvailableforPS, timerWaitS1Rsp=timerWaitS1Rsp, topoRRUPortBandCapabEntry=topoRRUPortBandCapabEntry, cellUtraFreqThreshxHigh=cellUtraFreqThreshxHigh, lcAcBarTimeForSignal1=lcAcBarTimeForSignal1, plsfn0Prb64RIPAvg=plsfn0Prb64RIPAvg, rlcPreset37=rlcPreset37, atuGoldUeIMSI15=atuGoldUeIMSI15, plsfn7Prb65RIPAvg=plsfn7Prb65RIPAvg, fileAutoUpftpServerLoginName=fileAutoUpftpServerLoginName, puschNsb=puschNsb, contextFailInitalSetupNbrInvalidQosComb=contextFailInitalSetupNbrInvalidQosComb, pucchCellSrPucchNum=pucchCellSrPucchNum, highSpeedStatisticRowStatus=highSpeedStatisticRowStatus, plsfn8Prb51RIPAvg=plsfn8Prb51RIPAvg, anrNotiLocalCellRsrp=anrNotiLocalCellRsrp, erabEstabAddFailNbrQci1Mme=erabEstabAddFailNbrQci1Mme, swPackPlanUpgradeResult=swPackPlanUpgradeResult, plsfn0Prb88RIPAvg=plsfn0Prb88RIPAvg, dlCAPowerControEntry=dlCAPowerControEntry, hlTestSwitchA1RSRP=hlTestSwitchA1RSRP, rrcCAConfigNbrPCellUl2CC=rrcCAConfigNbrPCellUl2CC, daughterBoardDateOfManufacture=daughterBoardDateOfManufacture, rrcFailConnReconfigPucch=rrcFailConnReconfigPucch, plsfn8Prb48RIPAvg=plsfn8Prb48RIPAvg, eventGeneralEventResult=eventGeneralEventResult, phyCfgPucchSrThrePara=phyCfgPucchSrThrePara, hoFailOutS1Prep=hoFailOutS1Prep, s1HandOverProcInterEnbEntry=s1HandOverProcInterEnbEntry, heatExOuterFanTempOffset=heatExOuterFanTempOffset, cellNetPara=cellNetPara, remoteClkOpticalModuleTemperature=remoteClkOpticalModuleTemperature, scheUEPerTTITable=scheUEPerTTITable, s1sigConnEstabSucc=s1sigConnEstabSucc, cellIotNotiTime=cellIotNotiTime, plsfn7Prb54RIPAvg=plsfn7Prb54RIPAvg, erabModQoSAttNbrQci6=erabModQoSAttNbrQci6, peripheralPackPlanUpgradeResult4=peripheralPackPlanUpgradeResult4, erabNbrReqRelEnbQci1=erabNbrReqRelEnbQci1, initERABEstabProcRowStatus=initERABEstabProcRowStatus, raeFileTable=raeFileTable, boardStorageDevOnBoard=boardStorageDevOnBoard, plsfn0Prb31RIPAvg=plsfn0Prb31RIPAvg, topoRRUULMaxTimeDelayCompensation=topoRRUULMaxTimeDelayCompensation, alarmNotiReportSourceObject=alarmNotiReportSourceObject, hoFailOutHoExeTimeOut=hoFailOutHoExeTimeOut, netSetRRUPortNo=netSetRRUPortNo, plsfn5Prb04RIPAvg=plsfn5Prb04RIPAvg, equipStartupNotificationNode=equipStartupNotificationNode, macUpAlgorithmMcsBackforSimuPuxch=macUpAlgorithmMcsBackforSimuPuxch, cellAdjCellNetworkType=cellAdjCellNetworkType, srvccOutExecPenalty=srvccOutExecPenalty, nbrschetimesulMcs14=nbrschetimesulMcs14, plsfn8Prb91RIPAvg=plsfn8Prb91RIPAvg, lbcUlS1TnlTh2=lbcUlS1TnlTh2, saalConnRxBgnPdus=saalConnRxBgnPdus, ipoaChRnc2NbCdvt=ipoaChRnc2NbCdvt, pathNb2RncScrMcr=pathNb2RncScrMcr, raeWeightFactorsBeamwidthOperatBand=raeWeightFactorsBeamwidthOperatBand, topoRRUVSWR2ndThreshold=topoRRUVSWR2ndThreshold, pdcpVideoMatchMigu=pdcpVideoMatchMigu, cellUtraFreqCellReselectionPriority=cellUtraFreqCellReselectionPriority, macSwitchTestInfoRohcFBNackThreshold=macSwitchTestInfoRohcFBNackThreshold, softLicenseDlThroughput=softLicenseDlThroughput, tdsNodeBBRUStatisticQuotiety=tdsNodeBBRUStatisticQuotiety, rrcCAConfigMaxNbrPCellDl2CC=rrcCAConfigMaxNbrPCellDl2CC, iubImaGrpIsIpoa=iubImaGrpIsIpoa, cellReselectCommonTable=cellReselectCommonTable, tdsNetLcRowStatus=tdsNetLcRowStatus, cellInterFreqIndex=cellInterFreqIndex, rrcConnReEstabProcTable=rrcConnReEstabProcTable, phyULMeanNLPRB50=phyULMeanNLPRB50, netS1InterfaceTable=netS1InterfaceTable, mibAuthorizationMIBMaxAccess=mibAuthorizationMIBMaxAccess, mmeCfgMmeCode=mmeCfgMmeCode, pcapFilterIpType=pcapFilterIpType, hsupaSpsSchedActiveTransPktTh=hsupaSpsSchedActiveTransPktTh, lbcAdjCellBlanceRecoverAlgoType=lbcAdjCellBlanceRecoverAlgoType, plsfn3Prb96RIPAvg=plsfn3Prb96RIPAvg, erabInitEstabTimeTable=erabInitEstabTimeTable, topoRHUBGsmCellInputPwr=topoRHUBGsmCellInputPwr, plsfn1Prb48RIPAvg=plsfn1Prb48RIPAvg, ethPortDownUseRatio=ethPortDownUseRatio, sntpConnectState=sntpConnectState, netSetRRUPortSubtoLocalCellId2=netSetRRUPortSubtoLocalCellId2, tdsNodeBSysUserTraceLogSwitch=tdsNodeBSysUserTraceLogSwitch, pdcpUlAirSduDropTotalNumberQci3=pdcpUlAirSduDropTotalNumberQci3, retAntRCUHwVersion=retAntRCUHwVersion, plsfn5Prb41RIPAvg=plsfn5Prb41RIPAvg, baseBandCarrierTable=baseBandCarrierTable, saalConnTxBufferInUseGauge=saalConnTxBufferInUseGauge, caDectWindow=caDectWindow, rruOptTransBias=rruOptTransBias)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", erabRelHoProcTable=erabRelHoProcTable, netRRURootAlarmType3=netRRURootAlarmType3, pathRnc2NbScrMcr=pathRnc2NbScrMcr, sdCfgLcId=sdCfgLcId, syslogConsoleSwitch=syslogConsoleSwitch, ueAccNumRowStatus=ueAccNumRowStatus, tdExitCmdSwitch=tdExitCmdSwitch, hoHoPreAttOMC=hoHoPreAttOMC, saalConnTxUdPdus=saalConnTxUdPdus, alarmInfo=alarmInfo, macDownlinkVolteInitBler=macDownlinkVolteInitBler, sctpTimerPathMaxRetrans=sctpTimerPathMaxRetrans, hoFailIncInterFreqInterCellIntraEnbSrs=hoFailIncInterFreqInterCellIntraEnbSrs, hsdpaCQIInitBLER=hsdpaCQIInitBLER, caScellActiveRlcOveloadThr=caScellActiveRlcOveloadThr, ulPwrPuschPowerSwitch=ulPwrPuschPowerSwitch, macDownlinkEff12Tm3=macDownlinkEff12Tm3, plsfn3Prb51RIPAvg=plsfn3Prb51RIPAvg, initCalibrationRRUNo=initCalibrationRRUNo, macPrbUtilizationCCRowStatus=macPrbUtilizationCCRowStatus, macDownlinkCqi12SfbcTm4=macDownlinkCqi12SfbcTm4, erabNbrTable=erabNbrTable, iocEntry=iocEntry, radioCarrierBaseBandCarrierNo=radioCarrierBaseBandCarrierNo, sctpStreamSctpIndex=sctpStreamSctpIndex, mrPLRULThreshold=mrPLRULThreshold, pdcpSduDlDropRatioTable=pdcpSduDlDropRatioTable, fileAutoUpInetAddr=fileAutoUpInetAddr, plsfn2Prb47RIPAvg=plsfn2Prb47RIPAvg, macDownlinkBler122=macDownlinkBler122, irathoFailPrepIncGprsInstFailure=irathoFailPrepIncGprsInstFailure, lcAcProbFactorForMoc1=lcAcProbFactorForMoc1, rrcPreset7=rrcPreset7, dlCAPowerControTable=dlCAPowerControTable, cellAntWeightAmplitude16=cellAntWeightAmplitude16, hsdpaHarqRv16Qam7=hsdpaHarqRv16Qam7, macCellCompThrpDl=macCellCompThrpDl, plsfn6Prb20RIPAvg=plsfn6Prb20RIPAvg, fcPuchSdmaIsolation=fcPuchSdmaIsolation, cellCdmaBandClassInfoFreqType=cellCdmaBandClassInfoFreqType, erabEstabAddAttNbrQci5=erabEstabAddAttNbrQci5, hsdpaTsRandomLcId=hsdpaTsRandomLcId, plsfn7Prb22RIPAvg=plsfn7Prb22RIPAvg, macPreset2=macPreset2, macCaActiveMacThruSCellDl=macCaActiveMacThruSCellDl, tbSRBSuccInitUl16QAM=tbSRBSuccInitUl16QAM, hsdpaSpi2Weight=hsdpaSpi2Weight, plsfn7Prb36RIPAvg=plsfn7Prb36RIPAvg, nbrschetimesdlMcs30=nbrschetimesdlMcs30, macAlgorithmNode=macAlgorithmNode, srvccLcId=srvccLcId, plsfn8Prb44RIPAvg=plsfn8Prb44RIPAvg, srsCycshift7=srsCycshift7, atuHoBasedVolteRecNum=atuHoBasedVolteRecNum, localCarrierRxNACKNum=localCarrierRxNACKNum, hoFailPrepIncInterFreqX2SecurityFailure=hoFailPrepIncInterFreqX2SecurityFailure, swPackCustRunningVersion=swPackCustRunningVersion, plsfn9Prb48RIPAvg=plsfn9Prb48RIPAvg, hoFailPrepIncIntraFreqX2MaxUeNum=hoFailPrepIncIntraFreqX2MaxUeNum, amrDlVoipPacketWb0=amrDlVoipPacketWb0, hlTestSwitchVipDRXSwitch=hlTestSwitchVipDRXSwitch, plsfn5Prb80RIPAvg=plsfn5Prb80RIPAvg, srsCycshift3=srsCycshift3, scheTimesAcoordingMCSLcId=scheTimesAcoordingMCSLcId, plsfn0Prb34RIPAvg=plsfn0Prb34RIPAvg, hoFailIncIntraFreqInterCellIntraEnbPrb=hoFailIncIntraFreqInterCellIntraEnbPrb, phyULMeanNLPRB51=phyULMeanNLPRB51, measurementReport=measurementReport, erabEstabInitAttNbrQci4=erabEstabInitAttNbrQci4, rruCalcPathTxStatus=rruCalcPathTxStatus, plsfn9Prb82RIPAvg=plsfn9Prb82RIPAvg, hoOutFailMLBToWrongCellType1=hoOutFailMLBToWrongCellType1, plsfn5Prb09RIPAvg=plsfn5Prb09RIPAvg, eueMeasCellTimeHystNormal=eueMeasCellTimeHystNormal, cellReselIntraFreqSpeedStateScaleFactorsFlag=cellReselIntraFreqSpeedStateScaleFactorsFlag, e1LinkRxLid=e1LinkRxLid, rrcPreset23=rrcPreset23, plsfn5Prb88RIPAvg=plsfn5Prb88RIPAvg, plUsrLogFlag=plUsrLogFlag, topoSetRRUPortSubtoAntGrpID3=topoSetRRUPortSubtoAntGrpID3, hlGlobalTestMaxUeCell=hlGlobalTestMaxUeCell, irathoFailPrepOutGprsTgtEpcEnbSystemFailure=irathoFailPrepOutGprsTgtEpcEnbSystemFailure, raeZipFileName=raeZipFileName, macTestSwitchInfoMsg2HoPdcchPowerIncrease=macTestSwitchInfoMsg2HoPdcchPowerIncrease, macPrbUtilizationSITable=macPrbUtilizationSITable, pdcpSduDiscTotalDataNumQci4=pdcpSduDiscTotalDataNumQci4, icicOiThresholed2=icicOiThresholed2, hsdpaHarqMaxTxNum=hsdpaHarqMaxTxNum, netLcAppScene=netLcAppScene, lmcMlbParaBackoffTag=lmcMlbParaBackoffTag, periodCalibrationRxPeakPosShift=periodCalibrationRxPeakPosShift, erabRelAttNbrQci2=erabRelAttNbrQci2, rrcConnReEstabFailDrbIdAllocFail=rrcConnReEstabFailDrbIdAllocFail, cellLccId=cellLccId, mdtLoggedMDTTraceAreaCfgType=mdtLoggedMDTTraceAreaCfgType, pwdNoRepeatNum=pwdNoRepeatNum, fileTransNextAvailableIDForOthers=fileTransNextAvailableIDForOthers, apHoInteractWithEraSetupIntraNB=apHoInteractWithEraSetupIntraNB, reservedENBL1Para5=reservedENBL1Para5, rrcAttConnEstabMoVolte=rrcAttConnEstabMoVolte, rruPreambleContentionTimesGroupA=rruPreambleContentionTimesGroupA, netRRURootAlarmTable=netRRURootAlarmTable, hlTestSwitchVolteAppointFre=hlTestSwitchVolteAppointFre, saalConnTable=saalConnTable, gpsReceiverResetTrigger=gpsReceiverResetTrigger, rbSuccEstabQci2=rbSuccEstabQci2, rrcFailConnEstabMaxUeNum=rrcFailConnEstabMaxUeNum, snmpResponseInformRetryTimer=snmpResponseInformRetryTimer, plsfn9Prb81RIPAvg=plsfn9Prb81RIPAvg, erabModProcTable=erabModProcTable, hlTestSwitchDlPrbLenForEdgeUe=hlTestSwitchDlPrbLenForEdgeUe, pdcpVideoKeyWordsTable=pdcpVideoKeyWordsTable, rrcAttConnReconfigResReclaim=rrcAttConnReconfigResReclaim, cellSchedulingEntry=cellSchedulingEntry, atuAdjCellPrbLimitSwitch=atuAdjCellPrbLimitSwitch, douAdjcHOProToGsmRowStatus=douAdjcHOProToGsmRowStatus, plsfn3Prb45RIPAvg=plsfn3Prb45RIPAvg, topoRHUBFaultStatus=topoRHUBFaultStatus, topologyRHUBEntry=topologyRHUBEntry, debugUploadSlotNo=debugUploadSlotNo, puschRowStatus=puschRowStatus, contextFailModNbrAlgoNotSupported=contextFailModNbrAlgoNotSupported, ofpPortLoopBackTrigger=ofpPortLoopBackTrigger, alarmCauseEntry=alarmCauseEntry, adjeNBMmeGroupId11=adjeNBMmeGroupId11, netRHUBOfp2AccessLinePosition=netRHUBOfp2AccessLinePosition, macTestSwitchInfoUlPdbScheFlag=macTestSwitchInfoUlPdbScheFlag, rrcRecoverCrsPowerVipIn=rrcRecoverCrsPowerVipIn, phrPerformTable=phrPerformTable, closeBaseBandCarEndIndex=closeBaseBandCarEndIndex, cellCACellIndex=cellCACellIndex, phyCfgPucchAckThrePara=phyCfgPucchAckThrePara, saal=saal, a1TimetoTrig=a1TimetoTrig, hoInterSysVolteLBCOutAtt=hoInterSysVolteLBCOutAtt, saalConnIsMaster=saalConnIsMaster, antUseingWeightPhase3=antUseingWeightPhase3, baseBandwidthSwType=baseBandwidthSwType, phyULMaxNLPRB12=phyULMaxNLPRB12, outPutManagement=outPutManagement, nbrscheprbdlMcs27=nbrscheprbdlMcs27, plsfn4Prb61RIPAvg=plsfn4Prb61RIPAvg, macUpAlgorithmRiSwitch=macUpAlgorithmRiSwitch, plsfn2Prb91RIPAvg=plsfn2Prb91RIPAvg, phyNbrCqi2=phyNbrCqi2, mroNotificationNode=mroNotificationNode, nbrscheprbulMcs23=nbrscheprbulMcs23, macUpAlgorithmLcId=macUpAlgorithmLcId, cellAccessRestrict=cellAccessRestrict, b1MaxReportCell=b1MaxReportCell, plRiaCellRptLcId=plRiaCellRptLcId, rbSuccEstabQci9=rbSuccEstabQci9, routeRelation=routeRelation, reservedENBL1Para3=reservedENBL1Para3, reverseOperationIndex=reverseOperationIndex, pdcpPreset12=pdcpPreset12, hsdpaSFCtrlLcId=hsdpaSFCtrlLcId, pagingProcLcId=pagingProcLcId, cellGeranFreqEntry=cellGeranFreqEntry, macNbrErrTbUlMassiveMimoSM3=macNbrErrTbUlMassiveMimoSM3, tdsSysGpsSnrThreshold=tdsSysGpsSnrThreshold, cellShareNetOperatorIndex=cellShareNetOperatorIndex, hsdpaSpiTcWinSize=hsdpaSpiTcWinSize, pdcpUpPktDelayDlQci3Enb=pdcpUpPktDelayDlQci3Enb, erabRelEnbNbrQci1PdcpNotRcvSn=erabRelEnbNbrQci1PdcpNotRcvSn, hsdpaPFInitPF=hsdpaPFInitPF, macDownlinkMuMiMoMcsBackoff13=macDownlinkMuMiMoMcsBackoff13, anteTransmissionMode=anteTransmissionMode, sessionTimeTable=sessionTimeTable, rruPathNo=rruPathNo, emWaterTable=emWaterTable, euePeriodRptTrigQuantity=euePeriodRptTrigQuantity, rruCarrierTable=rruCarrierTable, plsfn5Prb55RIPAvg=plsfn5Prb55RIPAvg, rrcAttConnReconfigHandOverIntraCell=rrcAttConnReconfigHandOverIntraCell, netRRURootAlarmType6=netRRURootAlarmType6, pdcpSduSendTotalDataNumQci3=pdcpSduSendTotalDataNumQci3, rrcActiveNbrPCellDl2CC=rrcActiveNbrPCellDl2CC, macHarqRetxRatioRowStatus=macHarqRetxRatioRowStatus, saalConnId=saalConnId, rruOptTransS9umKmLen=rruOptTransS9umKmLen, boardStartupFailureReason=boardStartupFailureReason, nbrscheprbdlMcs2=nbrscheprbdlMcs2, s1HandOverProcInterEnbRowStatus=s1HandOverProcInterEnbRowStatus, cellShareNetTac=cellShareNetTac, qolLocalIpAddrIndex=qolLocalIpAddrIndex, hsdpaSFCUuRateType=hsdpaSFCUuRateType, interRatPsHandleSwitch=interRatPsHandleSwitch, cellAdjUtraTddCellIndex=cellAdjUtraTddCellIndex, erabModQoSFailNbrTransferSyntaxError=erabModQoSFailNbrTransferSyntaxError, irathoSuccOutGprs=irathoSuccOutGprs, macTestSwitchInfoDlCchCfiNumbpoi=macTestSwitchInfoDlCchCfiNumbpoi, iubImaGrpActiveStatus=iubImaGrpActiveStatus, hsdpaCongestCtrlAvoidTimerTh=hsdpaCongestCtrlAvoidTimerTh, raeGeneralHighFreqBuf=raeGeneralHighFreqBuf, bbuPowerOffScheduleStartTime=bbuPowerOffScheduleStartTime, nbrscheprbulMcs26=nbrscheprbulMcs26, sscStartTime2=sscStartTime2, plsfn4Prb54RIPAvg=plsfn4Prb54RIPAvg, ulPwrFilterCoeff=ulPwrFilterCoeff, acCfgAvePeakposShiftThreshold=acCfgAvePeakposShiftThreshold, erabEstabSuccNbrQci253=erabEstabSuccNbrQci253, cmdAuthorizationCMDOID=cmdAuthorizationCMDOID, mroRsrqTh=mroRsrqTh, anteTransmissionModeUL=anteTransmissionModeUL, plsfn6Prb38RIPAvg=plsfn6Prb38RIPAvg, rruTypeIndex=rruTypeIndex, sfn7maxripEntry=sfn7maxripEntry, macTestSwitchInfoNeighCellPagingSwitch=macTestSwitchInfoNeighCellPagingSwitch, cellAdjEutraCellFreqBand=cellAdjEutraCellFreqBand, saalConnMaxTxCredit=saalConnMaxTxCredit, plsfn9Prb58RIPAvg=plsfn9Prb58RIPAvg, invRruManufactureName=invRruManufactureName, plsfn1Prb35RIPAvg=plsfn1Prb35RIPAvg, almActUploadInetAddrType=almActUploadInetAddrType, plsfn3Prb98RIPAvg=plsfn3Prb98RIPAvg, cellSubSfnAssign=cellSubSfnAssign, phyULMeanNLPRB34=phyULMeanNLPRB34, pdcpVideoPreset9=pdcpVideoPreset9, tbSRBSuccInitDl64QAM=tbSRBSuccInitDl64QAM, macSRBTbDlTm7=macSRBTbDlTm7, macTestSwitchInfoSchePrbNum=macTestSwitchInfoSchePrbNum, plsfn1Prb84RIPAvg=plsfn1Prb84RIPAvg, plsfn6Prb26RIPAvg=plsfn6Prb26RIPAvg, drbUEActiveUlQci5=drbUEActiveUlQci5, handOverIntraCellRowStatus=handOverIntraCellRowStatus, plsfn9Prb30RIPAvg=plsfn9Prb30RIPAvg, topoRRUAccessRackNo=topoRRUAccessRackNo, hoCancelIntraFreqInterEnbS1HandOverFail=hoCancelIntraFreqInterEnbS1HandOverFail, plsfn7Prb08RIPAvg=plsfn7Prb08RIPAvg, cellavgripLcId=cellavgripLcId, pdcpSnSize=pdcpSnSize, plsfn8Prb90RIPAvg=plsfn8Prb90RIPAvg, topoRRULocalOscillationFreq3=topoRRULocalOscillationFreq3, powerManagement=powerManagement, erabEstabAddFailNbrUeS1apIdPairError=erabEstabAddFailNbrUeS1apIdPairError, encryptAlgorithmPriority=encryptAlgorithmPriority, userAutoUnlockTime=userAutoUnlockTime, hsupaSpsSchedTable=hsupaSpsSchedTable, rrcConnEstabTimeEntry=rrcConnEstabTimeEntry, eNBIotAlarmPeriod=eNBIotAlarmPeriod, carrierRuCellId=carrierRuCellId, timerWaitSecurityActCmplt=timerWaitSecurityActCmplt, handOverInterWithERABEntry=handOverInterWithERABEntry, swPackPlanVendor=swPackPlanVendor, loggedMdtTaIndex=loggedMdtTaIndex, pdcpVideoReserver15VideoActive=pdcpVideoReserver15VideoActive, rruTypeFiberLength=rruTypeFiberLength, plsfn0Prb05RIPAvg=plsfn0Prb05RIPAvg, cqiPucch2Index10=cqiPucch2Index10, netSetRRUPortAntArrayPathNo=netSetRRUPortAntArrayPathNo, erabRelEnbNbrReConfigFail=erabRelEnbNbrReConfigFail, plsfn8Prb12RIPAvg=plsfn8Prb12RIPAvg, cellReselIntraFreqIntraSearchR9Flag=cellReselIntraFreqIntraSearchR9Flag)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", ccOlpcGlideStep=ccOlpcGlideStep, macNbrRbDlTm7SFBC=macNbrRbDlTm7SFBC, nbapCommon=nbapCommon, macNbrTbDlMassiveMimoSM6=macNbrTbDlMassiveMimoSM6, topoSetRRUPortCarrierStart=topoSetRRUPortCarrierStart, saalConnRxErrorPdus=saalConnRxErrorPdus, rollBackSwitch=rollBackSwitch, nbrscheprbdlMcs9=nbrscheprbdlMcs9, eventGeneralEventObjects=eventGeneralEventObjects, pdcpSduSendTotalDataNumQci2=pdcpSduSendTotalDataNumQci2, plsfn0Prb12RIPAvg=plsfn0Prb12RIPAvg, macDownlinkMuMiMoMcsBackoff24=macDownlinkMuMiMoMcsBackoff24, rrcHcCaseRelP8=rrcHcCaseRelP8, closeBaseBandCarState=closeBaseBandCarState, macschecceusedsfn4=macschecceusedsfn4, cellOmcPhyId=cellOmcPhyId, macSRBSuccTbDl=macSRBSuccTbDl, contextAttReleNBNbrRadioInterfaceFailure=contextAttReleNBNbrRadioInterfaceFailure, rbFailEstabRej=rbFailEstabRej, drbPdcpSduTotalNumberDlQci9=drbPdcpSduTotalNumberDlQci9, plsfn7Prb31RIPAvg=plsfn7Prb31RIPAvg, macSwitchNode=macSwitchNode, phyULMaxNLPRB47=phyULMaxNLPRB47, cellCompStatisticNetLcComponentLcId=cellCompStatisticNetLcComponentLcId, macUpAlgorithmPucchRsrpHighThr=macUpAlgorithmPucchRsrpHighThr, a2CfgId=a2CfgId, cellShedSib7Period=cellShedSib7Period, pdcpPreset10=pdcpPreset10, snmpInformRetrys=snmpInformRetrys, nbrscheprbdlMcs25=nbrscheprbdlMcs25, eventGeneralEventNEID=eventGeneralEventNEID, plsfn1Prb13RIPAvg=plsfn1Prb13RIPAvg, pmExpObjectTable=pmExpObjectTable, plsfn7Prb50RIPAvg=plsfn7Prb50RIPAvg, plsfn2Prb03RIPAvg=plsfn2Prb03RIPAvg, hcServRsrqTh=hcServRsrqTh, mdtCellListBitMap=mdtCellListBitMap, cellCdma2000ParaSystemTimeSynChr=cellCdma2000ParaSystemTimeSynChr, imaGrpNeGsmState=imaGrpNeGsmState, plsfn2Prb43RIPAvg=plsfn2Prb43RIPAvg, atuUeIMSI10=atuUeIMSI10, macNbrRbUlMassiveMimoSM5=macNbrRbUlMassiveMimoSM5, pdcpVideoParamTable=pdcpVideoParamTable, macUpMuMiMoMcsBackOff8=macUpMuMiMoMcsBackOff8, gpsIndexOnBoard=gpsIndexOnBoard, macUpAlgorithmSrsPowerTimer=macUpAlgorithmSrsPowerTimer, phyCfgSpeedDetectSwitch=phyCfgSpeedDetectSwitch, phyULMeanNLPRB72=phyULMeanNLPRB72, caDeActiveDataThr=caDeActiveDataThr, sctpTimerValidCookieLife=sctpTimerValidCookieLife, plsfn4Prb69RIPAvg=plsfn4Prb69RIPAvg, plsfn9Prb87RIPAvg=plsfn9Prb87RIPAvg, phyULMaxNLPRB84=phyULMaxNLPRB84, phyCfgSrsUePowerTaThre=phyCfgSrsUePowerTaThre, a6RowStatus=a6RowStatus, pdcpDlSduAirDropRatioTable=pdcpDlSduAirDropRatioTable, raeBand=raeBand, hoOutFailTooLateType1=hoOutFailTooLateType1, rrcHcCaseRelP9=rrcHcCaseRelP9, plsfn6Prb90RIPAvg=plsfn6Prb90RIPAvg, cellRrcConnectNum=cellRrcConnectNum, phyCfgDlTestAmp1=phyCfgDlTestAmp1, cellInterFreqEvenType=cellInterFreqEvenType, voipSilenceCallUl=voipSilenceCallUl, pdcpPreset23=pdcpPreset23, drbPdcpSduDelayDlQci2=drbPdcpSduDelayDlQci2, plReceivePowerUserIndex12=plReceivePowerUserIndex12, topoRHUBOfp2AccessLinePosition=topoRHUBOfp2AccessLinePosition, macNbrTbDlQci2=macNbrTbDlQci2, nbrschetimesulMcs18=nbrschetimesulMcs18, plsfn8PrbG5RIPMax=plsfn8PrbG5RIPMax, cellCompanyVideoTecentVideoNum=cellCompanyVideoTecentVideoNum, hoOutAttInterFreqOMC=hoOutAttInterFreqOMC, antWeightAmplitude5=antWeightAmplitude5, eventSynchronizationObjects=eventSynchronizationObjects, omLinkIsRealTimeValid=omLinkIsRealTimeValid, hcBlerHcRsrqTh=hcBlerHcRsrqTh, cellAdjUtraFddCellLAC=cellAdjUtraFddCellLAC, raeFileEntry=raeFileEntry, cellRruRowStatus=cellRruRowStatus, plsfn6Prb53RIPAvg=plsfn6Prb53RIPAvg, rruOptBitErrorRate=rruOptBitErrorRate, pdcpCfgEntry=pdcpCfgEntry, plsfn3Prb90RIPAvg=plsfn3Prb90RIPAvg, macDownlinkBler221=macDownlinkBler221, plsfn0Prb16RIPAvg=plsfn0Prb16RIPAvg, extendDrbSendRlcCfgId=extendDrbSendRlcCfgId, nbrschetimesdlMcs31=nbrschetimesdlMcs31, lbcUserMeasurementReport=lbcUserMeasurementReport, maintenceStateNotiNEID=maintenceStateNotiNEID, accessUserTable=accessUserTable, hcFailPenaltyTime=hcFailPenaltyTime, erabRelEnbNbrCongestion=erabRelEnbNbrCongestion, cellGeranFreqExplicitArfcns15=cellGeranFreqExplicitArfcns15, pdcpUlAirSduDropTotalNumberQci4=pdcpUlAirSduDropTotalNumberQci4, alarmCauseToAlarmBox=alarmCauseToAlarmBox, loggedMdtCellId=loggedMdtCellId, boardBspMainStatus=boardBspMainStatus, topoRHUBDLMaxTimeDelayCompensation=topoRHUBDLMaxTimeDelayCompensation, cellGeranFreqExplicitArfcns29=cellGeranFreqExplicitArfcns29, plsfn5Prb36RIPAvg=plsfn5Prb36RIPAvg, cellAdjUtraFddDirectTunnelFlag=cellAdjUtraFddDirectTunnelFlag, macSwitchInfoUeInactivePeriod=macSwitchInfoUeInactivePeriod, rueRRCAttConnReconfig=rueRRCAttConnReconfig, multiBandTable=multiBandTable, macUpMuMiMoPairDeltaDOAThr=macUpMuMiMoPairDeltaDOAThr, omLinkMaxRxBandwidth=omLinkMaxRxBandwidth, tdsLocalCellEntry=tdsLocalCellEntry, macSwitchTestInfoUeNum=macSwitchTestInfoUeNum, fcCarrierSlotIscpMinThreshold=fcCarrierSlotIscpMinThreshold, drbThpTimeDlQci3=drbThpTimeDlQci3, macrelatedOriginCounter=macrelatedOriginCounter, plReceivePowerIndex6=plReceivePowerIndex6, equipStartupNotiTime=equipStartupNotiTime, atuByIpAddr5=atuByIpAddr5, omLinkRowStatus=omLinkRowStatus, topoRRURowStatus=topoRRURowStatus, plsfn1Prb31RIPAvg=plsfn1Prb31RIPAvg, mdtMaxUserNumber=mdtMaxUserNumber, cellAntWeightPhase7=cellAntWeightPhase7, erabHoFailQci3=erabHoFailQci3, ipoaChannel=ipoaChannel, alterationNotificationNode=alterationNotificationNode, sdDWCMode=sdDWCMode, anrObjects=anrObjects, phrEntry=phrEntry, plRssiAvgC14=plRssiAvgC14, peripheralPackPlanVendorIndex=peripheralPackPlanVendorIndex, rrcPreset5=rrcPreset5, invRhubNo=invRhubNo, macUpMuMiMoMcsBackOff0=macUpMuMiMoMcsBackOff0, mlbNotiOcnAdjust=mlbNotiOcnAdjust, pdcpSduDiscTotalDataNumQci7=pdcpSduDiscTotalDataNumQci7, plsfn9Prb96RIPAvg=plsfn9Prb96RIPAvg, macNbrRbDlMassiveMimoSM13=macNbrRbDlMassiveMimoSM13, mrMeasCtrlUtraSwitch=mrMeasCtrlUtraSwitch, cellInterRatCDMA20001xRTTFlag=cellInterRatCDMA20001xRTTFlag, peripheralPackRunningTypeIndex=peripheralPackRunningTypeIndex, erabModQoSFailNbrAbstractSyntaxError=erabModQoSFailNbrAbstractSyntaxError, drxQciShortCycle=drxQciShortCycle, phyULMaxNLPRB05=phyULMaxNLPRB05, plsfn6Prb30RIPAvg=plsfn6Prb30RIPAvg, plsfn8Prb92RIPAvg=plsfn8Prb92RIPAvg, alarmCauseAutoProcessPolicy=alarmCauseAutoProcessPolicy, hcAdjCellNum=hcAdjCellNum, macSwitchTestInfoDlFsSwitchTLS=macSwitchTestInfoDlFsSwitchTLS, plsfn1Prb06RIPAvg=plsfn1Prb06RIPAvg, macUpAlgorithmIoTupMax=macUpAlgorithmIoTupMax, traceTaskReferenceId=traceTaskReferenceId, reservedENBL3Para1=reservedENBL3Para1, hoFailIncIntraFreqInterCellIntraEnbMaxUeNum=hoFailIncIntraFreqInterCellIntraEnbMaxUeNum, accessUserPassword=accessUserPassword, efdEndTime=efdEndTime, plsfn1Prb94RIPAvg=plsfn1Prb94RIPAvg, anrSonMeas3GSwitch=anrSonMeas3GSwitch, icicEdgeUeUlPrbSchedPri2=icicEdgeUeUlPrbSchedPri2, srvccFailPrepOutGeranQuaOther=srvccFailPrepOutGeranQuaOther, nbrschetimesulMcs28=nbrschetimesulMcs28, macMaxSchUeUl=macMaxSchUeUl, outDoorCabinetTable=outDoorCabinetTable, plsfn1Prb44RIPAvg=plsfn1Prb44RIPAvg, macDownlinkCqiPeriondMin=macDownlinkCqiPeriondMin, cqiPucch2Index3=cqiPucch2Index3, phyCfgCrsStepupSwitch=phyCfgCrsStepupSwitch, sessionTimeEntry=sessionTimeEntry, topoRHUBOfp4AccessLinePosition=topoRHUBOfp4AccessLinePosition, mdtSwitchInfo=mdtSwitchInfo, plsfn8Prb94RIPAvg=plsfn8Prb94RIPAvg, macDlMassiveMimoPair03=macDlMassiveMimoPair03, erabEstabSuccNbrQci254=erabEstabSuccNbrQci254, drbUEActiveDlQci3=drbUEActiveDlQci3, pdcpUlAirSduSendTotalNumberQci4=pdcpUlAirSduSendTotalNumberQci4, macNbrTbDl=macNbrTbDl, pdcpDlAirSduSendTotalNumberQci9=pdcpDlAirSduSendTotalNumberQci9, plsfn8Prb50RIPAvg=plsfn8Prb50RIPAvg, macMumimoThrputDlRank2=macMumimoThrputDlRank2, alarmNotiNEType=alarmNotiNEType, voipLosActivePackerCopyUl=voipLosActivePackerCopyUl, tdsNetLcPrimaryCarrierBand=tdsNetLcPrimaryCarrierBand, s1InNbrOctets=s1InNbrOctets, sfn6avgripEntry=sfn6avgripEntry, macTestSwitchInfoDlMaxSrbMcs=macTestSwitchInfoDlMaxSrbMcs, phyTA8=phyTA8, rruPdcchCceDlAssnMean=rruPdcchCceDlAssnMean, fcUlDTXAlgorithmSwitch=fcUlDTXAlgorithmSwitch, rlcPreset23=rlcPreset23, cellSoftLicenseRowStatus=cellSoftLicenseRowStatus, rrcCpmCaseRelP6=rrcCpmCaseRelP6, boardSwapDestShelfNo=boardSwapDestShelfNo, plThroughputUL=plThroughputUL, netRRUOfp2AccessEthernetPort=netRRUOfp2AccessEthernetPort, alterationNotiTime=alterationNotiTime, loggedMdtCellEntry=loggedMdtCellEntry, topoRHUBOfp1AccessLinePosition=topoRHUBOfp1AccessLinePosition, rruTypePortCalPinRxNom=rruTypePortCalPinRxNom, drbBurstDataThpULQci3=drbBurstDataThpULQci3, plsfn9Prb10RIPAvg=plsfn9Prb10RIPAvg, atuByIpAddr3=atuByIpAddr3, phyULMeanNLPRB31=phyULMeanNLPRB31, cellGeranFreqExplicitArfcns5=cellGeranFreqExplicitArfcns5, iubTrafficCategoryTypeRowStatus=iubTrafficCategoryTypeRowStatus, phyCfgContinIotManualMeasSubfnTrigger=phyCfgContinIotManualMeasSubfnTrigger, drbBurstDataThpDLQci5=drbBurstDataThpDLQci5, macPhrIndex47=macPhrIndex47, topoRRUIsNetMatched=topoRRUIsNetMatched, netRemoteRadioUnit=netRemoteRadioUnit, s1SigProcRowStatus=s1SigProcRowStatus, netBoardSlotNo=netBoardSlotNo, pdcpThroughputTimeTable=pdcpThroughputTimeTable, plsfn3Prb91RIPAvg=plsfn3Prb91RIPAvg, adjeNBEntry=adjeNBEntry, compPerformanceTable=compPerformanceTable, rrcRecoverCrsPowerRevRedPowReq=rrcRecoverCrsPowerRevRedPowReq, plReceivePowerUserIndex9=plReceivePowerUserIndex9, erabRelActNbrQci6=erabRelActNbrQci6, plThroughputCapacityDLRowStatus=plThroughputCapacityDLRowStatus, retAntRCUAlarmSubscribeTrigger=retAntRCUAlarmSubscribeTrigger, invShelfRackNo=invShelfRackNo, localCarrierDiscardHsFrameNum=localCarrierDiscardHsFrameNum, hsupaPFEntry=hsupaPFEntry, boardVoltSlotNo=boardVoltSlotNo, topoRRUULPowerMode=topoRRUULPowerMode, tdsNetLocalCell=tdsNetLocalCell, phyCfgSrsSnrCqiThre=phyCfgSrsSnrCqiThre, hsdpaCqiPwrCtrlUpThreshold=hsdpaCqiPwrCtrlUpThreshold, macNbrTbDlTm3=macNbrTbDlTm3, lmcIntraVoiceLbTag=lmcIntraVoiceLbTag, activeUELcId=activeUELcId, srbPdcpSduBitLenUl=srbPdcpSduBitLenUl, cellGeranFreqVariableBitMapOfArfcns6=cellGeranFreqVariableBitMapOfArfcns6, pdcpPreset18=pdcpPreset18, plsfn1Prb96RIPAvg=plsfn1Prb96RIPAvg, plsfn5Prb18RIPAvg=plsfn5Prb18RIPAvg, accessUserEntry=accessUserEntry, phyCfgPucchNormalCpFmt1ActiveThredSingleAnt=phyCfgPucchNormalCpFmt1ActiveThredSingleAnt, atuGoldUserAppointFrqTag=atuGoldUserAppointFrqTag, extendDrbSecondaryRecvRlcCfgId=extendDrbSecondaryRecvRlcCfgId, pdcpSduSendTotalDataNumQci5=pdcpSduSendTotalDataNumQci5, netLcCellCombine4PortSwitch=netLcCellCombine4PortSwitch, fcNotiNEType=fcNotiNEType, ofpPortFpgaStatus=ofpPortFpgaStatus, ulCompMcsThres=ulCompMcsThres, phyCfgFreqValidThreshold=phyCfgFreqValidThreshold, rruPuschPrbMeanTotUl=rruPuschPrbMeanTotUl, swPackCustomerPlanActivateIndicator=swPackCustomerPlanActivateIndicator, macDownlinkEffTm39=macDownlinkEffTm39, topoRRUCarrier15ULPowerValue=topoRRUCarrier15ULPowerValue, euePeriodRptRptInterval=euePeriodRptRptInterval, plsfn3Prb70RIPAvg=plsfn3Prb70RIPAvg, gpsInfoLockSateNum=gpsInfoLockSateNum, plsfn5Prb31RIPAvg=plsfn5Prb31RIPAvg, plsfn6Prb47RIPAvg=plsfn6Prb47RIPAvg, plsfn6Prb17RIPAvg=plsfn6Prb17RIPAvg, lcHlProcId=lcHlProcId)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", hoAttOutInterEnbS1InterFreqQci2=hoAttOutInterEnbS1InterFreqQci2, phyULMeanNLPRB78=phyULMeanNLPRB78, rruTypePortCalAIqTxNom=rruTypePortCalAIqTxNom, lbcTable=lbcTable, cellCdma2000ParaSerWindowSize=cellCdma2000ParaSerWindowSize, ipThpDlRowStatus=ipThpDlRowStatus, lmcMlbLoadRestoreThDl=lmcMlbLoadRestoreThDl, hoFailOutRRCReConn=hoFailOutRRCReConn, hoFailPrepIncInterFreqS1Others=hoFailPrepIncInterFreqS1Others, rruTypePortEntry=rruTypePortEntry, mdtLoggedMdtPositionMethod=mdtLoggedMdtPositionMethod, sdPeakSideDiffCollThresNotSmartAnt=sdPeakSideDiffCollThresNotSmartAnt, airCondCoolingState=airCondCoolingState, rrcConnEstabTimeMeanMoSignalling=rrcConnEstabTimeMeanMoSignalling, hsdpaSchedAlgorithmNode=hsdpaSchedAlgorithmNode, outerAlarmBoxTable=outerAlarmBoxTable, cellSelectQQualMin=cellSelectQQualMin, boardVoltRowStatus=boardVoltRowStatus, cellCdlSpeedSwitch=cellCdlSpeedSwitch, saalConnTxEndAkPdus=saalConnTxEndAkPdus, interRatCsfbMeasFlag=interRatCsfbMeasFlag, alarmBoxIndex=alarmBoxIndex, hsupaTfrcTpcPreTTINum=hsupaTfrcTpcPreTTINum, raeBeamBandTable=raeBeamBandTable, caThroughputLcId=caThroughputLcId, macSRBTbDLRank4=macSRBTbDLRank4, a6RptInterval=a6RptInterval, ethRowStatus=ethRowStatus, cellPrbRowStatus=cellPrbRowStatus, hoFailPrepIncInterFreqX2Prb=hoFailPrepIncInterFreqX2Prb, phyULMaxNLPRB55=phyULMaxNLPRB55, boardBspBackupStatus=boardBspBackupStatus, hoFailOutInterFreqX2SourceFail=hoFailOutInterFreqX2SourceFail, e1FrameErrorAlarmGenThreshold=e1FrameErrorAlarmGenThreshold, nbrschetimesdlMcs18=nbrschetimesdlMcs18, ueImsMatchConfigBandList=ueImsMatchConfigBandList, pmExpressionTable=pmExpressionTable, sdcRru2TdlMaxPwr=sdcRru2TdlMaxPwr, bfdLocalIpAddrIndex=bfdLocalIpAddrIndex, cellReselComSNonIntraSearchP=cellReselComSNonIntraSearchP, raeWeightingFactorsAmplitude7=raeWeightingFactorsAmplitude7, macNbrRbDlMassiveMimoSM3=macNbrRbDlMassiveMimoSM3, enbUnavailDur=enbUnavailDur, spsOptmzMaxCopyPacketNum=spsOptmzMaxCopyPacketNum, raeBeamBandVerticalBandBuf=raeBeamBandVerticalBandBuf, macVideoUsedPrbPerSfnUlMax=macVideoUsedPrbPerSfnUlMax, plsfn1Prb21RIPAvg=plsfn1Prb21RIPAvg, boardSoftwareFileEntry=boardSoftwareFileEntry, pdcpProfile0x0001Flag=pdcpProfile0x0001Flag, phyCfgPucchNormalCpFmt1ActiveThred3Ant=phyCfgPucchNormalCpFmt1ActiveThred3Ant, hoSuccOutIntraFreqRadio=hoSuccOutIntraFreqRadio, pdcpPreset34=pdcpPreset34, pdcpCfgTable=pdcpCfgTable, lbcUlHardwardTh2=lbcUlHardwardTh2, localCellTable=localCellTable, plsfn8PrbG19RIPMax=plsfn8PrbG19RIPMax, b1Hysteresis=b1Hysteresis, netLocalCellTable=netLocalCellTable, heatExVoltageDC=heatExVoltageDC, localCarrierLocalCellId=localCarrierLocalCellId, cellCdma2000ParaCdma1XrttCsfbRegZoneTimer=cellCdma2000ParaCdma1XrttCsfbRegZoneTimer, nbrscheprbdlMcs19=nbrscheprbdlMcs19, macTestSwitchInfoMaxARPLevelForVIPSchedule=macTestSwitchInfoMaxARPLevelForVIPSchedule, pdcpVideoPreset3=pdcpVideoPreset3, phyULMaxNLPRB57=phyULMaxNLPRB57, phyULMaxNLPRB38=phyULMaxNLPRB38, hcAdjRsrpTh=hcAdjRsrpTh, erabEstabInitSuccNbrQci4=erabEstabInitSuccNbrQci4, drbUEActiveDlQci6=drbUEActiveDlQci6, macNbrSuccInitTbUl16QamQci1=macNbrSuccInitTbUl16QamQci1, macSwitchInfoUlFreqSelectScheduleSwitch=macSwitchInfoUlFreqSelectScheduleSwitch, hoFailPrepIncInterFreqS1CellBlock=hoFailPrepIncInterFreqS1CellBlock, cellAntWeightAmplitude20=cellAntWeightAmplitude20, erabActiveMeanNbrDLQci7=erabActiveMeanNbrDLQci7, alarmCauseTable=alarmCauseTable, hsdpaSpsSchedStateTransWin=hsdpaSpsSchedStateTransWin, macPreSchNumUL=macPreSchNumUL, peripheralFilePackTypeIndex=peripheralFilePackTypeIndex, ofpPortFPGARate=ofpPortFPGARate, cellAcBarTimeForSigalling=cellAcBarTimeForSigalling, atuNormalUserFirstPrbLimitSwitch=atuNormalUserFirstPrbLimitSwitch, equipUpTime=equipUpTime, macSwitchInfoSignalConBIValue=macSwitchInfoSignalConBIValue, localCarrierhsupaTfrcMode=localCarrierhsupaTfrcMode, tdsNetLcMaxCarrierNum=tdsNetLcMaxCarrierNum, trafficCategoryTable=trafficCategoryTable, plsfn1Prb30RIPAvg=plsfn1Prb30RIPAvg, hsdpaTfrcTfrcMode=hsdpaTfrcTfrcMode, plsfn6Prb08RIPAvg=plsfn6Prb08RIPAvg, contextExistNbrLcId=contextExistNbrLcId, plsfn6Prb78RIPAvg=plsfn6Prb78RIPAvg, invRackRackNo=invRackRackNo, pdcpCompThrputDl=pdcpCompThrputDl, rrcPreset27=rrcPreset27, acCfgAveSNRCalThreshold=acCfgAveSNRCalThreshold, cellShedSiTransferTime=cellShedSiTransferTime, plsfn1Prb68RIPAvg=plsfn1Prb68RIPAvg, a5MeasPurpose=a5MeasPurpose, topoRRUSlaveSendAntCalPortNo=topoRRUSlaveSendAntCalPortNo, erabRelMmeNbrQci1NormalRelease=erabRelMmeNbrQci1NormalRelease, mrUeCellCompIdRptSwitch=mrUeCellCompIdRptSwitch, plADIRaPowerRampStep=plADIRaPowerRampStep, cellPrbInfoTable=cellPrbInfoTable, plsfn3Prb92RIPAvg=plsfn3Prb92RIPAvg, fcNotiNEID=fcNotiNEID, plsfn0Prb18RIPAvg=plsfn0Prb18RIPAvg, plsfn8PrbG16RIPMax=plsfn8PrbG16RIPMax, macPhrIndex16=macPhrIndex16, outDoorCabinetPosition=outDoorCabinetPosition, ipoaChRnc2NbMaxCTD=ipoaChRnc2NbMaxCTD, macSwitchInfoL2UpAdaptSwitch=macSwitchInfoL2UpAdaptSwitch, macschecceusedUl=macschecceusedUl, bsrReTx=bsrReTx, userAlarmReportSwitch=userAlarmReportSwitch, nbrscheprbulMcs5=nbrscheprbulMcs5, hoFailPrepIncIntraFreqIntraEnbCellOverLoad=hoFailPrepIncIntraFreqIntraEnbCellOverLoad, lcAcPreventPPNum=lcAcPreventPPNum, erabHoFailQci8=erabHoFailQci8, sfn7avgripRowStatus=sfn7avgripRowStatus, s1ResetByeNBHardwareFailure=s1ResetByeNBHardwareFailure, lteCommon=lteCommon, equipMIBVersion=equipMIBVersion, sctpLocalIpAddrIndex2=sctpLocalIpAddrIndex2, iubOFPortEntry=iubOFPortEntry, plsfn0Prb35RIPAvg=plsfn0Prb35RIPAvg, rrcPreset15=rrcPreset15, hsupaTfrcAlgorithmEntry=hsupaTfrcAlgorithmEntry, phyCfgPucchNormalCpFmt1ActiveThred4Ant=phyCfgPucchNormalCpFmt1ActiveThred4Ant, macDownlinkN1=macDownlinkN1, hcBlerBasedHcTag=hcBlerBasedHcTag, plReceivePowerUserIndex7=plReceivePowerUserIndex7, rruPathRxStatus=rruPathRxStatus, erabReleNBTable=erabReleNBTable, erabRelEnbNbrQci1UserInactivity=erabRelEnbNbrQci1UserInactivity, plsfn3Prb14RIPAvg=plsfn3Prb14RIPAvg, phyULMaxNLPRB30=phyULMaxNLPRB30, drbPdcpSduTotalDelayDlQci1=drbPdcpSduTotalDelayDlQci1, erabActiveMeanNbrDLQci3=erabActiveMeanNbrDLQci3, rrcCAndRCheckOfCellTable=rrcCAndRCheckOfCellTable, macThrpTimeCaActiveUL2CC=macThrpTimeCaActiveUL2CC, closeBaseBandCarFrameNo=closeBaseBandCarFrameNo, snmpInformTimer=snmpInformTimer, hsdpaCQIRowStatus=hsdpaCQIRowStatus, procCoreType=procCoreType, macDownlinkN2=macDownlinkN2, raeAntSerialNumber=raeAntSerialNumber, tdsNodeBSysSwitchToMasterRncTrigger=tdsNodeBSysSwitchToMasterRncTrigger, swPackZipType=swPackZipType, topoRRUBspBackupStatus=topoRRUBspBackupStatus, sntpServerInetAddr=sntpServerInetAddr, cqiNp=cqiNp, alarmStatelessAlarmCompressionInterval=alarmStatelessAlarmCompressionInterval, macUpMuMiMoMcsBackOff28=macUpMuMiMoMcsBackOff28, macOctDlMassiveMimoSM12=macOctDlMassiveMimoSM12, retAntRCUAlarmGetTrigger=retAntRCUAlarmGetTrigger, cqiK=cqiK, nbrschetimesdlMcs0=nbrschetimesdlMcs0, boardSwapDestRackNo=boardSwapDestRackNo, erabRelEnbNbrUENotAvailableforPS=erabRelEnbNbrUENotAvailableforPS, topoRRUAccessSlaveUlTimeDelay=topoRRUAccessSlaveUlTimeDelay, hsdpaTfrcAlgorithmTable=hsdpaTfrcAlgorithmTable, x2hoCancelProcInterEnbEntry=x2hoCancelProcInterEnbEntry, b2Threshold1Quantity=b2Threshold1Quantity, configFileIndex=configFileIndex, tdsNetLocalCellPriority=tdsNetLocalCellPriority, pdcpVideoJudgeSche=pdcpVideoJudgeSche, srbNbrScheTimesSfn9=srbNbrScheTimesSfn9, managerHeartbeatInterval=managerHeartbeatInterval, icicTag=icicTag, topoRRUPACurrentNo=topoRRUPACurrentNo, hlGlobalTestThodelay=hlGlobalTestThodelay, cqiPucch2Index5=cqiPucch2Index5, plsfn9Prb64RIPAvg=plsfn9Prb64RIPAvg, reservedCellParaEntry=reservedCellParaEntry, lbc40FcRowStatus=lbc40FcRowStatus, erabNbrMeanEstabQci5=erabNbrMeanEstabQci5, circuitPackVendorName=circuitPackVendorName, sctpBlockSwitch=sctpBlockSwitch, atuGoldUeIMSI5=atuGoldUeIMSI5, invPortShelfNo=invPortShelfNo, coolingFanSpeed=coolingFanSpeed, coolingFanLoadAdjustLowerLimit=coolingFanLoadAdjustLowerLimit, sscStartMinute1=sscStartMinute1, e1LinkInformation=e1LinkInformation, pdcpSduSendTotalDateLenQci5=pdcpSduSendTotalDateLenQci5, plReportFlag=plReportFlag, emSmokeEntry=emSmokeEntry, macNbrRbDlTm3SM=macNbrRbDlTm3SM, hcFreqEffCqiTh=hcFreqEffCqiTh, erabRelActNbrQci4=erabRelActNbrQci4, rrcLpmCaseRelP3=rrcLpmCaseRelP3, fileTransResultNotifications=fileTransResultNotifications, drbPdcpSduBitLenUlQci1=drbPdcpSduBitLenUlQci1, plsfn1Prb72RIPAvg=plsfn1Prb72RIPAvg, a2LcId=a2LcId, raeGroupsTable=raeGroupsTable, erabRelFailNbrRadioInterfaceFailure=erabRelFailNbrRadioInterfaceFailure, topoRRUSoftwareVersion=topoRRUSoftwareVersion, hoFailIncInterFreqInterCellIntraEnbMaxUeNum=hoFailIncInterFreqInterCellIntraEnbMaxUeNum, signalSoftwareCollection=signalSoftwareCollection, hoAttOutFddTddX2=hoAttOutFddTddX2, eueTimerT301=eueTimerT301, taRowStatus=taRowStatus, hsupaSpsSchedResrcBlkCfgIndex=hsupaSpsSchedResrcBlkCfgIndex, plsfn1Prb43RIPAvg=plsfn1Prb43RIPAvg, plsfn2Prb01RIPAvg=plsfn2Prb01RIPAvg, ulPwrP0NominalPusch=ulPwrP0NominalPusch, mdtTaskIndex=mdtTaskIndex, plADIMacTestSwitchInfoMcslimitSwitch=plADIMacTestSwitchInfoMcslimitSwitch, mrServerInetAddrType=mrServerInetAddrType, netRHUBAccessBoardType=netRHUBAccessBoardType, contextFailModNbrUeS1apIdPairError=contextFailModNbrUeS1apIdPairError, cpuLoadStateUpTimeToTrig=cpuLoadStateUpTimeToTrig, omTestProcPerformanceAdjFaoctor=omTestProcPerformanceAdjFaoctor, macMumimoThrpTimeDlRank1=macMumimoThrpTimeDlRank1, cdlServiceFileDirectory=cdlServiceFileDirectory, phyULMeanNLPRB03=phyULMeanNLPRB03, plsfn1Prb20RIPAvg=plsfn1Prb20RIPAvg, macschecceusedsfn9=macschecceusedsfn9, erabActiveMaxNbrULQci6=erabActiveMaxNbrULQci6, equipMIBDevVersion=equipMIBDevVersion, cellCfgEntry=cellCfgEntry, mlbNotiAdjCellId=mlbNotiAdjCellId, apTeidRel=apTeidRel, pdcpUpPktDiscardRateDlQci8Enb=pdcpUpPktDiscardRateDlQci8Enb, tbNbrInitDl16QAM=tbNbrInitDl16QAM, opFuncRedirectionFlag=opFuncRedirectionFlag, emThunderboltEntry=emThunderboltEntry, baseBandCarrierIndexOnBBU=baseBandCarrierIndexOnBBU, atuUlAndDlScheSRLmint=atuUlAndDlScheSRLmint, phyULMaxNLPRB34=phyULMaxNLPRB34, snmpEventPDUType=snmpEventPDUType, cellInterRatTreselectionCdma1xRTTSfFlag=cellInterRatTreselectionCdma1xRTTSfFlag, ethPortDataStatEntry=ethPortDataStatEntry, plsfn3Prb08RIPAvg=plsfn3Prb08RIPAvg, fileUploadEntry=fileUploadEntry, nbrschetimesdlMcs26=nbrschetimesdlMcs26, antUseingWeightAmplitude0=antUseingWeightAmplitude0, erabNbrReqRelEnbByHOQCI9=erabNbrReqRelEnbByHOQCI9, coolingNormalMaxTemperature=coolingNormalMaxTemperature, compPerformanceRowStatus=compPerformanceRowStatus, macTestSwitchInfoRNTPMsgSwitch=macTestSwitchInfoRNTPMsgSwitch, netAntArrayNum=netAntArrayNum, phyTAMax=phyTAMax, hcFailPenaltyTag=hcFailPenaltyTag, s1DiagosisPacketTotalDelay=s1DiagosisPacketTotalDelay, rruCalcPathPinRxNom=rruCalcPathPinRxNom, swPackPlanFwUpgEndingIndicator=swPackPlanFwUpgEndingIndicator, cqiPucch2Index2=cqiPucch2Index2, plADICellReselIntraFreqQrxLevMin=plADICellReselIntraFreqQrxLevMin, raeGainForEachOperatingBand=raeGainForEachOperatingBand, hsdpaHarqRowStatus=hsdpaHarqRowStatus, plThroughputCapacityULLcId=plThroughputCapacityULLcId, rrcConnReEstabSuccReConfigFail=rrcConnReEstabSuccReConfigFail)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", macTestSwitchInfoMinARPLevelForVIPSchedule=macTestSwitchInfoMinARPLevelForVIPSchedule, sjm1ThresholdAcdIntraf=sjm1ThresholdAcdIntraf, b2MeasFilterCoeffCdma2000=b2MeasFilterCoeffCdma2000, gpsLongitude=gpsLongitude, plsfn8Prb29RIPAvg=plsfn8Prb29RIPAvg, plsfn9Prb40RIPAvg=plsfn9Prb40RIPAvg, contextAttRelMMENbrProtocol=contextAttRelMMENbrProtocol, cellCompanyVideoReserver19VideoNum=cellCompanyVideoReserver19VideoNum, raeFrequencyBandBuf=raeFrequencyBandBuf, nbrschetimesulMcs21=nbrschetimesulMcs21, plrssiIndexTable=plrssiIndexTable, hsdpaMAXCIEntry=hsdpaMAXCIEntry, topoRRUTRxConstPower=topoRRUTRxConstPower, sfn1avgripTable=sfn1avgripTable, plsfn2Prb36RIPAvg=plsfn2Prb36RIPAvg, irathoFailPrepOutGprsOverTime=irathoFailPrepOutGprsOverTime, plsfn9Prb33RIPAvg=plsfn9Prb33RIPAvg, rrcPreset30=rrcPreset30, rhubOptTransM625um10MLen=rhubOptTransM625um10MLen, macSwitchInfoDlHopGap=macSwitchInfoDlHopGap, erabRelHoProcRowStatus=erabRelHoProcRowStatus, iubSCTPStatOutLossCheckPeriod=iubSCTPStatOutLossCheckPeriod, macDownMuMiMoAlgBaseParaEntry=macDownMuMiMoAlgBaseParaEntry, phyCfgSpeedDetectHighThreshold=phyCfgSpeedDetectHighThreshold, hsupaTfrcTpcReceiveSwitch=hsupaTfrcTpcReceiveSwitch, pdcpVideoKeyWordsOffset=pdcpVideoKeyWordsOffset, iubTrafficCategoryType=iubTrafficCategoryType, atuGoldVoiceTendcellBand=atuGoldVoiceTendcellBand, cacPositionLcId=cacPositionLcId, pdcpPreset28=pdcpPreset28, videoInitScheduleTime=videoInitScheduleTime, plsfn4Prb02RIPAvg=plsfn4Prb02RIPAvg, drbPdcpSduDelayDlQci8=drbPdcpSduDelayDlQci8, rrcErabDelInteractWithHo=rrcErabDelInteractWithHo, configProcessNode=configProcessNode, pdcpPreset39=pdcpPreset39, atuUeIMSI2=atuUeIMSI2, cellGeranFreqExplicitArfcns1=cellGeranFreqExplicitArfcns1, edgeUserStatisticTable=edgeUserStatisticTable, erabNbrEstabSumQci1=erabNbrEstabSumQci1, cellCdma2000Para=cellCdma2000Para, drbPdcpSduTotalDelayDlQci9=drbPdcpSduTotalDelayDlQci9, erabActiveMeanNbrULQci8=erabActiveMeanNbrULQci8, retAntBaseStationID=retAntBaseStationID, nbrscheprbulMcs7=nbrscheprbulMcs7, amrUlVoipPacketWb2=amrUlVoipPacketWb2, raeWeightingFactorsInstalledMechanicalTilt=raeWeightingFactorsInstalledMechanicalTilt, mrMeasCtrlGeranSwitch=mrMeasCtrlGeranSwitch, iubIPPathMCMLPPPClassNumber=iubIPPathMCMLPPPClassNumber, imaGrpInitMode=imaGrpInitMode, ueAccNumEntry=ueAccNumEntry, icicTable=icicTable, hoAttOutPrepInterEnbX2Quality=hoAttOutPrepInterEnbX2Quality, softwareBaseBandBoardType=softwareBaseBandBoardType, lcCellMode=lcCellMode, plsfn7Prb28RIPAvg=plsfn7Prb28RIPAvg, anrNotiFailReason=anrNotiFailReason, plsfn6Prb35RIPAvg=plsfn6Prb35RIPAvg, plsfn1Prb87RIPAvg=plsfn1Prb87RIPAvg, sfn3avgripLcId=sfn3avgripLcId, plsfn4Prb63RIPAvg=plsfn4Prb63RIPAvg, plsfn9Prb91RIPAvg=plsfn9Prb91RIPAvg, rrcPreset2=rrcPreset2, netSetRRUPortSubtoLocalCellId3=netSetRRUPortSubtoLocalCellId3, macDownlinkQci7NewPfScale=macDownlinkQci7NewPfScale, nodeBProtocolVer=nodeBProtocolVer, rruOptTransM625um10MLen=rruOptTransM625um10MLen, eNBPRBRadioType=eNBPRBRadioType, macTestSwitchInfoDlFlowCtrlSwitch=macTestSwitchInfoDlFlowCtrlSwitch, plsfn8Prb49RIPAvg=plsfn8Prb49RIPAvg, plsfn2Prb81RIPAvg=plsfn2Prb81RIPAvg, plsfn0Prb95RIPAvg=plsfn0Prb95RIPAvg, plADIRowStatus=plADIRowStatus, ofpPortModuleTxPower=ofpPortModuleTxPower, tbSRBInitDl=tbSRBInitDl, srvccSuccOutPrepUtran=srvccSuccOutPrepUtran, plsfn0Prb61RIPAvg=plsfn0Prb61RIPAvg, cellAdjUtraTddCellRacFlag=cellAdjUtraTddCellRacFlag, s1FailSetupNbrUnspecifiedFailure=s1FailSetupNbrUnspecifiedFailure, lteFddTddHOEntry=lteFddTddHOEntry, drbBurstDataThpDLQci7=drbBurstDataThpDLQci7, srsRowStatus=srsRowStatus, plADIDetectPeriod=plADIDetectPeriod, rrcMchCaseRelP5=rrcMchCaseRelP5, macUpAlgBaseParaTable=macUpAlgBaseParaTable, aps=aps, plsfn5Prb74RIPAvg=plsfn5Prb74RIPAvg, hoFailIncIntraFreqInterCellIntraEnbOL=hoFailIncIntraFreqInterCellIntraEnbOL, boardVoltLowerThreshold=boardVoltLowerThreshold, cellAdjDelCellRncIdUtra=cellAdjDelCellRncIdUtra, rruTypeMaxTxPower=rruTypeMaxTxPower, irathoSuccIncGprs=irathoSuccIncGprs, hoOutFailMLBPingpong=hoOutFailMLBPingpong, cacTestMode=cacTestMode, plsfn1Prb64RIPAvg=plsfn1Prb64RIPAvg, phyCfgIterMaxNum=phyCfgIterMaxNum, sjm1IscpRptTypeSwitchSmartAnt=sjm1IscpRptTypeSwitchSmartAnt, macUpAlgorithmIoTup=macUpAlgorithmIoTup, configFileDelTrigger=configFileDelTrigger, contextFailInitalSetupNbrTransferSyntaxError=contextFailInitalSetupNbrTransferSyntaxError, hsupaTfrcDpchFMFactor=hsupaTfrcDpchFMFactor, hoFailPrepIncIntraFreqX2SPS=hoFailPrepIncIntraFreqX2SPS, macPreSchRealPrbNumUL=macPreSchRealPrbNumUL, sdDeltaTimeDiff=sdDeltaTimeDiff, rlcPresetPerformanceTable=rlcPresetPerformanceTable, rhubOptTransIndex=rhubOptTransIndex, rrcMeanNbrCoMPUl=rrcMeanNbrCoMPUl, hoFailPrepIncInterFreqIntraEnbCellBlock=hoFailPrepIncInterFreqIntraEnbCellBlock, adjeNBMmeGroupId4=adjeNBMmeGroupId4, hoFailIncIntraFreqInterCellIntraEnbSPS=hoFailIncIntraFreqInterCellIntraEnbSPS, hsupaQosSDLMax=hsupaQosSDLMax, plsfn7Prb90RIPAvg=plsfn7Prb90RIPAvg, contextAttReleNBNbrInterRATRedirection=contextAttReleNBNbrInterRATRedirection, cellInterFreqEntry=cellInterFreqEntry, scheUEPerTTIEntry=scheUEPerTTIEntry, x2HandOverProcInterEnbLcId=x2HandOverProcInterEnbLcId, ipThroughputCapacityLcId=ipThroughputCapacityLcId, iubIPPathServiceType=iubIPPathServiceType, atuGoldUeIMSI38=atuGoldUeIMSI38, alarmBoxStatus=alarmBoxStatus, timeSlotTypeNeighCell2=timeSlotTypeNeighCell2, peripheralPackPlanUpgradePercent=peripheralPackPlanUpgradePercent, hoAttOutPrepIntraFreqX2=hoAttOutPrepIntraFreqX2, amrUlVoipPacketNb4=amrUlVoipPacketNb4, hoFailIncIntraFreqInterCellIntraEnbTpc=hoFailIncIntraFreqInterCellIntraEnbTpc, pdcchCceDlMeanTable=pdcchCceDlMeanTable, cellCdma2000ParaPreRegZoneId2=cellCdma2000ParaPreRegZoneId2, phyULMeanNLPRB60=phyULMeanNLPRB60, releasedActiveERABRowStatus=releasedActiveERABRowStatus, topoRRUNo=topoRRUNo, caBoAllocPeriod=caBoAllocPeriod, plsfn8Prb75RIPAvg=plsfn8Prb75RIPAvg, erabEstabAddSuccNbrQci1=erabEstabAddSuccNbrQci1, pagingEnbInfo=pagingEnbInfo, srTestSwitchsrAdaptive=srTestSwitchsrAdaptive, plsfn7Prb93RIPAvg=plsfn7Prb93RIPAvg, icicEdgeUeUlPrbSchedPri1=icicEdgeUeUlPrbSchedPri1, fileTransNotiFileType=fileTransNotiFileType, plsfn2Prb60RIPAvg=plsfn2Prb60RIPAvg, cdlFtpServerPassword=cdlFtpServerPassword, nodeBCtrlPolicy=nodeBCtrlPolicy, plsfn9Prb72RIPAvg=plsfn9Prb72RIPAvg, cpuUsageStatRowStatus=cpuUsageStatRowStatus, atuByIpAddr4=atuByIpAddr4, rrcFailConnReconfigPrb=rrcFailConnReconfigPrb, macNbrRbDlMassiveMimoSM1=macNbrRbDlMassiveMimoSM1, cellShedSib7Flag=cellShedSib7Flag, chacDlPrbRBTh=chacDlPrbRBTh, emTemperatureRowStatus=emTemperatureRowStatus, plsfn7Prb05RIPAvg=plsfn7Prb05RIPAvg, mdtLoggedMDTMeasureInterval=mdtLoggedMDTMeasureInterval, rrcAttConnEstabMtAccess=rrcAttConnEstabMtAccess, resChkHlGlobalTestResExpDectSwitch=resChkHlGlobalTestResExpDectSwitch, cdlServerInetAddrType=cdlServerInetAddrType, phyCfgIrcAdaptiveThreshold=phyCfgIrcAdaptiveThreshold, hoCancelInterFreqInterEnbX2HandOverFail=hoCancelInterFreqInterEnbX2HandOverFail, pdcpParaWaitEndmarkerTimer=pdcpParaWaitEndmarkerTimer, cellAcBarForMocFlag=cellAcBarForMocFlag, rrcConnReEstabFailTerminalNoRsp=rrcConnReEstabFailTerminalNoRsp, hoSuccPrepIncIntraFreqIntraEnb=hoSuccPrepIncIntraFreqIntraEnb, phyULMeanNLPRB85=phyULMeanNLPRB85, omLinkStatistic=omLinkStatistic, lcConfigMinDlPower=lcConfigMinDlPower, macTestSwitchInfoSpsFirstTBSize=macTestSwitchInfoSpsFirstTBSize, cellAntWeightPhase16=cellAntWeightPhase16, managerType=managerType, erabRelEnbNbrQci1=erabRelEnbNbrQci1, antWeightPhase2=antWeightPhase2, atmTransportInfo=atmTransportInfo, e1LinkRxOifAnomalies=e1LinkRxOifAnomalies, peripheralPackPlanOpEndingIndicator=peripheralPackPlanOpEndingIndicator, phichEntry=phichEntry, macPreset3=macPreset3, macSRBTbDlTm1=macSRBTbDlTm1, plsfn1Prb59RIPAvg=plsfn1Prb59RIPAvg, atuRlcMaxRetxThreshold=atuRlcMaxRetxThreshold, macTestSwitchInfoDlMcs=macTestSwitchInfoDlMcs, spsOptmzActiveUlLoseCopyFlag=spsOptmzActiveUlLoseCopyFlag, remoteClkModuleRowStatus=remoteClkModuleRowStatus, rrcPreset4=rrcPreset4, pdschTable=pdschTable, plRiaCharactSeqCheckNum=plRiaCharactSeqCheckNum, plsfn4Prb26RIPAvg=plsfn4Prb26RIPAvg, ppHcAlgTag=ppHcAlgTag, phyCfgIotScSmartAlarmThresholdH=phyCfgIotScSmartAlarmThresholdH, retAntDownloadFromDestination=retAntDownloadFromDestination, plReceivePowerUserIndex18=plReceivePowerUserIndex18, anteEntry=anteEntry, spsOptmzVPMCPcktNum=spsOptmzVPMCPcktNum, hsupaTfrcLcId=hsupaTfrcLcId, encryptAlgorithmRowStatus=encryptAlgorithmRowStatus, plsfn3Prb31RIPAvg=plsfn3Prb31RIPAvg, rrcConnReEstabInterEnbSucc=rrcConnReEstabInterEnbSucc, plsfn6Prb24RIPAvg=plsfn6Prb24RIPAvg, topoSetRRUPortSubtoAntGrpID=topoSetRRUPortSubtoAntGrpID, omLinkLocalIpMask=omLinkLocalIpMask, pdcpParaCfgEntry=pdcpParaCfgEntry, s1ErrorIndicatByMMETransport=s1ErrorIndicatByMMETransport, plsfn1Prb73RIPAvg=plsfn1Prb73RIPAvg, imaGrpIndex=imaGrpIndex, cellShedSib8Period=cellShedSib8Period, spsOptmzQci1NoSpsFlag=spsOptmzQci1NoSpsFlag, extendDrbQci=extendDrbQci, erabRelFailNbrHardwareFailure=erabRelFailNbrHardwareFailure, netAntArrayModel=netAntArrayModel, macPreset32=macPreset32, cellAdjCdma2000FreqType=cellAdjCdma2000FreqType, plsfn4Prb89RIPAvg=plsfn4Prb89RIPAvg, anrMode=anrMode, ulPwrP0UePuschNonPersistantSched=ulPwrP0UePuschNonPersistantSched, erabEstabInitFailNbrRadioResNotAvailable=erabEstabInitFailNbrRadioResNotAvailable, macsche1cce=macsche1cce, voicePakStatisticTable=voicePakStatisticTable, pagingLcId=pagingLcId, cacMaxActiveBearNumPerCell=cacMaxActiveBearNumPerCell, atuRetxCfgSwitch=atuRetxCfgSwitch, heatExOverTemperatureLimit=heatExOverTemperatureLimit, plsfn0Prb33RIPAvg=plsfn0Prb33RIPAvg, rhubOptTransVendorName=rhubOptTransVendorName, plsfn1Prb88RIPAvg=plsfn1Prb88RIPAvg, eNBMeasComCfg=eNBMeasComCfg, hsdpaTfrcLcId=hsdpaTfrcLcId, retSubIndexNo=retSubIndexNo, phyCfgSpeedDetectHighTimes=phyCfgSpeedDetectHighTimes, plsfn2Prb79RIPAvg=plsfn2Prb79RIPAvg, omLinkEnableMacQos=omLinkEnableMacQos, phyULMaxNLPRB11=phyULMaxNLPRB11, euePeriodRptAlgoType=euePeriodRptAlgoType, macUpMuMiMoPairDeltaRecPwrThr=macUpMuMiMoPairDeltaRecPwrThr, plsfn9Prb20RIPAvg=plsfn9Prb20RIPAvg, transactionProcedureStatus=transactionProcedureStatus, timeSlotTypeNeighCell25=timeSlotTypeNeighCell25, sfn7avgripLcId=sfn7avgripLcId, omLinkDefaultGWIpAddr=omLinkDefaultGWIpAddr, hoSuccPrepOutInterFreqS1PartialHandover=hoSuccPrepOutInterFreqS1PartialHandover, lcAcProbFactorForMoc3=lcAcProbFactorForMoc3, adjeNBPlmnMcc=adjeNBPlmnMcc, a2Hysteresis=a2Hysteresis, activeAlarmTable=activeAlarmTable, hlTestSwitchLbLogProtectedSwitch=hlTestSwitchLbLogProtectedSwitch, hoFailPrepIncIntraFreqIntraEnbParameterError=hoFailPrepIncIntraFreqIntraEnbParameterError, cellBlockStatus=cellBlockStatus, clkCommRunState=clkCommRunState, ccOlpcBlerTarget=ccOlpcBlerTarget, volteSchedulingRowStatus=volteSchedulingRowStatus, acCfgPowLowThreshold=acCfgPowLowThreshold, activeAlarmCurrentValue=activeAlarmCurrentValue, rlcPreset34=rlcPreset34, fcAgchDpchOffsetTxa=fcAgchDpchOffsetTxa, invAntArrayNo=invAntArrayNo, nbrscheprbulMcs10=nbrscheprbulMcs10, hsdpaHarqRvQpsk3New=hsdpaHarqRvQpsk3New, timeSlotTypeEntry=timeSlotTypeEntry, pwdExpireReminderTime=pwdExpireReminderTime)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", lmcCacDlPrbLoadTh=lmcCacDlPrbLoadTh, erabModQoSSuccNbrQci3=erabModQoSSuccNbrQci3, netRRURootAlarmType5=netRRURootAlarmType5, cellGeranFreqStartingArfcn=cellGeranFreqStartingArfcn, fcSichSdmaIsolation=fcSichSdmaIsolation, plsfn1Prb34RIPAvg=plsfn1Prb34RIPAvg, cellAntWeightAmplitude14=cellAntWeightAmplitude14, macTestSwitchInfoInitULPreScheFlag=macTestSwitchInfoInitULPreScheFlag, macPreReSchNumUL=macPreReSchNumUL, boardSoftwareFileIndex=boardSoftwareFileIndex, macTestSwitchInfoSibPrbAddSwitch=macTestSwitchInfoSibPrbAddSwitch, pdcpUpPktDiscardRateDlQci1Enb=pdcpUpPktDiscardRateDlQci1Enb, cellPrbRatioTable=cellPrbRatioTable, adjeNBMmeGroupId15=adjeNBMmeGroupId15, invPortPortNo=invPortPortNo, macUpAlgorithmUlT=macUpAlgorithmUlT, pdcpVideoReserver16VideoActive=pdcpVideoReserver16VideoActive, hoHoPreSuccOMC=hoHoPreSuccOMC, mroNotiTime=mroNotiTime, pdcpSduDlDropRatioLcId=pdcpSduDlDropRatioLcId, hsdpaSimpleFlowCtrlTable=hsdpaSimpleFlowCtrlTable, macPhrIndex20=macPhrIndex20, schePrbAcoordingMCSRowStatus=schePrbAcoordingMCSRowStatus, macUpAlgorithmSINRMax=macUpAlgorithmSINRMax, hoSuccOutInterFreqOMC=hoSuccOutInterFreqOMC, apbMaxJointCmrFlag=apbMaxJointCmrFlag, pdcpUlSduAirDropRatioTable=pdcpUlSduAirDropRatioTable, netEthPortRackNo=netEthPortRackNo, spsOptmzPacketLoseTimer=spsOptmzPacketLoseTimer, pdcpUpPktLossRateUlQci7Enb=pdcpUpPktLossRateUlQci7Enb, hoSuccIncFddTddX2=hoSuccIncFddTddX2, fcPdschPwrThreshold16QamQpsk=fcPdschPwrThreshold16QamQpsk, antWeightRowStatus=antWeightRowStatus, plsfn5Prb45RIPAvg=plsfn5Prb45RIPAvg, hsdpaQosRTExtraPriority=hsdpaQosRTExtraPriority, tdsLcId=tdsLcId, plIotLogFileDirectory=plIotLogFileDirectory, plsfn5Prb86RIPAvg=plsfn5Prb86RIPAvg, plIotLogServerConfig=plIotLogServerConfig, rrcMchCaseRelP6=rrcMchCaseRelP6, radioBandRowStatus=radioBandRowStatus, cellAcBarList4ForSigalling=cellAcBarList4ForSigalling, phyNbrCqi4=phyNbrCqi4, sjm1TotalVruNum=sjm1TotalVruNum, raeMinimumSupportedElectricalTilt=raeMinimumSupportedElectricalTilt, plsfn4Prb76RIPAvg=plsfn4Prb76RIPAvg, ipAddrEntry=ipAddrEntry, s1FaultPolicy=s1FaultPolicy, phyCfgIotScNotSmartAlarmThresholdH=phyCfgIotScNotSmartAlarmThresholdH, fcUlssSnrFlag=fcUlssSnrFlag, hsdpaMAXCITable=hsdpaMAXCITable, fileAutoUpInetAddrType=fileAutoUpInetAddrType, sscServerInetAddr=sscServerInetAddr, arpStatusMacStatus=arpStatusMacStatus, timerInterRatGeranCco=timerInterRatGeranCco, rhubEthFpgaBer=rhubEthFpgaBer, srsCycshift5=srsCycshift5, macTestSwitchTaDelta=macTestSwitchTaDelta, interRatLbParaEntry=interRatLbParaEntry, alarmAffectNetworkMode=alarmAffectNetworkMode, mrStartDate=mrStartDate, csirsEntry=csirsEntry, macNbrTbUlMassiveMimoSM4=macNbrTbUlMassiveMimoSM4, volteHOAttOutInterEnbS1IntraFreqN=volteHOAttOutInterEnbS1IntraFreqN, macMumimoMaxPairUserUl=macMumimoMaxPairUserUl, raeParamAntennaBearing=raeParamAntennaBearing, macPhrIndex49=macPhrIndex49, ueAdaptiveIrcNum=ueAdaptiveIrcNum, saalConnTxDiscardedPdus=saalConnTxDiscardedPdus, swFilePackVersionIndex=swFilePackVersionIndex, cellAntWeightAmplitude23=cellAntWeightAmplitude23, topoRRUPACurrentRRUNo=topoRRUPACurrentRRUNo, boardStorageDev=boardStorageDev, nbrschetimesulMcs3=nbrschetimesulMcs3, cellAdjDelCellCdmaFreq=cellAdjDelCellCdmaFreq, erabRelMmeNbrTransport=erabRelMmeNbrTransport, drbSecondaryPdcpCfgId=drbSecondaryPdcpCfgId, netRHUBAccessShelfNo=netRHUBAccessShelfNo, dlCAPwrDeltaPowerPhichMargin=dlCAPwrDeltaPowerPhichMargin, irathoSuccIncTdscdma=irathoSuccIncTdscdma, ofpPortModuleBitRate=ofpPortModuleBitRate, eventSynchronizationTraps=eventSynchronizationTraps, plsfn1Prb42RIPAvg=plsfn1Prb42RIPAvg, releasedActiveERABLcId=releasedActiveERABLcId, macPhrIndex13=macPhrIndex13, plReceivePowerMax=plReceivePowerMax, cellCompanyVideoReserver16VideoNum=cellCompanyVideoReserver16VideoNum, drbTable=drbTable, managerMode=managerMode, plRiaNormalStaCheckPeriod=plRiaNormalStaCheckPeriod, airCondUnderVoltageAlarmState=airCondUnderVoltageAlarmState, plADIRaPreambleTrMax=plADIRaPreambleTrMax, plsfn1Prb36RIPAvg=plsfn1Prb36RIPAvg, plsfn7Prb98RIPAvg=plsfn7Prb98RIPAvg, licenseFeatureName=licenseFeatureName, hsdpaHarqRv16Qam5=hsdpaHarqRv16Qam5, plsfn9Prb62RIPAvg=plsfn9Prb62RIPAvg, anrMeasEventSwitch=anrMeasEventSwitch, erabRelMmeNbrQci1Transfer=erabRelMmeNbrQci1Transfer, pdcpThroughputTimeLcId=pdcpThroughputTimeLcId, remoteLmtRoutePeerIpMask=remoteLmtRoutePeerIpMask, pdcpDlAirSduDropTotalNumberQci6=pdcpDlAirSduDropTotalNumberQci6, cqiValidNofPucch2PerPrb=cqiValidNofPucch2PerPrb, sysStartMode=sysStartMode, boardStorageDevRowStatus=boardStorageDevRowStatus, cellCAParaTable=cellCAParaTable, circuitPackVersionNumber=circuitPackVersionNumber, rruPortSelfAdaptiveCtrlSwitch=rruPortSelfAdaptiveCtrlSwitch, sd=sd, s1ErrorIndicatByMMEMiscellaneous=s1ErrorIndicatByMMEMiscellaneous, rbFailEstabReEstab=rbFailEstabReEstab, initCalibrationAnt5RxStatus=initCalibrationAnt5RxStatus, plsfn1Prb00RIPAvg=plsfn1Prb00RIPAvg, rrcPreset39=rrcPreset39, apX2apRelP5=apX2apRelP5, netLcRadioChannelCombinSwitch=netLcRadioChannelCombinSwitch, plsfn7Prb38RIPAvg=plsfn7Prb38RIPAvg, atuULQuitPeriodThreshold=atuULQuitPeriodThreshold, debugUploadType=debugUploadType, sjm1FreqShiftSwitch=sjm1FreqShiftSwitch, hsdpaSpi4Weight=hsdpaSpi4Weight, hsupaQosNewAccSetBThreshold=hsupaQosNewAccSetBThreshold, cellAntWeightAmplitude22=cellAntWeightAmplitude22, userPwd=userPwd, acCfgEntry=acCfgEntry, eueTimerRowStatus=eueTimerRowStatus, sfn0avgripRowStatus=sfn0avgripRowStatus, activeAlarmSeverity=activeAlarmSeverity, mdtTaskTRSR=mdtTaskTRSR, macCellCompUeNumQci5=macCellCompUeNumQci5, adjeNBMmeGroupId2=adjeNBMmeGroupId2, sscUuExternBitmap=sscUuExternBitmap, hlGlobalTestSwitchMroSwitch=hlGlobalTestSwitchMroSwitch, rrcRecoverCrsPowerTimeOut=rrcRecoverCrsPowerTimeOut, eventB1Table=eventB1Table, plsfn5Prb54RIPAvg=plsfn5Prb54RIPAvg, macPreLowMCSSchNumUL=macPreLowMCSSchNumUL, phyNbrCqi7=phyNbrCqi7, timerS1RLOCpre=timerS1RLOCpre, alcapInRouteAddr=alcapInRouteAddr, mroA4ThBaseLowTh=mroA4ThBaseLowTh, hsdpaEFACHSchedNode=hsdpaEFACHSchedNode, pdcpPreset30=pdcpPreset30, erabNbrHoIncQci8=erabNbrHoIncQci8, ueAdaptiveIrcStatTable=ueAdaptiveIrcStatTable, plsfn6Prb18RIPAvg=plsfn6Prb18RIPAvg, macBbuSourceCoreIndex=macBbuSourceCoreIndex, amrDlVoipPacketWb8=amrDlVoipPacketWb8, cellAdjDelCellPlmnMcc=cellAdjDelCellPlmnMcc, plsfn5Prb92RIPAvg=plsfn5Prb92RIPAvg, lmcMlbMrDeltaRsrpRatio=lmcMlbMrDeltaRsrpRatio, plsfn8Prb99RIPAvg=plsfn8Prb99RIPAvg, hoAvgTimeInterEnbS1=hoAvgTimeInterEnbS1, procCoreShelfNo=procCoreShelfNo, localCarrierRxACKNum=localCarrierRxACKNum, sfn2avgripLcId=sfn2avgripLcId, macDownlinkDlPfScaleRate=macDownlinkDlPfScaleRate, plsfn8Prb82RIPAvg=plsfn8Prb82RIPAvg, clockCommon=clockCommon, pathRnc2NbMbs=pathRnc2NbMbs, plsfn7Prb46RIPAvg=plsfn7Prb46RIPAvg, fileControl=fileControl, erabEstabInitFailNbrQci2InterWithOtherProc=erabEstabInitFailNbrQci2InterWithOtherProc, omLinkShelfNo=omLinkShelfNo, verProtectSwitch=verProtectSwitch, anrNotiAdjCellId=anrNotiAdjCellId, hoFailPrepIncIntraFreqX2PerEncodeFail=hoFailPrepIncIntraFreqX2PerEncodeFail, sfn8maxripEntry=sfn8maxripEntry, lbcAdjCellDlPrbUsageTh3=lbcAdjCellDlPrbUsageTh3, macPreset26=macPreset26, erabRelProcLcId=erabRelProcLcId, plsfn0Prb86RIPAvg=plsfn0Prb86RIPAvg, ccDeltaUpStep=ccDeltaUpStep, tdsNetLocalCellEntry=tdsNetLocalCellEntry, outDoorCabinetRowStatus=outDoorCabinetRowStatus, plsfn5Prb05RIPAvg=plsfn5Prb05RIPAvg, activeAlarmThreshHold=activeAlarmThreshHold, lbcUserPeriodNum=lbcUserPeriodNum, cceCclrRowStatus=cceCclrRowStatus, pdcchCceDlMeanRowStatus=pdcchCceDlMeanRowStatus, phyULMaxNLPRB67=phyULMaxNLPRB67, alarmBoxVersion=alarmBoxVersion, plADIUlPwrAlpha=plADIUlPwrAlpha, hsdpaCQINACKToACKRatio=hsdpaCQINACKToACKRatio, mroNotiAdjCellPlmnMnc=mroNotiAdjCellPlmnMnc, rbSuccEstabQci6=rbSuccEstabQci6, transactionResultNotiNEType=transactionResultNotiNEType, phyULMaxNLPRB25=phyULMaxNLPRB25, plsfn7PrbG14RIPMax=plsfn7PrbG14RIPMax, alterationNotiNEType=alterationNotiNEType, hsdpaSpi1Weight=hsdpaSpi1Weight, hoSuccOutInterFreqS1=hoSuccOutInterFreqS1, hoAttOutIntraFreqS1=hoAttOutIntraFreqS1, plRiaLogServerDirectory=plRiaLogServerDirectory, macDownlinkCqi22Tm3=macDownlinkCqi22Tm3, raeDownloadFromDestination=raeDownloadFromDestination, activeAlarmAssociatedRequestId=activeAlarmAssociatedRequestId, eventA6Table=eventA6Table, retAntRCUSelfTestTrigger=retAntRCUSelfTestTrigger, sigSctpHearbeatResp=sigSctpHearbeatResp, remoteClkModuleLockSateNum=remoteClkModuleLockSateNum, ppHcAlgRowStatus=ppHcAlgRowStatus, hlTestSwitchDrxUeNumSwitch=hlTestSwitchDrxUeNumSwitch, massiveMIMORowStatus=massiveMIMORowStatus, ofpPortEntry=ofpPortEntry, cellGeranFreqVariableBitMapOfArfcns3=cellGeranFreqVariableBitMapOfArfcns3, rrcConnReEstabInterEnbUEContextSucc=rrcConnReEstabInterEnbUEContextSucc, daughterBoardVersionNumber=daughterBoardVersionNumber, phyULMaxNLPRB22=phyULMaxNLPRB22, chacDlPrbTh=chacDlPrbTh, macSpsPrbDl=macSpsPrbDl, atuSrNormalVolteLimitSwitch=atuSrNormalVolteLimitSwitch, raeBmIndicatTiltRangeL=raeBmIndicatTiltRangeL, cellLccRowStatus=cellLccRowStatus, drbTCPSduReceivedDl=drbTCPSduReceivedDl, rlcPreset28=rlcPreset28, hsupaTfrcDeltaSich=hsupaTfrcDeltaSich, plsfn6Prb73RIPAvg=plsfn6Prb73RIPAvg, mrMeasCtrlEutraDifFreSwitch=mrMeasCtrlEutraDifFreSwitch, nbrschetimesdlMcs1=nbrschetimesdlMcs1, pdcpVideoMgTVVideoActive=pdcpVideoMgTVVideoActive, nodebBlockStateNotiNEID=nodebBlockStateNotiNEID, macUpAlgorithmTTIbndlngSwtch=macUpAlgorithmTTIbndlngSwtch, macUpAlgorithmType=macUpAlgorithmType, invAntArrayVendor=invAntArrayVendor, macPrbUsedNumDLLowSpeedUser=macPrbUsedNumDLLowSpeedUser, phyCfgTimeValidThreshold=phyCfgTimeValidThreshold, pdcpIPThroughputUlQci5=pdcpIPThroughputUlQci5, plsfn7Prb63RIPAvg=plsfn7Prb63RIPAvg, mibAuthorizationMIBName=mibAuthorizationMIBName, cellGeranFreqVariableBitMapOfArfcns9=cellGeranFreqVariableBitMapOfArfcns9, rrcConnEstabTimeMeanEmergency=rrcConnEstabTimeMeanEmergency, macNbrRbDlTm9SFBC=macNbrRbDlTm9SFBC, rrcConnReEstabInterEnbScfailOther=rrcConnReEstabInterEnbScfailOther, macPhrIndex57=macPhrIndex57, erabEstabInitFailNbrQci1AlgoNotSupported=erabEstabInitFailNbrQci1AlgoNotSupported, e1ErrorRateAlarmParam=e1ErrorRateAlarmParam, plsfn6Prb66RIPAvg=plsfn6Prb66RIPAvg, topoRRUTempCompensationPeriod=topoRRUTempCompensationPeriod, cellInterRatCdma1xRTTSfMedium=cellInterRatCdma1xRTTSfMedium, carrierRuTs6Info=carrierRuTs6Info, cellInterRatTreselectionCdmaHRPD=cellInterRatTreselectionCdmaHRPD, irathoFailPrepIncGprsResourceAllocFailure=irathoFailPrepIncGprsResourceAllocFailure, macNbrTbUlMassiveMimoSM5=macNbrTbUlMassiveMimoSM5, arpStatusVlanId=arpStatusVlanId, macNbrRbDlTm7BF=macNbrRbDlTm7BF, srsSimTXAckNackAndSRS=srsSimTXAckNackAndSRS, licenseManagement=licenseManagement, equipStartupNotiCfgFileName=equipStartupNotiCfgFileName, macTestSwitchInfoUlMaxScheUeNum=macTestSwitchInfoUlMaxScheUeNum, rruPdcchCceAvailUlDciSf=rruPdcchCceAvailUlDciSf, plsfn3Prb09RIPAvg=plsfn3Prb09RIPAvg, voipRtpPacketLosDl=voipRtpPacketLosDl, pdcpThrpTimeDLQci4=pdcpThrpTimeDLQci4)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", phyCfgTm9BfType=phyCfgTm9BfType, cellReselComThreshServLowQ=cellReselComThreshServLowQ, hoFailPrepIncIntraFreqIntraEnbPucch=hoFailPrepIncIntraFreqIntraEnbPucch, drbPdcpSduBitLenUlQci8=drbPdcpSduBitLenUlQci8, hlTestSwitchcellUpIoTupOffsetUserType=hlTestSwitchcellUpIoTupOffsetUserType, plsfn9Prb99RIPAvg=plsfn9Prb99RIPAvg, omTestLogSwitch=omTestLogSwitch, ppHcAlgTable=ppHcAlgTable, sjm1DasIscpPathMinThreshold=sjm1DasIscpPathMinThreshold, lcConfigEts0Switch=lcConfigEts0Switch, periodCalibrationRxCalGain=periodCalibrationRxCalGain, erabThpTimeUlQci5=erabThpTimeUlQci5, pmExpValueCounter32Val=pmExpValueCounter32Val, selfStartupIpSecSwitch=selfStartupIpSecSwitch, pdcpUlAirSduSendTotalNumberQci2=pdcpUlAirSduSendTotalNumberQci2, invRhubManufactureName=invRhubManufactureName, invRruSerialNumber=invRruSerialNumber, a4MeasPurpose=a4MeasPurpose, cellInterRatUtraSfHigh=cellInterRatUtraSfHigh, plsfn0Prb29RIPAvg=plsfn0Prb29RIPAvg, plsfn4Prb65RIPAvg=plsfn4Prb65RIPAvg, hsupaMaxCITmR=hsupaMaxCITmR, reservedCellL1Para2=reservedCellL1Para2, mlbNotificationNode=mlbNotificationNode, plsfn2Prb05RIPAvg=plsfn2Prb05RIPAvg, rbEstabProcEntry=rbEstabProcEntry, ethShelfNo=ethShelfNo, reservedCellL1Para8=reservedCellL1Para8, pdcpVideoReserver20VideoActive=pdcpVideoReserver20VideoActive, topoRRUUnavaiableReason=topoRRUUnavaiableReason, hlTestSwitchAdjCellPowerReducedStep=hlTestSwitchAdjCellPowerReducedStep, spsOptmzAmrcTgtRate=spsOptmzAmrcTgtRate, pdcpUpPktDelayDlQci5Enb=pdcpUpPktDelayDlQci5Enb, hsdpaSpsSchedTable=hsdpaSpsSchedTable, erabRelEnbNbrQci3=erabRelEnbNbrQci3, ofpPortMatchStatus=ofpPortMatchStatus, rruOptTransFpgaStatus=rruOptTransFpgaStatus, ofPortActiveStatus=ofPortActiveStatus, gpsRackNo=gpsRackNo, macPreset9=macPreset9, baseBandCarrierLocalCellId=baseBandCarrierLocalCellId, nbrscheprbulMcs3=nbrscheprbulMcs3, plsfn5Prb02RIPAvg=plsfn5Prb02RIPAvg, erabThpTimeUlQci6=erabThpTimeUlQci6, plsfn7PrbG18RIPMax=plsfn7PrbG18RIPMax, caMacScellHiddenDeActSwitch=caMacScellHiddenDeActSwitch, plsfn7PrbG15RIPMax=plsfn7PrbG15RIPMax, fcScchInitTxp=fcScchInitTxp, hsdpaCongestCtrlEntry=hsdpaCongestCtrlEntry, ofpPortModuleRxPower=ofpPortModuleRxPower, macSwitchTestInfoTaPdcchOrderTimes=macSwitchTestInfoTaPdcchOrderTimes, icicEdgeUeDlPrbSchedPri2=icicEdgeUeDlPrbSchedPri2, erabRelSuccNbrQci2=erabRelSuccNbrQci2, configProcessNotificationObjects=configProcessNotificationObjects, plUsrLogDlDataSaveTimes=plUsrLogDlDataSaveTimes, cellAdjCellPlmnMcc=cellAdjCellPlmnMcc, erabEstabAddFailNbrTransferSyntaxError=erabEstabAddFailNbrTransferSyntaxError, sfn4avgripLcId=sfn4avgripLcId, sjm1ThreshIrtPeak=sjm1ThreshIrtPeak, s1SigProcLcId=s1SigProcLcId, irathoFailPrepOutUtranOtherFailure=irathoFailPrepOutUtranOtherFailure, hoNcHoPreAttLB=hoNcHoPreAttLB, plsfn8PrbG10RIPMax=plsfn8PrbG10RIPMax, lbcCacUserNumber=lbcCacUserNumber, rrcCellSrsRel=rrcCellSrsRel, macPrbUtilizationUlMax=macPrbUtilizationUlMax, plsfn4Prb27RIPAvg=plsfn4Prb27RIPAvg, eNBPathShutdownPriority=eNBPathShutdownPriority, macCaActivePrbPCellDl=macCaActivePrbPCellDl, selfStartupAlgorithmInfo=selfStartupAlgorithmInfo, antUseingWeightAmplitude7=antUseingWeightAmplitude7, hsdpaSpiTmRate=hsdpaSpiTmRate, icicMacSemiStaticConfDlM1=icicMacSemiStaticConfDlM1, rrcRbcCaseRelP2=rrcRbcCaseRelP2, remoteClkModuleSignalValue=remoteClkModuleSignalValue, rrcCpmCaseRelP7=rrcCpmCaseRelP7, remoteClockModule=remoteClockModule, phyCfgPucchNormalCpFmt1ActiveThred1Ant=phyCfgPucchNormalCpFmt1ActiveThred1Ant, macSRBTbDlTm8=macSRBTbDlTm8, caRlcOveloadThr=caRlcOveloadThr, s1hoCancelProcInterEnbRowStatus=s1hoCancelProcInterEnbRowStatus, vlanIdEntry=vlanIdEntry, loggedMdtTaRowStatus=loggedMdtTaRowStatus, macNbrRbUlMassiveMimoSM2=macNbrRbUlMassiveMimoSM2, plsfn4Prb01RIPAvg=plsfn4Prb01RIPAvg, hoFailPrepIncIntraFreqX2ParameterError=hoFailPrepIncIntraFreqX2ParameterError, traceTaskEntry=traceTaskEntry, sigSctpDataChunkReceived=sigSctpDataChunkReceived, spsOptmzUpAlgActvThr=spsOptmzUpAlgActvThr, macPhrIndex19=macPhrIndex19, topoRHUBRemoteResetNextRHUBTrigger=topoRHUBRemoteResetNextRHUBTrigger, sctpStreamIdRx=sctpStreamIdRx, plReceivePowerIndex10=plReceivePowerIndex10, macTestSwitchInfoUlMimoSwitch=macTestSwitchInfoUlMimoSwitch, pucchAckNackFeedbackMode=pucchAckNackFeedbackMode, caRowStatus=caRowStatus, drbPdcpSduDelayDlQci6=drbPdcpSduDelayDlQci6, macDownlinkDlAntSelectThresCqiMedium=macDownlinkDlAntSelectThresCqiMedium, iubIPPathIPPortIndex=iubIPPathIPPortIndex, pdcpVideoReserver19VideoActive=pdcpVideoReserver19VideoActive, bbuWaitDCARegulateResultTimer=bbuWaitDCARegulateResultTimer, swFilePackTypeIndex=swFilePackTypeIndex, eueMeasCellNumCellChangeHigh=eueMeasCellNumCellChangeHigh, plUsrLogRowStatus=plUsrLogRowStatus, reservedENBOmPara5=reservedENBOmPara5, cellCompanyVideoReserver12VideoNum=cellCompanyVideoReserver12VideoNum, rrcActiveNbrPCellDl3CC=rrcActiveNbrPCellDl3CC, carrierUpTs3CofStatus=carrierUpTs3CofStatus, saalConnRnc2NbCdvt=saalConnRnc2NbCdvt, macDonwlinkMuMiMoUePairAoADiffThr=macDonwlinkMuMiMoUePairAoADiffThr, equipStartupStage=equipStartupStage, macSwitchTestInfoIpPacketThr=macSwitchTestInfoIpPacketThr, ipPathIndex=ipPathIndex, rrcProcofRUETable=rrcProcofRUETable, ftpServerLoginName=ftpServerLoginName, puschbetaOffsetACKIndexMC=puschbetaOffsetACKIndexMC, voLTEHandOverInTDLTELcId=voLTEHandOverInTDLTELcId, apS1apRelP2=apS1apRelP2, dlCAPwrTargetSinr1Cce3=dlCAPwrTargetSinr1Cce3, hoFailIncInterFreqInterCellIntraEnbCellBlock=hoFailIncInterFreqInterCellIntraEnbCellBlock, timerWaitOtherSfuRsp=timerWaitOtherSfuRsp, sfn7avgripEntry=sfn7avgripEntry, extendDrbIndex=extendDrbIndex, measGapEntry=measGapEntry, configFileRowStatus=configFileRowStatus, plsfn3Prb38RIPAvg=plsfn3Prb38RIPAvg, plReceivePowerUserIndex21=plReceivePowerUserIndex21, lmcLccLoadDetectPrd=lmcLccLoadDetectPrd, macTestSwitchInfoDlPdbScheFlag=macTestSwitchInfoDlPdbScheFlag, carrierTs1ISCP=carrierTs1ISCP, cmdAuthorizationEntry=cmdAuthorizationEntry, eNBIotAlarmSwitch=eNBIotAlarmSwitch, macBbuSourceShelfNo=macBbuSourceShelfNo, mrNcRsrpOffset=mrNcRsrpOffset, erabInterWithHandOverLcId=erabInterWithHandOverLcId, cellUlAnteIotAntNo=cellUlAnteIotAntNo, raeParamTilt=raeParamTilt, mrDim1MrsBitMap=mrDim1MrsBitMap, omLinkPhyType=omLinkPhyType, transactionDataFileDirectory=transactionDataFileDirectory, emEquipmentEntry=emEquipmentEntry, nbrschetimesdlMcs6=nbrschetimesdlMcs6, rhubOptTransFpgaStatus=rhubOptTransFpgaStatus, drbSecondaryMode=drbSecondaryMode, cacPositionTable=cacPositionTable, b1CfgId=b1CfgId, phyULMaxNLPRB99=phyULMaxNLPRB99, retAntRCUOperationState=retAntRCUOperationState, sigSctpDataChunkReSentDl=sigSctpDataChunkReSentDl, antennaArrayTypeEntry=antennaArrayTypeEntry, arpAgedPeriod=arpAgedPeriod, cellSpeCalCfgMacAckCollideMcsThr=cellSpeCalCfgMacAckCollideMcsThr, lmcMlbHighLoadThUl=lmcMlbHighLoadThUl, apX2apRelP10=apX2apRelP10, plsfn1Prb83RIPAvg=plsfn1Prb83RIPAvg, plsfn1Prb50RIPAvg=plsfn1Prb50RIPAvg, contextAttRelMMENbrNormalRelease=contextAttRelMMENbrNormalRelease, s1InterfaceIPStatEntry=s1InterfaceIPStatEntry, fcCIREndThreshold=fcCIREndThreshold, topoRRUMacAddr=topoRRUMacAddr, drbUEActiveDlQci7=drbUEActiveDlQci7, rtRelatRowStatus=rtRelatRowStatus, phyULMeanNLPRB69=phyULMeanNLPRB69, raeParamTable=raeParamTable, carrierTs4RxPower=carrierTs4RxPower, pdcpVideoLeTVVideoActive=pdcpVideoLeTVVideoActive, anrRemThForActiveTimesInterRat=anrRemThForActiveTimesInterRat, topoSetRRUSendAndRecvAbility=topoSetRRUSendAndRecvAbility, contextAttReleNBNbrCongestion=contextAttReleNBNbrCongestion, phyTA4=phyTA4, macSwitchInfoSignalConThr=macSwitchInfoSignalConThr, antUseingWeightAmplitude4=antUseingWeightAmplitude4, srNbrScheTimesSfn2=srNbrScheTimesSfn2, topoRRUCarrier16ULPowerValue=topoRRUCarrier16ULPowerValue, atuGoldUeIMSI26=atuGoldUeIMSI26, plsfn4Prb80RIPAvg=plsfn4Prb80RIPAvg, macPhrIndex42=macPhrIndex42, lccRowStatus=lccRowStatus, cellAdjGeranDirectTunnelFlag=cellAdjGeranDirectTunnelFlag, timerHcTarHandover=timerHcTarHandover, handOverProcTimeInterEnbLcId=handOverProcTimeInterEnbLcId, volteHOSuccOutInterEnbS1IntraFreq=volteHOSuccOutInterEnbS1IntraFreq, hoNcHoPreAttM=hoNcHoPreAttM, lteFddTddHOTable=lteFddTddHOTable, erabActiveMeanNbrDLQci4=erabActiveMeanNbrDLQci4, plRiaCellCfgEntry=plRiaCellCfgEntry, peripheralPackPlanEntry=peripheralPackPlanEntry, cellAdjUtraTddCellArfcn=cellAdjUtraTddCellArfcn, raeSubUnitNum=raeSubUnitNum, hoFailIncInterFreqInterCellIntraEnbOthers=hoFailIncInterFreqInterCellIntraEnbOthers, boardSoftwareFileRowStatus=boardSoftwareFileRowStatus, peripheralPackVersionIndex=peripheralPackVersionIndex, timeSlotTypeNeighCell4=timeSlotTypeNeighCell4, nbrscheprbdlMcs31=nbrscheprbdlMcs31, plsfn8Prb95RIPAvg=plsfn8Prb95RIPAvg, ipLogicPort=ipLogicPort, clkSrcType=clkSrcType, phyCfgRowStatus=phyCfgRowStatus, plsfn3Prb02RIPAvg=plsfn3Prb02RIPAvg, boardOperationalState=boardOperationalState, ethPortDataStatEthPhyPortId=ethPortDataStatEthPhyPortId, cellAdjCellRowStatus=cellAdjCellRowStatus, macMumimoPairRbUlRank2=macMumimoPairRbUlRank2, antUseingWeightPhase2=antUseingWeightPhase2, plsfn4Prb00RIPAvg=plsfn4Prb00RIPAvg, pathNb2RncCdvt=pathNb2RncCdvt, volteHOSuccOutPrepInterEnbS1InterFreq=volteHOSuccOutPrepInterEnbS1InterFreq, plsfn5Prb19RIPAvg=plsfn5Prb19RIPAvg, hsdpaSFCMinMacPduNum=hsdpaSFCMinMacPduNum, plsfn6Prb29RIPAvg=plsfn6Prb29RIPAvg, cellAdjDelCellIdGeran=cellAdjDelCellIdGeran, macSwitchInfoRlcUeInactiveSwitch=macSwitchInfoRlcUeInactiveSwitch, invRhubTable=invRhubTable, plsfn6Prb41RIPAvg=plsfn6Prb41RIPAvg, topoRHUBResetTrigger=topoRHUBResetTrigger, macTestSwitchInfoDlScrambleSwitch=macTestSwitchInfoDlScrambleSwitch, omLinkPeerIpAddr=omLinkPeerIpAddr, netRETAntRCULocation=netRETAntRCULocation, cqiNumberStatisticTable=cqiNumberStatisticTable, b1MeasPurpose=b1MeasPurpose, atuGoldUeIMSI40=atuGoldUeIMSI40, macNbrRbDlMassiveMimoSM10=macNbrRbDlMassiveMimoSM10, plsfn6Prb82RIPAvg=plsfn6Prb82RIPAvg, icicHiiSetPriA2=icicHiiSetPriA2, boardProcessor=boardProcessor, closeTimeSlot=closeTimeSlot, macUpAlgorithmTTIbndlngSnrAdd=macUpAlgorithmTTIbndlngSnrAdd, ipThpDlTable=ipThpDlTable, cellReselIntraFreqNeighbCellCfg=cellReselIntraFreqNeighbCellCfg, remoteLmtRouteRackNo=remoteLmtRouteRackNo, omLinkPhyPortId=omLinkPhyPortId, plReceivePowerUserIndex2=plReceivePowerUserIndex2, eNBMBSFNSwitch=eNBMBSFNSwitch, macPhrIndex7=macPhrIndex7, plsfn6Prb23RIPAvg=plsfn6Prb23RIPAvg, spsIntervalUl=spsIntervalUl, ccOlpcControlPeriod=ccOlpcControlPeriod, ftpServerInetAddrType=ftpServerInetAddrType, rrcPreset11=rrcPreset11, ethernetOAMLoopbackTxCounts=ethernetOAMLoopbackTxCounts, sfn2avgripRowStatus=sfn2avgripRowStatus, alarmNotiSubCauseNo=alarmNotiSubCauseNo, sscStartMinute3=sscStartMinute3, contextAttRelMMENbrDetach=contextAttRelMMENbrDetach, macCaActiveSampNbr=macCaActiveSampNbr, cellReselIntraFreqPresenceAntennaPort1=cellReselIntraFreqPresenceAntennaPort1, gsmCellCenterFreq=gsmCellCenterFreq, lbcUserNumTag=lbcUserNumTag, icicDlStartPrbNoForEdgeUe=icicDlStartPrbNoForEdgeUe, macNbrTbUlMassiveMimoSM1=macNbrTbUlMassiveMimoSM1, recvRlcTUmReordering=recvRlcTUmReordering, timerX2RLOCpre=timerX2RLOCpre, ccHichFmNackUser2=ccHichFmNackUser2, raeParamFreq=raeParamFreq)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", antArrayNum=antArrayNum, plsfn2Prb44RIPAvg=plsfn2Prb44RIPAvg, macUpMuMiMoMcsBackOff12=macUpMuMiMoMcsBackOff12, bfdIndex=bfdIndex, ofpPortModuleActualBitRate=ofpPortModuleActualBitRate, mrFtpServerPassword=mrFtpServerPassword, circuitPackShelfNo=circuitPackShelfNo, mdtMmeSwitch=mdtMmeSwitch, transactionDataFileTimer=transactionDataFileTimer, lbc40FcUlLowestUePrbUsageTh=lbc40FcUlLowestUePrbUsageTh, plRssiAvgC20=plRssiAvgC20, atuVideoTendcellBand=atuVideoTendcellBand, macschecceusedratiosfn7=macschecceusedratiosfn7, voLTEHandOverInTDLTEEntry=voLTEHandOverInTDLTEEntry, hoAttOutInterFreqInterCellIntraEnb=hoAttOutInterFreqInterCellIntraEnb, fileUpRowStatus=fileUpRowStatus, phyCfgUlIterSwitch=phyCfgUlIterSwitch, nbrschetimesulMcs17=nbrschetimesulMcs17, rrcAdmissionConnSampNum=rrcAdmissionConnSampNum, plsfn6Prb83RIPAvg=plsfn6Prb83RIPAvg, plsfn5Prb08RIPAvg=plsfn5Prb08RIPAvg, topoSetRRUTdsCalAIqTxNom=topoSetRRUTdsCalAIqTxNom, atuDLQuitRateThreshold=atuDLQuitRateThreshold, topoRHUBAccessDlTimeDelay=topoRHUBAccessDlTimeDelay, ofpPortIndexOnBoard=ofpPortIndexOnBoard, periodCalibrationTxCalGainTds=periodCalibrationTxCalGainTds, drbPdcpSduTotalDelayDlQci4=drbPdcpSduTotalDelayDlQci4, a3TimetoTrig=a3TimetoTrig, saalConnRxMdPdus=saalConnRxMdPdus, localCarrierRowStatus=localCarrierRowStatus, rrcFailConnReconfigStateError=rrcFailConnReconfigStateError, timeSlotTypeNeighCell29=timeSlotTypeNeighCell29, ipAddrLocalIpAddressType=ipAddrLocalIpAddressType, dlCAPwrTargetSinr8Cce1=dlCAPwrTargetSinr8Cce1, saalRateStatisticPeriod=saalRateStatisticPeriod, rrcSuccConnReconfigHandOverIntraCell=rrcSuccConnReconfigHandOverIntraCell, antUseingWeightRowStatus=antUseingWeightRowStatus, recvRlcTStatusProhibit=recvRlcTStatusProhibit, iubTrafficCategoryDSCP=iubTrafficCategoryDSCP, interRatLoadBalanceVoiceTag=interRatLoadBalanceVoiceTag, macPhrIndex54=macPhrIndex54, spsPucchAnPersistent=spsPucchAnPersistent, erabEstabTimeMean=erabEstabTimeMean, erabEstabAddFailNbrAbstractSyntaxError=erabEstabAddFailNbrAbstractSyntaxError, swPackPlanPackName=swPackPlanPackName, macQci1DownlinkDlStep=macQci1DownlinkDlStep, fileClearFolderTrigger=fileClearFolderTrigger, plsfn9Prb97RIPAvg=plsfn9Prb97RIPAvg, srvccFailPrepOutGeranCovOther=srvccFailPrepOutGeranCovOther, soundingRSEntry=soundingRSEntry, iocRowStatus=iocRowStatus, integrityAlgorithmType=integrityAlgorithmType, srsDci1a2b2cAntannePortAp=srsDci1a2b2cAntannePortAp, drbThpTimeDlQci8=drbThpTimeDlQci8, antUseingWeightPhase7=antUseingWeightPhase7, erabActiveMeanNbrDLQci2=erabActiveMeanNbrDLQci2, erabRelSuccNbrQci8=erabRelSuccNbrQci8, cellGeranFreqTable=cellGeranFreqTable, adjCellECGITimePerUE=adjCellECGITimePerUE, plsfn7Prb57RIPAvg=plsfn7Prb57RIPAvg, softwarePackUpgradeControl=softwarePackUpgradeControl, macDownlinkCsiRsLimitMcs=macDownlinkCsiRsLimitMcs, plsfn8Prb46RIPAvg=plsfn8Prb46RIPAvg, hoOutFailToWrongCellType2=hoOutFailToWrongCellType2, lmcScLoadDetectPrd=lmcScLoadDetectPrd, saalConnDelTrigger=saalConnDelTrigger, macPhrIndex25=macPhrIndex25, drbPdcpSduTotalNumberDlQci3=drbPdcpSduTotalNumberDlQci3, plsfn6Prb87RIPAvg=plsfn6Prb87RIPAvg, pdcpIPThroughputUlQci4=pdcpIPThroughputUlQci4, macBbuSourceOperationalState=macBbuSourceOperationalState, boardTempIndexOnBoard=boardTempIndexOnBoard, rruPrbUlQci4Num=rruPrbUlQci4Num, macPreset22=macPreset22, airCondReturnAirTemperature=airCondReturnAirTemperature, hoHoPreAttTarget=hoHoPreAttTarget, plsfn1Prb32RIPAvg=plsfn1Prb32RIPAvg, cellPhyIdList=cellPhyIdList, hsdpaAlgorithmEntry=hsdpaAlgorithmEntry, erabEstabInitAttNbrQci5=erabEstabInitAttNbrQci5, plADIMacTestSwitchInfolimitUlMcs=plADIMacTestSwitchInfolimitUlMcs, ipControlLink=ipControlLink, plsfn7PrbG7RIPMax=plsfn7PrbG7RIPMax, nbrscheprbulMcs17=nbrscheprbulMcs17, alcapTotalConns=alcapTotalConns, eueMeasCellCfgEntry=eueMeasCellCfgEntry, mroWrongHoNumTh=mroWrongHoNumTh, cellAdjRelationTable=cellAdjRelationTable, macCellCompUeNumQci7=macCellCompUeNumQci7, hsdpaCongestCtrlRestoreCounterTh=hsdpaCongestCtrlRestoreCounterTh, rruTypeMaxAntPathNum=rruTypeMaxAntPathNum, intraRATInterCellHOEntry=intraRATInterCellHOEntry, plsfn0Prb42RIPAvg=plsfn0Prb42RIPAvg, topologyRRUEntry=topologyRRUEntry, daughterBoardDateOfLastService=daughterBoardDateOfLastService, macNbrRbDlMassiveMimoSM11=macNbrRbDlMassiveMimoSM11, netRRUJamResistantSwitch=netRRUJamResistantSwitch, configfilePlanTypeIndex=configfilePlanTypeIndex, macUpAlgorithmCqiModifyVaddMax=macUpAlgorithmCqiModifyVaddMax, sctpStreamIndex=sctpStreamIndex, antArrayDistance=antArrayDistance, licenseFeatureEntry=licenseFeatureEntry, atuAdjCellMrStopSwitch=atuAdjCellMrStopSwitch, sfn8avgripTable=sfn8avgripTable, swPackCustRunningDownloadDirectory=swPackCustRunningDownloadDirectory, antennaArrayFaultDealSwitch=antennaArrayFaultDealSwitch, reservedCellL3Para9=reservedCellL3Para9, tdsNodeBSysCellPerfReportSwitch=tdsNodeBSysCellPerfReportSwitch, saalConnLinkType=saalConnLinkType, rrcConnReleaseRedirectionTo2GNoMea=rrcConnReleaseRedirectionTo2GNoMea, smallPacketUlPacketNumberThreshold=smallPacketUlPacketNumberThreshold, cellReselIntraFreqQualMinFlag=cellReselIntraFreqQualMinFlag, saalConnSscfState=saalConnSscfState, cellGeranFreqGeranBandIndicator=cellGeranFreqGeranBandIndicator, emWaterLocation=emWaterLocation, equivalentprbusagedlmean=equivalentprbusagedlmean, macUpMuMiMoAlgBaseParaTable=macUpMuMiMoAlgBaseParaTable, hsupaSpsSchedRelPuchDetectCntTh=hsupaSpsSchedRelPuchDetectCntTh, plsfn2Prb75RIPAvg=plsfn2Prb75RIPAvg, hoFailOutIntraEnbPrep=hoFailOutIntraEnbPrep, phyULMaxNLPRB06=phyULMaxNLPRB06, caBsrDeactOverloadThr=caBsrDeactOverloadThr, procCPUCheckInterval=procCPUCheckInterval, airCondLocation=airCondLocation, invPortType=invPortType, raeParamEntry=raeParamEntry, dlCAPwrMaxDlCfiNum=dlCAPwrMaxDlCfiNum, cellReselIntraFreqIntraSearchQ=cellReselIntraFreqIntraSearchQ, netAntArrayVendorName=netAntArrayVendorName, macNbrRbDlMassiveMimoSM15=macNbrRbDlMassiveMimoSM15, macMumimoThrpTimeDlRank2=macMumimoThrpTimeDlRank2, pmExpressionIndex=pmExpressionIndex, plsfn3Prb07RIPAvg=plsfn3Prb07RIPAvg, phyCfgPucchSrStubPeriod=phyCfgPucchSrStubPeriod, hoInterEnbX2LBCInCancel=hoInterEnbX2LBCInCancel, e1ErrorDetectPeriod=e1ErrorDetectPeriod, phyCfgPucchSingleAntAlgorithmFlag=phyCfgPucchSingleAntAlgorithmFlag, ueaccPreambleSendNum=ueaccPreambleSendNum, intraRATInterCellHORowStatus=intraRATInterCellHORowStatus, rrcReduceCrsPowerSucc=rrcReduceCrsPowerSucc, topoRRUPAUpAverageCurrentValue=topoRRUPAUpAverageCurrentValue, nbrscheprbdlMcs4=nbrscheprbdlMcs4, lmcPrbCongestionTag=lmcPrbCongestionTag, nbrscheprbdlMcs17=nbrscheprbdlMcs17, eventSynchronizationAdditionInfo=eventSynchronizationAdditionInfo, caMcsDeActiveThr=caMcsDeActiveThr, plsfn4Prb58RIPAvg=plsfn4Prb58RIPAvg, rrcConnReleaseCsfb3G=rrcConnReleaseCsfb3G, rrcFailConnReconfigRrcReestablish=rrcFailConnReconfigRrcReestablish, macUpAlgorithmVolteUeMuMimoSwitch=macUpAlgorithmVolteUeMuMimoSwitch, mimoPerformanceEntry=mimoPerformanceEntry, ruePdcpSduBitLenDlQci252=ruePdcpSduBitLenDlQci252, lbc40FcDlPrbDifferTh=lbc40FcDlPrbDifferTh, e1LinkE1FEBECnt=e1LinkE1FEBECnt, plsfn1Prb39RIPAvg=plsfn1Prb39RIPAvg, plsfn6Prb59RIPAvg=plsfn6Prb59RIPAvg, measGapRowStatus=measGapRowStatus, cellAdjCellQOffset=cellAdjCellQOffset, raeResetTrigger=raeResetTrigger, lcConfigMaxDlPower=lcConfigMaxDlPower, cellCdmaBandClassInfoPriorityFlag=cellCdmaBandClassInfoPriorityFlag, hsupaTfrcTpcGap=hsupaTfrcTpcGap, videoPerfOfPdcpRowStatus=videoPerfOfPdcpRowStatus, raSizeofPreamblesAFlag=raSizeofPreamblesAFlag, netIROfpPortRowStatus=netIROfpPortRowStatus, macSwitchTestInfoTm8MuSuMimoSwitchTLS=macSwitchTestInfoTm8MuSuMimoSwitchTLS, erabActiveMaxNbrULQci7=erabActiveMaxNbrULQci7, plsfn1Prb23RIPAvg=plsfn1Prb23RIPAvg, cellCdma2000ParaCdma1XrttCsfbRegFrgnSidRegInd=cellCdma2000ParaCdma1XrttCsfbRegFrgnSidRegInd, rruBorrowFromScellPrbTotUl=rruBorrowFromScellPrbTotUl, baseBandCarrierLocalCarrierIndex=baseBandCarrierLocalCarrierIndex, rrcConnReEstabFailParameterError=rrcConnReEstabFailParameterError, lcInsureHoOutSwitch=lcInsureHoOutSwitch, b2RowStatus=b2RowStatus, tdsLcMinCarrierNum=tdsLcMinCarrierNum, macNbrRbDlUnused=macNbrRbDlUnused, hsdpaTsRandomRowStatus=hsdpaTsRandomRowStatus, macDownlinkMuMiMoMcsBackoff15=macDownlinkMuMiMoMcsBackoff15, sessiontimeue=sessiontimeue, sntpStatics=sntpStatics, sntpPeriodicDiscAlarmThreshold=sntpPeriodicDiscAlarmThreshold, rrcFailConnEstabCellBlock=rrcFailConnEstabCellBlock, boardStorageDevTable=boardStorageDevTable, releasedActiveERABEntry=releasedActiveERABEntry, cellInterFreqThreshXLowQ=cellInterFreqThreshXLowQ, hoAttOutExecIntraFreqS1=hoAttOutExecIntraFreqS1, cellReselComTCRmax=cellReselComTCRmax, b2TimetoTrig=b2TimetoTrig, hsdpaHarqRvQpsk6New=hsdpaHarqRvQpsk6New, rrcPresetPerformanceEntry=rrcPresetPerformanceEntry, topoRRUMaxTimeDelayCompensation=topoRRUMaxTimeDelayCompensation, sjm1ThresholdCC=sjm1ThresholdCC, rrcConnEstabTimeMaxMtAccess=rrcConnEstabTimeMaxMtAccess, nbrschetimesdlMcs3=nbrschetimesdlMcs3, radioBandEngagedState=radioBandEngagedState, topoAntArrayLocation=topoAntArrayLocation, sscPagSwitch=sscPagSwitch, bbuPowerOffPolicySwitch=bbuPowerOffPolicySwitch, hoAttOutIntraFreqIntraEnb=hoAttOutIntraFreqIntraEnb, contextSuccInitalSetupCsfb=contextSuccInitalSetupCsfb, atuUeIMSI5=atuUeIMSI5, ulCompLcId=ulCompLcId, sjm1RowStatus=sjm1RowStatus, pdcpVideoKeyWordsLength=pdcpVideoKeyWordsLength, rrcCASCellConfigAtt=rrcCASCellConfigAtt, hsupaQosInitPF=hsupaQosInitPF, omTestMrStaggerDelayTime=omTestMrStaggerDelayTime, timeSlotTypeNeighCell5=timeSlotTypeNeighCell5, plrssiIndexRowStatus=plrssiIndexRowStatus, srvccAttOutExecGeranCoverage=srvccAttOutExecGeranCoverage, drbPdcpSduTotalDelayDlQci6=drbPdcpSduTotalDelayDlQci6, phyCfgCrsStepupStep=phyCfgCrsStepupStep, traceServer=traceServer, atuGoldUeIMSI9=atuGoldUeIMSI9, plsfn5Prb34RIPAvg=plsfn5Prb34RIPAvg, mroEntry=mroEntry, cellUlIotRTMonitorTaskRowStatus=cellUlIotRTMonitorTaskRowStatus, mrNcRsrpSwitch=mrNcRsrpSwitch, cellGeranFreqExplicitArfcns21=cellGeranFreqExplicitArfcns21, phyCfgPucchSrAckCollideSelectFlag=phyCfgPucchSrAckCollideSelectFlag, swPackPlanRstOpEndingIndTrg=swPackPlanRstOpEndingIndTrg, ofPortTable=ofPortTable, pdcpIPThroughputDlQci2=pdcpIPThroughputDlQci2, plsfn5Prb38RIPAvg=plsfn5Prb38RIPAvg, tbSRBInitUl64QAM=tbSRBInitUl64QAM, topologyRRUTable=topologyRRUTable, cellPbchPower=cellPbchPower, pdcpUpPktDelayDlQci4Enb=pdcpUpPktDelayDlQci4Enb, topoAntArrayRowStatus=topoAntArrayRowStatus, drbPbr=drbPbr, hoOutSuccMeasure=hoOutSuccMeasure, anrNotiType=anrNotiType, rruCarrierRowStatus=rruCarrierRowStatus, measGapOffset=measGapOffset, srbTable=srbTable, macUpAlgorithmUlAntSelectNumProtect=macUpAlgorithmUlAntSelectNumProtect, plsfn6Prb88RIPAvg=plsfn6Prb88RIPAvg, plsfn1Prb81RIPAvg=plsfn1Prb81RIPAvg, cellCompanyVideoReserver6VideoNum=cellCompanyVideoReserver6VideoNum, erabRelActNbrQci1=erabRelActNbrQci1, gtpuFailInfoEntry=gtpuFailInfoEntry, cellReselIntraFreqMeasBandWidthFlag=cellReselIntraFreqMeasBandWidthFlag, erabHoFailQci5=erabHoFailQci5, lbcAdjCellUlPrbUsageTh3=lbcAdjCellUlPrbUsageTh3, macDownlinkMacResType=macDownlinkMacResType, coolingFanHighSpeedDetectPeriod=coolingFanHighSpeedDetectPeriod, raPreamblesNum=raPreamblesNum, plsfn9Prb15RIPAvg=plsfn9Prb15RIPAvg, macVipNumVolte=macVipNumVolte, cellCompanyVideoReserver10VideoNum=cellCompanyVideoReserver10VideoNum, drbPdcpSduDelayDlQci1=drbPdcpSduDelayDlQci1, erabThpTimeUlQci4=erabThpTimeUlQci4, hoFailPrepIncInterFreqIntraEnbPrb=hoFailPrepIncInterFreqIntraEnbPrb, caPerformanceByRRCTable=caPerformanceByRRCTable)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", fcNotificationNode=fcNotificationNode, antArrayRowStatus=antArrayRowStatus, erabEstabAddFailNbrQci2Transport=erabEstabAddFailNbrQci2Transport, macUpAlgorithmSrsTaP=macUpAlgorithmSrsTaP, hoFailPrepIncIntraFreqS1DrbID=hoFailPrepIncIntraFreqS1DrbID, topoRRUBandCapabilityTable=topoRRUBandCapabilityTable, debugUploadProcNo=debugUploadProcNo, fcSichSirTargetMin=fcSichSirTargetMin, rruTheorScheTimesDl=rruTheorScheTimesDl, plReceivePowerMin=plReceivePowerMin, plsfn3Prb99RIPAvg=plsfn3Prb99RIPAvg, omTestAlmPersisSwitch=omTestAlmPersisSwitch, fcMaxRtwbUlpc=fcMaxRtwbUlpc, tatimerCommon=tatimerCommon, rruPathTemperature=rruPathTemperature, rruPrbUlUsedNum=rruPrbUlUsedNum, hsdpaCQIReviseLcId=hsdpaCQIReviseLcId, hsupaCommSchedLcId=hsupaCommSchedLcId, plsfn3Prb56RIPAvg=plsfn3Prb56RIPAvg, packActiveCtrlSwitch=packActiveCtrlSwitch, plRipCellLcId=plRipCellLcId, contextAttModNbr=contextAttModNbr, almActUploadftpServerPassword=almActUploadftpServerPassword, erabModQoSAttNbrQci1=erabModQoSAttNbrQci1, raeFrequencyBandNum=raeFrequencyBandNum, pdcpPreset33=pdcpPreset33, hoAttIncIntraFreqInterCellIntraEnb=hoAttIncIntraFreqInterCellIntraEnb, plRiaCharactSeqCheckPeriod=plRiaCharactSeqCheckPeriod, hsdpaSpi12Weight=hsdpaSpi12Weight, macPreset27=macPreset27, fcLocalCellId=fcLocalCellId, baseBandwidthL1CoreList=baseBandwidthL1CoreList, swPackVersionIndex=swPackVersionIndex, plsfn9Prb18RIPAvg=plsfn9Prb18RIPAvg, boardSoftwareFileSlotNo=boardSoftwareFileSlotNo, caPrbThrforBoReAlloc=caPrbThrforBoReAlloc, ftpServerPerformanceDirectory=ftpServerPerformanceDirectory, macPhrIndex4=macPhrIndex4, cellCdma2000ParaEntry=cellCdma2000ParaEntry, initCalibrationAnt2TxStatus=initCalibrationAnt2TxStatus, initCalibrationAnt6RxStatus=initCalibrationAnt6RxStatus, reservedENBOmPara2=reservedENBOmPara2, sctpStreamRowStatus=sctpStreamRowStatus, s1ErrorIndicatByeNBAbstractSyntaxError=s1ErrorIndicatByeNBAbstractSyntaxError, macDownlinkEff1TableNToO=macDownlinkEff1TableNToO, macTestSwitchInfoCchRamScrambleSwitch=macTestSwitchInfoCchRamScrambleSwitch, mmeCfgIndex=mmeCfgIndex, adjCellECGI=adjCellECGI, cellAdjGeranCellEntry=cellAdjGeranCellEntry, hsupaCongestCtrlTable=hsupaCongestCtrlTable, ofPortShelfNo=ofPortShelfNo, raeParamAntArrayNo=raeParamAntArrayNo, volteHOAttOutIntraEnbIntraFreq=volteHOAttOutIntraEnbIntraFreq, ipThpUlTable=ipThpUlTable, pdcpUpPktDiscardRateDlQci5Enb=pdcpUpPktDiscardRateDlQci5Enb, hoToGsmAttOutPerRelation=hoToGsmAttOutPerRelation, rlcPreset4=rlcPreset4, caUlBsrProportionAdjustStep=caUlBsrProportionAdjustStep, hsupaSpsSchedLcId=hsupaSpsSchedLcId, cellCACellRowStatus=cellCACellRowStatus, localCarrierSyncUlDiscards=localCarrierSyncUlDiscards, contextFailInitalSetupNbrAlgoNotSupported=contextFailInitalSetupNbrAlgoNotSupported, hlTestSwitchTm9PrecodingSrsSwitch=hlTestSwitchTm9PrecodingSrsSwitch, plsfn7Prb43RIPAvg=plsfn7Prb43RIPAvg, phyULMeanNLPRB63=phyULMeanNLPRB63, saalConnRnc2NbScrMcr=saalConnRnc2NbScrMcr, pdcpThpCaActiveDl2CC=pdcpThpCaActiveDl2CC, nbrschetimesulMcs5=nbrschetimesulMcs5, phyCfgSpeedDetectP=phyCfgSpeedDetectP, atuGoldUeIMSI36=atuGoldUeIMSI36, cellReselIntraFreqMeasBandWidth=cellReselIntraFreqMeasBandWidth, contextFailModNbrControlProcessingOverload=contextFailModNbrControlProcessingOverload, rrcConnEstabTimeMaxEmergency=rrcConnEstabTimeMaxEmergency, rrcReduceIotUPNumVip=rrcReduceIotUPNumVip, erabNormRelEnbNbrQci7=erabNormRelEnbNbrQci7, macTestSwitchInfoScraWithRealUeSwitch=macTestSwitchInfoScraWithRealUeSwitch, atuImsiGetTimer=atuImsiGetTimer, drbPdcpSduDelayDlQci7=drbPdcpSduDelayDlQci7, eventSynchronization=eventSynchronization, macMumimoPairUserUlRank2=macMumimoPairUserUlRank2, erabActiveMaxNbrULQci3=erabActiveMaxNbrULQci3, plsfn0Prb60RIPAvg=plsfn0Prb60RIPAvg, phyULMeanNLPRB37=phyULMeanNLPRB37, tdsSysAbnormalSubsfnNum=tdsSysAbnormalSubsfnNum, plsfn8Prb88RIPAvg=plsfn8Prb88RIPAvg, volteHOSuccOutPrepInterEnbX2IntraFreq=volteHOSuccOutPrepInterEnbX2IntraFreq, macTestSwitchInfoHoMsg2Promotion=macTestSwitchInfoHoMsg2Promotion, cqiRbNum=cqiRbNum, macUpAlgorithmQci6NewPfScale=macUpAlgorithmQci6NewPfScale, mdtTaskTable=mdtTaskTable, drbThpTimeDlQci7=drbThpTimeDlQci7, a6LcId=a6LcId, cellCompanyVideoMiguVideoNum=cellCompanyVideoMiguVideoNum, plsfn4Prb31RIPAvg=plsfn4Prb31RIPAvg, dlCompCoBandPrbNum=dlCompCoBandPrbNum, pmExpObjectRowStatus=pmExpObjectRowStatus, macDownlinkMuMiMoMcsBackoff6=macDownlinkMuMiMoMcsBackoff6, apCAndRCheckOfCellRowStatus=apCAndRCheckOfCellRowStatus, hsupaSpsSchedRowStatus=hsupaSpsSchedRowStatus, chacEntry=chacEntry, hoOutAttIntraFreqService=hoOutAttIntraFreqService, macOctDlMassiveMimoSM16=macOctDlMassiveMimoSM16, ethPortDataStatRowStatus=ethPortDataStatRowStatus, eventA4Entry=eventA4Entry, cellUlIotRTMonitorTaskLcId=cellUlIotRTMonitorTaskLcId, rrcSuccConnReconfigRrcReestablish=rrcSuccConnReconfigRrcReestablish, lmc=lmc, pubAlgorithmParaHSpdDlFreqShiftSwitch=pubAlgorithmParaHSpdDlFreqShiftSwitch, alterationNotiType=alterationNotiType, douAdjcHOProToGsmCellAdjCellLcId=douAdjcHOProToGsmCellAdjCellLcId, icicUlStartPrbNoForEdgeUe=icicUlStartPrbNoForEdgeUe, netRRURootAlarmState1=netRRURootAlarmState1, hsdpaHarqRv16Qam3New=hsdpaHarqRv16Qam3New, macTestSwitchInfoResiBLERThreshold=macTestSwitchInfoResiBLERThreshold, apX2apRelP9=apX2apRelP9, plsfn0Prb56RIPAvg=plsfn0Prb56RIPAvg, macMumimoMaxPairUserDl=macMumimoMaxPairUserDl, gsmCellRowStatus=gsmCellRowStatus, b1ThresholdRssiGeran=b1ThresholdRssiGeran, netRRUOfp1AccessOfpPortNo=netRRUOfp1AccessOfpPortNo, plsfn7Prb49RIPAvg=plsfn7Prb49RIPAvg, plsfn5Prb10RIPAvg=plsfn5Prb10RIPAvg, selfStartupAlgorithmSwitch=selfStartupAlgorithmSwitch, apErabRel=apErabRel, pdcpIPThroughputUlQci9=pdcpIPThroughputUlQci9, a5RptThreshold1Rsrp=a5RptThreshold1Rsrp, plsfn5Prb91RIPAvg=plsfn5Prb91RIPAvg, hoAttOutExecInterEnbX2IntraFreqQci2=hoAttOutExecInterEnbX2IntraFreqQci2, lmcMlbLoadDetectPrd=lmcMlbLoadDetectPrd, lmcVoiceNumThreshold=lmcVoiceNumThreshold, macDownlinkAckInactiveNum=macDownlinkAckInactiveNum, drbUEActiveDlQci9=drbUEActiveDlQci9, hsdpaHarqRv16Qam4New=hsdpaHarqRv16Qam4New, sjm1ThresholdPP=sjm1ThresholdPP, plsfn7Prb10RIPAvg=plsfn7Prb10RIPAvg, cellRruCellTxPower=cellRruCellTxPower, plsfn5Prb48RIPAvg=plsfn5Prb48RIPAvg, plRiaCharactSeqCheckNumDownThresh=plRiaCharactSeqCheckNumDownThresh, rrcFailConnReconfigInstAllocFail=rrcFailConnReconfigInstAllocFail, closeDownTimeSlotStartTime=closeDownTimeSlotStartTime, phyULMaxNLPRB41=phyULMaxNLPRB41, nbrschetimesulMcs0=nbrschetimesulMcs0, multiBandRowStatus=multiBandRowStatus, a5MeasAlgoType=a5MeasAlgoType, erabEstabAddAttNbrQci2=erabEstabAddAttNbrQci2, nbrschetimesulMcs10=nbrschetimesulMcs10, plsfn4Prb10RIPAvg=plsfn4Prb10RIPAvg, volteHOCancelOutInterEnbS1=volteHOCancelOutInterEnbS1, baseInfo=baseInfo, spsP0UePuschPersist=spsP0UePuschPersist, cellAntWeightAmplitude7=cellAntWeightAmplitude7, hoSuccOutPrepInterEnbX2InterFreqQci2=hoSuccOutPrepInterEnbX2InterFreqQci2, lmcPrbCongestionDetectDuration=lmcPrbCongestionDetectDuration, plsfn1Prb95RIPAvg=plsfn1Prb95RIPAvg, integrityAlgorithmIndex=integrityAlgorithmIndex, netAntennaArrayEntry=netAntennaArrayEntry, ulPwrDeltaTXDoffsetPUCCHFormat22a2bR10=ulPwrDeltaTXDoffsetPUCCHFormat22a2bR10, invShelfVendorUnitTypeNumber=invShelfVendorUnitTypeNumber, cellRowStatus=cellRowStatus, plRssiAvgC12=plRssiAvgC12, pdcpSduSendTotalDateLenQci9=pdcpSduSendTotalDateLenQci9, s1OutNbrOctets=s1OutNbrOctets, softwareBaseBandBoardCfgTable=softwareBaseBandBoardCfgTable, phrPeriodicimer=phrPeriodicimer, initCalibrationAnt4RxStatus=initCalibrationAnt4RxStatus, ueInfoStatUeNum=ueInfoStatUeNum, emSmokeTable=emSmokeTable, raeBmIndicatVerticalBand=raeBmIndicatVerticalBand, eutraAdjCellMeasCellAdjEutraCellIndex=eutraAdjCellMeasCellAdjEutraCellIndex, hsupaSchedAlgorithmNode=hsupaSchedAlgorithmNode, netIROfpPortIndexOnBoard=netIROfpPortIndexOnBoard, drbBurstDataThpULQci7=drbBurstDataThpULQci7, fileTypeLimitEntry=fileTypeLimitEntry, activeAlarmAddition=activeAlarmAddition, fileAutoUpFTPDirectory=fileAutoUpFTPDirectory, tdsNodeBCODCHLoopSwitch=tdsNodeBCODCHLoopSwitch, procResetTrigger=procResetTrigger, sdCfgTable=sdCfgTable, netLcRruPowerLcId=netLcRruPowerLcId, plUsrLogUlBlerThreshlod=plUsrLogUlBlerThreshlod, pucchFormatR10Choice=pucchFormatR10Choice, cellInterRatTreselectionCdma1xRTT=cellInterRatTreselectionCdma1xRTT, carrierTimeSlotEntry=carrierTimeSlotEntry, vlanConfigIndex=vlanConfigIndex, lmcPrbCongestionRestoreDetectDuration=lmcPrbCongestionRestoreDetectDuration, netLocalCellGrpCarrierTotalNum=netLocalCellGrpCarrierTotalNum, nbrschetimesdlMcs2=nbrschetimesdlMcs2, transactionResultNotiResult=transactionResultNotiResult, pdcpThrpTimeDLQci5=pdcpThrpTimeDLQci5, ipoaChPolicingAction=ipoaChPolicingAction, eNBMBSFNOrSymbolPriority=eNBMBSFNOrSymbolPriority, rlcPreset18=rlcPreset18, raeSubtoRRUNo=raeSubtoRRUNo, rruCompCsDlGBR=rruCompCsDlGBR, phyULMeanNLPRB12=phyULMeanNLPRB12, macNbrTbDLRank2=macNbrTbDLRank2, plsfn0Prb13RIPAvg=plsfn0Prb13RIPAvg, cellIotNotification=cellIotNotification, erabNormRelEnbNbrQci9=erabNormRelEnbNbrQci9, equipStartupNotiNEVersion=equipStartupNotiNEVersion, drxQciInactivityTimer=drxQciInactivityTimer, plsfn2Prb73RIPAvg=plsfn2Prb73RIPAvg, cellAdjEutraCellPlmnMcc=cellAdjEutraCellPlmnMcc, ppHcUeStayTimeTh=ppHcUeStayTimeTh, pdcpUlAirSduDropTotalNumberQci9=pdcpUlAirSduDropTotalNumberQci9, rrcActiveMaxNbrPCellDl2CC=rrcActiveMaxNbrPCellDl2CC, cceCclrEntry=cceCclrEntry, hlTestSwitchVolteAppointBand=hlTestSwitchVolteAppointBand, hoAttOutIntraFreqInterCellIntraEnb=hoAttOutIntraFreqInterCellIntraEnb, cellReselComThreshServLow=cellReselComThreshServLow, fileTypeLimitFileMaxNumber=fileTypeLimitFileMaxNumber, phrLcId=phrLcId, cellAdjUtraFddCellRim=cellAdjUtraFddCellRim, macPhrIndex48=macPhrIndex48, srbNbrScheTimesSfn2=srbNbrScheTimesSfn2, handoverInERABNbrRowStatus=handoverInERABNbrRowStatus, plsfn5Prb00RIPAvg=plsfn5Prb00RIPAvg, rtRelatIndex=rtRelatIndex, rrcConnReEstabInterEnbNoContext=rrcConnReEstabInterEnbNoContext, gsmCellOptIndex=gsmCellOptIndex, puschHoppingOffset=puschHoppingOffset, topologyRHUBTable=topologyRHUBTable, plsfn5Prb97RIPAvg=plsfn5Prb97RIPAvg, phyULMaxNLPRB49=phyULMaxNLPRB49, acCfgSNRCalThreshold=acCfgSNRCalThreshold, hoOutSuccLoadBalance=hoOutSuccLoadBalance, rrcConnNumberRowStatus=rrcConnNumberRowStatus, cacRowStatus=cacRowStatus, reservedCellL3Para4=reservedCellL3Para4, icicEntry=icicEntry, lcAcUeThForMoc1=lcAcUeThForMoc1, cellPriority=cellPriority, raeBaseStationID=raeBaseStationID, drbNbrScheTimesSfn2=drbNbrScheTimesSfn2, rrcPreset8=rrcPreset8, plsfn5Prb68RIPAvg=plsfn5Prb68RIPAvg, lteFddTddHOLcId=lteFddTddHOLcId, staticMeasurement=staticMeasurement, fileTypeLimitIndex=fileTypeLimitIndex, raeWeightingFactorsEntry=raeWeightingFactorsEntry, plsfn1Prb78RIPAvg=plsfn1Prb78RIPAvg, boardEmdSeriesMode=boardEmdSeriesMode, srNbrScheTimesSfn7=srNbrScheTimesSfn7, cellInterFreqSpeedStateSfMedium=cellInterFreqSpeedStateSfMedium, raeGeneralFreqNums=raeGeneralFreqNums, handOverInterRATRowStatus=handOverInterRATRowStatus, macUpMuMimoPairPrbThr=macUpMuMimoPairPrbThr, amrDlVoipPacketNb2=amrDlVoipPacketNb2, macTestSwitchQci1Qci2ScwSwitch=macTestSwitchQci1Qci2ScwSwitch, retAntRCUSerialNumber=retAntRCUSerialNumber, pdcpThrpTimeDLQci8=pdcpThrpTimeDLQci8, configFile=configFile, timerAnrCdma2000DetectTimer=timerAnrCdma2000DetectTimer, boardHardwareType=boardHardwareType)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", phyULMaxNLPRB93=phyULMaxNLPRB93, resChkHlGlobalTestSwitchDeActiveSwitch=resChkHlGlobalTestSwitchDeActiveSwitch, macUpAlgorithm16QAMPUSCHTargetSinrUpLimit=macUpAlgorithm16QAMPUSCHTargetSinrUpLimit, rueRRCSuccConnReconfig=rueRRCSuccConnReconfig, erabNbrReqRelEnbByHOQCI5=erabNbrReqRelEnbByHOQCI5, efdRowStatus=efdRowStatus, videoPerfOfMacEntry=videoPerfOfMacEntry, traceTaskType=traceTaskType, boardTemperatureTable=boardTemperatureTable, ethRealPortMode=ethRealPortMode, saalTmrKeepAliveVal=saalTmrKeepAliveVal, reverseOperationEntry=reverseOperationEntry, atuGoldUeIMSI30=atuGoldUeIMSI30, plReceivePowerIndex11=plReceivePowerIndex11, netAntArrayPosition=netAntArrayPosition, bsrRowStatus=bsrRowStatus, rlcPreset12=rlcPreset12, anrTestAdjrelationNum=anrTestAdjrelationNum, rruTypeEntry=rruTypeEntry, hoFailOutX2QuaReEtOenbOther=hoFailOutX2QuaReEtOenbOther, rrcrelatedOriginCounter=rrcrelatedOriginCounter, closeCarrier=closeCarrier, cellAcBarList5ForVideo=cellAcBarList5ForVideo, macNbrRbDlTm4SFBC=macNbrRbDlTm4SFBC, atuGoldUeIMSI11=atuGoldUeIMSI11, irathoAttOutTdscdma=irathoAttOutTdscdma, transactionResultNotiFirstErrVariableOID=transactionResultNotiFirstErrVariableOID, erabRelEnbNbrCSFallbackTriggered=erabRelEnbNbrCSFallbackTriggered, macDownlinkLowSpeedNewPfScale=macDownlinkLowSpeedNewPfScale, atuGoldUeIMSI27=atuGoldUeIMSI27, macTestSwitchInfoDlSfbcResType=macTestSwitchInfoDlSfbcResType, pdcpSduReceivedNbrEntry=pdcpSduReceivedNbrEntry, phyCfgPucchNormalCpFmt1ActiveThred8Ant=phyCfgPucchNormalCpFmt1ActiveThred8Ant, apX2apRelP7=apX2apRelP7, hsdpaCQIMinRTBSadd=hsdpaCQIMinRTBSadd, hoOutFailMLBTooLateType2=hoOutFailMLBTooLateType2, retAntInstallersID=retAntInstallersID, raePortInfoAntArrayNo=raePortInfoAntArrayNo, plsfn6Prb79RIPAvg=plsfn6Prb79RIPAvg, rrcPreset20=rrcPreset20, iubTrafficCategoryTypeIndex=iubTrafficCategoryTypeIndex, hoFailPrepOutInterFreqS1SourceFail=hoFailPrepOutInterFreqS1SourceFail, rrcAttConnReconfigRabModify=rrcAttConnReconfigRabModify, mroTooLateHoTh=mroTooLateHoTh, pdcpThroughputTimeEntry=pdcpThroughputTimeEntry, erabModQoSFailNbrInteractionWithOtherProc=erabModQoSFailNbrInteractionWithOtherProc, boardPowerType=boardPowerType, phyULMaxNLPRB43=phyULMaxNLPRB43, hlGlobalTestSwitcheNBUeContrlSwith=hlGlobalTestSwitcheNBUeContrlSwith, plsfn7Prb99RIPAvg=plsfn7Prb99RIPAvg, cdl=cdl, anr3GAdjrelationNum=anr3GAdjrelationNum, bbuPowerManagement=bbuPowerManagement, raePortInfoMode=raePortInfoMode, s1InterfaceTrafficStat=s1InterfaceTrafficStat, netAntArrayRAEScanTrigger=netAntArrayRAEScanTrigger, cellAntWeightPhase21=cellAntWeightPhase21, initCalibrationAnt3TxStatus=initCalibrationAnt3TxStatus, rrcLpmCaseRelP2=rrcLpmCaseRelP2, netEthRHUBNo=netEthRHUBNo, macSwitchInfoReserveTimeForMsg4=macSwitchInfoReserveTimeForMsg4, hsdpaFlowCtrlAlgorithm=hsdpaFlowCtrlAlgorithm, erabNbrExistQCI5=erabNbrExistQCI5, netSetRRUNo=netSetRRUNo, cellPdcchCo8CceFormat1cPower=cellPdcchCo8CceFormat1cPower, a2TrigQuantity=a2TrigQuantity, pmTaskCouterGroup=pmTaskCouterGroup, sdcLcId=sdcLcId, swPackRunningTypeIndex=swPackRunningTypeIndex, macTestSwitchInfoUpAdaptAdvanceSwitch=macTestSwitchInfoUpAdaptAdvanceSwitch, erabRelAttNbrQci5=erabRelAttNbrQci5, linkAgationSwitch=linkAgationSwitch, phyNbrCqi12=phyNbrCqi12, dlCAPwrTargetSinr1Cce1=dlCAPwrTargetSinr1Cce1, netRRUOfp1AccessEthernetPort=netRRUOfp1AccessEthernetPort, swPackCustomerPlanRowStatus=swPackCustomerPlanRowStatus, plUsrLogPucchSnrOrRsrp=plUsrLogPucchSnrOrRsrp, netRRURootAlarmRRUNo=netRRURootAlarmRRUNo, irathoAttOutGprs=irathoAttOutGprs, eventSynchronizationType=eventSynchronizationType, rrcFailConnReconfigCellBlock=rrcFailConnReconfigCellBlock, fcScchInitTxaOffsetAbound=fcScchInitTxaOffsetAbound, atuParaEntry=atuParaEntry, macTestSwitchInfoDlCchCfiNum=macTestSwitchInfoDlCchCfiNum, x2InNbrOctets=x2InNbrOctets, hlGlobalTestSwitcheNBUeContrlPeriod=hlGlobalTestSwitcheNBUeContrlPeriod, antWeightAmplitude4=antWeightAmplitude4, s1PathSwichEntry=s1PathSwichEntry, sctpTimerHBInterval=sctpTimerHBInterval, invPortRackNo=invPortRackNo, cellCdma2000ParaCdma1XrttCsfbRegCfgInd=cellCdma2000ParaCdma1XrttCsfbRegCfgInd, cellUtraFreqEntry=cellUtraFreqEntry, sigSctpDataChunkReSentUl=sigSctpDataChunkReSentUl, cellBarred=cellBarred, plUsrLogUlReportUeId=plUsrLogUlReportUeId, sdcDlTransMode=sdcDlTransMode, irathoAvgTimeOutGeran=irathoAvgTimeOutGeran, cellAdjGeranBandIndicator=cellAdjGeranBandIndicator, efdEntry=efdEntry, pdcpUpPktDiscardRateDlQci9Enb=pdcpUpPktDiscardRateDlQci9Enb, netSetRRUPortBand=netSetRRUPortBand, macSwitchTestInfoRohcThreshold=macSwitchTestInfoRohcThreshold, cellUlAnteIotSubSfn=cellUlAnteIotSubSfn, alarmNotiRequestID=alarmNotiRequestID, mrCellListBitMap=mrCellListBitMap, pdcpThpCaActiveUl2CC=pdcpThpCaActiveUl2CC, atuUeIMSI3=atuUeIMSI3, netRHUBEntry=netRHUBEntry, hoAttOutExecInterFreqS1=hoAttOutExecInterFreqS1, acCfgPeakposShiftThreshold=acCfgPeakposShiftThreshold, cellSoftLicenseRanSharing=cellSoftLicenseRanSharing, peripheralFileName=peripheralFileName, boardTempSlotNo=boardTempSlotNo, plRssiAvgC9=plRssiAvgC9, saalConnRxDiscardedPdus=saalConnRxDiscardedPdus, macschecceallsfn3=macschecceallsfn3, erabNbrEntry=erabNbrEntry, mrPrbRptType=mrPrbRptType, hoSuccPrepIncFddTddS1=hoSuccPrepIncFddTddS1, plsfn2Prb49RIPAvg=plsfn2Prb49RIPAvg, invShelfDateOfManufacture=invShelfDateOfManufacture, invRackRowStatus=invRackRowStatus, hcSrvccFailPenaltyTag=hcSrvccFailPenaltyTag, contextAttReleNBNbrUELostRlc=contextAttReleNBNbrUELostRlc, raeBeamBandFreq=raeBeamBandFreq, plRiaInterferenceCheckRateThresh=plRiaInterferenceCheckRateThresh, ccErrorThreshold=ccErrorThreshold, ulPwrPucchTpcFormatChoice=ulPwrPucchTpcFormatChoice, sessionTimeLcId=sessionTimeLcId, rrcActiveNbrPCellDl2CCTF=rrcActiveNbrPCellDl2CCTF, atuGoldUeIMSI16=atuGoldUeIMSI16, ipoaChInactiveTolerance=ipoaChInactiveTolerance, dlCAPwrCchDownCCeUpPower4to2=dlCAPwrCchDownCCeUpPower4to2, ipoaChLastErrReason=ipoaChLastErrReason, plsfn2Prb48RIPAvg=plsfn2Prb48RIPAvg, erabNbrExistQCI6=erabNbrExistQCI6, hsdpaHarqRv16Qam8New=hsdpaHarqRv16Qam8New, airCondVentilationState=airCondVentilationState, cellBoardLogShelfNo=cellBoardLogShelfNo, cellAntWeightPhase6=cellAntWeightPhase6, almActUploadLogType=almActUploadLogType, cellAcBarList5ForVoice=cellAcBarList5ForVoice, mroTotalSucHoTh=mroTotalSucHoTh, ipThpDlEntry=ipThpDlEntry, macNbrRbDlTm4SM=macNbrRbDlTm4SM, plRssiAvgC19=plRssiAvgC19, amrUlVoipPacketWb1=amrUlVoipPacketWb1, plsfn9Prb85RIPAvg=plsfn9Prb85RIPAvg, sctpStreamIsCommonDedi=sctpStreamIsCommonDedi, mrQCI1PLRULThreshold=mrQCI1PLRULThreshold, plsfn9Prb43RIPAvg=plsfn9Prb43RIPAvg, ftpServerSoftwareDirectory=ftpServerSoftwareDirectory, plsfn3Prb76RIPAvg=plsfn3Prb76RIPAvg, fileTransFTPDirectory=fileTransFTPDirectory, pmTaskDescription=pmTaskDescription, a2RptThresholdRsrp=a2RptThresholdRsrp, resChkHlGlobalTestL3ResChkSwitch=resChkHlGlobalTestL3ResChkSwitch, twampLocalIPAddrIndex=twampLocalIPAddrIndex, boardLedShelfNo=boardLedShelfNo, raeBeamwidthOperatBand=raeBeamwidthOperatBand, lmclbc40FcAlgorithmTag=lmclbc40FcAlgorithmTag, atuGoldUeIMSISwitch=atuGoldUeIMSISwitch, erabNormRelEnbNbrQci4=erabNormRelEnbNbrQci4, drbBurstDataThpULQci6=drbBurstDataThpULQci6, reservedENBL3Para3=reservedENBL3Para3, hoFailPrepIncIntraFreqS1PerEncodeFail=hoFailPrepIncIntraFreqS1PerEncodeFail, plRssiAvgC13=plRssiAvgC13, plReceivePowerIndex14=plReceivePowerIndex14, syslogStatis=syslogStatis, raeProductNumber=raeProductNumber, syslogConsoleControlEntry=syslogConsoleControlEntry, phyULMaxNLPRB64=phyULMaxNLPRB64, caThroughputTable=caThroughputTable, ofpPortFpgaOpenState=ofpPortFpgaOpenState, topoRRULogDestination=topoRRULogDestination, localCarrierFreqValue=localCarrierFreqValue, baseBandwidthLcId=baseBandwidthLcId, cellAdjEutranMultiBandEnhanceFlag=cellAdjEutranMultiBandEnhanceFlag, erabActiveMaxNbrDLQci1=erabActiveMaxNbrDLQci1, saalConnType=saalConnType, pdcpUpPktDelayDlQci8Enb=pdcpUpPktDelayDlQci8Enb, hsdpaQosTable=hsdpaQosTable, macNbrTbDlMassiveMimoSM15=macNbrTbDlMassiveMimoSM15, macUpAlgorithmSrsPowerSinrThUpper=macUpAlgorithmSrsPowerSinrThUpper, pdcpDlSduAirDropRatioLcId=pdcpDlSduAirDropRatioLcId, closeDownTimeSlotSwitch=closeDownTimeSlotSwitch, cellMBSFNState=cellMBSFNState, topoRRUVSWRThreshold=topoRRUVSWRThreshold, plRipLogInetAddr=plRipLogInetAddr, gfiSgwIPAddress=gfiSgwIPAddress, extendDrbRowStatus=extendDrbRowStatus, hoCancelAckIntraFreqInterEnbS1=hoCancelAckIntraFreqInterEnbS1, hoFailOutX2Prep=hoFailOutX2Prep, hsdpaCQIRestrictMaxRTBS=hsdpaCQIRestrictMaxRTBS, sjm1ThresholdPPNotSmartAnt=sjm1ThresholdPPNotSmartAnt, retAntBeamwidthForEachOperatingBand=retAntBeamwidthForEachOperatingBand, releasedActiveERABTable=releasedActiveERABTable, sscServerInetAddrType=sscServerInetAddrType, anrRemoveSwitch=anrRemoveSwitch, anteRowStatus=anteRowStatus, fileTransIndicator=fileTransIndicator, dlCAPwrCfiModT3=dlCAPwrCfiModT3, cellAdjEutraCellCellLocalId=cellAdjEutraCellCellLocalId, nbrscheprbulMcs24=nbrscheprbulMcs24, plsfn4Prb30RIPAvg=plsfn4Prb30RIPAvg, adjeNBMmeGroupId7=adjeNBMmeGroupId7, snmpResponseTimer=snmpResponseTimer, raeWeightingFactorsPhase0=raeWeightingFactorsPhase0, highSpeedStatisticEntry=highSpeedStatisticEntry, cellLccUlLoadValue=cellLccUlLoadValue, boardStorageMountPath=boardStorageMountPath, fcHichDpchOffsetTxaUser0=fcHichDpchOffsetTxaUser0, sjm1MaxPuchRscp=sjm1MaxPuchRscp, atuGoldUeIMSI4=atuGoldUeIMSI4, raeEquipElevation=raeEquipElevation, erabRelAttNbrQci4=erabRelAttNbrQci4, localCarrierCarrierAvailbilityStatus=localCarrierCarrierAvailbilityStatus, drbMaxUeActiveDl=drbMaxUeActiveDl, timeSlotTypeCellFreq=timeSlotTypeCellFreq, hsdpaPFTable=hsdpaPFTable, sctpTimerMaxInitRetransmits=sctpTimerMaxInitRetransmits, airCondManufacturer=airCondManufacturer, softwareBaseBandBoardCfgRowStatus=softwareBaseBandBoardCfgRowStatus, lbcDlHardwardTh1=lbcDlHardwardTh1, topoSetRRUTdsCalAIqRxNom=topoSetRRUTdsCalAIqRxNom, hoFailPrepIncInterFreqX2CellOverLoad=hoFailPrepIncInterFreqX2CellOverLoad, erabNbrMaxEstabQci8=erabNbrMaxEstabQci8, cellSelectIntraFreqCellResel=cellSelectIntraFreqCellResel, mrStartDifFreqSysMeasSwitch=mrStartDifFreqSysMeasSwitch, a5LcId=a5LcId, macPreset38=macPreset38, saalConnNb2RncMaxCTD=saalConnNb2RncMaxCTD, rrcCpmMeasCaseRelP3=rrcCpmMeasCaseRelP3, hsdpaEFACHSchedOrderSendNum=hsdpaEFACHSchedOrderSendNum, atuGoldUeIMSI22=atuGoldUeIMSI22, raeBeamBandSubIndexNo=raeBeamBandSubIndexNo, swPackCustomerPlanPackName=swPackCustomerPlanPackName, e1LinkRxDroppedCells=e1LinkRxDroppedCells, mibAuthorizationTable=mibAuthorizationTable, cellCAPara=cellCAPara, chacActiveUeHighLoadTh=chacActiveUeHighLoadTh, cellCdmaBandClassInfoIndex=cellCdmaBandClassInfoIndex, fcNotiAdjCellPlmnMcc=fcNotiAdjCellPlmnMcc, pagingPagReceived=pagingPagReceived, hlTestSwitchEntry=hlTestSwitchEntry, hoFailOutX2QuaReEtOenbHof=hoFailOutX2QuaReEtOenbHof, fcPdschQpskAboud=fcPdschQpskAboud, saalConnVpi=saalConnVpi, peripheralFileEntry=peripheralFileEntry, cellAdjEutraCellTac=cellAdjEutraCellTac, phrPerformLcId=phrPerformLcId, hoAttOutInterFreqS1=hoAttOutInterFreqS1, rrcFailConnReconfigParameterError=rrcFailConnReconfigParameterError, erabInitEstabTimeMax=erabInitEstabTimeMax)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", chacHighLoadT302=chacHighLoadT302, boardVoltUpperThreshold=boardVoltUpperThreshold, netLcRruPowerRruNo=netLcRruPowerRruNo, erabNbrReqRelEnbByHOQCI7=erabNbrReqRelEnbByHOQCI7, plsfn7Prb66RIPAvg=plsfn7Prb66RIPAvg, rruCalcPathRRUNo=rruCalcPathRRUNo, macVideoUsedPrbPerSfnDlMax=macVideoUsedPrbPerSfnDlMax, voicePakStatisticEntry=voicePakStatisticEntry, macDownlinkMuMiMoMcsBackoff14=macDownlinkMuMiMoMcsBackoff14, topoRRUAccessPhase=topoRRUAccessPhase, dlCompCsPrbThres=dlCompCsPrbThres, reservedCellRowStatus=reservedCellRowStatus, macDownlinkMuMiMoMcsBackoff12=macDownlinkMuMiMoMcsBackoff12, swPackCustomerPlanRelyVesion=swPackCustomerPlanRelyVesion, hoSuccIncIntraFreqS1=hoSuccIncIntraFreqS1, a4RptInterval=a4RptInterval, mrDocRptMRSSwitch=mrDocRptMRSSwitch, rbAttEstabQci5=rbAttEstabQci5, cellInterFreqQualMin=cellInterFreqQualMin, rruTypeSupportCellWorkMode=rruTypeSupportCellWorkMode, lmcMlbOcnAdjustUpperLimit=lmcMlbOcnAdjustUpperLimit, plsfn5Prb71RIPAvg=plsfn5Prb71RIPAvg, macTestSwitchInfoVoipUlPrbNumMin=macTestSwitchInfoVoipUlPrbNumMin, hlTestSwitchQRxLevMinOffset=hlTestSwitchQRxLevMinOffset, drbTCPSduResentLineDisorderDl=drbTCPSduResentLineDisorderDl, pdcpParaSilenceCallThreshold=pdcpParaSilenceCallThreshold, plsfn6Prb69RIPAvg=plsfn6Prb69RIPAvg, phyNbrCqi3=phyNbrCqi3, boardLedDescription=boardLedDescription, plsfn2Prb17RIPAvg=plsfn2Prb17RIPAvg, initCalibrationAnt6TxStatus=initCalibrationAnt6TxStatus, mbmsRowStatus=mbmsRowStatus, plsfn8Prb06RIPAvg=plsfn8Prb06RIPAvg, plsfn9Prb09RIPAvg=plsfn9Prb09RIPAvg, sjm1ThresholdAcdSNR=sjm1ThresholdAcdSNR, plsfn9Prb14RIPAvg=plsfn9Prb14RIPAvg, drbTCPSduResentLineDropDl=drbTCPSduResentLineDropDl, pdcpVideoReserver10VideoActive=pdcpVideoReserver10VideoActive, plsfn0Prb07RIPAvg=plsfn0Prb07RIPAvg, netLcAntPortNum=netLcAntPortNum, fcSichSirTargetMax=fcSichSirTargetMax, phyCfgDlTestMode=phyCfgDlTestMode, rruFullRbTtiTotDl=rruFullRbTtiTotDl, plReceivePowerIndex8=plReceivePowerIndex8, timerWaitRrcReestablishReq=timerWaitRrcReestablishReq, lbc40FcCpuDifferTh=lbc40FcCpuDifferTh, erabEstabProcOfRUELcId=erabEstabProcOfRUELcId, hoOutAttQci1=hoOutAttQci1, netRRURootAlarmEntry=netRRURootAlarmEntry, baseBandCarrierTxPath3CalFactorQ=baseBandCarrierTxPath3CalFactorQ, plsfn0Prb15RIPAvg=plsfn0Prb15RIPAvg, hsdpaCQIVinSmoothGene=hsdpaCQIVinSmoothGene, baseBandCarrierTxPath8CalFactorQ=baseBandCarrierTxPath8CalFactorQ, ftpServerManagerType=ftpServerManagerType, signaldataByteNumUl=signaldataByteNumUl, eventSynchronizationOccurTime=eventSynchronizationOccurTime, topoRRUCarrier19ULPowerValue=topoRRUCarrier19ULPowerValue, invRackDateOfManufacture=invRackDateOfManufacture, hsupaTfrcFastPuchFMFactor=hsupaTfrcFastPuchFMFactor, macMumimoThrputDlRank1=macMumimoThrputDlRank1, softwarePackPlanEntry=softwarePackPlanEntry, plReceivePowerIndex13=plReceivePowerIndex13, plRssiAvgC6=plRssiAvgC6, imaGrpFrameLength=imaGrpFrameLength, logFileConfiguration=logFileConfiguration, plsfn7PrbG6RIPMax=plsfn7PrbG6RIPMax, macTestSwitchInfoUlUciOnlySwitch=macTestSwitchInfoUlUciOnlySwitch, snmpControl=snmpControl, macTestSwitchInfoUlPrbSelectLimit=macTestSwitchInfoUlPrbSelectLimit, tdsNetLocalCellCtrlTable=tdsNetLocalCellCtrlTable, plsfn4Prb81RIPAvg=plsfn4Prb81RIPAvg, plReceivePowerUserIndex20=plReceivePowerUserIndex20, cellAntWeightAmplitude0=cellAntWeightAmplitude0, tdsLcPrimaryLocalCarrierIndex=tdsLcPrimaryLocalCarrierIndex, cellRsPower=cellRsPower, rrcPreset14=rrcPreset14, e1LinkTxUserCells=e1LinkTxUserCells, plsfn3Prb80RIPAvg=plsfn3Prb80RIPAvg, sdCfgThresholdCollision=sdCfgThresholdCollision, fcMaxRxpUlpc=fcMaxRxpUlpc, phyCfgSrsSnrTaThre=phyCfgSrsSnrTaThre, pdcpIPThroughputDlQci7=pdcpIPThroughputDlQci7, ipAddrIndex=ipAddrIndex, plReceivePowerUserIndex1=plReceivePowerUserIndex1, hcPcellScellRsrpTh=hcPcellScellRsrpTh, mdtImmediateMDTUeLocation=mdtImmediateMDTUeLocation, softLicenseRowStatus=softLicenseRowStatus, boardSwapTrigger=boardSwapTrigger, cellInterFreqTselection=cellInterFreqTselection, phyULMeanNLPRB47=phyULMeanNLPRB47, oabIndex=oabIndex, saalSscopMaxPD=saalSscopMaxPD, hsdpaHarqRv16Qam2=hsdpaHarqRv16Qam2, cellAvailCapEntry=cellAvailCapEntry, integrityAlgorithmRowStatus=integrityAlgorithmRowStatus, erabNbrMeanEstabQci4=erabNbrMeanEstabQci4, managerInetAddress=managerInetAddress, mibAuthorizationEntry=mibAuthorizationEntry, macMimoFirstPeriod=macMimoFirstPeriod, saalConnTxUstatPdus=saalConnTxUstatPdus, cellGeranFreqThreshxHigh=cellGeranFreqThreshxHigh, plsfn8Prb30RIPAvg=plsfn8Prb30RIPAvg, hsdpaQosRowStatus=hsdpaQosRowStatus, contextSuccInitalSetupNbr=contextSuccInitalSetupNbr, cellBoardLogTable=cellBoardLogTable, pdcpPreset5=pdcpPreset5, antennaWeightEntry=antennaWeightEntry, timeSlotTypeNeighCell24=timeSlotTypeNeighCell24, airCondReturnAirHumiditySensorAlarmState=airCondReturnAirHumiditySensorAlarmState, netLocalCellRruPowerTable=netLocalCellRruPowerTable, pdcpThrpTimeULQci1=pdcpThrpTimeULQci1, erabRelFailNbrUnspecifiedFailure=erabRelFailNbrUnspecifiedFailure, voipSilenceCallDl=voipSilenceCallDl, softLicenseUlThroughput=softLicenseUlThroughput, tdsSysISCPDetectPeriod=tdsSysISCPDetectPeriod, mibAuthorizationGroupView=mibAuthorizationGroupView, plsfn3Prb54RIPAvg=plsfn3Prb54RIPAvg, plThroughputCapacityDLLcId=plThroughputCapacityDLLcId, rhubEtherStatus=rhubEtherStatus, localCarrierUsrBufferNum=localCarrierUsrBufferNum, remoteLmtRouteEntry=remoteLmtRouteEntry, lmcInterRatLoadBalanceTag=lmcInterRatLoadBalanceTag, cellGeranFreqExplicitArfcns7=cellGeranFreqExplicitArfcns7, eueTimerLcId=eueTimerLcId, coolingFanTable=coolingFanTable, macTestSwitchInfoInitULPrbNumMax=macTestSwitchInfoInitULPrbNumMax, lbcRedirectionEARFCN=lbcRedirectionEARFCN, a6RptAmount=a6RptAmount, processorCoreTable=processorCoreTable, imaGrpSlotId=imaGrpSlotId, hoAttOutInterFreqIntraEnb=hoAttOutInterFreqIntraEnb, ulPwrDeltaFPucchFormat2=ulPwrDeltaFPucchFormat2, fcDlpcOnSwitchAttrib=fcDlpcOnSwitchAttrib, cellGeranFreqVariableBitMapOfArfcns15=cellGeranFreqVariableBitMapOfArfcns15, hoOutFailMLBToWrongCellType2=hoOutFailMLBToWrongCellType2, erabModQoSAttNbrQci4=erabModQoSAttNbrQci4, netAntArrayNo=netAntArrayNo, remoteLmtRoutePhyType=remoteLmtRoutePhyType, hoCancelAckInterFreqInterEnbS1=hoCancelAckInterFreqInterEnbS1, alarmBoxCmd=alarmBoxCmd, cellAntWeightPhase19=cellAntWeightPhase19, saalTmrPollVal=saalTmrPollVal, rrcConnReleaseRedirectionTo2GMea=rrcConnReleaseRedirectionTo2GMea, erabActiveMaxNbrDLQci9=erabActiveMaxNbrDLQci9, erabRelProcByHOLcId=erabRelProcByHOLcId, topoRRUSetTRxMode=topoRRUSetTRxMode, erabRelEnbNbrQci1Transfer=erabRelEnbNbrQci1Transfer, omTestRruResetRruTimer=omTestRruResetRruTimer, sctpAssoPMDataSctpIndex=sctpAssoPMDataSctpIndex, plrssiRowStatus=plrssiRowStatus, saalConnRnc2NbMbs=saalConnRnc2NbMbs, phyULMeanNLPRB14=phyULMeanNLPRB14, plCellTransPowerAvg=plCellTransPowerAvg, anrNotifications=anrNotifications, cellAdjUtraFddCellPhyCellId=cellAdjUtraFddCellPhyCellId, sntpFirstSynchronizedPeriod=sntpFirstSynchronizedPeriod, macUpAlgorithmMuMiMoPairChannelCorr=macUpAlgorithmMuMiMoPairChannelCorr, antWeightArrayNo=antWeightArrayNo, topoRRUHubMainEthNo=topoRRUHubMainEthNo, localCellGrpTable=localCellGrpTable, plUsrLogDlReportType=plUsrLogDlReportType, plsfn3Prb95RIPAvg=plsfn3Prb95RIPAvg, netLcRruPowerRowStatus=netLcRruPowerRowStatus, hsupaCellSelectNotSchedTime=hsupaCellSelectNotSchedTime, hsdpaHarqRv16Qam2New=hsdpaHarqRv16Qam2New, macSwitchInfoReserveTimeForContentReslut=macSwitchInfoReserveTimeForContentReslut, cellAdjUtraTddCellPlmnMnc=cellAdjUtraTddCellPlmnMnc, softwareBaseBandBoardCfgEntry=softwareBaseBandBoardCfgEntry, atuULQuitRateThreshold=atuULQuitRateThreshold, atuGoldUeIMSI21=atuGoldUeIMSI21, topoSetRRUPortSubtoLocalCellId4=topoSetRRUPortSubtoLocalCellId4, bbuDCARegulateSwitch=bbuDCARegulateSwitch, rueRRCConnMax=rueRRCConnMax, qolEchoTimes=qolEchoTimes, srsBandWidthCenter=srsBandWidthCenter, ppHcAlgLcId=ppHcAlgLcId, resChkL2GlobalTestResExpDectSwitch=resChkL2GlobalTestResExpDectSwitch, plsfn4Prb28RIPAvg=plsfn4Prb28RIPAvg, plUsrLogMsg5CatchSwitch=plUsrLogMsg5CatchSwitch, hoFailIncIntraFreqInterCellIntraEnbLoChID=hoFailIncIntraFreqInterCellIntraEnbLoChID, macSwitchInfoCellCombinedUlSwitch=macSwitchInfoCellCombinedUlSwitch, nbrscheprbdlMcs1=nbrscheprbdlMcs1, mrPHRReportRatio=mrPHRReportRatio, cellAdjEutranMultiBandEnhanceManualFlag=cellAdjEutranMultiBandEnhanceManualFlag, recvRlcSnFieldLength=recvRlcSnFieldLength, fcPdschPwrThresholdQpsk16Qam=fcPdschPwrThresholdQpsk16Qam, freqChangeSwitch=freqChangeSwitch, trafficCategoryRowStatus=trafficCategoryRowStatus, pdcpSduDiscTotalDataNumQci1=pdcpSduDiscTotalDataNumQci1, ulPwrRowStatus=ulPwrRowStatus, rruEffectiveDataTransTimeUl=rruEffectiveDataTransTimeUl, caUplinkSwitch=caUplinkSwitch, pagingProcTable=pagingProcTable, cellAdjGeranCellRimFlag=cellAdjGeranCellRimFlag, pdcpVideoMatchKuaiShou=pdcpVideoMatchKuaiShou, topoRRUPACurrentDescription=topoRRUPACurrentDescription, plsfn0Prb50RIPAvg=plsfn0Prb50RIPAvg, plsfn5Prb64RIPAvg=plsfn5Prb64RIPAvg, sscOptSwitch=sscOptSwitch, erabRelMmeNbrRadioNetworkLayerOther=erabRelMmeNbrRadioNetworkLayerOther, plsfn8Prb37RIPAvg=plsfn8Prb37RIPAvg, boardLedRowStatus=boardLedRowStatus, netSetRRUPortSubtoLocalCellId=netSetRRUPortSubtoLocalCellId, pdcpUpPktLossRateUlQci4Enb=pdcpUpPktLossRateUlQci4Enb, erabEstabAddFailNbrQci1RadioInterfaceFailure=erabEstabAddFailNbrQci1RadioInterfaceFailure, ccPreOutSyncSwitch=ccPreOutSyncSwitch, carrierTs3RxPower=carrierTs3RxPower, hoAttOutInterEnb=hoAttOutInterEnb, macDownMuMiMoAlgBaseParaTable=macDownMuMiMoAlgBaseParaTable, rrcAttConnReconfigSrsCfg=rrcAttConnReconfigSrsCfg, erabEstabAddFailNbrQci2RadioInterfaceFailure=erabEstabAddFailNbrQci2RadioInterfaceFailure, plsfn2Prb89RIPAvg=plsfn2Prb89RIPAvg, plThroughputCapacityULEntry=plThroughputCapacityULEntry, smallPacketStasticRatioThreshold=smallPacketStasticRatioThreshold, ethernetOAMRowStatus=ethernetOAMRowStatus, hoSuccIncInterFreqInterCellIntraEnb=hoSuccIncInterFreqInterCellIntraEnb, rlcPreset27=rlcPreset27, ueTimerConstants=ueTimerConstants, phyTA0=phyTA0, rrcConnMax=rrcConnMax, volteSchedulingTable=volteSchedulingTable, cacDlGbrPrbTh=cacDlGbrPrbTh, anrMode2G=anrMode2G, erabEstabAddFailNbrUnspecifiedFailure=erabEstabAddFailNbrUnspecifiedFailure, hoOutAttMeasure=hoOutAttMeasure, dlPATFilterfactor=dlPATFilterfactor, sctpPeerIpAddr4=sctpPeerIpAddr4, erabNbrReqRelEnbQci3=erabNbrReqRelEnbQci3, macNbrErrTbDlMassiveMimoSM4=macNbrErrTbDlMassiveMimoSM4, macschecceusedratiosfn0=macschecceusedratiosfn0, macUpAlgorithmPuschInitSinrTarget=macUpAlgorithmPuschInitSinrTarget, cellBlackCellsStartPhyId=cellBlackCellsStartPhyId, atuGoldUeIMSI20=atuGoldUeIMSI20, lbcUserNumDifferTh=lbcUserNumDifferTh, topoRRUBandCap10MCarrierNum=topoRRUBandCap10MCarrierNum, ethernetOAMIndex=ethernetOAMIndex, nbrschetimesulMcs22=nbrschetimesulMcs22, cdlFaultSwitch=cdlFaultSwitch, topoRHUBLogFileType=topoRHUBLogFileType, cellReselComScalFactorMediMoblity=cellReselComScalFactorMediMoblity, netLocalCellRruPowerEntry=netLocalCellRruPowerEntry, cellRruCellTxPowerEntry=cellRruCellTxPowerEntry, rruTypePortCalAIqRxNom=rruTypePortCalAIqRxNom, fileTransID=fileTransID, b1ThresholdEcnoUtra=b1ThresholdEcnoUtra, cellAntCalPeriod=cellAntCalPeriod, topoRRUBandCapCarrierStart=topoRRUBandCapCarrierStart, cqiFormatIndicatorAPeriodic=cqiFormatIndicatorAPeriodic, plsfn8PrbG17RIPMax=plsfn8PrbG17RIPMax, boardStorageDevRackNo=boardStorageDevRackNo, plsfn8Prb26RIPAvg=plsfn8Prb26RIPAvg, rrcCASCellConfigSucc=rrcCASCellConfigSucc, alarmCauseClearStyle=alarmCauseClearStyle, hsdpaSpi15Weight=hsdpaSpi15Weight)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", rrcSuccConnEstabMoData=rrcSuccConnEstabMoData, volteHOFailOutPrepTimeOut=volteHOFailOutPrepTimeOut, policy=policy, phyULMeanNLPRB06=phyULMeanNLPRB06, hoFailIncIntraFreqInterCellIntraEnbSrcNoRsp=hoFailIncIntraFreqInterCellIntraEnbSrcNoRsp, ipAddrShelfNo=ipAddrShelfNo, eNBCarrierPriority=eNBCarrierPriority, drbUEActiveUlQci3=drbUEActiveUlQci3, lmcDlCongestRestoreTh=lmcDlCongestRestoreTh, macTestSwitchInfoSpsActiveHoldFlag=macTestSwitchInfoSpsActiveHoldFlag, rrcPreset9=rrcPreset9, cellCARelationEntry=cellCARelationEntry, pmCounterGrpInfo=pmCounterGrpInfo, hlTestSwitchcellAdjCellCheckNum=hlTestSwitchcellAdjCellCheckNum, plsfn3Prb12RIPAvg=plsfn3Prb12RIPAvg, pdschPb=pdschPb, hoInterEnbX2LBCPrepIn=hoInterEnbX2LBCPrepIn, cellUtraFreqIndex=cellUtraFreqIndex, apConnReEstabInterEnbScfailClose=apConnReEstabInterEnbScfailClose, ofpPortModuleVendorName=ofpPortModuleVendorName, plsfn3Prb29RIPAvg=plsfn3Prb29RIPAvg, plsfn8Prb60RIPAvg=plsfn8Prb60RIPAvg, macTestSwitchInfoGapScheOptimizationSwitch=macTestSwitchInfoGapScheOptimizationSwitch, iubIPPathIndex=iubIPPathIndex, amrUlVoipPacketNb7=amrUlVoipPacketNb7, pdcpProfile0x0103Flag=pdcpProfile0x0103Flag, volteHOAttOutInterEnbX2InterFreq=volteHOAttOutInterEnbX2InterFreq, cqiRowStatus=cqiRowStatus, activeAlarmItfNCauseNo=activeAlarmItfNCauseNo, baseBandCarrierTxPath5CalFactorQ=baseBandCarrierTxPath5CalFactorQ, dlPATSpeeffthred2QPSK=dlPATSpeeffthred2QPSK, macUpAlgorithmPrbLimitMcsThre1=macUpAlgorithmPrbLimitMcsThre1, hlTestSwitchApSrsTestSwitch=hlTestSwitchApSrsTestSwitch, phyULMeanNLPRB39=phyULMeanNLPRB39, plsfn7Prb48RIPAvg=plsfn7Prb48RIPAvg, hsdpaCqiPwrCtrlNode=hsdpaCqiPwrCtrlNode, anrAlgorithmSwitch=anrAlgorithmSwitch, hoSuccOutInterEnbX2Quality=hoSuccOutInterEnbX2Quality, spsUeNumAnPersistent=spsUeNumAnPersistent, procDescription=procDescription, hsdpaHarqRvQpsk7New=hsdpaHarqRvQpsk7New, harqRb0TxNum=harqRb0TxNum, srbNbrScheTimesSfn0=srbNbrScheTimesSfn0, nbrschetimesdlMcs13=nbrschetimesdlMcs13, rruOpticalTransceiverEntry=rruOpticalTransceiverEntry, localCarrierhsdpaTfrcMode=localCarrierhsdpaTfrcMode, antWeightPhase3=antWeightPhase3, phyULMaxNLPRB59=phyULMaxNLPRB59, plsfn8Prb08RIPAvg=plsfn8Prb08RIPAvg, raeWeightingFactorsTable=raeWeightingFactorsTable, macSwitchTestInfoTAReviseLmt=macSwitchTestInfoTAReviseLmt, eNBPathShutdownStrategySwitch=eNBPathShutdownStrategySwitch, rrcCpmMeasCaseRelP4=rrcCpmMeasCaseRelP4, plsfn6Prb70RIPAvg=plsfn6Prb70RIPAvg, lccAdjustAC=lccAdjustAC, transCutOverTdsTrigger=transCutOverTdsTrigger, timerWaitX2Rsp=timerWaitX2Rsp, eventGeneralEventType=eventGeneralEventType, saalConnRxBgAkPdus=saalConnRxBgAkPdus, daughterBoardTable=daughterBoardTable, baseBoardSWCfgEnableSwitch=baseBoardSWCfgEnableSwitch, drbBurstDataThpDLQci2=drbBurstDataThpDLQci2, macUpMuMiMoMcsBackOff4=macUpMuMiMoMcsBackOff4, topologyAntennaArrayTable=topologyAntennaArrayTable, dlrbStatisticTable=dlrbStatisticTable, pdcpVideoPreset4=pdcpVideoPreset4, antUseingWeightAmplitude3=antUseingWeightAmplitude3, rrcConnReEstabAttHandOverFail=rrcConnReEstabAttHandOverFail, carrierTs2ISCP=carrierTs2ISCP, rrcSuccConnEstabMoVolte=rrcSuccConnEstabMoVolte, coolingFanStablePWM=coolingFanStablePWM, hlGlobalTestSwitchR9R10IESwitch=hlGlobalTestSwitchR9R10IESwitch, netAntArrayGain=netAntArrayGain, b1MeasAlgoType=b1MeasAlgoType, hl=hl, topoRRUOfpWorkMode=topoRRUOfpWorkMode, cellCompStatisticTable=cellCompStatisticTable, rruPrbTotUlEnb=rruPrbTotUlEnb, nbrschetimesulMcs13=nbrschetimesulMcs13, mrDocRptMROSwitch=mrDocRptMROSwitch, cellAdjUtraTddCellEntry=cellAdjUtraTddCellEntry, macTestSwitchInfoDlCqiFixSwitch=macTestSwitchInfoDlCqiFixSwitch, plsfn0Prb36RIPAvg=plsfn0Prb36RIPAvg, topoRHUBOfp3AccessOfpPortNo=topoRHUBOfp3AccessOfpPortNo, plsfn3Prb41RIPAvg=plsfn3Prb41RIPAvg, hcTable=hcTable, amrUlVoipPacketNb6=amrUlVoipPacketNb6, backupCopyResult=backupCopyResult, plsfn3Prb75RIPAvg=plsfn3Prb75RIPAvg, netPlanPowerControlLcId=netPlanPowerControlLcId, traceTaskUeId=traceTaskUeId, macOctUlMassiveMimoSM7=macOctUlMassiveMimoSM7, phyULMeanNLPRB84=phyULMeanNLPRB84, cpuUsageStatEntry=cpuUsageStatEntry, netIROfpPortSlotNo=netIROfpPortSlotNo, macDownlinkPDCCHOrderTransTimes=macDownlinkPDCCHOrderTransTimes, macCaActiveMacThruSCellUl=macCaActiveMacThruSCellUl, timerWaitTime=timerWaitTime, videoActiveRowStatus=videoActiveRowStatus, macPreset33=macPreset33, rrcFailConnEstabTerminalNoRsp=rrcFailConnEstabTerminalNoRsp, cellCompanyVideoMangguoVideoNum=cellCompanyVideoMangguoVideoNum, macPhrIndex45=macPhrIndex45, atuByIpRowStatus=atuByIpRowStatus, opFuncFeatureGroupFlag=opFuncFeatureGroupFlag, macTestSwitchInfoUl2PrbMcsDec=macTestSwitchInfoUl2PrbMcsDec, plADIUlPwrDeltaPreambleMsg3=plADIUlPwrDeltaPreambleMsg3, pdcpPreset16=pdcpPreset16, plsfn5Prb73RIPAvg=plsfn5Prb73RIPAvg, ipoaChRnc2NbMbs=ipoaChRnc2NbMbs, boardVoltageTable=boardVoltageTable, cellCompanyVideoNumLcId=cellCompanyVideoNumLcId, hsupaCongestCtrlEntry=hsupaCongestCtrlEntry, qolEchoAvgDelay=qolEchoAvgDelay, plsfn0Prb52RIPAvg=plsfn0Prb52RIPAvg, pdcpUlAirSduDropTotalNumberQci5=pdcpUlAirSduDropTotalNumberQci5, erabEstabInitFailNbrControlProcessingOverload=erabEstabInitFailNbrControlProcessingOverload, erabRelEnbNbrQci8=erabRelEnbNbrQci8, atuUlBoTime=atuUlBoTime, pdcpDlAirSduDropTotalNumberQci4=pdcpDlAirSduDropTotalNumberQci4, euePeriodRptRptAmount=euePeriodRptRptAmount, plRiaCharactSeqCheckThresh=plRiaCharactSeqCheckThresh, peripheralPackPlanVendor=peripheralPackPlanVendor, antWeightPhase0=antWeightPhase0, anrNotiTime=anrNotiTime, s1ErrorIndicatByMMENas=s1ErrorIndicatByMMENas, boardSwapType=boardSwapType, cacGbrThFlag=cacGbrThFlag, rrcPreset21=rrcPreset21, activeAlarmTime=activeAlarmTime, retAntRCUCarrier=retAntRCUCarrier, pdcpRowStatus=pdcpRowStatus, macMumimoUserUlRank1=macMumimoUserUlRank1, pdcpVideoMatchYouku=pdcpVideoMatchYouku, cellCompanyVideoReserver7VideoNum=cellCompanyVideoReserver7VideoNum, plsfn8Prb77RIPAvg=plsfn8Prb77RIPAvg, amrUlVoipPacketWb9=amrUlVoipPacketWb9, plsfn4Prb06RIPAvg=plsfn4Prb06RIPAvg, localCarrierhsupaCtrlSDMACapability=localCarrierhsupaCtrlSDMACapability, alarmCauseIsStateful=alarmCauseIsStateful, rrcCAConfigNbrSCellUl2CC=rrcCAConfigNbrSCellUl2CC, plsfn5Prb52RIPAvg=plsfn5Prb52RIPAvg, macSwitchInfoVoIPUeInactivePeriod=macSwitchInfoVoIPUeInactivePeriod, macCaActivePrbPSCellDl=macCaActivePrbPSCellDl, extendDrbDlBucketSizeDuration=extendDrbDlBucketSizeDuration, topoSetRRUPortSubtoLocalCellId2=topoSetRRUPortSubtoLocalCellId2, rruOptTransRRUNo=rruOptTransRRUNo, sjm1SnrLowThresholdQpsk=sjm1SnrLowThresholdQpsk, carrierRuTs1Info=carrierRuTs1Info, faultManagement=faultManagement, cellAcProbFactorForMoc=cellAcProbFactorForMoc, pdcpVideoPreset7=pdcpVideoPreset7, rrcCellSrRel=rrcCellSrRel, swPackCustomerPlanDownloadIndicator=swPackCustomerPlanDownloadIndicator, cellCdma2000ParaCsfbRegPwrDownRegCfgInd=cellCdma2000ParaCsfbRegPwrDownRegCfgInd, netRETAntRCUTable=netRETAntRCUTable, macDownlinkDecEff11Tm3=macDownlinkDecEff11Tm3, pmTaskEntry=pmTaskEntry, cellUlIotTable=cellUlIotTable, plReceivePowerUserIndex11=plReceivePowerUserIndex11, pdcpVideoPreset8=pdcpVideoPreset8, macTestSwitchInfoLogUeIndex=macTestSwitchInfoLogUeIndex, hoFailIncIntraFreqInterCellIntraEnbDrbID=hoFailIncIntraFreqInterCellIntraEnbDrbID, macTestSwitchInfoTaScheSwitch=macTestSwitchInfoTaScheSwitch, plsfn6Prb48RIPAvg=plsfn6Prb48RIPAvg, douAdjcHandOverProcedureCellAdjCellLcId=douAdjcHandOverProcedureCellAdjCellLcId, cellAdjCellIdUtra=cellAdjCellIdUtra, plsfn0Prb44RIPAvg=plsfn0Prb44RIPAvg, tdsNodeBBruStatisticAlgorithmSwitch=tdsNodeBBruStatisticAlgorithmSwitch, phyULMeanNLPRB61=phyULMeanNLPRB61, netRRUOfpWorkMode=netRRUOfpWorkMode, phyULMaxNLPRB15=phyULMaxNLPRB15, srvccEntry=srvccEntry, pdcpVideoThroughput=pdcpVideoThroughput, plsfn7Prb35RIPAvg=plsfn7Prb35RIPAvg, raeGroupsGroups=raeGroupsGroups, anrNotiAdjCellNetType=anrNotiAdjCellNetType, vlanConfigType=vlanConfigType, topoRRUUUpTime=topoRRUUUpTime, erabNbrMeanEstabQci7=erabNbrMeanEstabQci7, ethPortUpUseRatio=ethPortUpUseRatio, pmExpValueInstanceIndex=pmExpValueInstanceIndex, rrcConnReleaseRedirectionTo3GMea=rrcConnReleaseRedirectionTo3GMea, plsfn1Prb69RIPAvg=plsfn1Prb69RIPAvg, sscSwitch=sscSwitch, invShelfEntry=invShelfEntry, erabNbrReqRelEnbByHOQCI6=erabNbrReqRelEnbByHOQCI6, carrierRuTs4Info=carrierRuTs4Info, e1LinkTxStuffCells=e1LinkTxStuffCells, iubSCTPStatOutLossPkts=iubSCTPStatOutLossPkts, pdcprelatedOriginCounter=pdcprelatedOriginCounter, plsfn7Prb59RIPAvg=plsfn7Prb59RIPAvg, topoRRUResetTrigger=topoRRUResetTrigger, emEquipmentIndex=emEquipmentIndex, syslogServerSendFacility=syslogServerSendFacility, hoSuccOutPrepInterEnbS1InterFreqQci2=hoSuccOutPrepInterEnbS1InterFreqQci2, plsfn0Prb93RIPAvg=plsfn0Prb93RIPAvg, rrurelatedOriginCounter=rrurelatedOriginCounter, erabRelEnbNbrQci1Congestion=erabRelEnbNbrQci1Congestion, plsfn0Prb20RIPAvg=plsfn0Prb20RIPAvg, accessControlManagement=accessControlManagement, packHotPackRollbackTrigger=packHotPackRollbackTrigger, raeParamUseTrigger=raeParamUseTrigger, videoPerfOfMacTable=videoPerfOfMacTable, emHumidityIndex=emHumidityIndex, s1DiagosisPacketTotalJitter=s1DiagosisPacketTotalJitter, contextAttRelMMENbrUnspecifiedNas=contextAttRelMMENbrUnspecifiedNas, plsfn2Prb14RIPAvg=plsfn2Prb14RIPAvg, syslogServerSendSwitch=syslogServerSendSwitch, timeSlotTypeNeighCell3=timeSlotTypeNeighCell3, hsdpaEFACHSchedRowStatus=hsdpaEFACHSchedRowStatus, plsfn8Prb78RIPAvg=plsfn8Prb78RIPAvg, cellReselComSpeedReselFlag=cellReselComSpeedReselFlag, lcAcUeThForSignal2=lcAcUeThForSignal2, remoteClkModuleSoftwareVersion=remoteClkModuleSoftwareVersion, pdcpBurstDataUlEdgeUser=pdcpBurstDataUlEdgeUser, baseBandCarrierSlotNo=baseBandCarrierSlotNo, contextFailInitalSetupNbrUnspecifiedFailure=contextFailInitalSetupNbrUnspecifiedFailure, retAntInstalledMechanicalTilt=retAntInstalledMechanicalTilt, hoOutSuccMro=hoOutSuccMro, volteHOSuccOutIntraEnbInterFreq=volteHOSuccOutIntraEnbInterFreq, plsfn1Prb22RIPAvg=plsfn1Prb22RIPAvg, sdc=sdc, macNbrErrTbDlMassiveMimoSM11=macNbrErrTbDlMassiveMimoSM11, curCfgFileSavePeriodTime=curCfgFileSavePeriodTime, hoFailPrepIncIntraFreqX2LoChID=hoFailPrepIncIntraFreqX2LoChID, rrcMchCaseRelP8=rrcMchCaseRelP8, saalConnSscopState=saalConnSscopState, hsdpaHarqEntry=hsdpaHarqEntry, hlGlobalTestSwitcheNBUeContrlHighThresh=hlGlobalTestSwitcheNBUeContrlHighThresh, macTestSwitchInfoDlMaxScheUeNum=macTestSwitchInfoDlMaxScheUeNum, lbcUlS1TnlTh1=lbcUlS1TnlTh1, videoPerfOfMacLcId=videoPerfOfMacLcId, inventoryPort=inventoryPort, radioCarrierEngagedState=radioCarrierEngagedState, macNbrRbDlTm8RANK1BF=macNbrRbDlTm8RANK1BF, ofpSelfAdaptiveCtrlSwitch=ofpSelfAdaptiveCtrlSwitch, hsupaSpsSchedTimerQPSK=hsupaSpsSchedTimerQPSK, antUseingWeightPhase5=antUseingWeightPhase5, imaGrpTxSigLevel=imaGrpTxSigLevel, rrcConnReleaseRedirectionTo2GRemoteRip=rrcConnReleaseRedirectionTo2GRemoteRip, macMumimoPairSfnDl=macMumimoPairSfnDl, macVideoSchDl=macVideoSchDl, caBsrActOverloadThr=caBsrActOverloadThr, ofpPortModuleS9umKmLen=ofpPortModuleS9umKmLen, plsfn3Prb85RIPAvg=plsfn3Prb85RIPAvg, cellAdjCellEnbGlobalId=cellAdjCellEnbGlobalId, drbNbrScheTimesSfn7=drbNbrScheTimesSfn7, initCalibrationAnt8TxStatus=initCalibrationAnt8TxStatus, phyULMeanNLPRB93=phyULMeanNLPRB93, plsfn4Prb33RIPAvg=plsfn4Prb33RIPAvg, a1Hysteresis=a1Hysteresis, erabActiveMeanNbrDLQci8=erabActiveMeanNbrDLQci8, drbS1ResMapCoef=drbS1ResMapCoef)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", eNBMeasComPeriodicForPrbNum=eNBMeasComPeriodicForPrbNum, macOctDlMassiveMimoSM5=macOctDlMassiveMimoSM5, cellUnavailDurSys=cellUnavailDurSys, s1SigProcTable=s1SigProcTable, plsfn0Prb21RIPAvg=plsfn0Prb21RIPAvg, cellInterRatUtraSfMedium=cellInterRatUtraSfMedium, alterationObjects=alterationObjects, macDownlinkEff12Tm8=macDownlinkEff12Tm8, clkCommPLLDelayAdjustThreshold=clkCommPLLDelayAdjustThreshold, circuitPackDateOfLastService=circuitPackDateOfLastService, hlTestSwitchcellAdjCellCheckStart=hlTestSwitchcellAdjCellCheckStart, ueAdaptiveIrcRate=ueAdaptiveIrcRate, srvccFailPrepOutGeranQuaTgtFailure=srvccFailPrepOutGeranQuaTgtFailure, irathoFailPrepIncUtranOthers=irathoFailPrepIncUtranOthers, peripheralPackPlanTypeIndex=peripheralPackPlanTypeIndex, pdcpDlAirSduSendTotalNumberQci7=pdcpDlAirSduSendTotalNumberQci7, vipSafeguardTable=vipSafeguardTable, x2OutNbrOctetsUserPlane=x2OutNbrOctetsUserPlane, plRipCellGranularity=plRipCellGranularity, raeTiltBuf=raeTiltBuf, eNBSymbolShutdownLowThreshold=eNBSymbolShutdownLowThreshold, mroTable=mroTable, rrcTFCACapUserNbrFddPCell=rrcTFCACapUserNbrFddPCell, bfdDetectMulti=bfdDetectMulti, hoFailPrepOutIntraFreqX2SourceFail=hoFailPrepOutIntraFreqX2SourceFail, macSwitchTestInfoTCPActiveAckNumber=macSwitchTestInfoTCPActiveAckNumber, raeGroupsAntArrayNo=raeGroupsAntArrayNo, raeTestRecord=raeTestRecord, hcBlerHcIotTh=hcBlerHcIotTh, clkSrcRowStatus=clkSrcRowStatus, topoRRUJamCounter=topoRRUJamCounter, phyULMaxNLPRB83=phyULMaxNLPRB83, plsfn8Prb97RIPAvg=plsfn8Prb97RIPAvg, rrcActiveMaxNbrPCellDl2CCTF=rrcActiveMaxNbrPCellDl2CCTF, hoNcHoPreAttS=hoNcHoPreAttS, euePeriodRptCfgId=euePeriodRptCfgId, pdcpVideoMiGuVideoActive=pdcpVideoMiGuVideoActive, ulPowerControlTable=ulPowerControlTable, cqiNomPdschRsEpreOffset=cqiNomPdschRsEpreOffset, hsupaCommSchedDpchPreemptPolicy=hsupaCommSchedDpchPreemptPolicy, hsupaSpsSchedSilentTransCntTh=hsupaSpsSchedSilentTransCntTh, srsDci4AntannePortAp=srsDci4AntannePortAp, macDownlinkCsiRsDecMcs=macDownlinkCsiRsDecMcs, plsfn2Prb02RIPAvg=plsfn2Prb02RIPAvg, hoInterEnbX2LBCOutCancel=hoInterEnbX2LBCOutCancel, plUsrLogDlReportDuration=plUsrLogDlReportDuration, rrcConnReleasePdcpNotRcvSn=rrcConnReleasePdcpNotRcvSn, plsfn5Prb22RIPAvg=plsfn5Prb22RIPAvg, icicCenterUeUlPrbSchedPri2=icicCenterUeUlPrbSchedPri2, vipSafeguardRowStatus=vipSafeguardRowStatus, rrcRbcCaseRelP0=rrcRbcCaseRelP0, macSwitchInfoCceOffset=macSwitchInfoCceOffset, saalConnTxSdPdus=saalConnTxSdPdus, plADIUlPwrP0NominalPusch=plADIUlPwrP0NominalPusch, measGapCfgFlagForRrcConnect=measGapCfgFlagForRrcConnect, rrcConnReEstabInterEnbAccessJudgeFail=rrcConnReEstabInterEnbAccessJudgeFail, srsMaxUpPtsFlag=srsMaxUpPtsFlag, ccRachErrorRatioPeriod=ccRachErrorRatioPeriod, dlCompSrsMeaSwitch=dlCompSrsMeaSwitch, drbPdcpSduDelayDlQci9=drbPdcpSduDelayDlQci9, a4LcId=a4LcId, tbNbrSuccInitDlQpsk=tbNbrSuccInitDlQpsk, macDownlinkAddEff21Tm3=macDownlinkAddEff21Tm3, macPreset37=macPreset37, cellSpeCalCfgOffsetArray=cellSpeCalCfgOffsetArray, hoFailPrepIncInterFreqIntraEnbSPS=hoFailPrepIncInterFreqIntraEnbSPS, ueInfoStatQciRbCnt=ueInfoStatQciRbCnt, plsfn3Prb13RIPAvg=plsfn3Prb13RIPAvg, phyULMaxNLPRB35=phyULMaxNLPRB35, netLocalCellComponentTable=netLocalCellComponentTable, plRiaCellRptDataEntry=plRiaCellRptDataEntry, pathStatus=pathStatus, ccDeltaDownStep=ccDeltaDownStep, pathRnc2NbMaxCTD=pathRnc2NbMaxCTD, hsupaMAXCIEntry=hsupaMAXCIEntry, e1LinkImaDCBDepth=e1LinkImaDCBDepth, spsLcId=spsLcId, cellAcBarList3ForVoice=cellAcBarList3ForVoice, cellIotNotiNEID=cellIotNotiNEID, plPreamblePwrNormNum=plPreamblePwrNormNum, iubSCTPStatistic=iubSCTPStatistic, plsfn6Prb54RIPAvg=plsfn6Prb54RIPAvg, hcLcId=hcLcId, plsfn0Prb30RIPAvg=plsfn0Prb30RIPAvg, anrNotiMeasEventType=anrNotiMeasEventType, topoRHUBOfpWorkMode=topoRHUBOfpWorkMode, dlPATRowStatus=dlPATRowStatus, phyULMeanNLPRB42=phyULMeanNLPRB42, raeInstallersID=raeInstallersID, sctpPeerIpAddr3=sctpPeerIpAddr3, macNbrTbDlTm2=macNbrTbDlTm2, e1FEBEErrorAlarmClearThreshold=e1FEBEErrorAlarmClearThreshold, plsfn2Prb65RIPAvg=plsfn2Prb65RIPAvg, hlTestSwitchQciAppointBand=hlTestSwitchQciAppointBand, atuVolteDataUserTimeInterval=atuVolteDataUserTimeInterval, invRruRowStatus=invRruRowStatus, pucchLcId=pucchLcId, hlGlobalTestSwitchanrAlgorithmSwitchTLS=hlGlobalTestSwitchanrAlgorithmSwitchTLS, cellUlAnteRSSIValue=cellUlAnteRSSIValue, pdcpVideoUtcpkgMinSize=pdcpVideoUtcpkgMinSize, hoSuccOutIntraEnbIntraFreqQci2=hoSuccOutIntraEnbIntraFreqQci2, antUseingWeightArrayNo=antUseingWeightArrayNo, plsfn8Prb38RIPAvg=plsfn8Prb38RIPAvg, peripheralPackRunningRowStatus=peripheralPackRunningRowStatus, macPhrIndex46=macPhrIndex46, plsfn9Prb51RIPAvg=plsfn9Prb51RIPAvg, macDownlinkMuMiMoUePairEffThr=macDownlinkMuMiMoUePairEffThr, plsfn0Prb77RIPAvg=plsfn0Prb77RIPAvg, plsfn5Prb03RIPAvg=plsfn5Prb03RIPAvg, pdcpVideoIQiYiVideoActive=pdcpVideoIQiYiVideoActive, timerRrcReestablishCmplt=timerRrcReestablishCmplt, timerAnrRptEutraTimer=timerAnrRptEutraTimer, cellDlSysBandWidth=cellDlSysBandWidth, hlTestSwitchTENDA2RSRP=hlTestSwitchTENDA2RSRP, dlPATPaDrb=dlPATPaDrb, mroNotifications=mroNotifications, plsfn1Prb02RIPAvg=plsfn1Prb02RIPAvg, plRipCellUpIotSwitch=plRipCellUpIotSwitch, macTestSwitchInfoCchScramblePrbStartPos=macTestSwitchInfoCchScramblePrbStartPos, lbcPrbPeriodNum=lbcPrbPeriodNum, amrDlVoipPacketNb8=amrDlVoipPacketNb8, ipoaChNb2RncMbs=ipoaChNb2RncMbs, edgeUserStatisticEntry=edgeUserStatisticEntry, e1LinkSignalState=e1LinkSignalState, pdcpThrpTimeULQci2=pdcpThrpTimeULQci2, tdsNodeBSysRncIpAddr=tdsNodeBSysRncIpAddr, anrNotiLcIdx=anrNotiLcIdx, cceCclrLcId=cceCclrLcId, s1ErrorIndicatByeNBTransferSyntaxError=s1ErrorIndicatByeNBTransferSyntaxError, macschecceusedsfn8=macschecceusedsfn8, mlbEventNotiTime=mlbEventNotiTime, macDownlinkMuMiMoRowStatus=macDownlinkMuMiMoRowStatus, cellActiveTrigger=cellActiveTrigger, sfn2avgripTable=sfn2avgripTable, opFuncEntry=opFuncEntry, globalTestSwitch=globalTestSwitch, antArrayVendor=antArrayVendor, plsfn6Prb05RIPAvg=plsfn6Prb05RIPAvg, cellReselComLcId=cellReselComLcId, bfdWorkMode=bfdWorkMode, rbAttEstabQci1=rbAttEstabQci1, cellShedLcId=cellShedLcId, mroA3TTTThBaseLowTh=mroA3TTTThBaseLowTh, hlTestSwitchcaUplinkSwitchTLS=hlTestSwitchcaUplinkSwitchTLS, macVideoUsedPrbPerSfnDlAvg=macVideoUsedPrbPerSfnDlAvg, atuVipUserAppointFreqUserTypeInd=atuVipUserAppointFreqUserTypeInd, rrcConnReEstabSuccHandOverFail=rrcConnReEstabSuccHandOverFail, mlbNotiCellType=mlbNotiCellType, macPrbUtilizationDlMin=macPrbUtilizationDlMin, dataPlanStatisticRowStatus=dataPlanStatisticRowStatus, rrcConnReEstabFailInstAllocFail=rrcConnReEstabFailInstAllocFail, plsfn2Prb88RIPAvg=plsfn2Prb88RIPAvg, airCondRunningSwitch=airCondRunningSwitch, macUpMuMiMoRowStatus=macUpMuMiMoRowStatus, volteHOAttOutInterEnbS1IntraFreq=volteHOAttOutInterEnbS1IntraFreq, imaGroupEntry=imaGroupEntry, boardVoltDescription=boardVoltDescription, pathRnc2NbPcr=pathRnc2NbPcr, pubAlgorithmPara=pubAlgorithmPara, ulPwrDeltaTXDoffsetPUCCHFormat3R10=ulPwrDeltaTXDoffsetPUCCHFormat3R10, saalConnRxEndPdus=saalConnRxEndPdus, plsfn7PrbG4RIPMax=plsfn7PrbG4RIPMax, ipAddrPhyType=ipAddrPhyType, macSwitchTestInfoUlBoSwitch=macSwitchTestInfoUlBoSwitch, macHarqRetxRatioEntry=macHarqRetxRatioEntry, cellPhyId=cellPhyId, raeSectorID=raeSectorID, boardSoftwareFileTable=boardSoftwareFileTable, tdsNetPlanControlLcId=tdsNetPlanControlLcId, s1Conn=s1Conn, rruBorrowFromScellPrbTotDlTF=rruBorrowFromScellPrbTotDlTF, sjm1MinPuchRscp=sjm1MinPuchRscp, lcAcUeThForMoc2=lcAcUeThForMoc2, airCondUnderTemperatureLimit=airCondUnderTemperatureLimit, macSwitchInfoUlCceRatio=macSwitchInfoUlCceRatio, machs=machs, pdcpUpPktDiscardRateDlQci7Enb=pdcpUpPktDiscardRateDlQci7Enb, timerRrcConnCmplt=timerRrcConnCmplt, atuVIPInactivePeriod=atuVIPInactivePeriod, ccOlpcBlerTargetVoIP=ccOlpcBlerTargetVoIP, pdcpSduDlDiscRatioEntry=pdcpSduDlDiscRatioEntry, topoRRUTypeName=topoRRUTypeName, e1LinkRxClkMode=e1LinkRxClkMode, efdTable=efdTable, caScellDeActiveThroughputThrforUl=caScellDeActiveThroughputThrforUl, adjeNBRowStatus=adjeNBRowStatus, caQosSatisfyProportionThrDl=caQosSatisfyProportionThrDl, eueMeasCellTimeEvalution=eueMeasCellTimeEvalution, hlTestSwitchIcicTestSwitch=hlTestSwitchIcicTestSwitch, hsupaTfrcRowStatus=hsupaTfrcRowStatus, hoFailOutX2QuaReEtPrepSetEnb=hoFailOutX2QuaReEtPrepSetEnb, cellRruCellTxPowerTable=cellRruCellTxPowerTable, iubIPPathMaxRxBandwidth=iubIPPathMaxRxBandwidth, srShortPeriodicity=srShortPeriodicity, macNbrTbDlMassiveMimoSM10=macNbrTbDlMassiveMimoSM10, netRHUBTable=netRHUBTable, alarmNotiType=alarmNotiType, erabActiveMaxNbrULQci1=erabActiveMaxNbrULQci1, plsfn3Prb50RIPAvg=plsfn3Prb50RIPAvg, chacTable=chacTable, sfn1avgripEntry=sfn1avgripEntry, tdsLcCellOperationalState=tdsLcCellOperationalState, schePrbAcoordingMCSEntry=schePrbAcoordingMCSEntry, apS1apRelP7=apS1apRelP7, baseBandCarrierTxPath4CalFactorI=baseBandCarrierTxPath4CalFactorI, pdcpRatioSITable=pdcpRatioSITable, iubSCTPStatInPkts=iubSCTPStatInPkts, hoFailPrepIncInterFreqS1HandoverRestrictList=hoFailPrepIncInterFreqS1HandoverRestrictList, s1HandOverProcInterEnbTable=s1HandOverProcInterEnbTable, macMumimoPairSfnUl=macMumimoPairSfnUl, drbUlLoChGroup=drbUlLoChGroup, phyCfgIotRalativeHighAlarmThreshold=phyCfgIotRalativeHighAlarmThreshold, plsfn1Prb80RIPAvg=plsfn1Prb80RIPAvg, erabModQoSSuccNbrQci2=erabModQoSSuccNbrQci2, processorCoreEntry=processorCoreEntry, sfn9avgripLcId=sfn9avgripLcId, phyULMeanNLPRB67=phyULMeanNLPRB67, pdcpThrpTimeULQci8=pdcpThrpTimeULQci8, raeGroupsEntry=raeGroupsEntry, nbrschetimesdlMcs23=nbrschetimesdlMcs23, raeWeightingFactorsAmplitude4=raeWeightingFactorsAmplitude4, pdcpPreset40=pdcpPreset40, spsOptmzUlPacketRatio=spsOptmzUlPacketRatio, cellInterRatTreselectionGeran=cellInterRatTreselectionGeran, macSwitchInfoNewRbPriorityScheTime=macSwitchInfoNewRbPriorityScheTime, lmcMlbOcnAdjustMaxNum=lmcMlbOcnAdjustMaxNum, macCellCompUeNumQci9=macCellCompUeNumQci9, puschbetaOffsetCQIIndexMC=puschbetaOffsetCQIIndexMC, tdsLcRowStatus=tdsLcRowStatus, cellCompanyVideoReserver13VideoNum=cellCompanyVideoReserver13VideoNum, erabEstabAttNbrQci254=erabEstabAttNbrQci254, hsdpaMaxCILcId=hsdpaMaxCILcId, erabNbrHoIncQci9=erabNbrHoIncQci9, fcCIRStartThreshold=fcCIRStartThreshold, ueInfoStaticsTable=ueInfoStaticsTable, netEthPlanTable=netEthPlanTable, erabEstabSuccNbrQci251=erabEstabSuccNbrQci251, ofpPortInfo=ofpPortInfo, macNbrSuccInitTbUlQpskQci1=macNbrSuccInitTbUlQpskQci1, cellGeranFreqFollowingArfcnsChoice=cellGeranFreqFollowingArfcnsChoice, iubImaGrpTable=iubImaGrpTable, almActUploadLogIdx=almActUploadLogIdx, phyCfgRipPMReportDeltaSSF=phyCfgRipPMReportDeltaSSF, cdlServiceFileSize=cdlServiceFileSize, rlcPreset31=rlcPreset31, peripheralPackPlanUpgradeResult2=peripheralPackPlanUpgradeResult2, phyULMaxNLPRB40=phyULMaxNLPRB40, cellCdma2000ParaSecondPreRegZoneIdFlag=cellCdma2000ParaSecondPreRegZoneIdFlag, fcNotiTime=fcNotiTime, plsfn8PrbG8RIPMax=plsfn8PrbG8RIPMax, hsdpaSpi14Weight=hsdpaSpi14Weight, erabRelAttNbrQci8=erabRelAttNbrQci8, macPhrIndex51=macPhrIndex51, pucchTable=pucchTable)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", omLinkNetworkAttribute=omLinkNetworkAttribute, macTestSwitchSrbDlScheNumSub3=macTestSwitchSrbDlScheNumSub3, raeGroupsSubIndexNo=raeGroupsSubIndexNo, plsfn1Prb99RIPAvg=plsfn1Prb99RIPAvg, plADICfgTable=plADICfgTable, hsdpaSpsSchedDynamicSDThFactor=hsdpaSpsSchedDynamicSDThFactor, s1ErrorIndicatByeNBEnbUeS1apIdError=s1ErrorIndicatByeNBEnbUeS1apIdError, fileServer=fileServer, netSetRRUPortAntArrayNo=netSetRRUPortAntArrayNo, netSetRRUPortWithAntennaRowStatus=netSetRRUPortWithAntennaRowStatus, rruCtrlVSWRMonitorSwitch=rruCtrlVSWRMonitorSwitch, plRssiAvgC7=plRssiAvgC7, rbSuccEstabQci8=rbSuccEstabQci8, macNbrInitTbDlQci1=macNbrInitTbDlQci1, srVoltePucchNum=srVoltePucchNum, netLcComponentRowStatus=netLcComponentRowStatus, boardSensor=boardSensor, plrssiEntry=plrssiEntry, plsfn1Prb67RIPAvg=plsfn1Prb67RIPAvg, hoAttOutInterEnbS1IntraFreqQci2=hoAttOutInterEnbS1IntraFreqQci2, ipoaChActiveCheckPeriod=ipoaChActiveCheckPeriod, phyCfgSrsSnrAnteSelectThre=phyCfgSrsSnrAnteSelectThre, macschecceusedsfn5=macschecceusedsfn5, plsfn3Prb15RIPAvg=plsfn3Prb15RIPAvg, plsfn7Prb39RIPAvg=plsfn7Prb39RIPAvg, phyULMeanNLPRB49=phyULMeanNLPRB49, srvccSuccOutGeranCoverage=srvccSuccOutGeranCoverage, irathoFailPrepIncGprsOthers=irathoFailPrepIncGprsOthers, plsfn6Prb09RIPAvg=plsfn6Prb09RIPAvg, netRRUOfp2AccessOfpPortNo=netRRUOfp2AccessOfpPortNo, hoOutFailMLBTooLateType1=hoOutFailMLBTooLateType1, topoSetRRUPortTDCarrierEnd=topoSetRRUPortTDCarrierEnd, erabActiveMeanNbrDL=erabActiveMeanNbrDL, volteHOSuccOutPrepInterEnbS1IntraFreq=volteHOSuccOutPrepInterEnbS1IntraFreq, mrMrsFileReq=mrMrsFileReq, erabRelFailNbrInteractionWithOtherProcedure=erabRelFailNbrInteractionWithOtherProcedure, dlCAPwrCce1CqiThreshHold=dlCAPwrCce1CqiThreshHold, timerMeasRptCsfb=timerMeasRptCsfb, s1ReceivedDiagosisTotalPacket=s1ReceivedDiagosisTotalPacket, phyULMeanNLPRB76=phyULMeanNLPRB76, hsupaTfrcDpchPcDelta=hsupaTfrcDpchPcDelta, macNbrRbDlMassiveMimoSM4=macNbrRbDlMassiveMimoSM4, erabThpTimeUlQci9=erabThpTimeUlQci9, plsfn5Prb07RIPAvg=plsfn5Prb07RIPAvg, activeAlarmMaintenanceStatus=activeAlarmMaintenanceStatus, cellDeactDelayTime=cellDeactDelayTime, rruCalcPathRxStatus=rruCalcPathRxStatus, ftpServerTable=ftpServerTable, plsfn6Prb40RIPAvg=plsfn6Prb40RIPAvg, oabResetTrigger=oabResetTrigger, rruPrbDlQci9Num=rruPrbDlQci9Num, interRatCsHandleNetwork=interRatCsHandleNetwork, daughterBoardEntry=daughterBoardEntry, hsdpaEFACHSchedMF=hsdpaEFACHSchedMF, plsfn8Prb55RIPAvg=plsfn8Prb55RIPAvg, iocDescription=iocDescription, pdcpVideoMatchMgtv=pdcpVideoMatchMgtv, apSwitchErabResourceRel=apSwitchErabResourceRel, alarmCauseItfNProtocolCauseNo=alarmCauseItfNProtocolCauseNo, cellAntWeightAmplitude15=cellAntWeightAmplitude15, plsfn3Prb48RIPAvg=plsfn3Prb48RIPAvg, plsfn6Prb06RIPAvg=plsfn6Prb06RIPAvg, plsfn4Prb19RIPAvg=plsfn4Prb19RIPAvg, fcSignalingTxaOffset=fcSignalingTxaOffset, imaGrpFeGsmState=imaGrpFeGsmState, plsfn0Prb80RIPAvg=plsfn0Prb80RIPAvg, drbPdcpSduBitRatioUlMax=drbPdcpSduBitRatioUlMax, phyULMaxNLPRB81=phyULMaxNLPRB81, netRHUBOfpWorkMode=netRHUBOfpWorkMode, hsdpaHarqRvQpsk3=hsdpaHarqRvQpsk3, rruOptTransRowStatus=rruOptTransRowStatus, icicEdgeUeUlPrbSchedPri4=icicEdgeUeUlPrbSchedPri4, atuDldataTendcellFreq=atuDldataTendcellFreq, caScellDeactiveRlcOverloadThr=caScellDeactiveRlcOverloadThr, saalConnRxUdPdus=saalConnRxUdPdus, hoInterEnbX2LBCPrepInSucc=hoInterEnbX2LBCPrepInSucc, hoAttOutExecInterEnbS1InterFreqQci2=hoAttOutExecInterEnbS1InterFreqQci2, lmcMlbAdjCellJudgeTimer=lmcMlbAdjCellJudgeTimer, lmcCpuHighLoadTh=lmcCpuHighLoadTh, drbThpTimeDlQci5=drbThpTimeDlQci5, macCellCompUeNumQci3=macCellCompUeNumQci3, cellAdjUtraTddCellPlmnMcc=cellAdjUtraTddCellPlmnMcc, erabActiveMaxNbrDLQci7=erabActiveMaxNbrDLQci7, erabEstabAddFailNbrRadioResNotAvailable=erabEstabAddFailNbrRadioResNotAvailable, plsfn6Prb22RIPAvg=plsfn6Prb22RIPAvg, rruTypeIrCompressMode=rruTypeIrCompressMode, alarmBoxAttr=alarmBoxAttr, alcap=alcap, hlTestSwitchTENDA1RSRP=hlTestSwitchTENDA1RSRP, nbrscheprbdlMcs16=nbrscheprbdlMcs16, cellInterFreqInfo=cellInterFreqInfo, phyULMaxNLPRB48=phyULMaxNLPRB48, ftpServerLogDirectory=ftpServerLogDirectory, drbNbrScheTimesSfn3=drbNbrScheTimesSfn3, voipLosSilentPackerCopyDl=voipLosSilentPackerCopyDl, localCell=localCell, raeEquipLatitude=raeEquipLatitude, sjm1SnrHighThresholdQpsk=sjm1SnrHighThresholdQpsk, macDownlinkDlT=macDownlinkDlT, transactionControlSwitch=transactionControlSwitch, baseBandwidthEntry=baseBandwidthEntry, macScheTimeDlEdgeUser=macScheTimeDlEdgeUser, drxQciFlag=drxQciFlag, saalConnRxErAkPdus=saalConnRxErAkPdus, macPhrIndex26=macPhrIndex26, macPreset13=macPreset13, rlcPreset24=rlcPreset24, hsdpaSFCMinThHigh=hsdpaSFCMinThHigh, plsfn4Prb67RIPAvg=plsfn4Prb67RIPAvg, erabNormRelEnbNbrQci3=erabNormRelEnbNbrQci3, licenseFeatureSwitch=licenseFeatureSwitch, lbcUserNumThreshold=lbcUserNumThreshold, localCarrierFpachResps=localCarrierFpachResps, rrcFailConnReconfigAccessJudgeFailure=rrcFailConnReconfigAccessJudgeFailure, netSetRRUPortManualConfigPortNo=netSetRRUPortManualConfigPortNo, baseBandCarrierTxPath6CalFactorQ=baseBandCarrierTxPath6CalFactorQ, erabEstabInitAttNbrQci2=erabEstabInitAttNbrQci2, drbPdcpSduTotalNumberDlQci2=drbPdcpSduTotalNumberDlQci2, cellAdjUtraFddCellTable=cellAdjUtraFddCellTable, plsfn8Prb35RIPAvg=plsfn8Prb35RIPAvg, rlcPreset35=rlcPreset35, mroNotiCellId=mroNotiCellId, plsfn5Prb35RIPAvg=plsfn5Prb35RIPAvg, retAntAntennaBearing=retAntAntennaBearing, omLinkFaultSwitchTime=omLinkFaultSwitchTime, plsfn4Prb66RIPAvg=plsfn4Prb66RIPAvg, atuGoldUeIMSI17=atuGoldUeIMSI17, plsfn3Prb26RIPAvg=plsfn3Prb26RIPAvg, plsfn5Prb85RIPAvg=plsfn5Prb85RIPAvg, nodeBModeInfo=nodeBModeInfo, rruPreambleATotal=rruPreambleATotal, lcProcedureStatus=lcProcedureStatus, netLocalCellInfo=netLocalCellInfo, plsfn1Prb51RIPAvg=plsfn1Prb51RIPAvg, sfn5avgripRowStatus=sfn5avgripRowStatus, procRowStatus=procRowStatus, raeBmIndicatBearingRangeL=raeBmIndicatBearingRangeL, macPhrIndex44=macPhrIndex44, voipLosSilentPackerCopyUl=voipLosSilentPackerCopyUl, cellAdjCdma2000CellEntry=cellAdjCdma2000CellEntry, ipAddrLocalIpAddress=ipAddrLocalIpAddress, nbrschetimesulMcs19=nbrschetimesulMcs19, topoRRUFirmwareVersion=topoRRUFirmwareVersion, plsfn3Prb64RIPAvg=plsfn3Prb64RIPAvg, plsfn7Prb77RIPAvg=plsfn7Prb77RIPAvg, hsupaSpsSchedCodeRate=hsupaSpsSchedCodeRate, reservedCellL3Para3=reservedCellL3Para3, fileManagement=fileManagement, dlCAPwrPhichPowerCtrlSwitch=dlCAPwrPhichPowerCtrlSwitch, hoSuccOutIntraFreqLoadBalance=hoSuccOutIntraFreqLoadBalance, timerStoreUeCtx=timerStoreUeCtx, nbrschetimesdlMcs16=nbrschetimesdlMcs16, peripheralPackPlanUpgradeState=peripheralPackPlanUpgradeState, reservedENBOmPara1=reservedENBOmPara1, plsfn7Prb58RIPAvg=plsfn7Prb58RIPAvg, lccServeCellOff=lccServeCellOff, pdcpPreset14=pdcpPreset14, macSRBTbDLRank2=macSRBTbDLRank2, plRssiAvgC21=plRssiAvgC21, macUpAlgorithmTargetMcs=macUpAlgorithmTargetMcs, plIotLogFtpServerLoginName=plIotLogFtpServerLoginName, emWaterEntry=emWaterEntry, rruEffectiveScheTimesDl=rruEffectiveScheTimesDl, fileDeleteControl=fileDeleteControl, cellBlockSwitch=cellBlockSwitch, reservedENBL1Para1=reservedENBL1Para1, cellInterFreqCfgPriForIdle=cellInterFreqCfgPriForIdle, outDoorCabinetSerialNumber=outDoorCabinetSerialNumber, rhubOptTransStandStatus=rhubOptTransStandStatus, cacPositionEntry=cacPositionEntry, cellInterFreqSpeedStateSfHigh=cellInterFreqSpeedStateSfHigh, irathoAvgTimeOutUtran=irathoAvgTimeOutUtran, boardSwapSourceSlotNo=boardSwapSourceSlotNo, emEquipmentProtocolVersion=emEquipmentProtocolVersion, hoFailPrepIncIntraFreqIntraEnbLoChID=hoFailPrepIncIntraFreqIntraEnbLoChID, hcRowStatus=hcRowStatus, apX2apRelP8=apX2apRelP8, hoOutFailTooEarlyType2=hoOutFailTooEarlyType2, tbNbrInitDl=tbNbrInitDl, pmExpressionValueType=pmExpressionValueType, macNbrErrTbDlMassiveMimoSM3=macNbrErrTbDlMassiveMimoSM3, sscUuBitmap=sscUuBitmap, mdtSignalEnableSwitch=mdtSignalEnableSwitch, rrcPreset38=rrcPreset38, plsfn7Prb81RIPAvg=plsfn7Prb81RIPAvg, plsfn4Prb41RIPAvg=plsfn4Prb41RIPAvg, plThroughputCapacityDLTable=plThroughputCapacityDLTable, sctpDeleteFlag=sctpDeleteFlag, hoFailIncIntraFreqInterCellIntraEnbCellBlock=hoFailIncIntraFreqInterCellIntraEnbCellBlock, macschecfi2=macschecfi2, cellCdma2000ParaRowStatus=cellCdma2000ParaRowStatus, hlGlobalTestSwitchUeCapabilityTransferFlag=hlGlobalTestSwitchUeCapabilityTransferFlag, pdcpVideoMatchTencent=pdcpVideoMatchTencent, plsfn5Prb84RIPAvg=plsfn5Prb84RIPAvg, phyULMeanNLPRB25=phyULMeanNLPRB25, plsfn1Prb16RIPAvg=plsfn1Prb16RIPAvg, baseBandCarrierRadioPathTxStatus=baseBandCarrierRadioPathTxStatus, cellLccEntry=cellLccEntry, pagingTable=pagingTable, eventGeneralEventAdditionInfo=eventGeneralEventAdditionInfo, hsupaTfrcCrriAllocMode=hsupaTfrcCrriAllocMode, nbrscheprbulMcs25=nbrscheprbulMcs25, fcSichUlpcAbnormalThreshold=fcSichUlpcAbnormalThreshold, plsfn1Prb57RIPAvg=plsfn1Prb57RIPAvg, airCondReturnAirTempSensorAlarmState=airCondReturnAirTempSensorAlarmState, omLinkStatOutPkts=omLinkStatOutPkts, plsfn2Prb31RIPAvg=plsfn2Prb31RIPAvg, volteSchedulingEntry=volteSchedulingEntry, antWeightAmplitude0=antWeightAmplitude0, pmExpValueEntry=pmExpValueEntry, rrcMchCaseRelP0=rrcMchCaseRelP0, eNBCellShutdownLowThreshold=eNBCellShutdownLowThreshold, hoFailPrepIncIntraFreqS1Srs=hoFailPrepIncIntraFreqS1Srs, rrcSuccConnReconfigSrsCfg=rrcSuccConnReconfigSrsCfg, mroA5Th1BaseHighTh=mroA5Th1BaseHighTh, hoFailPrepIncInterFreqX2SPS=hoFailPrepIncInterFreqX2SPS, netRRURootAlarmType4=netRRURootAlarmType4, plsfn2Prb10RIPAvg=plsfn2Prb10RIPAvg, smallPacketPdcchCceUsedRatioThreshold=smallPacketPdcchCceUsedRatioThreshold, macPhrIndex53=macPhrIndex53, chacCpuLoadTag=chacCpuLoadTag, hoFailPrepIncIntraFreqS1PerDecodeFail=hoFailPrepIncIntraFreqS1PerDecodeFail, phyCfgBFScramPeriod=phyCfgBFScramPeriod, cellAdjUtraFddCellRAC=cellAdjUtraFddCellRAC, cellCompStatisticRowStatus=cellCompStatisticRowStatus, cellAntWeightAmplitude6=cellAntWeightAmplitude6, plsfn4Prb91RIPAvg=plsfn4Prb91RIPAvg, rrcRbcCaseRelP6=rrcRbcCaseRelP6, rbEstabProcTable=rbEstabProcTable, phyRruMeanTxPower=phyRruMeanTxPower, hoFailPrepIncInterFreqX2DrbID=hoFailPrepIncInterFreqX2DrbID, cellAcRowStatus=cellAcRowStatus, macsche8cceratio=macsche8cceratio, macDownlinkMuMiMoMcsBackoff27=macDownlinkMuMiMoMcsBackoff27, softLicenseTable=softLicenseTable, softLicenseUlSfBalanceCoeff=softLicenseUlSfBalanceCoeff, localCarrierAckedUsrDataVolume=localCarrierAckedUsrDataVolume, hsdpaMaxCITmR=hsdpaMaxCITmR, coolingFanPWM=coolingFanPWM, contextFailModNbrUnspecifiedFailure=contextFailModNbrUnspecifiedFailure, ueInfoStatLcId=ueInfoStatLcId, adjCellECGILcId=adjCellECGILcId, topoRRUACPowerOffsetRx=topoRRUACPowerOffsetRx, x2HandOverProcInterEnbRowStatus=x2HandOverProcInterEnbRowStatus, plsfn2Prb94RIPAvg=plsfn2Prb94RIPAvg, spsIntervalDl=spsIntervalDl, plsfn7Prb01RIPAvg=plsfn7Prb01RIPAvg, phyULMeanNLPRB89=phyULMeanNLPRB89, raeFileAntennaArrayNo=raeFileAntennaArrayNo, drbNbrScheTimesSfn1=drbNbrScheTimesSfn1, sndRlcCfgId=sndRlcCfgId, hsdpaCommSchedLcId=hsdpaCommSchedLcId, cellAdjUtraTddCellTable=cellAdjUtraTddCellTable, pdcpDiscardTimerFlag=pdcpDiscardTimerFlag)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", erabNbrHoIncQci2=erabNbrHoIncQci2, e1FEBEErrorAlarmGenThreshold=e1FEBEErrorAlarmGenThreshold, mdtServerInetAddr=mdtServerInetAddr, sctpAssoPMDataTable=sctpAssoPMDataTable, spsSwitchFlag=spsSwitchFlag, erabRelMmeNbrSucHO=erabRelMmeNbrSucHO, cellReselComQhyst=cellReselComQhyst, phyCfgUlIterNum=phyCfgUlIterNum, mlbNotifications=mlbNotifications, ofpPortType=ofpPortType, topoRRUCarrier6ULPowerValue=topoRRUCarrier6ULPowerValue, plsfn7Prb12RIPAvg=plsfn7Prb12RIPAvg, macSwitchTestInfoL2Reserve=macSwitchTestInfoL2Reserve, cdlUploadTrigger=cdlUploadTrigger, fcCommRntiScchDelta=fcCommRntiScchDelta, amrDlVoipPacketNb4=amrDlVoipPacketNb4, swPackPlanUpgradePercent=swPackPlanUpgradePercent, phyCfgRipIotShifter=phyCfgRipIotShifter, plsfn0Prb41RIPAvg=plsfn0Prb41RIPAvg, hlTestSwitchSrsBandwidthCfg=hlTestSwitchSrsBandwidthCfg, hoFailPrepIncInterFreqIntraEnbPucch=hoFailPrepIncInterFreqIntraEnbPucch, dlPATLcId=dlPATLcId, fileUpIndex=fileUpIndex, rlcPreset25=rlcPreset25, macTestSwitchInfoPdcchScrambleProp=macTestSwitchInfoPdcchScrambleProp, macPreSchPrbNumUL=macPreSchPrbNumUL, sctpTimerAssocMaxRetrans=sctpTimerAssocMaxRetrans, debugUploadTable=debugUploadTable, ftpServerConfigurationDirectory=ftpServerConfigurationDirectory, plsfn6Prb60RIPAvg=plsfn6Prb60RIPAvg, ppHcPunishMax=ppHcPunishMax, plsfn0Prb89RIPAvg=plsfn0Prb89RIPAvg, macDownlinkEff21Tm8=macDownlinkEff21Tm8, hsdpaCQIRestrictMaxRTBSFlag=hsdpaCQIRestrictMaxRTBSFlag, macTestSwitchInfoUlHarqSwitch=macTestSwitchInfoUlHarqSwitch, euePeriodReportTable=euePeriodReportTable, cellAdjGeranPlmnMnc=cellAdjGeranPlmnMnc, cellInterFreqReselPriority=cellInterFreqReselPriority, plsfn6Prb36RIPAvg=plsfn6Prb36RIPAvg, hsdpaPFLcId=hsdpaPFLcId, nbrschetimesulMcs23=nbrschetimesulMcs23, hsdpaCongestCtrlCongAlarmTh=hsdpaCongestCtrlCongAlarmTh, macschecceusedratiosfn6=macschecceusedratiosfn6, phyCfgPucchExTendCpFmt1ActiveThred7Ant=phyCfgPucchExTendCpFmt1ActiveThred7Ant, atuDLQuitFlag=atuDLQuitFlag, erabActiveMaxNbrULQci2=erabActiveMaxNbrULQci2, pdcpSduReceivedNbrRowStatus=pdcpSduReceivedNbrRowStatus, a6TrigQuantity=a6TrigQuantity, macCellCompUeNumQci8=macCellCompUeNumQci8, plsfn9Prb76RIPAvg=plsfn9Prb76RIPAvg, lbcAdjCellDlS1TnlTh4=lbcAdjCellDlS1TnlTh4, rhubOptTransVcc=rhubOptTransVcc, plsfn1Prb77RIPAvg=plsfn1Prb77RIPAvg, oabPathReverseStatus=oabPathReverseStatus, hoFailOutIntraFreqX2TarExecuteNoRsp=hoFailOutIntraFreqX2TarExecuteNoRsp, phyULMaxNLPRB51=phyULMaxNLPRB51, plsfn5Prb23RIPAvg=plsfn5Prb23RIPAvg, lcAcUeThForSignal3=lcAcUeThForSignal3, coMPUeNumberTable=coMPUeNumberTable, pmExpression=pmExpression, pdcpSduDropTotalDateLenQci7=pdcpSduDropTotalDateLenQci7, baseBandCarrierEntry=baseBandCarrierEntry, hoSuccOutInterEnbS1IntraFreqQci2=hoSuccOutInterEnbS1IntraFreqQci2, plsfn5Prb98RIPAvg=plsfn5Prb98RIPAvg, hlTestSwitchsourceCellPowerDelta=hlTestSwitchsourceCellPowerDelta, b1LcId=b1LcId, sscEndTime1=sscEndTime1, caRlcBoAllocAlgAlpha=caRlcBoAllocAlgAlpha, hsdpaHarqLcId=hsdpaHarqLcId, mmeCfgTable=mmeCfgTable, erabNbrMaxEstabQci4=erabNbrMaxEstabQci4, traceTaskBandWidthThreshold=traceTaskBandWidthThreshold, rrcEffectiveConnMax=rrcEffectiveConnMax, imaGrpRowStatus=imaGrpRowStatus, macPhrIndex40=macPhrIndex40, phyULMeanNLPRB17=phyULMeanNLPRB17, macSwitchInfoMcsDiffValue=macSwitchInfoMcsDiffValue, ethPortBlockSwitch=ethPortBlockSwitch, traceDepth=traceDepth, ipManagementLink=ipManagementLink, macMimoNewCqi12Tm3=macMimoNewCqi12Tm3, cellUtraFreqDuplexType=cellUtraFreqDuplexType, macBbuSourceEngagedState=macBbuSourceEngagedState, eventGeneralEventSource=eventGeneralEventSource, erabModQoSAttNbrQci3=erabModQoSAttNbrQci3, timeSlotTypeNeighCell19=timeSlotTypeNeighCell19, chacActiveUeTag=chacActiveUeTag, topoRRULocalOscillationFreq=topoRRULocalOscillationFreq, erabRelMmeNbrQci1HoSuccess=erabRelMmeNbrQci1HoSuccess, plsfn0Prb76RIPAvg=plsfn0Prb76RIPAvg, sctpIndex=sctpIndex, baseBandCarrierDwPccpchInfo=baseBandCarrierDwPccpchInfo, irathoFailOutGprs=irathoFailOutGprs, boardStorageDevTotalSize=boardStorageDevTotalSize, qolTable=qolTable, ofpPortResetOfpTrigger=ofpPortResetOfpTrigger, hsLowSpeedUserRelocation=hsLowSpeedUserRelocation, plsfn2Prb21RIPAvg=plsfn2Prb21RIPAvg, nbap=nbap, srbNbrScheTimesSfn5=srbNbrScheTimesSfn5, macSrbNumLimitSf1=macSrbNumLimitSf1, ulPwrP0NominalPucch=ulPwrP0NominalPucch, plReceivePowerIndex20=plReceivePowerIndex20, localCarrierCurrentUpptsPosition=localCarrierCurrentUpptsPosition, icicCenterUeUlPrbSchedPri4=icicCenterUeUlPrbSchedPri4, boardLedStatus=boardLedStatus, anrExUeNum=anrExUeNum, macNbrSuccInitTbDlQpskQci1=macNbrSuccInitTbDlQpskQci1, apPmofeNB=apPmofeNB, rrcCpmMeasCaseRelP5=rrcCpmMeasCaseRelP5, rrcUserSampNbr=rrcUserSampNbr, plsfn4Prb94RIPAvg=plsfn4Prb94RIPAvg, saalAllNbapAlarmState=saalAllNbapAlarmState, macUpAlgorithmUlEdgeUserMcsTh=macUpAlgorithmUlEdgeUserMcsTh, phyULMeanNLPRB11=phyULMeanNLPRB11, mrQCI1PLRDLThreshold=mrQCI1PLRDLThreshold, tranRealCapPacketSwitch=tranRealCapPacketSwitch, erabNormRelEnbNbrQci6=erabNormRelEnbNbrQci6, pdcpStatusReportRequired=pdcpStatusReportRequired, rrcConnTolDlEdgeUser=rrcConnTolDlEdgeUser, cpuUsageStatProcIndexOnBoard=cpuUsageStatProcIndexOnBoard, cellSelectTable=cellSelectTable, mrPacketLossRate=mrPacketLossRate, topoRRUOfp2AccessLinePosition=topoRRUOfp2AccessLinePosition, erabHoFailQci6=erabHoFailQci6, qolPeerIPAddress=qolPeerIPAddress, cellShedSiWindowLen=cellShedSiWindowLen, rrcFailConnEstabPucchAllocFail=rrcFailConnEstabPucchAllocFail, hsdpaHarqRvQpsk4New=hsdpaHarqRvQpsk4New, raeFileType=raeFileType, erabEstabAddFailNbrQci1InterWithOtherProc=erabEstabAddFailNbrQci1InterWithOtherProc, srbUlLoChGroup=srbUlLoChGroup, macOctDlMassiveMimoSM11=macOctDlMassiveMimoSM11, plsfn5Prb14RIPAvg=plsfn5Prb14RIPAvg, debugUploadDestination=debugUploadDestination, plsfn0Prb98RIPAvg=plsfn0Prb98RIPAvg, hlGlobalTestTaMeasT2=hlGlobalTestTaMeasT2, retAntDownloadFileName=retAntDownloadFileName, plsfn5Prb16RIPAvg=plsfn5Prb16RIPAvg, coolingTargetTemperature=coolingTargetTemperature, hsupaAlgorithmLcId=hsupaAlgorithmLcId, interRatPsR8R9FinalNetwork=interRatPsR8R9FinalNetwork, plsfn0Prb58RIPAvg=plsfn0Prb58RIPAvg, plsfn5Prb65RIPAvg=plsfn5Prb65RIPAvg, retAntRCUSwVersion=retAntRCUSwVersion, cellUlIotId=cellUlIotId, macUpMuMiMoMcsBackOff7=macUpMuMiMoMcsBackOff7, macCASCellActiveAtt=macCASCellActiveAtt, hlTestSwitchSrsPeriodicity=hlTestSwitchSrsPeriodicity, plsfn7Prb14RIPAvg=plsfn7Prb14RIPAvg, macNbrRbUlMassiveMimoSM6=macNbrRbUlMassiveMimoSM6, plsfn8Prb34RIPAvg=plsfn8Prb34RIPAvg, ofpPortModuleTemperature=ofpPortModuleTemperature, pdcpNbrDl=pdcpNbrDl, s1HandOverProcInterEnbLcId=s1HandOverProcInterEnbLcId, hoSuccPrepIncInterFreqIntraEnb=hoSuccPrepIncInterFreqIntraEnb, pdcpVideoMatchIqiyi=pdcpVideoMatchIqiyi, plReportUeType=plReportUeType, cellInterFreqLcId=cellInterFreqLcId, plRssiAvgC4=plRssiAvgC4, traceMmeUeTrcSrvCfg=traceMmeUeTrcSrvCfg, macSwitchTestInfoPdcpPktLen=macSwitchTestInfoPdcpPktLen, erabEstabAttNbrQci251=erabEstabAttNbrQci251, boardUpdateState=boardUpdateState, plsfn5Prb95RIPAvg=plsfn5Prb95RIPAvg, equipCurrentTime=equipCurrentTime, rruPrbDlQci2Num=rruPrbDlQci2Num, erabEstabInitFailNbrEnbUeS1apIdError=erabEstabInitFailNbrEnbUeS1apIdError, s1PathSwichRowStatus=s1PathSwichRowStatus, vlanConfig=vlanConfig, macNbrTbDLRank7=macNbrTbDLRank7, ethLocalMacAddress=ethLocalMacAddress, caPerformanceEntry=caPerformanceEntry, plUsrLogLcId=plUsrLogLcId, iubImaGrpRowStatus=iubImaGrpRowStatus, erabEstabProcOfRUETable=erabEstabProcOfRUETable, fcSichSirTargetUpStep=fcSichSirTargetUpStep, tdsSysStartMode=tdsSysStartMode, hoAttOutExecInterEnbX2InterFreqQci2=hoAttOutExecInterEnbX2InterFreqQci2, periodCalibrationRRUNo=periodCalibrationRRUNo, extendDrbUlLoChGroup=extendDrbUlLoChGroup, handOverInterWithERABLcId=handOverInterWithERABLcId, sdCarrToIntDesRACHI=sdCarrToIntDesRACHI, plsfn9Prb36RIPAvg=plsfn9Prb36RIPAvg, rrcConnEstabTimeMean=rrcConnEstabTimeMean, hsdpaSpsSchedCPCAlphaIndex=hsdpaSpsSchedCPCAlphaIndex, phyULMeanNLPRB19=phyULMeanNLPRB19, hsdpaSFCMaxPeriodTime=hsdpaSFCMaxPeriodTime, cellAdjUtraTddCellRowStatus=cellAdjUtraTddCellRowStatus, macSwitchInfoUlCceReserveFlag=macSwitchInfoUlCceReserveFlag, rrcFailConnReconfigPerEncodeFail=rrcFailConnReconfigPerEncodeFail, saalConnNb2RncScrMcr=saalConnNb2RncScrMcr, hcEntry=hcEntry, atuVipMROptSwitch=atuVipMROptSwitch, lmcLcId=lmcLcId, macPhrIndex1=macPhrIndex1, fcNotiAdjCellId=fcNotiAdjCellId, tdsNodeBSysRncDisaCheckPeriod=tdsNodeBSysRncDisaCheckPeriod, atuDlSwitch=atuDlSwitch, erabEstabInitSuccNbrQci3=erabEstabInitSuccNbrQci3, peripheralPackPlanUpgradeResult5=peripheralPackPlanUpgradeResult5, pathPolicingAction=pathPolicingAction, cellAdjUtraFddCellEntry=cellAdjUtraFddCellEntry, topoRRURemoteResetNextRruTimer=topoRRURemoteResetNextRruTimer, macUpMuMiMoAlgorithmLcId=macUpMuMiMoAlgorithmLcId, sjm1SyncDlDetectTimesTh=sjm1SyncDlDetectTimesTh, netEthTransPlanSpeed=netEthTransPlanSpeed, hoFailPrepIncIntraFreqS1MaxUeNum=hoFailPrepIncIntraFreqS1MaxUeNum, erabEstabAddFailNbrQci1Transport=erabEstabAddFailNbrQci1Transport, macMumimoUserDlRank1=macMumimoUserDlRank1, erabEstabAddFailNbrQci2InterWithOtherProc=erabEstabAddFailNbrQci2InterWithOtherProc, tdsNetLcMinCarrierNum=tdsNetLcMinCarrierNum, e1LinkRxIcpCells=e1LinkRxIcpCells, rrcFailConnEstabAccessJudgeFail=rrcFailConnEstabAccessJudgeFail, cellReselComReselPriorityFlag=cellReselComReselPriorityFlag, nbrscheprbdlMcs22=nbrscheprbdlMcs22, alarmCausePrimaryAlarmCauseNo=alarmCausePrimaryAlarmCauseNo, anrNotiAdjCellPlmnMcc=anrNotiAdjCellPlmnMcc, raMaxContentRslutTimer=raMaxContentRslutTimer, extendDrbEntry=extendDrbEntry, chacUlPrbRBTh=chacUlPrbRBTh, amrUlVoipPacketNb1=amrUlVoipPacketNb1, radioCarrierIndexOnIFUPath=radioCarrierIndexOnIFUPath, macRetxLimitFlag=macRetxLimitFlag, macDownlinkMuMiMoMcsBackoff2=macDownlinkMuMiMoMcsBackoff2, phyULMaxNLPRB74=phyULMaxNLPRB74, drbThpTimeDlQci1=drbThpTimeDlQci1, rrcProcofRUERowStatus=rrcProcofRUERowStatus, handOverInterRATLcId=handOverInterRATLcId, airCondOperationState=airCondOperationState, a4RptThresholdRsrq=a4RptThresholdRsrq, bfdMinTxInterval=bfdMinTxInterval, nbapRandomPhaseSupport=nbapRandomPhaseSupport, macUpAlgorithmMcsDiff=macUpAlgorithmMcsDiff, macUpMuMiMoMcsBackOff10=macUpMuMiMoMcsBackOff10, fcVruMinTxaDl=fcVruMinTxaDl, rrcFailConnReconfigLoChID=rrcFailConnReconfigLoChID, plsfn8Prb79RIPAvg=plsfn8Prb79RIPAvg, sfn7maxripLcId=sfn7maxripLcId, nbrscheprbulMcs28=nbrscheprbulMcs28, macNbrRbDlMassiveMimoSM8=macNbrRbDlMassiveMimoSM8, boardTempUpperCriticalThreshold=boardTempUpperCriticalThreshold, cellSschPower=cellSschPower, hsdpaCqiPwrCtrlUpStepLow=hsdpaCqiPwrCtrlUpStepLow, eventA1Entry=eventA1Entry, pdcpUlAirSduSendTotalNumberQci6=pdcpUlAirSduSendTotalNumberQci6, plsfn6Prb72RIPAvg=plsfn6Prb72RIPAvg, cdlFileDirectory=cdlFileDirectory, plsfn0Prb26RIPAvg=plsfn0Prb26RIPAvg, timerWaitCountCheckRsp=timerWaitCountCheckRsp, pdcpPreset13=pdcpPreset13, invRhubDateOfLastService=invRhubDateOfLastService, mrTmValidNum=mrTmValidNum, hoOutFailMLBTooEarlyType1=hoOutFailMLBTooEarlyType1)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", cpuUsageStatProcShelfNo=cpuUsageStatProcShelfNo, topoSetRRUPortCarrierEnd=topoSetRRUPortCarrierEnd, atuAdjCellUlPrbPerUserLimit=atuAdjCellUlPrbPerUserLimit, invIocPowerSupplyType=invIocPowerSupplyType, atuAdjCellUlPrbLimit=atuAdjCellUlPrbLimit, netRHUBType=netRHUBType, reservedCellL2Para7=reservedCellL2Para7, macUpAlgorithmUlPfScaleRate=macUpAlgorithmUlPfScaleRate, macTestSwitchUpScheOptMcsSwitch=macTestSwitchUpScheOptMcsSwitch, transport=transport, mrMronoueFileReq=mrMronoueFileReq, cellGeranFreqExplicitArfcns30=cellGeranFreqExplicitArfcns30, videoPerfOfPdcpTable=videoPerfOfPdcpTable, rruCompPrbTotDl=rruCompPrbTotDl, hoSuccPrepOutIntraFreqIntraEnb=hoSuccPrepOutIntraFreqIntraEnb, drbUEActiveUlQci2=drbUEActiveUlQci2, topoRHUBOfp3AccessLinePosition=topoRHUBOfp3AccessLinePosition, mrImsiRptSwitch=mrImsiRptSwitch, netLocalCellGrpId=netLocalCellGrpId, phyULMeanNLPRB91=phyULMeanNLPRB91, lcInsureHoInSwitch=lcInsureHoInSwitch, irathoFailPrepIncUtranResourceAllocFailure=irathoFailPrepIncUtranResourceAllocFailure, spsOptmzUpAlgPrsstDsThr=spsOptmzUpAlgPrsstDsThr, baseBandwidthRowStatus=baseBandwidthRowStatus, alarmNotiReportType=alarmNotiReportType, smallPacketPacketSizeThreshold=smallPacketPacketSizeThreshold, reservedCellL2Para4=reservedCellL2Para4, cellInterFreqThreshXLow=cellInterFreqThreshXLow, macNbrErrTbUlMassiveMimoSM6=macNbrErrTbUlMassiveMimoSM6, plsfn0Prb49RIPAvg=plsfn0Prb49RIPAvg, softLicenseDlBucketT=softLicenseDlBucketT, lbc40FcHoUeChoseStrategyPriority=lbc40FcHoUeChoseStrategyPriority, cellInterFreqThreshXHigh=cellInterFreqThreshXHigh, plsfn1Prb38RIPAvg=plsfn1Prb38RIPAvg, carrierTs2ISCPInfo=carrierTs2ISCPInfo, mbmsSubFrmAllc=mbmsSubFrmAllc, remoteClkOpticalModuleRxPower=remoteClkOpticalModuleRxPower, ssc=ssc, macNbrErrTbUlMassiveMimoSM1=macNbrErrTbUlMassiveMimoSM1, caLcId=caLcId, rruCalcPathAIqRxNom=rruCalcPathAIqRxNom, hsupaMAXCITable=hsupaMAXCITable, sndRlcMaxRetxThreshold=sndRlcMaxRetxThreshold, plsfn6Prb98RIPAvg=plsfn6Prb98RIPAvg, topoRRUMainSendAntCalPortNo=topoRRUMainSendAntCalPortNo, pdcpPreset7=pdcpPreset7, cellCompanyVideoReserver8VideoNum=cellCompanyVideoReserver8VideoNum, ueaccPreambleSuccNum=ueaccPreambleSuccNum, hsupaMaxCILcId=hsupaMaxCILcId, plsfn1Prb76RIPAvg=plsfn1Prb76RIPAvg, atuUeIMSI8=atuUeIMSI8, heatExLocation=heatExLocation, pdcpDlAirSduDropTotalNumberQci5=pdcpDlAirSduDropTotalNumberQci5, plReceivePowerIndex7=plReceivePowerIndex7, softLicenseDlSfBalanceT=softLicenseDlSfBalanceT, macTestSwitchInfoDownQueEstimateMaxPrb=macTestSwitchInfoDownQueEstimateMaxPrb, hoSuccOutInterEnbS1InterFreqQci2=hoSuccOutInterEnbS1InterFreqQci2, netRRURootAlarmState5=netRRURootAlarmState5, macOctDlMassiveMimoSM3=macOctDlMassiveMimoSM3, alarmNotiNEID=alarmNotiNEID, plsfn7PrbG8RIPMax=plsfn7PrbG8RIPMax, reservedCellLcId=reservedCellLcId, rrcConnTolDlCentreUser=rrcConnTolDlCentreUser, hoHoPreAttRadio=hoHoPreAttRadio, plUsrLogUlInstanInfoPeriod=plUsrLogUlInstanInfoPeriod, iubImaGrpEntry=iubImaGrpEntry, alarmNotiTime=alarmNotiTime, rrcPreset26=rrcPreset26, hsupaCongestCtrlRestoreCounterTh=hsupaCongestCtrlRestoreCounterTh, swPackCustomerPlanVendor=swPackCustomerPlanVendor, carrierRuTs0Info=carrierRuTs0Info, peripheralPackZipType=peripheralPackZipType, fileTransEntry=fileTransEntry, plsfn3Prb44RIPAvg=plsfn3Prb44RIPAvg, macDlScheTimesQCI1=macDlScheTimesQCI1, hoFailPrepIncIntraFreqIntraEnbOthers=hoFailPrepIncIntraFreqIntraEnbOthers, macUpMuMiMoMcsBackOff14=macUpMuMiMoMcsBackOff14, sctpLocalIpAddrIndex4=sctpLocalIpAddrIndex4, pdcpProfile0x0102Flag=pdcpProfile0x0102Flag, eueTimerConstantsEntry=eueTimerConstantsEntry, nodeBSynTrigger=nodeBSynTrigger, macUpAlgorithmUeNumThreForPrbLimit=macUpAlgorithmUeNumThreForPrbLimit, macUpAlgorithmPRBSwitch=macUpAlgorithmPRBSwitch, cellAcBarForSingalFlag=cellAcBarForSingalFlag, alarmNotify=alarmNotify, plsfn2Prb63RIPAvg=plsfn2Prb63RIPAvg, hsdpaSpi7Weight=hsdpaSpi7Weight, drbUEActiveUlQci4=drbUEActiveUlQci4, plReceivePowerIndex9=plReceivePowerIndex9, cac=cac, interRatLbParaLcId=interRatLbParaLcId, plsfn7Prb82RIPAvg=plsfn7Prb82RIPAvg, pdcpVideoPkgPeriodNum=pdcpVideoPkgPeriodNum, phyULMaxNLPRB33=phyULMaxNLPRB33, plRiaCharactSeqSendSwitch=plRiaCharactSeqSendSwitch, phyNbrCqi1=phyNbrCqi1, erabActiveMeanNbrULQci3=erabActiveMeanNbrULQci3, hlTestSwitchcellUpIoTupOffsetSwitch=hlTestSwitchcellUpIoTupOffsetSwitch, phyULMaxNLPRB98=phyULMaxNLPRB98, plReceivePowerIndex12=plReceivePowerIndex12, plsfn1Prb08RIPAvg=plsfn1Prb08RIPAvg, eNBPaReconfigSwitch=eNBPaReconfigSwitch, timeSlotTypeNeighCell18=timeSlotTypeNeighCell18, ipPhysicalPort=ipPhysicalPort, macDownlinkDlPfScaleMcs=macDownlinkDlPfScaleMcs, invShelfType=invShelfType, tdsLcCellId=tdsLcCellId, erabActiveMeanNbrUL=erabActiveMeanNbrUL, hlGlobalTestSwitchCapsControlFlag=hlGlobalTestSwitchCapsControlFlag, periodCalibrationRxCalGainTds=periodCalibrationRxCalGainTds, macPrbUtilizationUlAvaild=macPrbUtilizationUlAvaild, plsfn2Prb24RIPAvg=plsfn2Prb24RIPAvg, raeBroadcastBeamWidthNum=raeBroadcastBeamWidthNum, erabActiveMeanNbrULQci9=erabActiveMeanNbrULQci9, macMumimoPairRbUlRank1=macMumimoPairRbUlRank1, plsfn9Prb19RIPAvg=plsfn9Prb19RIPAvg, fcUlscLinearPredictionDelay=fcUlscLinearPredictionDelay, topoRHUBClockState=topoRHUBClockState, sndRlcPollPdu=sndRlcPollPdu, cellAcProbFactorForVoice=cellAcProbFactorForVoice, plUsrLogPucchCatchDataResourceIndex=plUsrLogPucchCatchDataResourceIndex, euePeriodRptRowStatus=euePeriodRptRowStatus, atuUeIMSISwitch=atuUeIMSISwitch, srvccTable=srvccTable, saalConnNb2RncMbs=saalConnNb2RncMbs, macOctUlMassiveMimoSM5=macOctUlMassiveMimoSM5, phyCfgPucchNormalCpFmt1ActiveThred7Ant=phyCfgPucchNormalCpFmt1ActiveThred7Ant, swPackCustomerPlanScheduleDownloadTime=swPackCustomerPlanScheduleDownloadTime, macDownlinkCqiFixVaddSumMax=macDownlinkCqiFixVaddSumMax, traceTaskTceInetAddrType=traceTaskTceInetAddrType, s1InterfaceIPStatEthShelfNo=s1InterfaceIPStatEthShelfNo, hoFailOutInterFreqX2TarExecuteNoRsp=hoFailOutInterFreqX2TarExecuteNoRsp, raeAlarmSubscribeTrigger=raeAlarmSubscribeTrigger, anrNotiMmeUeS1apId=anrNotiMmeUeS1apId, invIocEntry=invIocEntry, cellAntWeightAmplitude4=cellAntWeightAmplitude4, rlcPreset2=rlcPreset2, fcObjects=fcObjects, emThunderboltRowStatus=emThunderboltRowStatus, a1RowStatus=a1RowStatus, cellAntennaWeightEntry=cellAntennaWeightEntry, traceMmeUeTrcSwitch=traceMmeUeTrcSwitch, rrcProcofRUEEntry=rrcProcofRUEEntry, hsupaTfrcPuchFMFactor=hsupaTfrcPuchFMFactor, hsupaPFA=hsupaPFA, raeWeightingFactorsPhase7=raeWeightingFactorsPhase7, macNbrSuccInitTbDl64QamQci1=macNbrSuccInitTbDl64QamQci1, opFuncDrxDelayFlag=opFuncDrxDelayFlag, phyULMaxNLPRB86=phyULMaxNLPRB86, rruUlDcheTimes=rruUlDcheTimes, cellIotNotiValue=cellIotNotiValue, phyCfgMultiBeamFlag=phyCfgMultiBeamFlag, ulPwrPucchSinrTarget=ulPwrPucchSinrTarget, rrcCAConfigMaxNbrPCellUl2CC=rrcCAConfigMaxNbrPCellUl2CC, macNbrRbDlTm3SFBC=macNbrRbDlTm3SFBC, equivalentprbusageulmean=equivalentprbusageulmean, airCondRunningState=airCondRunningState, atuUlFlag=atuUlFlag, cellGeranFreqExplicitArfcns10=cellGeranFreqExplicitArfcns10, plsfn2Prb57RIPAvg=plsfn2Prb57RIPAvg, irathoAttIncGprs=irathoAttIncGprs, topoRRUBandCap15MCarrierNum=topoRRUBandCap15MCarrierNum, hoSuccOutIntraEnbInterFreqQci2=hoSuccOutIntraEnbInterFreqQci2, hoFailPrepIncInterFreqX2ParameterError=hoFailPrepIncInterFreqX2ParameterError, cellInterFreqMeasBandWidth=cellInterFreqMeasBandWidth, macUpAlgorithmMCSThrshldfrEnblTTIbndlng=macUpAlgorithmMCSThrshldfrEnblTTIbndlng, nbrschetimesulMcs27=nbrschetimesulMcs27, maintenceStateOccurTime=maintenceStateOccurTime, timerUeCapaRsp=timerUeCapaRsp, hlTestSwitchAdjCellRecoverRsrpOffset=hlTestSwitchAdjCellRecoverRsrpOffset, douAdjcHandOverProcedureCellAdjCellIndex=douAdjcHandOverProcedureCellAdjCellIndex, activeAlarmProblemSourceObject=activeAlarmProblemSourceObject, plsfn4Prb17RIPAvg=plsfn4Prb17RIPAvg, cellCdlDetailSwitch=cellCdlDetailSwitch, iocTable=iocTable, iubImaGrpIndex=iubImaGrpIndex, hlTestSwitchVIPScheAlgorithmSwitch=hlTestSwitchVIPScheAlgorithmSwitch, macSRBTbDlTm4=macSRBTbDlTm4, alarmAssociatedRequestId=alarmAssociatedRequestId, antWeightPhase6=antWeightPhase6, anrMode3G=anrMode3G, plsfn4Prb55RIPAvg=plsfn4Prb55RIPAvg, mroA3HysBaseHighTh=mroA3HysBaseHighTh, pdcpSduSendTotalDataNumQci1=pdcpSduSendTotalDataNumQci1, cqiPucch2Index7=cqiPucch2Index7, iubIPPathGuarTxBandwidth=iubIPPathGuarTxBandwidth, remoteClkModuleLoopBackTrigger=remoteClkModuleLoopBackTrigger, topoRHUBMacAddr=topoRHUBMacAddr, cellAntWeightPhase10=cellAntWeightPhase10, plsfn8Prb27RIPAvg=plsfn8Prb27RIPAvg, cellInterFreqCfgPriForConnect=cellInterFreqCfgPriForConnect, drbPdcpSduBitLenUlQci5=drbPdcpSduBitLenUlQci5, spsOptmzAmrcAjustPeriod=spsOptmzAmrcAjustPeriod, plsfn7Prb87RIPAvg=plsfn7Prb87RIPAvg, boardStorageDevEntry=boardStorageDevEntry, pdcpPreset8=pdcpPreset8, phyCfgCrsStepdownStep=phyCfgCrsStepdownStep, hoAttIncInterFreqInterCellIntraEnb=hoAttIncInterFreqInterCellIntraEnb, pdcpVideoReserver7VideoActive=pdcpVideoReserver7VideoActive, opFuncDrxDelayFlagForConnect=opFuncDrxDelayFlagForConnect, drbUlLoPriority=drbUlLoPriority, boardUpTime=boardUpTime, hoAttOutIntraEnbIntraFreqQci2=hoAttOutIntraEnbIntraFreqQci2, iubTrafficCategoryTypeEntry=iubTrafficCategoryTypeEntry, macTestSwitchInfoDediCceSwitch=macTestSwitchInfoDediCceSwitch, macTestSwitchUpScheOptMcsThred=macTestSwitchUpScheOptMcsThred, rrcConnReleaseRedirectionTo3GLoadBalance=rrcConnReleaseRedirectionTo3GLoadBalance, cellAntTilt=cellAntTilt, schedule=schedule, plsfn0Prb43RIPAvg=plsfn0Prb43RIPAvg, equipStartupNotiNEID=equipStartupNotiNEID, swFileVersion=swFileVersion, cellReselIntraFreqQualMin=cellReselIntraFreqQualMin, plPreambeRevNumRowStatus=plPreambeRevNumRowStatus, cacPositionTA1MeasNum=cacPositionTA1MeasNum, hsdpaHarqRv64Qam7=hsdpaHarqRv64Qam7, hlTestSwitchQciCarrierFreq=hlTestSwitchQciCarrierFreq, drbSendRlcCfgId=drbSendRlcCfgId, macNbrTbDlMassiveMimoSM3=macNbrTbDlMassiveMimoSM3, swPackCustRunningRowStatus=swPackCustRunningRowStatus, macNbrTbDlTm9=macNbrTbDlTm9, hcFailMaxNumForLteCell=hcFailMaxNumForLteCell, mdtConfigManagement=mdtConfigManagement, macNbrRbUlMassiveMimoSM1=macNbrRbUlMassiveMimoSM1, a5CfgId=a5CfgId, ccTable=ccTable, erabRelSuccNbrQci1=erabRelSuccNbrQci1, linkCommonOperationTDSStatus=linkCommonOperationTDSStatus, topoRRUBandCap3MCarrierNum=topoRRUBandCap3MCarrierNum, macNbrTbUlQci1=macNbrTbUlQci1, pdcpUpPktDelayDlQci9Enb=pdcpUpPktDelayDlQci9Enb, macSwitchInfoUlMuMIMOSwitch=macSwitchInfoUlMuMIMOSwitch, cellAdjCellSpeedType=cellAdjCellSpeedType, rrcConnReconfigProcEntry=rrcConnReconfigProcEntry, macPrbUtilizationCCTable=macPrbUtilizationCCTable, topoRRUCarrier2ULPowerValue=topoRRUCarrier2ULPowerValue, equipMIBLastUpdate=equipMIBLastUpdate, macDownlinkAlgType=macDownlinkAlgType, plsfn6Prb25RIPAvg=plsfn6Prb25RIPAvg, pdcpVideoReserver8VideoActive=pdcpVideoReserver8VideoActive, ipAddrPhyPortId=ipAddrPhyPortId, plsfn0Prb59RIPAvg=plsfn0Prb59RIPAvg, pdcpThrpTimeDLQci2=pdcpThrpTimeDLQci2, mrQCI9PLRDLThreshold=mrQCI9PLRDLThreshold, irathoAttIncTdscdma=irathoAttIncTdscdma, plsfn4Prb86RIPAvg=plsfn4Prb86RIPAvg, topoRRUBearedCarrierNum=topoRRUBearedCarrierNum, saalConnRxErPdus=saalConnRxErPdus, rruBaseInfo=rruBaseInfo, swPackCustRunningZipType=swPackCustRunningZipType, anrAlgorithmInfo=anrAlgorithmInfo, nbrscheprbulMcs0=nbrscheprbulMcs0, plsfn7PrbG9RIPMax=plsfn7PrbG9RIPMax, cellAntWeightAmplitude5=cellAntWeightAmplitude5)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", sndRlcCfgTable=sndRlcCfgTable, baseBandCarrierlcGrpId=baseBandCarrierlcGrpId, raeWeightFactorVer=raeWeightFactorVer, cellGeranFreqVariableBitMapOfArfcns16=cellGeranFreqVariableBitMapOfArfcns16, atuAdjCellDlPrbPerUserLimit=atuAdjCellDlPrbPerUserLimit, drbBurstDataThpULSum=drbBurstDataThpULSum, icicRntpTimer=icicRntpTimer, cceCclrTable=cceCclrTable, addERABEstabProcTable=addERABEstabProcTable, hoOutAttLoadBalance=hoOutAttLoadBalance, cellUtraFreqTable=cellUtraFreqTable, macVideoUsedPrbPerSfnUlAvg=macVideoUsedPrbPerSfnUlAvg, plsfn9Prb03RIPAvg=plsfn9Prb03RIPAvg, timerS1TimeToWait=timerS1TimeToWait, plsfn8PrbG9RIPMax=plsfn8PrbG9RIPMax, localCarrierFpFromDdRachs=localCarrierFpFromDdRachs, macUpAlgorithmMcsThrforSimuPuxch=macUpAlgorithmMcsThrforSimuPuxch, apHoInteractWithEraDelIntraNB=apHoInteractWithEraDelIntraNB, pdcpUpPktLossRateDlQci1Enb=pdcpUpPktLossRateDlQci1Enb, twampLinkType=twampLinkType, netLocalCellGrpRowStatus=netLocalCellGrpRowStatus, cacNominalActiveUeNumPerCell=cacNominalActiveUeNumPerCell, peripheralPackPlanRstOpEndingIndTrg=peripheralPackPlanRstOpEndingIndTrg, ipoaChNb2RncPcr=ipoaChNb2RncPcr, macschecceallsfn7=macschecceallsfn7, mdtTaskPlmnMnc=mdtTaskPlmnMnc, pdcpPreset3=pdcpPreset3, netLcComponentIndex=netLcComponentIndex, rlcPreset22=rlcPreset22, cellReselComSNonIntraSearchFlag=cellReselComSNonIntraSearchFlag, plADIFeatureSwitch=plADIFeatureSwitch, configfilePlanRowStatus=configfilePlanRowStatus, timeSlotTypeNeighCell26=timeSlotTypeNeighCell26, cellBoardLogSlotNo=cellBoardLogSlotNo, hlGlobalTestPmInvalidValueSwitch=hlGlobalTestPmInvalidValueSwitch, emTemperatureIndex=emTemperatureIndex, fileTransNextAvailableIDForOMC=fileTransNextAvailableIDForOMC, icicCellType=icicCellType, pdcpUpPktDiscardRateDlEnb=pdcpUpPktDiscardRateDlEnb, atuByIpAddr1=atuByIpAddr1, erabEstabAddSuccNbrQci2=erabEstabAddSuccNbrQci2, erabEstabInitAttNbrQci9=erabEstabInitAttNbrQci9, b1MeasQuantityUtraFdd=b1MeasQuantityUtraFdd, phyULMeanNLPRB99=phyULMeanNLPRB99, pucch2AntePortActivatedPUCCHFormat1a1bR10Flag=pucch2AntePortActivatedPUCCHFormat1a1bR10Flag, b2MeasQuantityGeran=b2MeasQuantityGeran, plsfn8Prb28RIPAvg=plsfn8Prb28RIPAvg, rrcConnReleaseRedirectionToCdma2000HrpdNoMea=rrcConnReleaseRedirectionToCdma2000HrpdNoMea, cellGeranFreqVariableBitMapOfArfcns10=cellGeranFreqVariableBitMapOfArfcns10, erabNbrExistQCI8=erabNbrExistQCI8, nbrschetimesdlMcs21=nbrschetimesdlMcs21, macOctUlMassiveMimoSM6=macOctUlMassiveMimoSM6, drbTCPSduResentRadioDl=drbTCPSduResentRadioDl, rrcConnEstabTimeMaxMoData=rrcConnEstabTimeMaxMoData, hoSuccOutInterFreqLoadBalance=hoSuccOutInterFreqLoadBalance, timeSlotTypeRowStatus=timeSlotTypeRowStatus, rbAttEstabQci2=rbAttEstabQci2, hsupaQosTcSlideWinSize=hsupaQosTcSlideWinSize, hsdpaSpsSchedResrcBlkCfgIndex=hsdpaSpsSchedResrcBlkCfgIndex, plsfn8Prb40RIPAvg=plsfn8Prb40RIPAvg, erabNbrReqRelEnbByHOQCI8=erabNbrReqRelEnbByHOQCI8, sipCapPacketSwitch=sipCapPacketSwitch, cellCdmaBandClassInfoRowStatus=cellCdmaBandClassInfoRowStatus, eNBCarrierSwitch=eNBCarrierSwitch, pagingNB=pagingNB, ipAddrCfgStatus=ipAddrCfgStatus, topoRRUFaultStatus=topoRRUFaultStatus, fcSnrAdjustFactor=fcSnrAdjustFactor, plsfn0Prb03RIPAvg=plsfn0Prb03RIPAvg, rrcCpmCaseRelP10=rrcCpmCaseRelP10, atuULQuitFlag=atuULQuitFlag, macPreset21=macPreset21, phyNbrCqi14=phyNbrCqi14, amrUlVoipPacketWb0=amrUlVoipPacketWb0, heatExModel=heatExModel, rruTypePortManufacturerIndex=rruTypePortManufacturerIndex, plsfn3Prb49RIPAvg=plsfn3Prb49RIPAvg, macsche3cce=macsche3cce, sfn5avgripTable=sfn5avgripTable, macTestSwitchInfoHoPdschPromotion=macTestSwitchInfoHoPdschPromotion, hsdpaQosLcId=hsdpaQosLcId, fcTable=fcTable, netLcFrameType=netLcFrameType, invRhubVendorName=invRhubVendorName, rruPathTdsTxStatus=rruPathTdsTxStatus, equipDisguiseEquipMaintenceState=equipDisguiseEquipMaintenceState, scheTimesAcoordingMCSEntry=scheTimesAcoordingMCSEntry, almActUploadAlarmNo=almActUploadAlarmNo, hsdpaHarqRvQpsk1New=hsdpaHarqRvQpsk1New, ipoaChNb2RncCdvt=ipoaChNb2RncCdvt, enbSgwLinkPerformanceSwitch=enbSgwLinkPerformanceSwitch, topoRRUCarrier9ULPowerValue=topoRRUCarrier9ULPowerValue, tdsSysBbuAssignMode=tdsSysBbuAssignMode, hsdpaEFACHSchedMaxTxNum=hsdpaEFACHSchedMaxTxNum, phyCfgPVSPeriod=phyCfgPVSPeriod, phyULMeanNLPRB18=phyULMeanNLPRB18, cellAdjDelLcId=cellAdjDelLcId, macCaActiveBurstDataThPDl2CC=macCaActiveBurstDataThPDl2CC, swPackPlanVersion=swPackPlanVersion, hsupaCongestCtrlRestoreTimerTh=hsupaCongestCtrlRestoreTimerTh, macUpAlgorithmSrsPowerSinrThLower=macUpAlgorithmSrsPowerSinrThLower, plsfn7Prb26RIPAvg=plsfn7Prb26RIPAvg, outDoorCabinetNo=outDoorCabinetNo, topoRRUAccessSlaveFiberLength=topoRRUAccessSlaveFiberLength, rruPathEntry=rruPathEntry, nbapCarrierPriority=nbapCarrierPriority, plsfn7Prb60RIPAvg=plsfn7Prb60RIPAvg, pdcpVideoPreset1=pdcpVideoPreset1, plsfn6Prb56RIPAvg=plsfn6Prb56RIPAvg, sscOptRptInterval=sscOptRptInterval, lmcPrbUlCongestRestoreTh=lmcPrbUlCongestRestoreTh, peripheralPackPlanScheduleDownloadTime=peripheralPackPlanScheduleDownloadTime, s1QualityStatistic=s1QualityStatistic, boardStorageDevFreePercent=boardStorageDevFreePercent, ethDuplexMode=ethDuplexMode, nbapCarrierPreemptTimer=nbapCarrierPreemptTimer, macSrbNumLimitSf3=macSrbNumLimitSf3, mroNotification=mroNotification, erabRelEnbNbrHoFail=erabRelEnbNbrHoFail, macTestSwitchInfolimitDlPrb=macTestSwitchInfolimitDlPrb, plsfn6Prb55RIPAvg=plsfn6Prb55RIPAvg, tdsNetLocalCellMaxCombinationAntNum=tdsNetLocalCellMaxCombinationAntNum, macUpMuMiMoPairSNRThr=macUpMuMiMoPairSNRThr, cellAvailabilityLcId=cellAvailabilityLcId, retAntMaximumSupportedElectricalTilt=retAntMaximumSupportedElectricalTilt, cellBoardLogRowStatus=cellBoardLogRowStatus, gpsDevice=gpsDevice, erabNbrReqRelEnbQci9=erabNbrReqRelEnbQci9, topoRRUTemperatureLowerLimit=topoRRUTemperatureLowerLimit, invRhubInventoryUnitType=invRhubInventoryUnitType, rbFailEstabIntraEnbError=rbFailEstabIntraEnbError, nbrscheprbulMcs18=nbrscheprbulMcs18, drxQciLongCycle=drxQciLongCycle, plsfn1Prb93RIPAvg=plsfn1Prb93RIPAvg, hlTestSwitchcellAdjCellRsrpDifferTh=hlTestSwitchcellAdjCellRsrpDifferTh, saalTmrIdleVal=saalTmrIdleVal, pdcpSduSendTotalDateLenQci6=pdcpSduSendTotalDateLenQci6, plsfn2Prb74RIPAvg=plsfn2Prb74RIPAvg, radioBandEngagedLcIndex=radioBandEngagedLcIndex, fcScchDlpcStep=fcScchDlpcStep, syslogServerDescr=syslogServerDescr, pdcpSduSendTotalDateLenQci3=pdcpSduSendTotalDateLenQci3, hsupaTfrcNonSdInitSnplIndex=hsupaTfrcNonSdInitSnplIndex, anrInterFreqSwitch=anrInterFreqSwitch, topoRRUCarrier11ULPowerValue=topoRRUCarrier11ULPowerValue, tdsLcAntennaCalibrationPeriod=tdsLcAntennaCalibrationPeriod, pdcpSduDropTotalDateLenQci6=pdcpSduDropTotalDateLenQci6, macTestSwitchInfoCommUePdcchCceNum=macTestSwitchInfoCommUePdcchCceNum, plsfn4Prb87RIPAvg=plsfn4Prb87RIPAvg, plRipLogConfig=plRipLogConfig, cmdAuthorizationGroupView=cmdAuthorizationGroupView, hoFailPrepIncIntraFreqX2Srs=hoFailPrepIncIntraFreqX2Srs, saalConnPortId=saalConnPortId, plRiaCellRptRowStatus=plRiaCellRptRowStatus, netRHUBOfp2AccessOfpPortNo=netRHUBOfp2AccessOfpPortNo, plReceivePowerIndex23=plReceivePowerIndex23, plsfn7Prb02RIPAvg=plsfn7Prb02RIPAvg, hoHoPreSuccQci1=hoHoPreSuccQci1, ethernetOAMLoopbackEnable=ethernetOAMLoopbackEnable, hsdpaHarqRv16Qam1=hsdpaHarqRv16Qam1, pdcpVideoReserver3VideoActive=pdcpVideoReserver3VideoActive, rruTransPowerTopoRRUNo=rruTransPowerTopoRRUNo, eventGeneralEventNEType=eventGeneralEventNEType, plsfn8PrbG7RIPMax=plsfn8PrbG7RIPMax, ofpPortRxPowerThreshold=ofpPortRxPowerThreshold, puschLcId=puschLcId, plsfn3Prb19RIPAvg=plsfn3Prb19RIPAvg, sessionTimeRowStatus=sessionTimeRowStatus, topoPortBandCapRRUNo=topoPortBandCapRRUNo, plsfn2Prb90RIPAvg=plsfn2Prb90RIPAvg, rruPrbUlQci1Num=rruPrbUlQci1Num, pdcpPreset38=pdcpPreset38, srvccFailPrepOutGeranCovNoResponse=srvccFailPrepOutGeranCovNoResponse, hoAttIncIntraFreqS1=hoAttIncIntraFreqS1, ethernetOAMEntry=ethernetOAMEntry, cellInterFreqThreshXHighQ=cellInterFreqThreshXHighQ, tdsLocalcell=tdsLocalcell, cellCompanyVideoNumTable=cellCompanyVideoNumTable, gfiRowStatus=gfiRowStatus, spsOptmzMaxCopyUserNum=spsOptmzMaxCopyUserNum, dlCAPwrTargetSinr4Cce1=dlCAPwrTargetSinr4Cce1, fcAgchDpchOffsetAbundanceTxa=fcAgchDpchOffsetAbundanceTxa, macPhrIndex52=macPhrIndex52, fileTransferControl=fileTransferControl, raePortInfoPortNums=raePortInfoPortNums, scheTimesAcoordingMCSTable=scheTimesAcoordingMCSTable, erabNbrExistQCI3=erabNbrExistQCI3, daughterBoardManufacturerData=daughterBoardManufacturerData, irathoSuccOutUtran=irathoSuccOutUtran, circuitPackManufacturerData=circuitPackManufacturerData, hlTestBadCoverageRejectQci1Setup=hlTestBadCoverageRejectQci1Setup, reservedENBL2Para1=reservedENBL2Para1, tdsNodeBSysRncDisaSwitch=tdsNodeBSysRncDisaSwitch, plsfn3Prb40RIPAvg=plsfn3Prb40RIPAvg, plsfn0Prb96RIPAvg=plsfn0Prb96RIPAvg, softwarePackRunningTable=softwarePackRunningTable, macTestSwitchInfolimitUlPrb=macTestSwitchInfolimitUlPrb, handOverIntraCellTable=handOverIntraCellTable, remoteClkOpticalModuleVoltage=remoteClkOpticalModuleVoltage, circuitPackManufacturerFlag=circuitPackManufacturerFlag, hsupaSpsSchedAllocPuchDetectCntTh=hsupaSpsSchedAllocPuchDetectCntTh, circuitPackSerialNumber=circuitPackSerialNumber, erabModQoSAttNbrQci2=erabModQoSAttNbrQci2, rrcConnEstabProcTable=rrcConnEstabProcTable, s1FailSetupNbrControlProcessingOverload=s1FailSetupNbrControlProcessingOverload, mrMroSamplingPeriod=mrMroSamplingPeriod, trafficCategoryMacPri=trafficCategoryMacPri, cellCompanyVideoReserver4VideoNum=cellCompanyVideoReserver4VideoNum, baseBandCarrierAntCalTrigger=baseBandCarrierAntCalTrigger, phyCfgPucchFilterFactor=phyCfgPucchFilterFactor, cellAntWeightAmplitude9=cellAntWeightAmplitude9, interRatLbPara=interRatLbPara, plUsrLogPucchCatchDataCqiValue=plUsrLogPucchCatchDataCqiValue, rrcActiveMaxNbrPCellDl3CC=rrcActiveMaxNbrPCellDl3CC, cellCompanyVideoReserver15VideoNum=cellCompanyVideoReserver15VideoNum, sntp=sntp, macDownlinkSrcFreqEffGap=macDownlinkSrcFreqEffGap, ofpPortRowStatus=ofpPortRowStatus, drbPdcpSduBitLenUlQci6=drbPdcpSduBitLenUlQci6, initCalibrationAnt7RxStatus=initCalibrationAnt7RxStatus, netLcComponentRRUId=netLcComponentRRUId, plsfn3Prb71RIPAvg=plsfn3Prb71RIPAvg, plsfn8Prb17RIPAvg=plsfn8Prb17RIPAvg, raeEntry=raeEntry, cellSysInfo=cellSysInfo, plsfn2Prb98RIPAvg=plsfn2Prb98RIPAvg, macDownlinkMuMiMoEffAdjustDlMuMimo=macDownlinkMuMiMoEffAdjustDlMuMimo, timerX2TimeToWait=timerX2TimeToWait, rruTypePortIndex=rruTypePortIndex, fcNotification=fcNotification, boardStorageDevShelfNo=boardStorageDevShelfNo, raePortInfoEntry=raePortInfoEntry, macTestSwitchInfoUpTfrcRandomSwitch=macTestSwitchInfoUpTfrcRandomSwitch, srsCycshift4=srsCycshift4, sscTaskTable=sscTaskTable, rruFreqSelPrbPdschUsedNum=rruFreqSelPrbPdschUsedNum, b1RowStatus=b1RowStatus, topologyAntennaArrayEntry=topologyAntennaArrayEntry, omLinkEntry=omLinkEntry, rlcPresetPerformanceEntry=rlcPresetPerformanceEntry, srvccFailPrepOutUtranTgtFailure=srvccFailPrepOutUtranTgtFailure, reservedCellL3Para10=reservedCellL3Para10, opFuncLcId=opFuncLcId, dlCAPwrCchDownCCeUpPower2to1=dlCAPwrCchDownCCeUpPower2to1, plsfn8Prb02RIPAvg=plsfn8Prb02RIPAvg, rtRelatPeerIpMask=rtRelatPeerIpMask, icicCenterUeUlPrbSchedPri3=icicCenterUeUlPrbSchedPri3, rruEffectiveDataTransTimeDl=rruEffectiveDataTransTimeDl, dryContactNo=dryContactNo, caUlBsrAllocSwitch=caUlBsrAllocSwitch, srPeriodicity=srPeriodicity, s1PathSwichTable=s1PathSwichTable, eNBMeasComPeriodicForRate=eNBMeasComPeriodicForRate, s1PathSwichReq=s1PathSwichReq)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", bbuDCAEnableThreshold=bbuDCAEnableThreshold, rruPdcchCceUtilUlDciSf=rruPdcchCceUtilUlDciSf, lbc40FcEntry=lbc40FcEntry, pathNb2RncMaxCTD=pathNb2RncMaxCTD, sdcRru1TdlMaxPwr=sdcRru1TdlMaxPwr, cellInterRatRowStatus=cellInterRatRowStatus, macDownlinkEffTm9Srs=macDownlinkEffTm9Srs, macNbrRbDlMassiveMimoSM5=macNbrRbDlMassiveMimoSM5, invPortTable=invPortTable, x2ErrorInd=x2ErrorInd, plsfn1Prb18RIPAvg=plsfn1Prb18RIPAvg, spsOptmzAmrcSwitch=spsOptmzAmrcSwitch, nbrscheprbulMcs19=nbrscheprbulMcs19, cellAntWeightAmplitude12=cellAntWeightAmplitude12, emTemperatureLowerLimit=emTemperatureLowerLimit, macSwitchInfoCceOffsetRatioCfi1=macSwitchInfoCceOffsetRatioCfi1, hoFailPrepIncIntraFreqS1Pucch=hoFailPrepIncIntraFreqS1Pucch, dlPATSpeeffthred1TM8=dlPATSpeeffthred1TM8, drbPdcpSduBitLenDlQci1=drbPdcpSduBitLenDlQci1, peripheralPackVendorIndex=peripheralPackVendorIndex, cellMeasure=cellMeasure, rruTypeName=rruTypeName, plsfn5Prb81RIPAvg=plsfn5Prb81RIPAvg, tbNbrSuccInitUlQpsk=tbNbrSuccInitUlQpsk, cellPrbRatioRowStatus=cellPrbRatioRowStatus, sdcTable=sdcTable, cellCompanyVideoLeshiVideoNum=cellCompanyVideoLeshiVideoNum, tdsLcMaxCarrierNum=tdsLcMaxCarrierNum, e1FrameErrorAlarmClearThreshold=e1FrameErrorAlarmClearThreshold, daughterBoardSerialNumber=daughterBoardSerialNumber, rrcSuccConnReconfigRabModify=rrcSuccConnReconfigRabModify, hoFailPrepOutX2QuaOtherTf=hoFailPrepOutX2QuaOtherTf, atuCommonUserMRDelSwitch=atuCommonUserMRDelSwitch, alarmNotiCauseNo=alarmNotiCauseNo, macTestSwitchInfoUlMaxSrbMcs=macTestSwitchInfoUlMaxSrbMcs, caMcsDeActPeriod=caMcsDeActPeriod, rruDtchPrbAssnMeanUIEnb=rruDtchPrbAssnMeanUIEnb, nbrschetimesdlMcs24=nbrschetimesdlMcs24, omLinkVlanId=omLinkVlanId, cellSelectQQualMinOffsetFlag=cellSelectQQualMinOffsetFlag, sntpFirstDiscAlarmThreshold=sntpFirstDiscAlarmThreshold, rruSlaveOfpFaultDealSwitch=rruSlaveOfpFaultDealSwitch, adjeNBMmeGroupId14=adjeNBMmeGroupId14, bsrEntry=bsrEntry, plPreamblePwrEntry=plPreamblePwrEntry, harqMaxUlTxTtiBundling=harqMaxUlTxTtiBundling, drbBurstDataThpDLQci4=drbBurstDataThpDLQci4, extendDrbUlLoPriority=extendDrbUlLoPriority, irathoAttPrepOutGprs=irathoAttPrepOutGprs, hsdpaEFACHSchedCodeRate=hsdpaEFACHSchedCodeRate, plsfn5Prb99RIPAvg=plsfn5Prb99RIPAvg, hoSuccOutFddTddIntraEnb=hoSuccOutFddTddIntraEnb, saalConnRxRsPdus=saalConnRxRsPdus, tdsNetLocalCellIsAntCombination=tdsNetLocalCellIsAntCombination, ueAdaptiveIrcStatEntry=ueAdaptiveIrcStatEntry, mrPLRULCorrection=mrPLRULCorrection, phyULMaxNLPRB14=phyULMaxNLPRB14, plsfn1Prb91RIPAvg=plsfn1Prb91RIPAvg, drbThpTimeDlQci2=drbThpTimeDlQci2, saalConnRowStatus=saalConnRowStatus, raeBeamBandHorizonBandBuf=raeBeamBandHorizonBandBuf, srsAntannePort=srsAntannePort, nbrschetimesdlMcs12=nbrschetimesdlMcs12, hsdpaSFCQueIubUuMultiple=hsdpaSFCQueIubUuMultiple, hsupaQosTable=hsupaQosTable, handoverInERABNbrEntry=handoverInERABNbrEntry, plsfn9Prb56RIPAvg=plsfn9Prb56RIPAvg, plsfn9Prb02RIPAvg=plsfn9Prb02RIPAvg, plsfn9Prb27RIPAvg=plsfn9Prb27RIPAvg, localCarrierEntry=localCarrierEntry, topoRRUProgramActivateTrigger=topoRRUProgramActivateTrigger, peripheralPackRunningTable=peripheralPackRunningTable, rhubEtherTable=rhubEtherTable, drbBurstDataThpULQci4=drbBurstDataThpULQci4, macCellCompUeNumQci2=macCellCompUeNumQci2, erabEstabProcOfRUERowStatus=erabEstabProcOfRUERowStatus, drbPdcpSduTotalNumberDlQci5=drbPdcpSduTotalNumberDlQci5, cellAntWeightAmplitude21=cellAntWeightAmplitude21, macSwitchTestInfoPdcpDynamicMinPktLen=macSwitchTestInfoPdcpDynamicMinPktLen, macNbrTbDlMassiveMimoSM14=macNbrTbDlMassiveMimoSM14, fcHichDpchOffsetTxaUser2=fcHichDpchOffsetTxaUser2, cellAntWeightPhase15=cellAntWeightPhase15, hsLowSpeedUserHoAttOut=hsLowSpeedUserHoAttOut, cellAcBarList1ForOrigiCalls=cellAcBarList1ForOrigiCalls, topoRHUBMaxTimeDelayCompensation=topoRHUBMaxTimeDelayCompensation, transactionResultNotiNEID=transactionResultNotiNEID, eueTimerT300=eueTimerT300, hsdpaHarqRvQpsk5New=hsdpaHarqRvQpsk5New, plsfn6Prb01RIPAvg=plsfn6Prb01RIPAvg, hoFailPrepIncIntraFreqX2Tpc=hoFailPrepIncIntraFreqX2Tpc, saalAllAlcapAlarmState=saalAllAlcapAlarmState, equipProceduralStatus=equipProceduralStatus, plsfn9Prb98RIPAvg=plsfn9Prb98RIPAvg, fileTypeLimitTable=fileTypeLimitTable, pucchRowStatus=pucchRowStatus, pdcpDlAirSduDropTotalNumberQci1=pdcpDlAirSduDropTotalNumberQci1, iubSignalTransportMode=iubSignalTransportMode, macPhrIndex8=macPhrIndex8, plsfn8Prb11RIPAvg=plsfn8Prb11RIPAvg, macNbrRbDlMassiveMimoSM6=macNbrRbDlMassiveMimoSM6, hoFailPrepIncIntraFreqIntraEnbPrb=hoFailPrepIncIntraFreqIntraEnbPrb, pdcpPresetPerformanceTable=pdcpPresetPerformanceTable, tdsLocalCellTable=tdsLocalCellTable, macTestSwitchInfoMaxMsg4Mcs=macTestSwitchInfoMaxMsg4Mcs, drbNbrScheTimesSfn0=drbNbrScheTimesSfn0, bfdMode=bfdMode, raeTiltNum=raeTiltNum, macTestSwitchInfoRowStatus=macTestSwitchInfoRowStatus, erabActiveMaxNbrDLQci5=erabActiveMaxNbrDLQci5, cellavgripperprbTable=cellavgripperprbTable, pathRnc2NbCdvt=pathRnc2NbCdvt, cqiFormatIndicatorPeriodic=cqiFormatIndicatorPeriodic, hoFailPrepIncIntraFreqX2HandoverRestrictList=hoFailPrepIncIntraFreqX2HandoverRestrictList, rruTheorScheTimesUl=rruTheorScheTimesUl, sctpTimerRTOMin=sctpTimerRTOMin, hlTestSwitchUlPrbLenForEdgeUe=hlTestSwitchUlPrbLenForEdgeUe, macUplinkLowSpeedNewPfScale=macUplinkLowSpeedNewPfScale, hsdpaHarqRv64Qam6=hsdpaHarqRv64Qam6, timerAnrRptInterRatTimer=timerAnrRptInterRatTimer, timeSlotTypeNeighCell10=timeSlotTypeNeighCell10, pdcpBbuSourceIndex=pdcpBbuSourceIndex, amrUlVoipPacketNb5=amrUlVoipPacketNb5, plsfn9Prb74RIPAvg=plsfn9Prb74RIPAvg, mrMrsFileSucc=mrMrsFileSucc, cellPrbRatioEntry=cellPrbRatioEntry, remoteClkModuleSerialNumber=remoteClkModuleSerialNumber, hsdpaSpi8Weight=hsdpaSpi8Weight, plSwitchNode=plSwitchNode, efdAdministrativeState=efdAdministrativeState, phyULMaxNLPRB37=phyULMaxNLPRB37, plsfn5Prb96RIPAvg=plsfn5Prb96RIPAvg, rrcMchCaseRelP3=rrcMchCaseRelP3, swPackRowStatus=swPackRowStatus, plsfn0Prb47RIPAvg=plsfn0Prb47RIPAvg, lbc40FcFobiddenQciStrategyPriority=lbc40FcFobiddenQciStrategyPriority, netRRUAntennaSettingEntry=netRRUAntennaSettingEntry, spsOptmzUlLoseCopyFlag=spsOptmzUlLoseCopyFlag, phyULMeanNLPRB64=phyULMeanNLPRB64, erabRelProcByHOTable=erabRelProcByHOTable, alarmStatelessSends=alarmStatelessSends, macPhrIndex10=macPhrIndex10, rlcPresetPerformanceLcId=rlcPresetPerformanceLcId, plsfn7Prb21RIPAvg=plsfn7Prb21RIPAvg, softwareBaseBandBoardCfgIndex=softwareBaseBandBoardCfgIndex, plADIIoTThresh=plADIIoTThresh, plRipLogFileDirectory=plRipLogFileDirectory, pdcpIPThroughputDlQci5=pdcpIPThroughputDlQci5, macMumimoPairRbDlRank2=macMumimoPairRbDlRank2, swPackCustomerPlanUpgradePercent=swPackCustomerPlanUpgradePercent, plsfn8Prb31RIPAvg=plsfn8Prb31RIPAvg, sctpPeerPortNumber=sctpPeerPortNumber, addERABEstabProcEntry=addERABEstabProcEntry, ruePdcpSduBitLenUlQci254=ruePdcpSduBitLenUlQci254, macUpAlgorithmVolteMaxSchMcsTag=macUpAlgorithmVolteMaxSchMcsTag, macTestSwitchInfoComEnhancedAllTxSwitch=macTestSwitchInfoComEnhancedAllTxSwitch, pathEntry=pathEntry, fileTransPercent=fileTransPercent, rruOptTransStandStatus=rruOptTransStandStatus, plsfn6Prb97RIPAvg=plsfn6Prb97RIPAvg, cellAntWeightPhase11=cellAntWeightPhase11, plsfn8Prb63RIPAvg=plsfn8Prb63RIPAvg, topoRHUBAccessRackNo=topoRHUBAccessRackNo, boardSwapDestSlotNo=boardSwapDestSlotNo, pathLinkType=pathLinkType, hlTestSwitchcellAdjCellPwrchgduration=hlTestSwitchcellAdjCellPwrchgduration, plTransPowerLcId=plTransPowerLcId, tdsSysPolarAntDisaRecSwitch=tdsSysPolarAntDisaRecSwitch, hoFailOutIntraFreqInterCellIntraEnbTarExcNoRsp=hoFailOutIntraFreqInterCellIntraEnbTarExcNoRsp, plRiaParaCfg=plRiaParaCfg, hsdpaPFEntry=hsdpaPFEntry, macNbrRbUlMassiveMimoSM3=macNbrRbUlMassiveMimoSM3, topoRRUCarrier10ULPowerValue=topoRRUCarrier10ULPowerValue, nbrscheprbdlMcs29=nbrscheprbdlMcs29, emEquipmentManufacturer=emEquipmentManufacturer, tbSRBSuccInitDlQpsk=tbSRBSuccInitDlQpsk, s1SuccSetupNbr=s1SuccSetupNbr, sigSctpDataChunkDropUl=sigSctpDataChunkDropUl, configfilePlanActivateIndicator=configfilePlanActivateIndicator, drbBurstDataThpDLQci3=drbBurstDataThpDLQci3, a4RptQuantity=a4RptQuantity, pdcpPreset36=pdcpPreset36, drbRecvRlcCfgId=drbRecvRlcCfgId, devicePowerManagement=devicePowerManagement, hsupaCellSelectRowStatus=hsupaCellSelectRowStatus, saalConnEntry=saalConnEntry, boardStorageDevFreeBytes=boardStorageDevFreeBytes, cellActTime=cellActTime, rruBorrowFromScellPrbTotDl=rruBorrowFromScellPrbTotDl, loggedMdtCellRowStatus=loggedMdtCellRowStatus, plsfn4Prb20RIPAvg=plsfn4Prb20RIPAvg, almActUploadCfg=almActUploadCfg, netEthPlanEntry=netEthPlanEntry, cellAdjGeranCellNetworkColourCode=cellAdjGeranCellNetworkColourCode, hsdpaCellSelectLcId=hsdpaCellSelectLcId, fcPdschSdmaIsolation=fcPdschSdmaIsolation, macUplinkHighSpeedNewPfScale=macUplinkHighSpeedNewPfScale, e1LinkType=e1LinkType, raRootSeqIndex=raRootSeqIndex, erabEstabProcOfRUEEntry=erabEstabProcOfRUEEntry, raePortInfoPortIDs=raePortInfoPortIDs, sessiontimeerabQci7=sessiontimeerabQci7, volteHOAttOutExecInterEnbX2InterFreq=volteHOAttOutExecInterEnbX2InterFreq, hsdpaRoundRobin=hsdpaRoundRobin, plsfn7PrbG16RIPMax=plsfn7PrbG16RIPMax, rrcRbcCaseRelP8=rrcRbcCaseRelP8, dlCAPwrCellPdcchCceNum2=dlCAPwrCellPdcchCceNum2, emTheftEntry=emTheftEntry, hoFailPrepIncIntraFreqS1CellOverLoad=hoFailPrepIncIntraFreqS1CellOverLoad, plsfn8PrbG18RIPMax=plsfn8PrbG18RIPMax, plsfn1Prb62RIPAvg=plsfn1Prb62RIPAvg, plReceivePowerUserIndex8=plReceivePowerUserIndex8, hlTestSwitchcaDownlinkSwitchTLS=hlTestSwitchcaDownlinkSwitchTLS, dlrbStatisticEntry=dlrbStatisticEntry, macSwitchTestInfoTable=macSwitchTestInfoTable, ipAddrSlotNo=ipAddrSlotNo, pdcpUpPktDelayDlQci2Enb=pdcpUpPktDelayDlQci2Enb, raeParamPhase=raeParamPhase, fcRowStatus=fcRowStatus, pdcpUlSduAirDropRatioEntry=pdcpUlSduAirDropRatioEntry, pmExpValueInteger32Val=pmExpValueInteger32Val, plsfn8PrbG11RIPMax=plsfn8PrbG11RIPMax, configProcOccurTime=configProcOccurTime, rbAttEstabQci4=rbAttEstabQci4, voLTEHandOverInTDLTETable=voLTEHandOverInTDLTETable, macDownlinkAckActiveNum=macDownlinkAckActiveNum, plsfn6Prb86RIPAvg=plsfn6Prb86RIPAvg, mroLcId=mroLcId, interRatDelInterMeasSwitch=interRatDelInterMeasSwitch, eNBIotAlarmDelayNum=eNBIotAlarmDelayNum, pdcpUlPakChaRecogSuc=pdcpUlPakChaRecogSuc, tbNbrSuccInitDl16QAM=tbNbrSuccInitDl16QAM, cellCdma2000ParaCdma1XrttCsfbRegHomeRegInd=cellCdma2000ParaCdma1XrttCsfbRegHomeRegInd, macPrbUtilizationSIRowStatus=macPrbUtilizationSIRowStatus, periodCalibrationTable=periodCalibrationTable, plsfn2Prb32RIPAvg=plsfn2Prb32RIPAvg, hsdpaSFCMacehsPduBitLen=hsdpaSFCMacehsPduBitLen, macNbrInitTbUlQci1=macNbrInitTbUlQci1, softLicenseUlSfBalanceT=softLicenseUlSfBalanceT, erabRelMmeNbrCongestion=erabRelMmeNbrCongestion, cellCdma2000ParaCdma1XrttCsfbRegNid=cellCdma2000ParaCdma1XrttCsfbRegNid, plsfn8PrbG2RIPMax=plsfn8PrbG2RIPMax, iubImaGrpId=iubImaGrpId, macTestSwitchInfoUlPrbNumMin=macTestSwitchInfoUlPrbNumMin, fcDTXAlgorithmSwitch=fcDTXAlgorithmSwitch, antWeightBeamDirection=antWeightBeamDirection, eNBMeasComFilterCoeffForIot=eNBMeasComFilterCoeffForIot, pdcpVideoKeyWordsCfgId=pdcpVideoKeyWordsCfgId, plsfn7Prb86RIPAvg=plsfn7Prb86RIPAvg, phyNbrCqi5=phyNbrCqi5, tdsLcPriority=tdsLcPriority, hoCancelIntraFreqIntraEnbX2HandOverFail=hoCancelIntraFreqIntraEnbX2HandOverFail, cellAcBarTimeForOrigiCalls=cellAcBarTimeForOrigiCalls, rruPrbDlQci4Num=rruPrbDlQci4Num, amrUlVoipPacketWb7=amrUlVoipPacketWb7)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", ofpPortModuleM50um10MLen=ofpPortModuleM50um10MLen, macDownlinkEffTm83=macDownlinkEffTm83, lbcEveryMigrationTh=lbcEveryMigrationTh, topoRRUULPowerTable=topoRRUULPowerTable, hsupaTfrcGranularity=hsupaTfrcGranularity, mrQCI5PLRULThreshold=mrQCI5PLRULThreshold, netIROfpPortRackNo=netIROfpPortRackNo, localCarrierPdschPowerMinRate=localCarrierPdschPowerMinRate, a4RowStatus=a4RowStatus, plsfn2Prb33RIPAvg=plsfn2Prb33RIPAvg, boardRackNo=boardRackNo, acCfgPowLowThresholdSwitch=acCfgPowLowThresholdSwitch, macSRBTbUl=macSRBTbUl, erabRelMmeNbrRadioInterfaceFailure=erabRelMmeNbrRadioInterfaceFailure, smallPacketAlgEntry=smallPacketAlgEntry, cellInterRatTreselectionUtraSfFlag=cellInterRatTreselectionUtraSfFlag, hsupaMaxCIRowStatus=hsupaMaxCIRowStatus, gtpuFailInfoTable=gtpuFailInfoTable, plsfn7Prb41RIPAvg=plsfn7Prb41RIPAvg, hoAttOutIntraFreqX2=hoAttOutIntraFreqX2, pdcpUpPktLossRateDlQci9Enb=pdcpUpPktLossRateDlQci9Enb, antArrayIndex=antArrayIndex, gpsEntry=gpsEntry, mdtServerInetAddrType=mdtServerInetAddrType, mrFileStatistic=mrFileStatistic, equipElevation=equipElevation, hsdpaSpi6Weight=hsdpaSpi6Weight, macUpAlgorithmSrsPowerP=macUpAlgorithmSrsPowerP, s1SuccResetByMME=s1SuccResetByMME, raeFileNum=raeFileNum, macNbrSuccInitTbDl16QamQci1=macNbrSuccInitTbDl16QamQci1, phyULMeanNLPRB38=phyULMeanNLPRB38, spsOptmzVPMPSThode=spsOptmzVPMPSThode, minimizationOfDriveTests=minimizationOfDriveTests, cdlFileInterval=cdlFileInterval, plReceivePowerIndex4=plReceivePowerIndex4, phyULMaxNLPRB54=phyULMaxNLPRB54, swPackCustomerPlanFwActiveIndicator=swPackCustomerPlanFwActiveIndicator, s1sigConnEstabAtt=s1sigConnEstabAtt, alterationNofication=alterationNofication, drbNbrScheTimesSfn6=drbNbrScheTimesSfn6, drbThpTimeDlQci4=drbThpTimeDlQci4, ftpServerEntry=ftpServerEntry, a1CfgId=a1CfgId, sjm1SnrHighThreshold16Qam=sjm1SnrHighThreshold16Qam, plsfn3Prb00RIPAvg=plsfn3Prb00RIPAvg, phyULMeanNLPRB88=phyULMeanNLPRB88, fcAgchSdmaIsolation=fcAgchSdmaIsolation, macPhrIndex11=macPhrIndex11, rrcConnEstabTimeMax=rrcConnEstabTimeMax, plsfn6Prb76RIPAvg=plsfn6Prb76RIPAvg, macSwitchInfoUlHoppingType=macSwitchInfoUlHoppingType, pdcpSduDiscTotalDataNumQci6=pdcpSduDiscTotalDataNumQci6, phyULMeanNLPRB68=phyULMeanNLPRB68, hoOutFailTooEarlyType1=hoOutFailTooEarlyType1, macBbuSourceEntry=macBbuSourceEntry, sjm1CoFreqAlgorithmSwitch=sjm1CoFreqAlgorithmSwitch, saalConnTxRsPdus=saalConnTxRsPdus, circuitPackRackNo=circuitPackRackNo, x2Reset=x2Reset, plsfn6Prb77RIPAvg=plsfn6Prb77RIPAvg, macScheTimeUlEdgeUser=macScheTimeUlEdgeUser, fcNotifications=fcNotifications, plsfn5Prb33RIPAvg=plsfn5Prb33RIPAvg, dlCAPwrCfiModT1=dlCAPwrCfiModT1, phyULMeanNLPRB86=phyULMeanNLPRB86, plsfn9Prb16RIPAvg=plsfn9Prb16RIPAvg, equivalentPRBUsageEntry=equivalentPRBUsageEntry, dataPlanStatisticEntry=dataPlanStatisticEntry, boardLedSlotNo=boardLedSlotNo, cellGeranFreqExplicitArfcns11=cellGeranFreqExplicitArfcns11, x2HandOverProcInterEnbTable=x2HandOverProcInterEnbTable, boardAlarmStatus=boardAlarmStatus, mmeCfgRowStatus=mmeCfgRowStatus, plsfn9Prb39RIPAvg=plsfn9Prb39RIPAvg, srvccFailPrepOutGeranCovTgtFailure=srvccFailPrepOutGeranCovTgtFailure, plsfn2Prb93RIPAvg=plsfn2Prb93RIPAvg, cmdAuthorizationCMDName=cmdAuthorizationCMDName, remoteLmtRoutePeerIp=remoteLmtRoutePeerIp, handOverInterRATTable=handOverInterRATTable, cellShareNetLcId=cellShareNetLcId, pl=pl, hoOutAttMLBMeasure=hoOutAttMLBMeasure, nbrschetimesdlMcs15=nbrschetimesdlMcs15, remoteClkOpticalModuleBitRate=remoteClkOpticalModuleBitRate, cellInterRatTreselectionGeranSfFlag=cellInterRatTreselectionGeranSfFlag, macUlScheTimesQCI1=macUlScheTimesQCI1, procCoreNo=procCoreNo, plsfn3Prb53RIPAvg=plsfn3Prb53RIPAvg, cellShedRowStatus=cellShedRowStatus, emWaterIndex=emWaterIndex, cellavgripperprbLcId=cellavgripperprbLcId, cacPositionRedirectionNet=cacPositionRedirectionNet, oabRowStatus=oabRowStatus, cellCdmaBandClassInfoThreshxHigh=cellCdmaBandClassInfoThreshxHigh, spsOptmzLcId=spsOptmzLcId, cellAvailCapTable=cellAvailCapTable, cellFreqBand=cellFreqBand, macUpMuMiMoMuMimoBackSnr=macUpMuMiMoMuMimoBackSnr, plUsrLogUlDataLargePeriod=plUsrLogUlDataLargePeriod, netRRURootAlarmRowStatus=netRRURootAlarmRowStatus, macPreset8=macPreset8, erabActiveMeanNbrULQci4=erabActiveMeanNbrULQci4, topoRHUBUnavaiableReason=topoRHUBUnavaiableReason, cellGeranFreqExplicitArfcns28=cellGeranFreqExplicitArfcns28, timerAnrUtraDetectTimer=timerAnrUtraDetectTimer, plRipLogFtpServerLoginName=plRipLogFtpServerLoginName, airCondCoolingSensitivity=airCondCoolingSensitivity, plsfn4Prb22RIPAvg=plsfn4Prb22RIPAvg, lbcPrbHighLoadTime=lbcPrbHighLoadTime, pagingPagDiscarded=pagingPagDiscarded, airCondProtocolVersion=airCondProtocolVersion, gpsTable=gpsTable, mdtTCEId=mdtTCEId, rruPathVgsValue3=rruPathVgsValue3, bbuPowerOffScheduleEndTime=bbuPowerOffScheduleEndTime, macPrbUtilizationCCEntry=macPrbUtilizationCCEntry, s1FaultSnapshotSwitch=s1FaultSnapshotSwitch, pcapFilterIpaddress2=pcapFilterIpaddress2, cellSelectCsgIdentityFlag=cellSelectCsgIdentityFlag, sctpWorkingMode=sctpWorkingMode, imaGrpClockMode=imaGrpClockMode, rrcPreset28=rrcPreset28, pdcpParaCfgLcId=pdcpParaCfgLcId, netLcAntArrayMode=netLcAntArrayMode, phyCfgIotScNotSmartAlarmThresholdL=phyCfgIotScNotSmartAlarmThresholdL, reservedCellL1Para5=reservedCellL1Para5, topoSetRRUPortSubtoLocalCellId=topoSetRRUPortSubtoLocalCellId, macSwitchInfoCellCombineAntOffset=macSwitchInfoCellCombineAntOffset, topoRRUSignalTxRxSwitch=topoRRUSignalTxRxSwitch, circuitPackInventoryUnitType=circuitPackInventoryUnitType, raeBmIndicatHorizonBand=raeBmIndicatHorizonBand, phyULMeanNLPRB56=phyULMeanNLPRB56, hoSuccPrepOutFddTddX2=hoSuccPrepOutFddTddX2, caUlBsrRlcAllocAlgoT=caUlBsrRlcAllocAlgoT, hsdpaHarqRvQpsk8New=hsdpaHarqRvQpsk8New, omTestCdlStaggerDelayTime=omTestCdlStaggerDelayTime, peripheralPackPlanVersion=peripheralPackPlanVersion, drbPdcpSduBitRatioDlMax=drbPdcpSduBitRatioDlMax, softLicense=softLicense, tdsNodeBSystem=tdsNodeBSystem, drbNbrScheTimesSfn4=drbNbrScheTimesSfn4, srvccFailOutUtranMme=srvccFailOutUtranMme, apX2apIdRel=apX2apIdRel, topoRRUIrE1AccessIrENo=topoRRUIrE1AccessIrENo, macPuschPrbAssnUlEdgeUser=macPuschPrbAssnUlEdgeUser, erabEstabInitFailNbrUeS1apIdPairError=erabEstabInitFailNbrUeS1apIdPairError, geranAdjCellMeasCellAdjGeranCellIndex=geranAdjCellMeasCellAdjGeranCellIndex, plsfn8Prb13RIPAvg=plsfn8Prb13RIPAvg, invRruTable=invRruTable, ethernetOAMShelfNo=ethernetOAMShelfNo, heatExRunningState=heatExRunningState, plsfn8Prb80RIPAvg=plsfn8Prb80RIPAvg, macNbrErrTbDlMassiveMimoSM10=macNbrErrTbDlMassiveMimoSM10, a3MaxReportCell=a3MaxReportCell, plsfn2Prb08RIPAvg=plsfn2Prb08RIPAvg, reservedCellL1Para4=reservedCellL1Para4, enbOSPMeanCpuUsage=enbOSPMeanCpuUsage, softwarePackCustRunningEntry=softwarePackCustRunningEntry, erabRelAttNbrQci3=erabRelAttNbrQci3, phyCfgLcId=phyCfgLcId, macSwitchTestInfoUlPrescheTimeLimit=macSwitchTestInfoUlPrescheTimeLimit, boardLed=boardLed, lcDisableReason=lcDisableReason, cellAdjDelCellPlmnMnc=cellAdjDelCellPlmnMnc, ccHichFmAckUser1=ccHichFmAckUser1, fileTypeLimitSingleFileMaxBytes=fileTypeLimitSingleFileMaxBytes, macTestSwitchInfoPrbLimitSwitch=macTestSwitchInfoPrbLimitSwitch, cellAdjCellLocalId=cellAdjCellLocalId, plsfn8Prb67RIPAvg=plsfn8Prb67RIPAvg, lmcDlPrbHighLoadTh=lmcDlPrbHighLoadTh, a2RptAmount=a2RptAmount, plsfn3Prb69RIPAvg=plsfn3Prb69RIPAvg, syslogServerInetAddr=syslogServerInetAddr, chacHighLoadAcBarTimeRate=chacHighLoadAcBarTimeRate, hsupaQosRowStatus=hsupaQosRowStatus, erabRelActNbrQci3=erabRelActNbrQci3, erabModQoSFailNbrUeS1apIdPairError=erabModQoSFailNbrUeS1apIdPairError, contextFailInitalSetupNbrEnbUeS1apIdError=contextFailInitalSetupNbrEnbUeS1apIdError, phyNbrCqi13=phyNbrCqi13, timerInterRatGeranHcPrepare=timerInterRatGeranHcPrepare, macMaxBoSwitch=macMaxBoSwitch, macBlerTable=macBlerTable, plsfn5Prb79RIPAvg=plsfn5Prb79RIPAvg, procRackNo=procRackNo, rrcFailConnEstabTpcAllocFail=rrcFailConnEstabTpcAllocFail, topoRRUCarrier24ULPowerValue=topoRRUCarrier24ULPowerValue, erabNbrMaxEstabQci1=erabNbrMaxEstabQci1, erabNbrMaxEstabQci9=erabNbrMaxEstabQci9, pdcpIPThroughputUlQci3=pdcpIPThroughputUlQci3, plRssiAvgC2=plRssiAvgC2, cellBlackCellsRange=cellBlackCellsRange, cellAdjGeranPsHcFlag=cellAdjGeranPsHcFlag, configfilePlanIsActivatedFlag=configfilePlanIsActivatedFlag, ccHichFmAckUser0=ccHichFmAckUser0, hsdpaTsRandomTable=hsdpaTsRandomTable, processorEntry=processorEntry, smallPacketDlBoTimeroutReportThreshold=smallPacketDlBoTimeroutReportThreshold, lmcUlCongestRestoreTh=lmcUlCongestRestoreTh, cellIotNotiNEType=cellIotNotiNEType, plsfn4Prb07RIPAvg=plsfn4Prb07RIPAvg, timerWaitPdcpRsp=timerWaitPdcpRsp, plRiaCellFuncSwitch=plRiaCellFuncSwitch, netRRURootAlarmType8=netRRURootAlarmType8, processorCore=processorCore, macCaActivePrbPSCellUl=macCaActivePrbPSCellUl, cellPdschSibPower=cellPdschSibPower, phyULMeanNLPRB87=phyULMeanNLPRB87, cmdAuthorizationManagement=cmdAuthorizationManagement, plsfn7Prb19RIPAvg=plsfn7Prb19RIPAvg, cellAdjCdma2000FreqBandClass=cellAdjCdma2000FreqBandClass, topoSetRRURETAntSupport=topoSetRRURETAntSupport, plsfn1Prb79RIPAvg=plsfn1Prb79RIPAvg, atuDldataTendcellBand=atuDldataTendcellBand, hoIntraCellAbnormalStat=hoIntraCellAbnormalStat, remoteClkOpticalModuleTxPower=remoteClkOpticalModuleTxPower, plsfn3Prb77RIPAvg=plsfn3Prb77RIPAvg, topoRRUAntSettingTable=topoRRUAntSettingTable, hoNcHoPreSuccLB=hoNcHoPreSuccLB, macCaActiveTtiPCellDl=macCaActiveTtiPCellDl, hoFailOutIntraFreqX2SourceFail=hoFailOutIntraFreqX2SourceFail, peripheralPackRunningVendorIndex=peripheralPackRunningVendorIndex, macDownlinkMuMiMoMcsBackoff8=macDownlinkMuMiMoMcsBackoff8, cellCfgTable=cellCfgTable, hoOutSuccQci1=hoOutSuccQci1, pdcpIPThroughputUlQci6=pdcpIPThroughputUlQci6, cellAdjCdma2000FreqTable=cellAdjCdma2000FreqTable, plsfn9Prb08RIPAvg=plsfn9Prb08RIPAvg, raeAlarmClearTrigger=raeAlarmClearTrigger, rruPathLicenseState=rruPathLicenseState, sctpPeerIpAddr1=sctpPeerIpAddr1, plsfn6Prb51RIPAvg=plsfn6Prb51RIPAvg, rbSuccEstabQci3=rbSuccEstabQci3, macTestSwitchInfoLogIndex=macTestSwitchInfoLogIndex, macSwitchTestInfoUlMuMIMOSwitchTLS=macSwitchTestInfoUlMuMIMOSwitchTLS, retap=retap, macsche4cceratio=macsche4cceratio, pdcpIPThroughputDlQci9=pdcpIPThroughputDlQci9, rrcHcCaseRelP6=rrcHcCaseRelP6, hoFailPrepIncInterFreqS1Tpc=hoFailPrepIncInterFreqS1Tpc, boardLedRackNo=boardLedRackNo, configFileEntry=configFileEntry, atuGoldUeIMSI19=atuGoldUeIMSI19, ueaccPreambleContentNum=ueaccPreambleContentNum, macUpAlgorithmCqiModifyP=macUpAlgorithmCqiModifyP, drbDlLoPriority=drbDlLoPriority, atuGoldUeIMSI1=atuGoldUeIMSI1, cacDlHcReservePrb=cacDlHcReservePrb, saalConnRxStatPdus=saalConnRxStatPdus, atuByIpAddrType=atuByIpAddrType, cqiRiOffset=cqiRiOffset, phyNbrCqi8=phyNbrCqi8, macNbrTbDlTm8=macNbrTbDlTm8, plsfn3Prb78RIPAvg=plsfn3Prb78RIPAvg)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", rrcFailConnReconfigSecurityFailure=rrcFailConnReconfigSecurityFailure, macsche2cce=macsche2cce, cellSelectEntry=cellSelectEntry, mrQCI9PLRDLCorrection=mrQCI9PLRDLCorrection, nbrscheprbulMcs6=nbrscheprbulMcs6, contextAttReleNBNbrOMIntervention=contextAttReleNBNbrOMIntervention, plRipLogInetAddrType=plRipLogInetAddrType, cellAdjCdma2000CellIndex=cellAdjCdma2000CellIndex, configFileSaveTrigger=configFileSaveTrigger, rrcHcCaseRelP2=rrcHcCaseRelP2, topoRRUPACurrentRowStatus=topoRRUPACurrentRowStatus, hoSuccOutIntraFreqX2=hoSuccOutIntraFreqX2, lbcUserHighLoadTime=lbcUserHighLoadTime, spsTwoIntervalsCfg=spsTwoIntervalsCfg, cellInterFreqQOffsetFreq=cellInterFreqQOffsetFreq, fileTransNotiTime=fileTransNotiTime, cellUtraFreqQualMin=cellUtraFreqQualMin, plThroughputCapacityDLEntry=plThroughputCapacityDLEntry, boardTempIdeal=boardTempIdeal, baseBandCarrierRowStatus=baseBandCarrierRowStatus, cellAcBarFlag=cellAcBarFlag, peripheralFilePackVersionIndex=peripheralFilePackVersionIndex, cellAdjGeranCellArfcn=cellAdjGeranCellArfcn, erabExistNbrTable=erabExistNbrTable, pdcpThrpTimeULQci7=pdcpThrpTimeULQci7, cacQci1LicenseFlag=cacQci1LicenseFlag, macPreset19=macPreset19, lmcDlPrbPreAlarmTh=lmcDlPrbPreAlarmTh, boardDescription=boardDescription, atuUlDataRateThr=atuUlDataRateThr, plsfn7PrbG12RIPMax=plsfn7PrbG12RIPMax, hoFailPrepIncIntraFreqIntraEnbDrbID=hoFailPrepIncIntraFreqIntraEnbDrbID, s1ErrorIndicatByeNBUeS1apIdPairError=s1ErrorIndicatByeNBUeS1apIdPairError, mroTooEarlyHoNumTh=mroTooEarlyHoNumTh, erabRelEnbNbrQci2=erabRelEnbNbrQci2, imaGrpNumRxLinksActv=imaGrpNumRxLinksActv, circuitPackSlotNo=circuitPackSlotNo, plsfn7Prb20RIPAvg=plsfn7Prb20RIPAvg, phyCfgIotChanAlarmRate=phyCfgIotChanAlarmRate, plsfn0Prb32RIPAvg=plsfn0Prb32RIPAvg, hsdpaHarqRvQpsk2=hsdpaHarqRvQpsk2, alarmCauseRowStatus=alarmCauseRowStatus, macTestSwitchInfoInitULCQIModifFlag=macTestSwitchInfoInitULCQIModifFlag, gtpcCheckSwitch=gtpcCheckSwitch, pdcpDlAirSduDropTotalNumberQci7=pdcpDlAirSduDropTotalNumberQci7, topoRRUChannelGain=topoRRUChannelGain, caPerformanceByRRCLcId=caPerformanceByRRCLcId, cellGeranFreqExplicitArfcns3=cellGeranFreqExplicitArfcns3, pdcpProfile0x0004Flag=pdcpProfile0x0004Flag, rruJRSfn=rruJRSfn, atuUeIdentityRequestSwitch=atuUeIdentityRequestSwitch, lbcAdjCellUlS1TnlTh4=lbcAdjCellUlS1TnlTh4, macCellCompUeNum=macCellCompUeNum, plsfn5Prb56RIPAvg=plsfn5Prb56RIPAvg, nbrscheprbulMcs2=nbrscheprbulMcs2, nbrscheprbulMcs15=nbrscheprbulMcs15, contextFailModNbrTransferSyntaxError=contextFailModNbrTransferSyntaxError, atuGoldUeIMSI33=atuGoldUeIMSI33, hsupaPFInitPF=hsupaPFInitPF, hoFailPrepIncInterFreqS1CellOverLoad=hoFailPrepIncInterFreqS1CellOverLoad, plsfn5Prb93RIPAvg=plsfn5Prb93RIPAvg, rhubOptTransTxPower=rhubOptTransTxPower, atuGoldUeIMSI24=atuGoldUeIMSI24, fcSichSirTargetNack=fcSichSirTargetNack, nbrschetimesulMcs7=nbrschetimesulMcs7, amrDlVoipPacketNb3=amrDlVoipPacketNb3, macUpMuMiMoMcsBackOff24=macUpMuMiMoMcsBackOff24, pcapFilterIpaddress3=pcapFilterIpaddress3, macUpAlgorithmSRSRxPowThr=macUpAlgorithmSRSRxPowThr, timeSlotTypeNeighCell12=timeSlotTypeNeighCell12, erabActiveMaxNbrDLQci2=erabActiveMaxNbrDLQci2, plsfn3Prb74RIPAvg=plsfn3Prb74RIPAvg, swPackCustomerPlanDownloadDirectory=swPackCustomerPlanDownloadDirectory, rruOptTransBitRate=rruOptTransBitRate, plRiaCellStateReason=plRiaCellStateReason, sdSyncUlThreshold=sdSyncUlThreshold, lbcDlHardwardTh2=lbcDlHardwardTh2, ethCfgPortMode=ethCfgPortMode, hlProcMaxNum=hlProcMaxNum, hsdpaCqiPwrCtrlWinLength=hsdpaCqiPwrCtrlWinLength, erabModQoSSuccNbrQci1=erabModQoSSuccNbrQci1, eueMeasCellsfMedium=eueMeasCellsfMedium, hsdpaTfrcAlgorithmNode=hsdpaTfrcAlgorithmNode, boardTemperatureEntry=boardTemperatureEntry, plRiaLogServerInetAddr=plRiaLogServerInetAddr, omLinkRecoverTimer=omLinkRecoverTimer, macDownlinkHighSpeedNewPfScale=macDownlinkHighSpeedNewPfScale, airConditionerRowStatus=airConditionerRowStatus, sfn6avgripRowStatus=sfn6avgripRowStatus, cacUlNgbrPrbTh=cacUlNgbrPrbTh, nodebBlockStateNode=nodebBlockStateNode, plsfn0Prb54RIPAvg=plsfn0Prb54RIPAvg, cellIotNotiSubSfn=cellIotNotiSubSfn, hlTestSwitchMeasOffset=hlTestSwitchMeasOffset, retAntOperatingBand=retAntOperatingBand, raeFileSubIndexNo=raeFileSubIndexNo, plsfn3Prb63RIPAvg=plsfn3Prb63RIPAvg, saalConnRxPollPdus=saalConnRxPollPdus, coolingAdjustTempThreshold=coolingAdjustTempThreshold, macCaActiveNbrSCellDl=macCaActiveNbrSCellDl, closeBaseBandCarStartIndex=closeBaseBandCarStartIndex, macUpMuMiMoMcsBackOff11=macUpMuMiMoMcsBackOff11, mrRsrpAdd=mrRsrpAdd, cellBoardLogEntry=cellBoardLogEntry, sdAverPeriodRACHInt=sdAverPeriodRACHInt, retAntTilt=retAntTilt, hoSuccPrepIncInterFreqS1=hoSuccPrepIncInterFreqS1, invRruManufacturerData=invRruManufacturerData, fileAutoUpftpServerPassword=fileAutoUpftpServerPassword, plsfn7Prb51RIPAvg=plsfn7Prb51RIPAvg, linkCommon=linkCommon, rrcConnMean=rrcConnMean, alarmNotiThreshHold=alarmNotiThreshHold, retAntennaRCUEntry=retAntennaRCUEntry, macUpMuMiMoMcsBackOff5=macUpMuMiMoMcsBackOff5, ipoaChNb2RncMaxCTD=ipoaChNb2RncMaxCTD, e1LinkRxFrameLen=e1LinkRxFrameLen, protocolStackCapPacketSwitch=protocolStackCapPacketSwitch, tbNbrInitUl16QAM=tbNbrInitUl16QAM, uplaneCfg=uplaneCfg, plsfn6Prb45RIPAvg=plsfn6Prb45RIPAvg, rrcPreset3=rrcPreset3, hcCellSelectType=hcCellSelectType, rruPrbUlQci6Num=rruPrbUlQci6Num, drxQciRowStatus=drxQciRowStatus, alarmCauseSeverity=alarmCauseSeverity, dtm=dtm, rruCalcPathEntry=rruCalcPathEntry, contextExistNbrTable=contextExistNbrTable, cellAvailbilityStatus=cellAvailbilityStatus, hoSuccOutFddTddX2=hoSuccOutFddTddX2, boardVoltIndexOnBoard=boardVoltIndexOnBoard, topoRRUHardwareVersion=topoRRUHardwareVersion, dlCAPwrDelta3Sdm2SfbcInTm4=dlCAPwrDelta3Sdm2SfbcInTm4, apS1apRelP6=apS1apRelP6, macTestSwitchInfoMacBfLamdaFromTableFlag=macTestSwitchInfoMacBfLamdaFromTableFlag, pathId=pathId, airCondFilterLoggedAlarmState=airCondFilterLoggedAlarmState, topoRRUTopoType=topoRRUTopoType, macTestSwitchInfoUlCqiFixSwitch=macTestSwitchInfoUlCqiFixSwitch, drbUEActiveDlQci1=drbUEActiveDlQci1, fileTransNotiErrorCode=fileTransNotiErrorCode, baseBandCarrierAntCalType=baseBandCarrierAntCalType, plsfn9Prb07RIPAvg=plsfn9Prb07RIPAvg, topoRRUOperationalState=topoRRUOperationalState, hsupaAlgorithmRowStatus=hsupaAlgorithmRowStatus, macNbrErrTbUlMassiveMimoSM8=macNbrErrTbUlMassiveMimoSM8, rruPreambleBTotal=rruPreambleBTotal, phyULMaxNLPRB77=phyULMaxNLPRB77, baseBandCarrierTxPath1CalFactorQ=baseBandCarrierTxPath1CalFactorQ, macTestSwitchInfoSchePrbControlSub=macTestSwitchInfoSchePrbControlSub, initCalibrationAnt1TxStatus=initCalibrationAnt1TxStatus, plsfn4Prb49RIPAvg=plsfn4Prb49RIPAvg, mlbNotiCellId=mlbNotiCellId, mbmsSubFrmAllcChoice=mbmsSubFrmAllcChoice, fileTransNotiResult=fileTransNotiResult, macPreset7=macPreset7, radioBandLcId=radioBandLcId, plsfn6Prb31RIPAvg=plsfn6Prb31RIPAvg, raeBmIndicatAntArrayNo=raeBmIndicatAntArrayNo, calibration=calibration, atuByIpAddr7=atuByIpAddr7, nbrscheprbulMcs9=nbrscheprbulMcs9, handOverProcIntraEnbLcId=handOverProcIntraEnbLcId, adjeNBMmeGroupId1=adjeNBMmeGroupId1, rrcCellCqiRel=rrcCellCqiRel, rrcMchCaseRelP2=rrcMchCaseRelP2, pmExpressionCounter=pmExpressionCounter, remoteClockModuleTable=remoteClockModuleTable, dryContactEntry=dryContactEntry, mrPrbStartPosition=mrPrbStartPosition, ulPwrCtrlOptSwitch=ulPwrCtrlOptSwitch, netRRUOfp1AccessLinePosition=netRRUOfp1AccessLinePosition, macUpAlgorithmSrsPowerSwitch=macUpAlgorithmSrsPowerSwitch, erabEstabTimeMax=erabEstabTimeMax, videoUlPreschePriority=videoUlPreschePriority, plReceivePowerUserIndex24=plReceivePowerUserIndex24, hoInterEnbX2LBCPrepOutSucc=hoInterEnbX2LBCPrepOutSucc, macTestSwitchInfoTaCheckSwitch=macTestSwitchInfoTaCheckSwitch, plsfn1Prb54RIPAvg=plsfn1Prb54RIPAvg, atuGoldUeIMSI8=atuGoldUeIMSI8, erabEstabInitFailNbrAbstractSyntaxError=erabEstabInitFailNbrAbstractSyntaxError, srShortPeriodicityTh=srShortPeriodicityTh, configfilePlanName=configfilePlanName, plsfn0Prb90RIPAvg=plsfn0Prb90RIPAvg, emTemperatureTable=emTemperatureTable, macSwitchInfoMcsDiffFlag=macSwitchInfoMcsDiffFlag, lmcUlCongestionTh=lmcUlCongestionTh, topoRHUBNo=topoRHUBNo, topoRRUCarrier17ULPowerValue=topoRRUCarrier17ULPowerValue, topoRHUBLogDestination=topoRHUBLogDestination, macDownAlgBaseParaEntry=macDownAlgBaseParaEntry, atuAdjCellDlPrbLimit=atuAdjCellDlPrbLimit, sscEndMinute3=sscEndMinute3, plRssiAvgC23=plRssiAvgC23, hoFailPrepIncIntraFreqX2PerDecodeFail=hoFailPrepIncIntraFreqX2PerDecodeFail, macPreset34=macPreset34, coMPUeNumberRowStatus=coMPUeNumberRowStatus, erabNbrEstabSumQci5=erabNbrEstabSumQci5, erabNbrExistQCI2=erabNbrExistQCI2, equipMultiChannelRRUCarrierNumm=equipMultiChannelRRUCarrierNumm, reservedCellL2Para6=reservedCellL2Para6, nbrschetimesulMcs12=nbrschetimesulMcs12, procCoreToProId=procCoreToProId, supervisionEquipment=supervisionEquipment, rrcCellPUCCH3Rel=rrcCellPUCCH3Rel, erabEstabInitSuccNbrQci7=erabEstabInitSuccNbrQci7, airCondCompressorUnderVoltageAlarmState=airCondCompressorUnderVoltageAlarmState, erabRelEnbNbrQci6=erabRelEnbNbrQci6, topoRRUULPowerRRUNo=topoRRUULPowerRRUNo, rrcMchCaseRelP10=rrcMchCaseRelP10, phyCfgIotScNotSmartAlarmPRBnumR=phyCfgIotScNotSmartAlarmPRBnumR, ulPwrDeltaFPucchFormat2a=ulPwrDeltaFPucchFormat2a, s1AttSetupNbr=s1AttSetupNbr, plsfn2Prb51RIPAvg=plsfn2Prb51RIPAvg, plsfn8Prb22RIPAvg=plsfn8Prb22RIPAvg, periodCalibrationTxCalGain=periodCalibrationTxCalGain, cellUtraFreqPMaxUtra=cellUtraFreqPMaxUtra, ueContextProcLcId=ueContextProcLcId, antArrayModelName=antArrayModelName, hoSuccOutPrepInterEnbX2Quality=hoSuccOutPrepInterEnbX2Quality, cellSelectQRxlevMinOffset=cellSelectQRxlevMinOffset, hoFailPrepIncInterFreqS1LoChID=hoFailPrepIncInterFreqS1LoChID, plsfn8Prb20RIPAvg=plsfn8Prb20RIPAvg, lmcCongestionExecutePrd=lmcCongestionExecutePrd, drbPdcpSduTotalDelayDlQci5=drbPdcpSduTotalDelayDlQci5, a2RptQuantity=a2RptQuantity, dlCompFuncSwitch=dlCompFuncSwitch, hoAttOutExecIntraEnbQuality=hoAttOutExecIntraEnbQuality, Integer32Array=Integer32Array, macPreset5=macPreset5, plReceivePowerUserIndex19=plReceivePowerUserIndex19, swPackCustRunningTypeIndex=swPackCustRunningTypeIndex, fileTransTable=fileTransTable, lbcHoOutPRBUsageDl=lbcHoOutPRBUsageDl, rrcPreset22=rrcPreset22, hsdpaCqiPwrCtrlDownThreshold=hsdpaCqiPwrCtrlDownThreshold, ethPortDlByte=ethPortDlByte, plsfn7Prb78RIPAvg=plsfn7Prb78RIPAvg, caPerformanceByRRCRowStatus=caPerformanceByRRCRowStatus, atuGoldUeSwitch=atuGoldUeSwitch, nbrschetimesulMcs25=nbrschetimesulMcs25, cellPdcchCo4CceOtherFormatPower=cellPdcchCo4CceOtherFormatPower, bfdEntry=bfdEntry, cellNetTac=cellNetTac, plsfn7Prb91RIPAvg=plsfn7Prb91RIPAvg, plsfn2Prb59RIPAvg=plsfn2Prb59RIPAvg, drbBurstDataThpDLQci8=drbBurstDataThpDLQci8, ipAddrRowStatus=ipAddrRowStatus, cellUtraFreqThreshxLow=cellUtraFreqThreshxLow, hoSuccPrepOutIntraFreqS1PartialHandover=hoSuccPrepOutIntraFreqS1PartialHandover, cellGeranFreqNccPermitted=cellGeranFreqNccPermitted, equipFriendName=equipFriendName, erabEstabInitFailNbrMultipleErabId=erabEstabInitFailNbrMultipleErabId)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", plsfn3Prb47RIPAvg=plsfn3Prb47RIPAvg, topoRHUBOfp1AccessOfpPortNo=topoRHUBOfp1AccessOfpPortNo, cellAdjEutraCellTable=cellAdjEutraCellTable, plsfn8Prb96RIPAvg=plsfn8Prb96RIPAvg, fcPdschPwrGap=fcPdschPwrGap, hlGlobalTestSwitchOldtoNewBSSValueOnlyTag=hlGlobalTestSwitchOldtoNewBSSValueOnlyTag, phyULMaxNLPRB46=phyULMaxNLPRB46, plsfn5Prb60RIPAvg=plsfn5Prb60RIPAvg, atuGoldUeIMSI32=atuGoldUeIMSI32, raeBmIndicatFreq=raeBmIndicatFreq, phyCfgHighSpeedFreqShiftThr=phyCfgHighSpeedFreqShiftThr, phyCfgPucchExTendCpFmt1ActiveThred5Ant=phyCfgPucchExTendCpFmt1ActiveThred5Ant, amrDlVoipPacketNb0=amrDlVoipPacketNb0, e1LinkRxHcsErrs=e1LinkRxHcsErrs, erabEstabAddSuccNbrQci5=erabEstabAddSuccNbrQci5, extendDrbSecondarySendRlcCfgId=extendDrbSecondarySendRlcCfgId, phyULMaxNLPRB71=phyULMaxNLPRB71, topoRRUTRxConstSwitch=topoRRUTRxConstSwitch, acCfgTable=acCfgTable, caSCellDeactivationTimer=caSCellDeactivationTimer, iubIPPathEntry=iubIPPathEntry, raeParamRowStatus=raeParamRowStatus, erabNormRelEnbNbrQci2=erabNormRelEnbNbrQci2, emHumidityEntry=emHumidityEntry, hoAttOutExecIntraFreqX2=hoAttOutExecIntraFreqX2, cellGeranFreqCellReselectionPriorityFlag=cellGeranFreqCellReselectionPriorityFlag, anrNotiAdjRelationIdx=anrNotiAdjRelationIdx, dlCAPwrDelta4Bf2SfbcInTm8=dlCAPwrDelta4Bf2SfbcInTm8, saalSscopMaxSTAT=saalSscopMaxSTAT, reservedCellL1Para6=reservedCellL1Para6, e1LinkImaFeLif=e1LinkImaFeLif, cellCdmaBandClassInfoThreshxLow=cellCdmaBandClassInfoThreshxLow, erabRelProcByHOEntry=erabRelProcByHOEntry, peripheralSoftwareFilePackVendorIndex=peripheralSoftwareFilePackVendorIndex, a2RptThresholdRsrq=a2RptThresholdRsrq, rrcActiveMeanNbrPCellDl2CC=rrcActiveMeanNbrPCellDl2CC, rlcPreset36=rlcPreset36, swFileIndex=swFileIndex, atuDlDataRateThr=atuDlDataRateThr, erabEstabAddFailNbrQci2Mme=erabEstabAddFailNbrQci2Mme, extendDrbSecondaryPdcpCfgId=extendDrbSecondaryPdcpCfgId, rruBorrowFromScellPrbTotUlTF=rruBorrowFromScellPrbTotUlTF, rruOptTransIndex=rruOptTransIndex, clkSrcStatus=clkSrcStatus, topoRRULocalOscillationState3=topoRRULocalOscillationState3, adjeNBMmeGroupId16=adjeNBMmeGroupId16, macNbrTbDLRank5=macNbrTbDLRank5, topoRHUBAccessPhase=topoRHUBAccessPhase, dlCAPwrCchDownCCeUpPower8to4=dlCAPwrCchDownCCeUpPower8to4, atuVipUserIoTup=atuVipUserIoTup, topoRHUBLocation=topoRHUBLocation, plsfn6Prb28RIPAvg=plsfn6Prb28RIPAvg, macTestSwitchInfoVIPScheduleSwitch=macTestSwitchInfoVIPScheduleSwitch, omTestPpcTskFltSwitch=omTestPpcTskFltSwitch, atuParaTable=atuParaTable, dlCAPwrMaxPowerMargin=dlCAPwrMaxPowerMargin, mimoPerformanceRowStatus=mimoPerformanceRowStatus, sndRlcPollByte=sndRlcPollByte, lbc40FcTable=lbc40FcTable, cacPositionRowStatus=cacPositionRowStatus, drbPdcpSduBitLenUlQci7=drbPdcpSduBitLenUlQci7, anrNotiMeasType=anrNotiMeasType, contextAttRelMMENbrUELost=contextAttRelMMENbrUELost, spsOptmzNoPktRptThr=spsOptmzNoPktRptThr, raeAntennaArrayNo=raeAntennaArrayNo, erabRelAttNbrQci9=erabRelAttNbrQci9, plsfn1Prb41RIPAvg=plsfn1Prb41RIPAvg, ueAdaptivePrbNum=ueAdaptivePrbNum, antUseingWeightPhase4=antUseingWeightPhase4, alarmCauseType=alarmCauseType, pdcpUlAirSduSendTotalNumberQci3=pdcpUlAirSduSendTotalNumberQci3, hlTestSwitchSCellRsrpThr=hlTestSwitchSCellRsrpThr, irathoFailPrepIncGprsCacFailure=irathoFailPrepIncGprsCacFailure, phyCfgScramUePower=phyCfgScramUePower, erabRelEnbNbrQci1RadioInterfaceFailure=erabRelEnbNbrQci1RadioInterfaceFailure, plsfn2Prb62RIPAvg=plsfn2Prb62RIPAvg, topoRRUCheckActiveAlarmTrigger=topoRRUCheckActiveAlarmTrigger, b1TimetoTrig=b1TimetoTrig, eventGeneralEvent=eventGeneralEvent, phyPuschPowerControlSnrThre=phyPuschPowerControlSnrThre, cellAcBarList1ForVoice=cellAcBarList1ForVoice, s1PathSwichFail=s1PathSwichFail, macTestSwitchInfoUlDelAckPrbSwitch=macTestSwitchInfoUlDelAckPrbSwitch, fcDTXPowerControlDelay=fcDTXPowerControlDelay, plADICellSelectQRxlevMin=plADICellSelectQRxlevMin, plsfn8Prb72RIPAvg=plsfn8Prb72RIPAvg, mbmsRadioFrmAllcPeriod=mbmsRadioFrmAllcPeriod, radioCarrierEntry=radioCarrierEntry, pdcpSduSendTotalDateLenQci7=pdcpSduSendTotalDateLenQci7, macCaActivePrbPCellUl=macCaActivePrbPCellUl, plsfn9Prb37RIPAvg=plsfn9Prb37RIPAvg, erabEstabInitFailNbrQci1Mme=erabEstabInitFailNbrQci1Mme, plsfn0Prb83RIPAvg=plsfn0Prb83RIPAvg, boardAdministrativeState=boardAdministrativeState, aprelatedOriginCounter=aprelatedOriginCounter, softwarePackTable=softwarePackTable, configFileRelyMIBVesion=configFileRelyMIBVesion, netSetRRUPortRETAntRCUNo=netSetRRUPortRETAntRCUNo, ulPwrDeltaTXDoffsetPUCCHFormat1a1bR10=ulPwrDeltaTXDoffsetPUCCHFormat1a1bR10, macTestSwitchInfoScrambleDeltaPower=macTestSwitchInfoScrambleDeltaPower, equipStartupNotiInetAddrType=equipStartupNotiInetAddrType, plsfn1Prb15RIPAvg=plsfn1Prb15RIPAvg, erabRelMmeNbrUserInactivity=erabRelMmeNbrUserInactivity, macDownlinkMuMiMoMcsBackoff5=macDownlinkMuMiMoMcsBackoff5, macTestSwitchInfoSrsType1Switch=macTestSwitchInfoSrsType1Switch, enbCpuUsageStat=enbCpuUsageStat, topoRRUTemperature=topoRRUTemperature, saalConnRxBgRejPdus=saalConnRxBgRejPdus, drxQciEntry=drxQciEntry, qolPeerIPAddressType=qolPeerIPAddressType, chacLcId=chacLcId, cellBoardLogCoreIndex=cellBoardLogCoreIndex, saalConnRxSdPdus=saalConnRxSdPdus, plsfn3Prb39RIPAvg=plsfn3Prb39RIPAvg, lcAcBarTimeForMoc2=lcAcBarTimeForMoc2, mrLteNcMroOptSwitch=mrLteNcMroOptSwitch, fcHichDlpcSwitch=fcHichDlpcSwitch, hsdpaAlgorithmTable=hsdpaAlgorithmTable, pwdMinLength=pwdMinLength, ethCongestThreshold=ethCongestThreshold, plsfn5Prb83RIPAvg=plsfn5Prb83RIPAvg, erabRelSuccNbrQci3=erabRelSuccNbrQci3, plsfn3Prb72RIPAvg=plsfn3Prb72RIPAvg, macOctDlMassiveMimoSM4=macOctDlMassiveMimoSM4, topoRRUCheckActiveAlarmNo=topoRRUCheckActiveAlarmNo, rlcPreset20=rlcPreset20, mroNotiAdjCellPlmnMcc=mroNotiAdjCellPlmnMcc, pdcpVideoLargePkgTH=pdcpVideoLargePkgTH, saalConnTxErAkPdus=saalConnTxErAkPdus, drxQciShortFlag=drxQciShortFlag, timeSlotTypeNeighCell6=timeSlotTypeNeighCell6, eueTimerN310=eueTimerN310, adjCellECGIRowStatus=adjCellECGIRowStatus, localCarrierHsupaUsedBRUNum=localCarrierHsupaUsedBRUNum, macNbrRbDlMassiveMimoSM12=macNbrRbDlMassiveMimoSM12, sigSctpHearbeatReq=sigSctpHearbeatReq, timeSlotTypeCellId=timeSlotTypeCellId, atuGoldUeIMSI35=atuGoldUeIMSI35, antWeightPhase1=antWeightPhase1, raeBmIndicatTable=raeBmIndicatTable, saalConnTxBgAkPdus=saalConnTxBgAkPdus, plsfn8Prb86RIPAvg=plsfn8Prb86RIPAvg, plsfn0Prb17RIPAvg=plsfn0Prb17RIPAvg, plsfn6Prb49RIPAvg=plsfn6Prb49RIPAvg, adjeNBMmeGroupId9=adjeNBMmeGroupId9, hcDirectedHCTag=hcDirectedHCTag, macTestSwitchInfoHoMsg2ICIC=macTestSwitchInfoHoMsg2ICIC, mrMroueFileReq=mrMroueFileReq, hoFailPrepOutInterFreqX2NoRsp=hoFailPrepOutInterFreqX2NoRsp, cellSelectPmax=cellSelectPmax, hoOutAttIntraFreqLoadBalance=hoOutAttIntraFreqLoadBalance, erabNbrExistQCI7=erabNbrExistQCI7, remoteRadioUnit=remoteRadioUnit, gsmCellEntry=gsmCellEntry, irathoAttPrepIncGprs=irathoAttPrepIncGprs, alarmNotifications=alarmNotifications, phyULMeanNLPRB00=phyULMeanNLPRB00, hoOutFailPingpong=hoOutFailPingpong, amrUlVoipPacketNb2=amrUlVoipPacketNb2, plUsrLogUlDataSaveTimes=plUsrLogUlDataSaveTimes, emHumidityRowStatus=emHumidityRowStatus, hoOutFailTooLateType2=hoOutFailTooLateType2, dlCAPwrTargetSinr4Cce2=dlCAPwrTargetSinr4Cce2, cmdAuthorizationRowStatus=cmdAuthorizationRowStatus, e1LinkRxIcpOffset=e1LinkRxIcpOffset, hsdpaCongestCtrlRowStatus=hsdpaCongestCtrlRowStatus, plsfn3Prb34RIPAvg=plsfn3Prb34RIPAvg, hoSuccOutInterFreqInterCellIntraEnb=hoSuccOutInterFreqInterCellIntraEnb, phyULMaxNLPRB44=phyULMaxNLPRB44, spsOptmzUpSpsActiveMcsLowThr=spsOptmzUpSpsActiveMcsLowThr, hsdpaPFRowStatus=hsdpaPFRowStatus, eNBUnavailableDuring=eNBUnavailableDuring, nbapHsupaCarrierPriority=nbapHsupaCarrierPriority, cellCompanyVideoAiqiyiVideoNum=cellCompanyVideoAiqiyiVideoNum, rrcLpmCaseRelP6=rrcLpmCaseRelP6, hoFailPrepIncIntraFreqS1Tpc=hoFailPrepIncIntraFreqS1Tpc, a3RptQuantity=a3RptQuantity, plsfn8Prb24RIPAvg=plsfn8Prb24RIPAvg, macTestSwitchInfoAlarmIndex=macTestSwitchInfoAlarmIndex, activeAlarmRowStatus=activeAlarmRowStatus, phrDlPathlossChange=phrDlPathlossChange, macNbrTbDlMassiveMimoSM16=macNbrTbDlMassiveMimoSM16, opFuncDrxFlag=opFuncDrxFlag, hlTestSwitchlmcMlbAlgorithmTagTLS=hlTestSwitchlmcMlbAlgorithmTagTLS, softLicenseUlPrbNum=softLicenseUlPrbNum, invRruVendorName=invRruVendorName, macCaActiveNbrSCellUl=macCaActiveNbrSCellUl, plsfn4Prb18RIPAvg=plsfn4Prb18RIPAvg, carrierRuEntry=carrierRuEntry, dryContactTable=dryContactTable, hsupaSpsSchedResrcBlkTsCfgIndex=hsupaSpsSchedResrcBlkTsCfgIndex, cellCounterOverturnValue=cellCounterOverturnValue, s1InterfaceIPStatRowStatus=s1InterfaceIPStatRowStatus, macUpAlgorithmCqiFirstBler=macUpAlgorithmCqiFirstBler, pathIndex=pathIndex, plsfn6Prb84RIPAvg=plsfn6Prb84RIPAvg, equipEnvironmentMonitorMode=equipEnvironmentMonitorMode, cellAdjGeranCellBasestationColourCode=cellAdjGeranCellBasestationColourCode, netSetRRUPortSubtoAntPathNoInLocalCell=netSetRRUPortSubtoAntPathNoInLocalCell, plsfn4Prb70RIPAvg=plsfn4Prb70RIPAvg, cellAcBarList3ForVideo=cellAcBarList3ForVideo, hlTestSwitchQciAppointFre=hlTestSwitchQciAppointFre, hsdpaSFCEFACHBLThresholdLow=hsdpaSFCEFACHBLThresholdLow, softLicenseDlBalanceSwitch=softLicenseDlBalanceSwitch, cpuContrlAlgorithmTag=cpuContrlAlgorithmTag, hlTestSwitchVipUePa=hlTestSwitchVipUePa, calAcPeriod=calAcPeriod, syslogServerControlTable=syslogServerControlTable, alarmActUpload=alarmActUpload, imaGrpGtsmState=imaGrpGtsmState, lbcAdjCellDlS1TnlTh3=lbcAdjCellDlS1TnlTh3, boardPcbVersion=boardPcbVersion, netAntArrayRowStatus=netAntArrayRowStatus, erabEstabInitFailNbrQci2Transport=erabEstabInitFailNbrQci2Transport, apCAndRCheckOfCellEntry=apCAndRCheckOfCellEntry, sfn2avgripEntry=sfn2avgripEntry, pdcpUlAirSduDropTotalNumberQci6=pdcpUlAirSduDropTotalNumberQci6, hoFailPrepIncIntraFreqX2CellOverLoad=hoFailPrepIncIntraFreqX2CellOverLoad, pdcpDlAirSduDropTotalNumberQci8=pdcpDlAirSduDropTotalNumberQci8, rlcPreset19=rlcPreset19, reservedENBL2Para2=reservedENBL2Para2, cellCountMSBcheckValue=cellCountMSBcheckValue, adjCellECGIMeasSwitch=adjCellECGIMeasSwitch, macPhrIndex62=macPhrIndex62, reservedCellL1Para7=reservedCellL1Para7, plsfn7Prb37RIPAvg=plsfn7Prb37RIPAvg, plsfn8Prb93RIPAvg=plsfn8Prb93RIPAvg, cellReselIntraFreqTreselection=cellReselIntraFreqTreselection, lmcPucchTag=lmcPucchTag, plsfn6Prb80RIPAvg=plsfn6Prb80RIPAvg, contextAttReleNBNbrUELostTa=contextAttReleNBNbrUELostTa, hsdpaSFCMinThLow=hsdpaSFCMinThLow, omTestAlarmRpsSwitch=omTestAlarmRpsSwitch, compPerformanceEntry=compPerformanceEntry, erabModQoSAttNbrQci5=erabModQoSAttNbrQci5, macUpAlgorithmUlQCI2FirstBler=macUpAlgorithmUlQCI2FirstBler, rrcConnEstabProcLcId=rrcConnEstabProcLcId, macSRBTbDLRank6=macSRBTbDLRank6, topoRRUBandCapBandWidth=topoRRUBandCapBandWidth, alarmBox=alarmBox, pdcpThrpTimeDLQci7=pdcpThrpTimeDLQci7, caSCellSINRRelativeThr=caSCellSINRRelativeThr, hoFailPrepIncIntraFreqX2SecurityFailure=hoFailPrepIncIntraFreqX2SecurityFailure, emTheftTable=emTheftTable, plsfn1Prb05RIPAvg=plsfn1Prb05RIPAvg, coolingFanHighSpeedThreshold=coolingFanHighSpeedThreshold, erabEstabAddFailNbrRadioInterfaceFailure=erabEstabAddFailNbrRadioInterfaceFailure, b2MeasFilterCoeffUtra=b2MeasFilterCoeffUtra, cqiSimultaneousAckNackAndCqi=cqiSimultaneousAckNackAndCqi, drbNbrScheTimesSfn9=drbNbrScheTimesSfn9, cellCdma2000ParaLcId=cellCdma2000ParaLcId, plRipLogFtpServerPassword=plRipLogFtpServerPassword, icicCenterUeDlPrbSchedPri1=icicCenterUeDlPrbSchedPri1, atuDlPeriodThr=atuDlPeriodThr)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", plsfn5Prb53RIPAvg=plsfn5Prb53RIPAvg, lmcMlbMrEstimatePrd=lmcMlbMrEstimatePrd, drbRowStatus=drbRowStatus, atu=atu, nbrschetimesulMcs8=nbrschetimesulMcs8, cellCdma2000ParaTable=cellCdma2000ParaTable, lcGrpId=lcGrpId, timerX2RLOCoverall=timerX2RLOCoverall, cellAdjGeranNetworkControlOrder=cellAdjGeranNetworkControlOrder, Unsigned32Array=Unsigned32Array, macPreset10=macPreset10, plsfn2Prb35RIPAvg=plsfn2Prb35RIPAvg, cellInterFreq=cellInterFreq, dlCompLcId=dlCompLcId, plRiaCharactSeqRptSwitch=plRiaCharactSeqRptSwitch, plsfn2Prb41RIPAvg=plsfn2Prb41RIPAvg, procOperationalState=procOperationalState, carrierUpTs4CofStatus=carrierUpTs4CofStatus, bfdEchoInterval=bfdEchoInterval, pdcpVideoKeyWordsEntry=pdcpVideoKeyWordsEntry, airCondHeatingState=airCondHeatingState, pdcpUpOctUlEdgeUser=pdcpUpOctUlEdgeUser, erabInitEstabTimeMean=erabInitEstabTimeMean, amrDlVoipPacketWb3=amrDlVoipPacketWb3, s1ResetByMMENas=s1ResetByMMENas, plsfn2Prb37RIPAvg=plsfn2Prb37RIPAvg, nbrscheprbdlMcs15=nbrscheprbdlMcs15, boardSwapControl=boardSwapControl, chacAcBarTag=chacAcBarTag, pdschEntry=pdschEntry, rhubEtherIndex=rhubEtherIndex, ulCompConfigSwitch=ulCompConfigSwitch, tdsSysBbuOmLogRecSwitch=tdsSysBbuOmLogRecSwitch, traceTaskRowStatus=traceTaskRowStatus, hoSuccOutIntraFreqOMC=hoSuccOutIntraFreqOMC, lmcDlPrbRestroeTh=lmcDlPrbRestroeTh, eutraAdjCellMeasEntry=eutraAdjCellMeasEntry, equipDescription=equipDescription, macDownlinkMuMiMoMcsBackoff10=macDownlinkMuMiMoMcsBackoff10, eventA2Entry=eventA2Entry, netLcLocalCellId=netLcLocalCellId, pdcpUlAirSduSendTotalNumberQci1=pdcpUlAirSduSendTotalNumberQci1, remoteLmtRouteRowStatus=remoteLmtRouteRowStatus, rruPrbTotDlEnb=rruPrbTotDlEnb, ipThpDlLcId=ipThpDlLcId, plsfn6Prb44RIPAvg=plsfn6Prb44RIPAvg, alarmBoxEntry=alarmBoxEntry, rrcAdmissionConnTot=rrcAdmissionConnTot, cellShedSib4Period=cellShedSib4Period, fcPeriodofOuterLoopULSC=fcPeriodofOuterLoopULSC, pucchReptFactor=pucchReptFactor, topoRRUSlaveBootUpgradeSwitch=topoRRUSlaveBootUpgradeSwitch, cellGeranFreqExplicitArfcns23=cellGeranFreqExplicitArfcns23, plsfn4Prb50RIPAvg=plsfn4Prb50RIPAvg, pmExpressionCounterGroup=pmExpressionCounterGroup, antWeightAmplitude6=antWeightAmplitude6, hoHoPreAttLB=hoHoPreAttLB, baseBandCarrierRadioPathRxStatus=baseBandCarrierRadioPathRxStatus, csirsInfoSwitch=csirsInfoSwitch, tdsNetLcLocalCellGrpId=tdsNetLcLocalCellGrpId, nodeBInfo=nodeBInfo, macUpMuMiMoMcsBackOff19=macUpMuMiMoMcsBackOff19, ethPortDataStatTable=ethPortDataStatTable, lmcAdjCellNum=lmcAdjCellNum, omTestHeartbeatSwitch=omTestHeartbeatSwitch, rruCalcPathPoutTxNom=rruCalcPathPoutTxNom, hsdpaHarqRvQpsk2New=hsdpaHarqRvQpsk2New, dlPATTimerupdatepower=dlPATTimerupdatepower, rruTypePortRowStatus=rruTypePortRowStatus, ccRowStatus=ccRowStatus, cellSpeCalCfgDwptsMcsSingleLimit=cellSpeCalCfgDwptsMcsSingleLimit, plsfn4Prb23RIPAvg=plsfn4Prb23RIPAvg, topoRHUBFirmwareVersion=topoRHUBFirmwareVersion, macOctDlMassiveMimoSM15=macOctDlMassiveMimoSM15, erabHoFailQci4=erabHoFailQci4, mrQCI5PLRDLCorrection=mrQCI5PLRDLCorrection, rruCompSfnDl=rruCompSfnDl, peripheralPackPlanDownloadDirectory=peripheralPackPlanDownloadDirectory, plADICurrentStatus=plADICurrentStatus, plsfn9Prb78RIPAvg=plsfn9Prb78RIPAvg, netRRUTypeIndex=netRRUTypeIndex, macPhrIndex35=macPhrIndex35, tbSRBInitUl=tbSRBInitUl, mrUeRxTxTimeDiff=mrUeRxTxTimeDiff, cellNetRowStatus=cellNetRowStatus, hsupaCommSchedEntry=hsupaCommSchedEntry, amrDlVoipPacketWb7=amrDlVoipPacketWb7, macBlerRowStatus=macBlerRowStatus, pdcpThrpTimeUL=pdcpThrpTimeUL, huspaMBRCfgSwitch=huspaMBRCfgSwitch, erabActiveMaxNbrUL=erabActiveMaxNbrUL, erabNbrMaxEstabQci3=erabNbrMaxEstabQci3, phyNbrCqi10=phyNbrCqi10, phyULMaxNLPRB26=phyULMaxNLPRB26, timerAnrRemTimer=timerAnrRemTimer, pathVpi=pathVpi, programManagement=programManagement, arpStatusIndex=arpStatusIndex, netIROfpPortShelfNo=netIROfpPortShelfNo, phyULMaxNLPRB24=phyULMaxNLPRB24, rruPathRowStatus=rruPathRowStatus, drbBurstDataThpULQci8=drbBurstDataThpULQci8, srsLcId=srsLcId, plsfn2Prb68RIPAvg=plsfn2Prb68RIPAvg, rbAttEstabQci7=rbAttEstabQci7, perfOfMacForTestTable=perfOfMacForTestTable, plsfn1Prb37RIPAvg=plsfn1Prb37RIPAvg, chacRowStatus=chacRowStatus, pdcpBbuSourceEntry=pdcpBbuSourceEntry, lmcPucchThreshold=lmcPucchThreshold, sfn3avgripRowStatus=sfn3avgripRowStatus, drbUEActiveUlQci8=drbUEActiveUlQci8, lcAcProbFactorForSignal3=lcAcProbFactorForSignal3, sdPeakAverDiffRelThres=sdPeakAverDiffRelThres, detection=detection, atuUlPeriodThr=atuUlPeriodThr, plsfn2Prb86RIPAvg=plsfn2Prb86RIPAvg, plsfn0Prb92RIPAvg=plsfn0Prb92RIPAvg, rrcFailConnEstabCellOverLoad=rrcFailConnEstabCellOverLoad, nbrschetimesulMcs11=nbrschetimesulMcs11, apHoInteractWithErabDelInterNBFail=apHoInteractWithErabDelInterNBFail, e1LinkE1CRCErrCnt=e1LinkE1CRCErrCnt, amrDlVoipPacketNb1=amrDlVoipPacketNb1, topoRRUHardwareType=topoRRUHardwareType, recvRlcTAmReordering=recvRlcTAmReordering, cellInterFreqPresenceAntePort1=cellInterFreqPresenceAntePort1, rrcConnReEstabInterEnbFailTerminalNoRsp=rrcConnReEstabInterEnbFailTerminalNoRsp, erabEstabAddFailNbrInteractionWithOtherProc=erabEstabAddFailNbrInteractionWithOtherProc, traceLiscenceCfg=traceLiscenceCfg, plADIDetectNum=plADIDetectNum, plsfn1Prb65RIPAvg=plsfn1Prb65RIPAvg, clkSrcDelayValue=clkSrcDelayValue, topoRRUCheckActiveAlarmValue=topoRRUCheckActiveAlarmValue, imaGrpVersion=imaGrpVersion, plsfn7Prb17RIPAvg=plsfn7Prb17RIPAvg, phyTA9=phyTA9, airCondOuterFanAlarmState=airCondOuterFanAlarmState, loggedMdtTac=loggedMdtTac, alarmNotiProblemSourceObject=alarmNotiProblemSourceObject, baseBandCarrierTxPath8CalFactorI=baseBandCarrierTxPath8CalFactorI, rruPathTable=rruPathTable, pagingPagUu=pagingPagUu, plReceivePowerIndex19=plReceivePowerIndex19, topoAntArrayNo=topoAntArrayNo, ethPhyPortId=ethPhyPortId, rruPathRRUGsmCellOutputPwr=rruPathRRUGsmCellOutputPwr, rrcEffectiveConnSum=rrcEffectiveConnSum, topoRRURunningCellWorkMode=topoRRURunningCellWorkMode, carrierUpTs1CofStatus=carrierUpTs1CofStatus, rruPrbDlRank2UsedNum=rruPrbDlRank2UsedNum, emHumidity=emHumidity, plsfn6Prb65RIPAvg=plsfn6Prb65RIPAvg, syslogServerSendSeverity=syslogServerSendSeverity, cellSoftLicenseCombineEnhancedCell=cellSoftLicenseCombineEnhancedCell, erabRelEnbNbrInterRATRedirection=erabRelEnbNbrInterRATRedirection, sdcRowStatus=sdcRowStatus, dlCompMode=dlCompMode, topoRRUBandCap1P4CarrierNum=topoRRUBandCap1P4CarrierNum, managerTable=managerTable, s1ResetByeNBUnspecifiedFailure=s1ResetByeNBUnspecifiedFailure, remoteHub=remoteHub, macMimoSdmSwitch=macMimoSdmSwitch, lbc40FcDlLowestUePrbUsageTh=lbc40FcDlLowestUePrbUsageTh, peripheralPackPlanUpgradeResult3=peripheralPackPlanUpgradeResult3, plsfn8Prb04RIPAvg=plsfn8Prb04RIPAvg, plsfn7Prb71RIPAvg=plsfn7Prb71RIPAvg, voicePakStatisticLcId=voicePakStatisticLcId, macOctDlMassiveMimoSM14=macOctDlMassiveMimoSM14, plsfn0Prb99RIPAvg=plsfn0Prb99RIPAvg, eNBEnergyConservationStrategy=eNBEnergyConservationStrategy, cellAdjCdma2000CellType=cellAdjCdma2000CellType, hsupaCommSchedRcvRucchSchedTh=hsupaCommSchedRcvRucchSchedTh, cellAdjCellIdGeran=cellAdjCellIdGeran, boardTempStatTemperature=boardTempStatTemperature, dlCAPwrCceUsageTh1High=dlCAPwrCceUsageTh1High, rrcPresetPerformanceLcId=rrcPresetPerformanceLcId, lcConfigCellBlockTime=lcConfigCellBlockTime, cellAdjCellLcId=cellAdjCellLcId, plsfn4Prb14RIPAvg=plsfn4Prb14RIPAvg, anrMeasEcnoTh=anrMeasEcnoTh, e1LinkFrmErrCnt=e1LinkFrmErrCnt, nodeBTimeslotOffsetMode=nodeBTimeslotOffsetMode, erabEstabInitFailNbrQci1InterWithOtherProc=erabEstabInitFailNbrQci1InterWithOtherProc, plsfn4Prb05RIPAvg=plsfn4Prb05RIPAvg, srsCycshift1=srsCycshift1, ueInfoStatRowStatus=ueInfoStatRowStatus, cqiPucch2Index11=cqiPucch2Index11, cellAntennaWeightTable=cellAntennaWeightTable, pdcpVideoKeyWordsRowStatus=pdcpVideoKeyWordsRowStatus, plsfn2Prb00RIPAvg=plsfn2Prb00RIPAvg, plReceivePowerIndex5=plReceivePowerIndex5, atuRowStatus=atuRowStatus, nbrscheprbdlMcs6=nbrscheprbdlMcs6, topoRRUBootMainStatus=topoRRUBootMainStatus, macNbrTbUlQci2=macNbrTbUlQci2, atuHoBasedRec=atuHoBasedRec, plsfn4Prb15RIPAvg=plsfn4Prb15RIPAvg, ofpPortCommInfo=ofpPortCommInfo, phyULMaxNLPRB01=phyULMaxNLPRB01, pdcpPreset22=pdcpPreset22, raeRCUNoOnRRU=raeRCUNoOnRRU, boardTimeslotoffset=boardTimeslotoffset, plsfn3Prb66RIPAvg=plsfn3Prb66RIPAvg, cellSelectRowStatus=cellSelectRowStatus, phyULMeanRIP=phyULMeanRIP, plsfn7Prb67RIPAvg=plsfn7Prb67RIPAvg, ruePdcpSduBitLenDlQci251=ruePdcpSduBitLenDlQci251, ulPwrLcId=ulPwrLcId, mrMROPLRFileSucc=mrMROPLRFileSucc, mmeCfgPlmnMcc=mmeCfgPlmnMcc, hcJudgeType=hcJudgeType, erabThpTimeUlQci8=erabThpTimeUlQci8, eNBMroAlarmSwitch=eNBMroAlarmSwitch, eueMeasCellRowStatus=eueMeasCellRowStatus, saalConnNmbRxBufs=saalConnNmbRxBufs, plsfn5Prb75RIPAvg=plsfn5Prb75RIPAvg, plsfn2Prb70RIPAvg=plsfn2Prb70RIPAvg, hoFailIncInterFreqInterCellIntraEnbDrbID=hoFailIncInterFreqInterCellIntraEnbDrbID, alarmStatefulAlarmSends=alarmStatefulAlarmSends, topoRHUBNextResetTimer=topoRHUBNextResetTimer, antWeightLibIndex=antWeightLibIndex, iubOFPortPhyPortId=iubOFPortPhyPortId, fcUlscForgettingFactorforMean=fcUlscForgettingFactorforMean, erabThpTimeUlQci1=erabThpTimeUlQci1, plsfn2Prb46RIPAvg=plsfn2Prb46RIPAvg, macTestSwitchSrbDlScheNumSub0=macTestSwitchSrbDlScheNumSub0, plADIMacTestSwitchInfoUlLimitSrbMcsSwitch=plADIMacTestSwitchInfoUlLimitSrbMcsSwitch, cellGeranFreqPMaxGeranFlag=cellGeranFreqPMaxGeranFlag, raeap=raeap, eNBMBSFNShutdownLowThreshold=eNBMBSFNShutdownLowThreshold, macOctDlMassiveMimoSM1=macOctDlMassiveMimoSM1, cellAdjCdma2000FreqLcId=cellAdjCdma2000FreqLcId, hlTestSwitchNormalUIProportion=hlTestSwitchNormalUIProportion, rbEstabProcLcId=rbEstabProcLcId, raeWeightingFactorsSubIndexNo=raeWeightingFactorsSubIndexNo, hsdpaCommSchedNode=hsdpaCommSchedNode, macDownAlgBaseParaTable=macDownAlgBaseParaTable, hoSuccOutIntraEnbQuality=hoSuccOutIntraEnbQuality, saalConnStatus=saalConnStatus, airCondOverTemperatureLimit=airCondOverTemperatureLimit, a4RptAmount=a4RptAmount, srDsrTransMax=srDsrTransMax, macSwitchTestInfoUlPrescheAllPrbLimit=macSwitchTestInfoUlPrescheAllPrbLimit, plsfn5Prb17RIPAvg=plsfn5Prb17RIPAvg, plReceivePowerIndex3=plReceivePowerIndex3, csirsLcId=csirsLcId, cellAcBarList2ForSigalling=cellAcBarList2ForSigalling, pdschPa=pdschPa, cqiPucch2Index4=cqiPucch2Index4, macSRBTbDlTm3=macSRBTbDlTm3, erabModQoSSuccNbrQci7=erabModQoSSuccNbrQci7, macTestSwitchInfoCchScramblePeriod=macTestSwitchInfoCchScramblePeriod, cellIotNotiCellId=cellIotNotiCellId, macNbrAckdTbUl=macNbrAckdTbUl)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", pagingProcEntry=pagingProcEntry, airCondModel=airCondModel, lcAcBarTimeForSignal2=lcAcBarTimeForSignal2, rrcConnReleaseRedirectionTo3GNoMea=rrcConnReleaseRedirectionTo3GNoMea, licenseAuthorization=licenseAuthorization, lmcResStateUpdatePeriod=lmcResStateUpdatePeriod, cellAntWeightAmplitude17=cellAntWeightAmplitude17, handOverIntraCellLcId=handOverIntraCellLcId, managerKickTrigger=managerKickTrigger, syslogConsoleControlTable=syslogConsoleControlTable, phyULMeanNLPRB82=phyULMeanNLPRB82, ofPortRowStatus=ofPortRowStatus, plsfn9Prb83RIPAvg=plsfn9Prb83RIPAvg, atuVoiceTendcellFreq=atuVoiceTendcellFreq, rruTypePortSupportAbandTdsCarrierNum=rruTypePortSupportAbandTdsCarrierNum, hsdpaSFCThHighDelta=hsdpaSFCThHighDelta, tbNbrSuccInitDl64QAM=tbNbrSuccInitDl64QAM, plsfn3Prb04RIPAvg=plsfn3Prb04RIPAvg, nbrscheprbdlMcs5=nbrscheprbdlMcs5, macPhrIndex21=macPhrIndex21, raeEquipLongitude=raeEquipLongitude, anrMeasRssiTh=anrMeasRssiTh, eNBTrafficTest=eNBTrafficTest, netRRUHubNo=netRRUHubNo, phichTable=phichTable, hsdpaCongestCtrlDeCongAlarmTh=hsdpaCongestCtrlDeCongAlarmTh, invShelfSerialNumber=invShelfSerialNumber, plRssiAvgC3=plRssiAvgC3, plsfn6Prb57RIPAvg=plsfn6Prb57RIPAvg, phyULMeanNLPRB13=phyULMeanNLPRB13, plsfn6Prb21RIPAvg=plsfn6Prb21RIPAvg, phyCfgSrsUePowerAnteSelectThre=phyCfgSrsUePowerAnteSelectThre, pdcpSduDropTotalDateLenQci9=pdcpSduDropTotalDateLenQci9, cellCdlTcpSwitch=cellCdlTcpSwitch, scheUEPerTTIRowStatus=scheUEPerTTIRowStatus, cellGeranFreqExplicitArfcns19=cellGeranFreqExplicitArfcns19, macschecfi3=macschecfi3, pdcpBbuSourceCoreIndex=pdcpBbuSourceCoreIndex, plReceivePowerUserIndex22=plReceivePowerUserIndex22, sfn8avgripLcId=sfn8avgripLcId, rrcHcCaseRelP4=rrcHcCaseRelP4, hsdpaHarqRv16Qam5New=hsdpaHarqRv16Qam5New, cellAdjGeranCellLAC=cellAdjGeranCellLAC, smallPacketCheckSwitch=smallPacketCheckSwitch, plPreamblePwrLcId=plPreamblePwrLcId, cellAddtionlSpecEmis=cellAddtionlSpecEmis, raeGeneralAdvanced=raeGeneralAdvanced, rueRRCConnReEstabSucc=rueRRCConnReEstabSucc, ipPathIpAddrIndex=ipPathIpAddrIndex, boardLedIndexOnBoard=boardLedIndexOnBoard, cellGeranFreqExplicitArfcns2=cellGeranFreqExplicitArfcns2, erabRelMmeNbrMiscellaneous=erabRelMmeNbrMiscellaneous, ulPwrSrsOffset=ulPwrSrsOffset, srbUlLoPriority=srbUlLoPriority, ipoaChRnc2NbScrMcr=ipoaChRnc2NbScrMcr, raMessageSizeGroupA=raMessageSizeGroupA, rrcLpmCaseRelP0=rrcLpmCaseRelP0, hoOutAttIntraFreqOMC=hoOutAttIntraFreqOMC, localCarrierFirstRxACKNum=localCarrierFirstRxACKNum, topoAntArrayTypeIndex=topoAntArrayTypeIndex, topoRRUAccessShelfNo=topoRRUAccessShelfNo, macNbrRbDlMassiveMimoSM7=macNbrRbDlMassiveMimoSM7, macUpAlgorithmDeltaCqiMax=macUpAlgorithmDeltaCqiMax, cellType=cellType, raeBeamBandAntArrayNo=raeBeamBandAntArrayNo, cellReselComSNonIntraSearchQ=cellReselComSNonIntraSearchQ, imaGrpRxDetectThreshold=imaGrpRxDetectThreshold, accessUserIndex=accessUserIndex, spsOptmzTable=spsOptmzTable, eueMeasCellNumCellChangeMedium=eueMeasCellNumCellChangeMedium, invRhubManufacturerData=invRhubManufacturerData, rrcLpmCaseRelP7=rrcLpmCaseRelP7, nodebBlockStateOccurTime=nodebBlockStateOccurTime, plsfn3Prb10RIPAvg=plsfn3Prb10RIPAvg, reservedENBL3Para5=reservedENBL3Para5, saalConnTxRsAkPdus=saalConnTxRsAkPdus, efdAlarmNo=efdAlarmNo, pdcpUpPktLossRateDlQci7Enb=pdcpUpPktLossRateDlQci7Enb, equipStartupNotiDataTypeIndicator=equipStartupNotiDataTypeIndicator, fileTransNotiNEID=fileTransNotiNEID, measGapLcId=measGapLcId, pdcpParaCfgTable=pdcpParaCfgTable, invRhubRowStatus=invRhubRowStatus, mbmsEntry=mbmsEntry, hoFailPrepOutX2QuaNoRRinTc=hoFailPrepOutX2QuaNoRRinTc, pdcpPreset25=pdcpPreset25, topoSetRRUPortPathNo=topoSetRRUPortPathNo, fileUpStartTime=fileUpStartTime, reservedCellL3Para6=reservedCellL3Para6, lbcAdjCellDlHardwardTh4=lbcAdjCellDlHardwardTh4, plsfn6Prb93RIPAvg=plsfn6Prb93RIPAvg, atuByIpAddr10=atuByIpAddr10, hsdpaHarqRvQpsk1=hsdpaHarqRvQpsk1, plsfn2Prb78RIPAvg=plsfn2Prb78RIPAvg, tdsNodeBSysRncIpAddrType=tdsNodeBSysRncIpAddrType, hoFailPrepIncInterFreqX2Srs=hoFailPrepIncInterFreqX2Srs, macPhrIndex41=macPhrIndex41, raeAlarmGetTrigger=raeAlarmGetTrigger, radioCarrierNo=radioCarrierNo, hsupaQosSDLMin=hsupaQosSDLMin, srvccAttOutGeranQuality=srvccAttOutGeranQuality, hsdpaCQIMFR=hsdpaCQIMFR, fcRxPowerFactor=fcRxPowerFactor, mrTaskSwitch=mrTaskSwitch, raPreambleInitRcvTargetPow=raPreambleInitRcvTargetPow, douAdjcHandOverProcedureEntry=douAdjcHandOverProcedureEntry, timerProtectReestablish=timerProtectReestablish, interRatLbParaTable=interRatLbParaTable, cellUlIotRTMonitorTaskEntry=cellUlIotRTMonitorTaskEntry, antWeightAmplitude1=antWeightAmplitude1, arpStatus=arpStatus, pdcpVideoCpuMaxThreshold=pdcpVideoCpuMaxThreshold, alarmNotiItfNCauseNo=alarmNotiItfNCauseNo, tbNbrDlErr=tbNbrDlErr, cellCompanyVideoNumEntry=cellCompanyVideoNumEntry, hsdpaEFACHSchedLcId=hsdpaEFACHSchedLcId, erabRelSuccNbrQci9=erabRelSuccNbrQci9, trafficCategoryDSCP=trafficCategoryDSCP, plsfn9Prb28RIPAvg=plsfn9Prb28RIPAvg, fcScchPwrGap=fcScchPwrGap, macTestSwitchDlAtuUlAckFirstBler=macTestSwitchDlAtuUlAckFirstBler, rlcPreset26=rlcPreset26, hoHoPreSuccRadio=hoHoPreSuccRadio, invAntennaArrayEntry=invAntennaArrayEntry, cellAntWeightLcId=cellAntWeightLcId, rrcAttConnEstabMoSignalling=rrcAttConnEstabMoSignalling, cellAntWeightSwitch=cellAntWeightSwitch, pdcpPreset11=pdcpPreset11, pdcpUpOctDlCentreUser=pdcpUpOctDlCentreUser, fileTransRowStatus=fileTransRowStatus, phyULMeanNLPRB04=phyULMeanNLPRB04, macNbrTbDLRank6=macNbrTbDLRank6, pdcpPreset24=pdcpPreset24, erabRelMmeNbrRadioNetworkLayer=erabRelMmeNbrRadioNetworkLayer, boardPowerManufacturer=boardPowerManufacturer, erabModQoSFailNbrTransResNotAvailable=erabModQoSFailNbrTransResNotAvailable, baseBandwidthShelfNo=baseBandwidthShelfNo, topoRRUCarrier20ULPowerValue=topoRRUCarrier20ULPowerValue, localCarrierHsdpaUsedBRUNum=localCarrierHsdpaUsedBRUNum, invRruVersionNumber=invRruVersionNumber, ofPortEntry=ofPortEntry, hsdpaHarqRv64Qam5=hsdpaHarqRv64Qam5, tdsLcCellExpectedCarrierNumA=tdsLcCellExpectedCarrierNumA, equipMIBContact=equipMIBContact, phyULMeanNLPRB53=phyULMeanNLPRB53, macSwitchTestInfoDl8BitsQamTls=macSwitchTestInfoDl8BitsQamTls, plsfn5Prb01RIPAvg=plsfn5Prb01RIPAvg, pdcpProfile0x0006Flag=pdcpProfile0x0006Flag, tdsLcCellBlockSwitch=tdsLcCellBlockSwitch, localCarrierNbrAckMacePdu=localCarrierNbrAckMacePdu, hsdpaCqiPwrCtrlLcd=hsdpaCqiPwrCtrlLcd, macBbuRlcCoreIndex=macBbuRlcCoreIndex, cellReselComRowStatus=cellReselComRowStatus, traceTaskId=traceTaskId, dlCAPwrCchChooseCceOptimizeLimit=dlCAPwrCchChooseCceOptimizeLimit, hsdpaCellSelectTable=hsdpaCellSelectTable, cellDwptsForUserDataFlag=cellDwptsForUserDataFlag, rrcCpmCaseRelP2=rrcCpmCaseRelP2, macNbrTbDlMassiveMimoSM1=macNbrTbDlMassiveMimoSM1, sdcEntry=sdcEntry, smallPacketAlgLcid=smallPacketAlgLcid, iubServiceTransportMode=iubServiceTransportMode, macSwitchInfoVoIPUeInactiveProhibitSwitch=macSwitchInfoVoIPUeInactiveProhibitSwitch, plsfn7Prb75RIPAvg=plsfn7Prb75RIPAvg, pmExpressionName=pmExpressionName, macDownlinkCqiPeriondMax=macDownlinkCqiPeriondMax, phyULMaxNLPRB45=phyULMaxNLPRB45, rrcCpmMeasCaseRelP6=rrcCpmMeasCaseRelP6, fcNotiType=fcNotiType, hsdpaHarqRvQpsk5=hsdpaHarqRvQpsk5, plUsrLogPucchCatchDataHarqProcNum=plUsrLogPucchCatchDataHarqProcNum, macTestSwitchInfoUpDownSubFLDownUeNumbpoi=macTestSwitchInfoUpDownSubFLDownUeNumbpoi, phyTA1=phyTA1, erabEstabInitFailNbrQci2RadioResNotAvailable=erabEstabInitFailNbrQci2RadioResNotAvailable, hsdpaCongestCtrlNode=hsdpaCongestCtrlNode, plsfn5Prb43RIPAvg=plsfn5Prb43RIPAvg, plsfn7Prb40RIPAvg=plsfn7Prb40RIPAvg, hsupaAlgorithmTable=hsupaAlgorithmTable, hsupaQosGamaMaxK=hsupaQosGamaMaxK, srbNbrScheTimesSfn8=srbNbrScheTimesSfn8, plsfn8PrbG6RIPMax=plsfn8PrbG6RIPMax, plsfn6Prb37RIPAvg=plsfn6Prb37RIPAvg, macNbrTbUlMassiveMimoSM7=macNbrTbUlMassiveMimoSM7, macTestSwitchInfoUlFlowCtrlSwitch=macTestSwitchInfoUlFlowCtrlSwitch, topoRHUBMainOfpNo=topoRHUBMainOfpNo, twampLocalPort=twampLocalPort, macCaActiveThrpTimeDL2CCTF=macCaActiveThrpTimeDL2CCTF, erabActiveMaxNbrULQci9=erabActiveMaxNbrULQci9, swPackPlanActivateIndicator=swPackPlanActivateIndicator, contextAttRelMMENbrRedirectionTowards1xRTT=contextAttRelMMENbrRedirectionTowards1xRTT, netLocalCellPowerCtrlTable=netLocalCellPowerCtrlTable, phyULMaxNLPRB50=phyULMaxNLPRB50, raeParamVerticalBand=raeParamVerticalBand, plsfn7Prb04RIPAvg=plsfn7Prb04RIPAvg, macCellCompSampNum=macCellCompSampNum, userHandoverDisplayTypeListTrigger=userHandoverDisplayTypeListTrigger, tdsNodeBSysE1LoopCheckSwitch=tdsNodeBSysE1LoopCheckSwitch, netLcRowStatus=netLcRowStatus, nbrschetimesdlMcs10=nbrschetimesdlMcs10, timeSlotTypeNeighCell30=timeSlotTypeNeighCell30, pdcpIPThroughputDlQci8=pdcpIPThroughputDlQci8, hcTag=hcTag, erabNbrHoIncQci6=erabNbrHoIncQci6, macCaActiveBurstDataThruPCellUl2CC=macCaActiveBurstDataThruPCellUl2CC, macSwitchTestInfoRohcOptSwitch=macSwitchTestInfoRohcOptSwitch, swPackTypeIndex=swPackTypeIndex, perfOfMacForTestLcId=perfOfMacForTestLcId, hsdpaCqiPwrCtrlDownStep=hsdpaCqiPwrCtrlDownStep, macTestSwitchUpScheOptMcsStaticsNum=macTestSwitchUpScheOptMcsStaticsNum, cellAdjEutraCellEARFCN=cellAdjEutraCellEARFCN, sjm1SichAcdThreshold=sjm1SichAcdThreshold, pdcpPresetPerformanceEntry=pdcpPresetPerformanceEntry, macPhrIndex32=macPhrIndex32, phrProhibitTimer=phrProhibitTimer, cellAdjDelCellIdUtra=cellAdjDelCellIdUtra, tbSRBInitDl64QAM=tbSRBInitDl64QAM, topoSetRRUPortSubtoTdsLocalCellId=topoSetRRUPortSubtoTdsLocalCellId, iubSCTPStatOutLossPktsThreshold=iubSCTPStatOutLossPktsThreshold, plsfn4Prb25RIPAvg=plsfn4Prb25RIPAvg, localCarrierTable=localCarrierTable, voipRtpPacketUl=voipRtpPacketUl, phyULMeanNLPRB21=phyULMeanNLPRB21, reservedCellL2Para9=reservedCellL2Para9, erabNbrReqRelEnbQci4=erabNbrReqRelEnbQci4, plsfn5Prb61RIPAvg=plsfn5Prb61RIPAvg, caDRXActSwitch=caDRXActSwitch, cellPortID=cellPortID, rrcFailConnEstabOthers=rrcFailConnEstabOthers, rlcPreset29=rlcPreset29, contextAttRelMMENbrMiscellaneous=contextAttRelMMENbrMiscellaneous, adjeNBMmeGroupId13=adjeNBMmeGroupId13, rruTypePortCalPoutTxNom=rruTypePortCalPoutTxNom, configFileLocationType=configFileLocationType, nodebBlockStateValue=nodebBlockStateValue, pdcpSduDropTotalDateLenQci5=pdcpSduDropTotalDateLenQci5, lbcEntry=lbcEntry, plsfn2Prb15RIPAvg=plsfn2Prb15RIPAvg, topoRRULocalOscillationState=topoRRULocalOscillationState, ethPortDataStatEthSlotNo=ethPortDataStatEthSlotNo, peripheralPackDetailVersion=peripheralPackDetailVersion, plsfn7Prb15RIPAvg=plsfn7Prb15RIPAvg, macSwitchInfoEntry=macSwitchInfoEntry, timeSlotTypeNeighCell21=timeSlotTypeNeighCell21, hsdpaSpsSchedLcId=hsdpaSpsSchedLcId, cellId=cellId, plsfn2Prb77RIPAvg=plsfn2Prb77RIPAvg, invRackVersionNumber=invRackVersionNumber, plsfn7Prb32RIPAvg=plsfn7Prb32RIPAvg, pmExpValueExpressionIndex=pmExpValueExpressionIndex, plsfn2Prb40RIPAvg=plsfn2Prb40RIPAvg, hsdpaCQIMinDiff=hsdpaCQIMinDiff, spsOptmzAmrcRlcSegThr=spsOptmzAmrcRlcSegThr, hoFailPrepOutX2QuaUnknownMme=hoFailPrepOutX2QuaUnknownMme, imaGrpTxTrlPhyLink=imaGrpTxTrlPhyLink)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", phyCfgBFOnSwitch=phyCfgBFOnSwitch, phyULMaxNLPRB94=phyULMaxNLPRB94, plADIUlPwrP0NominalPucch=plADIUlPwrP0NominalPucch, raeAntennaBearing=raeAntennaBearing, phyULMaxNLPRB62=phyULMaxNLPRB62, pdcpSduSendTotalDataNumQci7=pdcpSduSendTotalDataNumQci7, hoFailIncInterFreqInterCellIntraEnbOL=hoFailIncInterFreqInterCellIntraEnbOL, plsfn5Prb78RIPAvg=plsfn5Prb78RIPAvg, raPreambleTrMax=raPreambleTrMax, alarmCauseProcessFlag=alarmCauseProcessFlag, erabRelProcRowStatus=erabRelProcRowStatus, phyULMaxNLPRB07=phyULMaxNLPRB07, macTestSwitchInfoDlMimoSwitch=macTestSwitchInfoDlMimoSwitch, gpsReceiverAntennaDelay=gpsReceiverAntennaDelay, e1LinkRxVersion=e1LinkRxVersion, nbapNodeBResetTrigger=nbapNodeBResetTrigger, daughterBoardRowStatus=daughterBoardRowStatus, userRowStatus=userRowStatus, sntpConfig=sntpConfig, ethPortDlRate=ethPortDlRate, lcMaxDlPower=lcMaxDlPower, atucellUserBasedAdjCellReducePowerUserThr=atucellUserBasedAdjCellReducePowerUserThr, plrssiLcId=plrssiLcId, macNbrRbUlMassiveMimoSM7=macNbrRbUlMassiveMimoSM7, erabNbrExistQCI9=erabNbrExistQCI9, topoSetRRUNo=topoSetRRUNo, plUsrLogPucchCatchDataType=plUsrLogPucchCatchDataType, ulCompMode=ulCompMode, plsfn0Prb70RIPAvg=plsfn0Prb70RIPAvg, phyULMaxNLPRB61=phyULMaxNLPRB61, hoSuccPrepOutInterFreqX2PartialHandover=hoSuccPrepOutInterFreqX2PartialHandover, macUpAlgorithmPrbLimitMcsThre2=macUpAlgorithmPrbLimitMcsThre2, fcPdschInitTxp=fcPdschInitTxp, acCfgInterferenceSwitch=acCfgInterferenceSwitch, heatExchangerEntry=heatExchangerEntry, retAntModelNumber=retAntModelNumber, hoOutFailToWrongCell=hoOutFailToWrongCell, taTable=taTable, phyULMaxNLPRB60=phyULMaxNLPRB60, rrcConnEstabProcEntry=rrcConnEstabProcEntry, mroHoNumRatioRelation=mroHoNumRatioRelation, localCarrierIndex=localCarrierIndex, macschecfi1=macschecfi1, eventA4Table=eventA4Table, ofpPortModuleVcc=ofpPortModuleVcc, accessUserGroupView=accessUserGroupView, plsfn9Prb68RIPAvg=plsfn9Prb68RIPAvg, amrUlVoipPacketWb3=amrUlVoipPacketWb3, dlPATSpeeffthred1QPSK=dlPATSpeeffthred1QPSK, macOctDlMassiveMimoSM9=macOctDlMassiveMimoSM9, plsfn6Prb63RIPAvg=plsfn6Prb63RIPAvg, lbcAdjCellBlanceAlgoType=lbcAdjCellBlanceAlgoType, pdcpThrpTimeULQci5=pdcpThrpTimeULQci5, hoFailPrepIncIntraFreqIntraEnbCellBlock=hoFailPrepIncIntraFreqIntraEnbCellBlock, cellAdjCdma2000FreqEntry=cellAdjCdma2000FreqEntry, rbAttEstabQci9=rbAttEstabQci9, volteHOFailOutMme=volteHOFailOutMme, rbFailEstabNoReply=rbFailEstabNoReply, rruTypePortSupportFreqBandWidth=rruTypePortSupportFreqBandWidth, rrcConnEstabTimeTable=rrcConnEstabTimeTable, hsdpaCongestCtrlIncreasePara=hsdpaCongestCtrlIncreasePara, plsfn6Prb00RIPAvg=plsfn6Prb00RIPAvg, macSwitchTestInfoRbIndex=macSwitchTestInfoRbIndex, phyNbrCqi11=phyNbrCqi11, sscEndMinute1=sscEndMinute1, cellInterFreqBand=cellInterFreqBand, recvRlcCfgEntry=recvRlcCfgEntry, macUpMuMiMoMcsBackOff1=macUpMuMiMoMcsBackOff1, rruLendToPCellPrbTotDlTF=rruLendToPCellPrbTotDlTF, cellAcBarTimeForVoice=cellAcBarTimeForVoice, videoUlBOSize=videoUlBOSize, anrMeasRsrpTh=anrMeasRsrpTh, macTestSwitchInfoUpTfrcMaxPrbInPrachSubfram=macTestSwitchInfoUpTfrcMaxPrbInPrachSubfram, plsfn4Prb79RIPAvg=plsfn4Prb79RIPAvg, activeRRCLcId=activeRRCLcId, plRiaCellRptDataTable=plRiaCellRptDataTable, hsupaForceSchedTh=hsupaForceSchedTh, raecGeneralSubIndexNo=raecGeneralSubIndexNo, sjm1ThresholdFC=sjm1ThresholdFC, topoRRUCarrier22ULPowerValue=topoRRUCarrier22ULPowerValue, plsfn3Prb60RIPAvg=plsfn3Prb60RIPAvg, euePeriodRptLcId=euePeriodRptLcId, baseBandCarrierTxPath5CalFactorI=baseBandCarrierTxPath5CalFactorI, phyCfgEntry=phyCfgEntry, hsdpaCQIACKLostRate=hsdpaCQIACKLostRate, cellUlIotRTMonitorTaskSubSfn=cellUlIotRTMonitorTaskSubSfn, configfilePlanTable=configfilePlanTable, nbrscheprbdlMcs26=nbrscheprbdlMcs26, phyULMaxNLPRB70=phyULMaxNLPRB70, cacPriForReestablishUe=cacPriForReestablishUe, plUsrLogPucchCatchDataVolteActiveFlag=plUsrLogPucchCatchDataVolteActiveFlag, hsupaQosCSPIDivPointSecond=hsupaQosCSPIDivPointSecond, dlPATPaSrb=dlPATPaSrb, airCondSupplyAirTemperature=airCondSupplyAirTemperature, rbSuccEstabQci5=rbSuccEstabQci5, equipStartupNotiMIBVersion=equipStartupNotiMIBVersion, hsdpaCellSelectNode=hsdpaCellSelectNode, a4Hysteresis=a4Hysteresis, sjm1RnMatrixWindowAcd=sjm1RnMatrixWindowAcd, plsfn0Prb85RIPAvg=plsfn0Prb85RIPAvg, ulCompJrJeqInd=ulCompJrJeqInd, cellCompanyVideoReserver1VideoNum=cellCompanyVideoReserver1VideoNum, erabNbrReqRelEnbQci5=erabNbrReqRelEnbQci5, plsfn0Prb25RIPAvg=plsfn0Prb25RIPAvg, dataPlanStatisticLcId=dataPlanStatisticLcId, chacRBThTimeToTrig=chacRBThTimeToTrig, nbrscheprbdlMcs18=nbrscheprbdlMcs18, raeHardwareVersion=raeHardwareVersion, schedulingRequestEntry=schedulingRequestEntry, cellAcBarList3ForSigalling=cellAcBarList3ForSigalling, eNBMeasComFilterCoeffForRate=eNBMeasComFilterCoeffForRate, sjm1RoundSwitch=sjm1RoundSwitch, plsfn7PrbG5RIPMax=plsfn7PrbG5RIPMax, pdcpUlAirSduDropTotalNumberQci1=pdcpUlAirSduDropTotalNumberQci1, raeDownloadFileName=raeDownloadFileName, cellNetResrvForOpUse=cellNetResrvForOpUse, plsfn0Prb00RIPAvg=plsfn0Prb00RIPAvg, netLcRruPowerRruPathNo=netLcRruPowerRruPathNo, tdsLcIsAntCombination=tdsLcIsAntCombination, rrcConnReEstabSuccRlFail=rrcConnReEstabSuccRlFail, srvccAttOutExecGeranQuality=srvccAttOutExecGeranQuality, macPreset20=macPreset20, eueTimerN311=eueTimerN311, hoSuccPrepIncInterFreqX2=hoSuccPrepIncInterFreqX2, plsfn7Prb96RIPAvg=plsfn7Prb96RIPAvg, fileTransNotiFileName=fileTransNotiFileName, retAntCalibrateTrigger=retAntCalibrateTrigger, swFileRowStatus=swFileRowStatus, rruEffectiveScheTimesUl=rruEffectiveScheTimesUl, saalConnTxEndPdus=saalConnTxEndPdus, videoActiveEntry=videoActiveEntry, plsfn9Prb94RIPAvg=plsfn9Prb94RIPAvg, hsupaCongestCtrlDecreasePara=hsupaCongestCtrlDecreasePara, tdsNodeBHsupaBRUStatisticType=tdsNodeBHsupaBRUStatisticType, netSetRRUPortSubtoLocalCellId4=netSetRRUPortSubtoLocalCellId4, rrcConnNumberEntry=rrcConnNumberEntry, macNbrRbDlMassiveMimoSM9=macNbrRbDlMassiveMimoSM9, closeTimeSlotCommon=closeTimeSlotCommon, netBoardIrFrameType=netBoardIrFrameType, emEquipmentRowStatus=emEquipmentRowStatus, ipThpUlRowStatus=ipThpUlRowStatus, plsfn2Prb45RIPAvg=plsfn2Prb45RIPAvg, videoPerfOfPdcpLcId=videoPerfOfPdcpLcId, equipNEID=equipNEID, caQosSatisfyProportionThrUl=caQosSatisfyProportionThrUl, dlCAPwrCchChooseCceOptimizeFlag=dlCAPwrCchChooseCceOptimizeFlag, fcCarrierSlotIscpMaxThreshold=fcCarrierSlotIscpMaxThreshold, emTemperatureEntry=emTemperatureEntry, phyCfgSpeedDetectLowThreshold=phyCfgSpeedDetectLowThreshold, tbSRBInitUl16QAM=tbSRBInitUl16QAM, erabRelEnbNbrQci7=erabRelEnbNbrQci7, a3RptInterval=a3RptInterval, apTeidMapRel=apTeidMapRel, pdcpProfile0x0002Flag=pdcpProfile0x0002Flag, anrNotiNEType=anrNotiNEType, cellAcAcBarForEmergcyCalls=cellAcAcBarForEmergcyCalls, macUpAlgorithmMCSStsfyCndtnNm=macUpAlgorithmMCSStsfyCndtnNm, plsfn9Prb11RIPAvg=plsfn9Prb11RIPAvg, highSpeedStatisticLcId=highSpeedStatisticLcId, erabModQoSFailNbrX2HandoverTriggered=erabModQoSFailNbrX2HandoverTriggered, cellCalAcOffset=cellCalAcOffset, macPrbUtilizationCCLcId=macPrbUtilizationCCLcId, phyULMaxNLPRB17=phyULMaxNLPRB17, pmTaskIndex=pmTaskIndex, sdLocalCellId=sdLocalCellId, voipRtpPacketDl=voipRtpPacketDl, sndRlcRowStatus=sndRlcRowStatus, dummyMmeFuncSwitch=dummyMmeFuncSwitch, nbrscheprbdlMcs13=nbrscheprbdlMcs13, plsfn7Prb30RIPAvg=plsfn7Prb30RIPAvg, rrcSuccConnEstabMoSignalling=rrcSuccConnEstabMoSignalling, eNBIotAlarmThreshold=eNBIotAlarmThreshold, mdtImmediateMDTReportQuantity=mdtImmediateMDTReportQuantity, plsfn8Prb15RIPAvg=plsfn8Prb15RIPAvg, ofPortModuleExistState=ofPortModuleExistState, mdtLoggedMDTUeLocation=mdtLoggedMDTUeLocation, erabModQoSFailNbrMultipleErabId=erabModQoSFailNbrMultipleErabId, plsfn2Prb42RIPAvg=plsfn2Prb42RIPAvg, apS1apRelP4=apS1apRelP4, almActUploadFTPDirectory=almActUploadFTPDirectory, mmeCfgEntry=mmeCfgEntry, rrcAttConnReconfigTmChange=rrcAttConnReconfigTmChange, timeSlotTypeNeighCell7=timeSlotTypeNeighCell7, macSRBTbDlTm6=macSRBTbDlTm6, netRRUGsmSwitch=netRRUGsmSwitch, cellGeranFreqExplicitArfcns8=cellGeranFreqExplicitArfcns8, x2HandOverProcInterEnbEntry=x2HandOverProcInterEnbEntry, lmcUlPrbPreAlarmTh=lmcUlPrbPreAlarmTh, snmpAlterationPDUType=snmpAlterationPDUType, dummyMme=dummyMme, raeParamHorizonBand=raeParamHorizonBand, rrcFailConnEstabInstAllocFail=rrcFailConnEstabInstAllocFail, spsOptmzPacketLoseCopyUeNum=spsOptmzPacketLoseCopyUeNum, alarmBoxTable=alarmBoxTable, plsfn6Prb34RIPAvg=plsfn6Prb34RIPAvg, anteCodeBookSubsetRestrictLow=anteCodeBookSubsetRestrictLow, macNbrTbDlTm5=macNbrTbDlTm5, rrcCpmCaseRelP3=rrcCpmCaseRelP3, cellAcProbFactorForVideo=cellAcProbFactorForVideo, caDownlinkSwitch=caDownlinkSwitch, topoRRUAntGrpAcessSequenceNo=topoRRUAntGrpAcessSequenceNo, omTestS1DelayRecSwitch=omTestS1DelayRecSwitch, cellNetPlmnMnc=cellNetPlmnMnc, rrcConnTolUlEdgeUser=rrcConnTolUlEdgeUser, carrierTsLocalCellId=carrierTsLocalCellId, retAntRCURowStatus=retAntRCURowStatus, plsfn4Prb34RIPAvg=plsfn4Prb34RIPAvg, cellSelectCsgIdentity=cellSelectCsgIdentity, eueMeasCellCfgTable=eueMeasCellCfgTable, rrcHcCaseRelP3=rrcHcCaseRelP3, peripheralPackRunningDownloadDirectory=peripheralPackRunningDownloadDirectory, hoIntraEnbLBCOutAtt=hoIntraEnbLBCOutAtt, pdcpVideoPreset10=pdcpVideoPreset10, amrDlVoipPacketNb7=amrDlVoipPacketNb7, macBbuSourceTable=macBbuSourceTable, harqEntry=harqEntry, pdcpThrpTimeULQci4=pdcpThrpTimeULQci4, nbrscheprbulMcs20=nbrscheprbulMcs20, phyULMeanNLPRB36=phyULMeanNLPRB36, a4TimetoTrig=a4TimetoTrig, nbapR4CarrierPriority=nbapR4CarrierPriority, plsfn3Prb18RIPAvg=plsfn3Prb18RIPAvg, macBbuSocIndex=macBbuSocIndex, alarmNotiCurrentValue=alarmNotiCurrentValue, ethernetOAMEnable=ethernetOAMEnable, rruTransPowerEntry=rruTransPowerEntry, macUpMuMiMoMcsBackOff16=macUpMuMiMoMcsBackOff16, atu16QAMPUSCHTargetSinrUpLimit=atu16QAMPUSCHTargetSinrUpLimit, cellUnavailDurS1Fail=cellUnavailDurS1Fail, plsfn4Prb77RIPAvg=plsfn4Prb77RIPAvg, macPhrIndex50=macPhrIndex50, cellGeranFreqExplicitArfcns31=cellGeranFreqExplicitArfcns31, remoteClkModuleFirmwareVersion=remoteClkModuleFirmwareVersion, clkCommClkSupplySrc=clkCommClkSupplySrc, a2RptInterval=a2RptInterval, activeRRCTable=activeRRCTable, csirsTransmitFlag=csirsTransmitFlag, rhubOptTransBias=rhubOptTransBias, sfn6avgripTable=sfn6avgripTable, hsdpaSpi11Weight=hsdpaSpi11Weight, topoRRUMaxAntPathNum=topoRRUMaxAntPathNum, debug=debug, topoSetRRUPortSubtoLocalCellId3=topoSetRRUPortSubtoLocalCellId3, geranAdjCellMeasEntry=geranAdjCellMeasEntry, macUpAlgorithmTTIbndlngMnPrbNm=macUpAlgorithmTTIbndlngMnPrbNm, erabModQoSSuccNbrQci6=erabModQoSSuccNbrQci6, cellAcLcId=cellAcLcId, hc=hc, cellGeranFreqExplicitArfcns25=cellGeranFreqExplicitArfcns25, atuLcId=atuLcId, topoRRUCarrier5ULPowerValue=topoRRUCarrier5ULPowerValue, fcSsStep=fcSsStep, netRRUAntennaSettingTable=netRRUAntennaSettingTable, plsfn7Prb97RIPAvg=plsfn7Prb97RIPAvg)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", raRowStatus=raRowStatus, plsfn6Prb74RIPAvg=plsfn6Prb74RIPAvg, macMumimoThrpTimeUlRank1=macMumimoThrpTimeUlRank1, nbrschetimesulMcs6=nbrschetimesulMcs6, erabModQoSSuccNbrQci4=erabModQoSSuccNbrQci4, cellAntWeightPhase9=cellAntWeightPhase9, hsdpaSpiAPrioFlag=hsdpaSpiAPrioFlag, rruPathTxStatus=rruPathTxStatus, plPreambeRevNumEntry=plPreambeRevNumEntry, swPackCustomerPlanVersion=swPackCustomerPlanVersion, macNbrTbUlMassiveMimoSM3=macNbrTbUlMassiveMimoSM3, dlCAPwrMaxCfiNum=dlCAPwrMaxCfiNum, baseBandCarrierTxPath3CalFactorI=baseBandCarrierTxPath3CalFactorI, rhubEtherRowStatus=rhubEtherRowStatus, netRRUPGCSetRange=netRRUPGCSetRange, macNbrTbDlMassiveMimoSM4=macNbrTbDlMassiveMimoSM4, coolingFanAdjustPWMStep=coolingFanAdjustPWMStep, pdcpSduDropTotalDateLenQci1=pdcpSduDropTotalDateLenQci1, lmcCacUlPrbLoadTh=lmcCacUlPrbLoadTh, topoRHUBRowStatus=topoRHUBRowStatus, pdcpDlSduAirDropRatioEntry=pdcpDlSduAirDropRatioEntry, phyULMaxNLPRB42=phyULMaxNLPRB42, mmeCfgSctpIndex=mmeCfgSctpIndex, erabActiveMeanNbrULQci6=erabActiveMeanNbrULQci6, bfdMinRxInterval=bfdMinRxInterval, phyULMaxNLPRB90=phyULMaxNLPRB90, ipoaChActiveState=ipoaChActiveState, irathoFailOutTdscdma=irathoFailOutTdscdma, plsfn0Prb74RIPAvg=plsfn0Prb74RIPAvg, macDownlinkMuMiMoUePairEffDiffThr=macDownlinkMuMiMoUePairEffDiffThr, dlCAPwrTargetSinr2Cce1=dlCAPwrTargetSinr2Cce1, hoOutAttS=hoOutAttS, hlSctSourceCellIndexOnCore=hlSctSourceCellIndexOnCore, gsmCellShelfNo=gsmCellShelfNo, atuByIpAddr9=atuByIpAddr9, cellShareNetReservFlag=cellShareNetReservFlag, drbQci=drbQci, amrUlVoipPacketWb8=amrUlVoipPacketWb8, sscMaxUserNum=sscMaxUserNum, mroA3OffsetThBaseHighTh=mroA3OffsetThBaseHighTh, irathoAttOutCdma2000=irathoAttOutCdma2000, pdcpVideoQQVideoActive=pdcpVideoQQVideoActive, extendDrbBucketSizeDuration=extendDrbBucketSizeDuration, plRiaLogServerLoginName=plRiaLogServerLoginName, sdEntry=sdEntry, circuitPackEntry=circuitPackEntry, hsdpaHarqRv16Qam4=hsdpaHarqRv16Qam4, rruTypePortPathNo=rruTypePortPathNo, pdcpNbrUl=pdcpNbrUl, rruOptTransS9um100MLen=rruOptTransS9um100MLen, cellCdma2000ParaCdma1XrttCsfbRegTotalZone=cellCdma2000ParaCdma1XrttCsfbRegTotalZone, macschecceusedratiosfn8=macschecceusedratiosfn8, boardLedEntry=boardLedEntry, rrcAttConnEstabHighPriorityAccess=rrcAttConnEstabHighPriorityAccess, cellNetLcId=cellNetLcId, hsdpaFlowCtrlAlgorithmNode=hsdpaFlowCtrlAlgorithmNode, nbrschetimesulMcs9=nbrschetimesulMcs9, syslogConsoleRowStatus=syslogConsoleRowStatus, phyCfgSrsUePowerBfThre=phyCfgSrsUePowerBfThre, raTable=raTable, plrelatedOriginCounter=plrelatedOriginCounter, dlCAPwrTargetSinr8Cce3=dlCAPwrTargetSinr8Cce3, mlbNotification=mlbNotification, cellSymbolState=cellSymbolState, timeSlotTypeNeighCell8=timeSlotTypeNeighCell8, lccFilterCoeff=lccFilterCoeff, dlCAPwrCellPdcchCceNum1=dlCAPwrCellPdcchCceNum1, almActUploadftpServerLoginName=almActUploadftpServerLoginName, plsfn7Prb79RIPAvg=plsfn7Prb79RIPAvg, topoSetRRUPortSupportFreq=topoSetRRUPortSupportFreq, pdcpThrpTimeULQci6=pdcpThrpTimeULQci6, lmcEntry=lmcEntry, gpsDevType=gpsDevType, caPerformanceRowStatus=caPerformanceRowStatus, phyULMaxNLPRB78=phyULMaxNLPRB78, plsfn8Prb53RIPAvg=plsfn8Prb53RIPAvg, rrcSuccConnReconfigResReclaim=rrcSuccConnReconfigResReclaim, mdtTaskTraceID=mdtTaskTraceID, plsfn5Prb57RIPAvg=plsfn5Prb57RIPAvg, raeParamGroup=raeParamGroup, ppHcAlgEntry=ppHcAlgEntry, cellReselComCellReselPriority=cellReselComCellReselPriority, macDownlinkp=macDownlinkp, macTestSwitchInfoMcslimitSwitch=macTestSwitchInfoMcslimitSwitch, cacDlPrbTh=cacDlPrbTh, boardSoftwareFileShelfNo=boardSoftwareFileShelfNo, plReceivePowerUserIndex17=plReceivePowerUserIndex17, cellCARelationTable=cellCARelationTable, phichLcId=phichLcId, plsfn8Prb36RIPAvg=plsfn8Prb36RIPAvg, sdUpptsLongAverFactor=sdUpptsLongAverFactor, ethernetOAMSlotNo=ethernetOAMSlotNo, plsfn4Prb45RIPAvg=plsfn4Prb45RIPAvg, srvccFailPrepOutGeranQuaNoResponse=srvccFailPrepOutGeranQuaNoResponse, rlcPreset5=rlcPreset5, plsfn8Prb09RIPAvg=plsfn8Prb09RIPAvg, plsfn9Prb44RIPAvg=plsfn9Prb44RIPAvg, phyULMeanNLPRB27=phyULMeanNLPRB27, plsfn6Prb85RIPAvg=plsfn6Prb85RIPAvg, heatExUnderTemperatureLimit=heatExUnderTemperatureLimit, carrierRuCellFreq=carrierRuCellFreq, spsOptmzDlnkPrsstIntThr=spsOptmzDlnkPrsstIntThr, traceTaskTceInetAddr=traceTaskTceInetAddr, pdcpDiscardTimer=pdcpDiscardTimer, phyCfgPucchVolteSrStubPeriod=phyCfgPucchVolteSrStubPeriod, phichRowStatus=phichRowStatus, contextNbrExist=contextNbrExist, lbcRedirectionCenterFreq=lbcRedirectionCenterFreq, macSwitchInfoLcId=macSwitchInfoLcId, tdsLcDownTimeSlotTotalNum=tdsLcDownTimeSlotTotalNum, retAntOperatingBand2=retAntOperatingBand2, csirsTable=csirsTable, pdcpPreset32=pdcpPreset32, drbBurstDataThpDLQci9=drbBurstDataThpDLQci9, cellInterEARFCN=cellInterEARFCN, macscheCceAll=macscheCceAll, hoFailPrepIncIntraFreqS1ParameterError=hoFailPrepIncIntraFreqS1ParameterError, rrcAttConnReconfigRrcReestablish=rrcAttConnReconfigRrcReestablish, voicePakStatisticRowStatus=voicePakStatisticRowStatus, lbcPpHcSuppressTimer=lbcPpHcSuppressTimer, gsmCellTable=gsmCellTable, saalConnVci=saalConnVci, hlGlobalTestSwitchL3InfoValueOnlyTag=hlGlobalTestSwitchL3InfoValueOnlyTag, hoFailPrepIncInterFreqIntraEnbLoChID=hoFailPrepIncInterFreqIntraEnbLoChID, cacDlNgbrPrbTh=cacDlNgbrPrbTh, rrcPreset13=rrcPreset13, peripheralPackPlanScheduleActivateTime=peripheralPackPlanScheduleActivateTime, cellAdjUtraTddCellPhyCellId=cellAdjUtraTddCellPhyCellId, erabEstabAddFailNbrS1InterSystemHoTrig=erabEstabAddFailNbrS1InterSystemHoTrig, fcHichDpchOffsetAbundanceTxa=fcHichDpchOffsetAbundanceTxa, saalConnRxEndAkPdus=saalConnRxEndAkPdus, cellCompanyVideoReserver14VideoNum=cellCompanyVideoReserver14VideoNum, plsfn7Prb89RIPAvg=plsfn7Prb89RIPAvg, ccBlerTarget=ccBlerTarget, iubTrafficCategoryServiceType=iubTrafficCategoryServiceType, fcUlpcLinearPredictionDelay=fcUlpcLinearPredictionDelay, bfdPeerIPAddress=bfdPeerIPAddress, rruLendToPCellPrbTotDl=rruLendToPCellPrbTotDl, plUsrLogCfgEntry=plUsrLogCfgEntry, nbrscheprbdlMcs14=nbrscheprbdlMcs14, rhubEtherOutputVoltage=rhubEtherOutputVoltage, cellInterFreqPmaxFlag=cellInterFreqPmaxFlag, erabEstabAddAttNbrQci4=erabEstabAddAttNbrQci4, raPowerRampStep=raPowerRampStep, pdcpVideoPreset2=pdcpVideoPreset2, plsfn9Prb86RIPAvg=plsfn9Prb86RIPAvg, lmclccAlgorithmTag=lmclccAlgorithmTag, plsfn4Prb60RIPAvg=plsfn4Prb60RIPAvg, lccTable=lccTable, anrNotiNEID=anrNotiNEID, raeParamAmplitude=raeParamAmplitude, circuitPackDateOfManufacture=circuitPackDateOfManufacture, macDownlinkMuMiMoMcsBackoff3=macDownlinkMuMiMoMcsBackoff3, hsdpaCongestCtrlFSNDetTimerTh=hsdpaCongestCtrlFSNDetTimerTh, hlTestSwitchDlReceiveDataCore=hlTestSwitchDlReceiveDataCore, macUpAlgorithmRandomLimitScale=macUpAlgorithmRandomLimitScale, plsfn3Prb58RIPAvg=plsfn3Prb58RIPAvg, rrcConnEstabProcRowStatus=rrcConnEstabProcRowStatus, drbPdcpSduBitLenDlQci2=drbPdcpSduBitLenDlQci2, plsfn3Prb27RIPAvg=plsfn3Prb27RIPAvg, baseBandCarrierNo=baseBandCarrierNo, raeWeightingFactorsFrequencyBand=raeWeightingFactorsFrequencyBand, fcUlDTXAlgorithm=fcUlDTXAlgorithm, nbrscheprbdlMcs30=nbrscheprbdlMcs30, plsfn4Prb24RIPAvg=plsfn4Prb24RIPAvg, timerWaitEndMarker=timerWaitEndMarker, rhubOptTransM50um10MLen=rhubOptTransM50um10MLen, hlTestSwitchA2RSRP=hlTestSwitchA2RSRP, macTestSwitchInfoSelPriScheSwitch=macTestSwitchInfoSelPriScheSwitch, plReceivePowerIndex22=plReceivePowerIndex22, adjeNBMmeGroupId8=adjeNBMmeGroupId8, topoRRUBandCapRowStatus=topoRRUBandCapRowStatus, macschecceallsfn6=macschecceallsfn6, a6RptQuantity=a6RptQuantity, netRHUBOfp1AccessLinePosition=netRHUBOfp1AccessLinePosition, plsfn9Prb29RIPAvg=plsfn9Prb29RIPAvg, plsfn0Prb53RIPAvg=plsfn0Prb53RIPAvg, drbSecondarySendRlcCfgId=drbSecondarySendRlcCfgId, configProcAdditionInfo=configProcAdditionInfo, plsfn5Prb50RIPAvg=plsfn5Prb50RIPAvg, plsfn6Prb12RIPAvg=plsfn6Prb12RIPAvg, hoFailIncIntraFreqInterCellIntraEnbOthers=hoFailIncIntraFreqInterCellIntraEnbOthers, erabRelFailNbrControlProcessingOverload=erabRelFailNbrControlProcessingOverload, phyCfgSrsCqiMeasType=phyCfgSrsCqiMeasType, alarmNotiAddition=alarmNotiAddition, reservedCellL1Para3=reservedCellL1Para3, b2RptInterval=b2RptInterval, rlcPreset7=rlcPreset7, phyULMeanNLPRB74=phyULMeanNLPRB74, raeFileIndex=raeFileIndex, rrcEffectiveConnSampNum=rrcEffectiveConnSampNum, plsfn8Prb74RIPAvg=plsfn8Prb74RIPAvg, hsupaCommSchedRowStatus=hsupaCommSchedRowStatus, netRRURootAlarmState4=netRRURootAlarmState4, plsfn9Prb66RIPAvg=plsfn9Prb66RIPAvg, iubOFPortActiveStatus=iubOFPortActiveStatus, a5RptAmount=a5RptAmount, eNBConfig=eNBConfig, rruPathTxPower=rruPathTxPower, cellPrbLcId=cellPrbLcId, a5TrigQuantity=a5TrigQuantity, rbAttEstabQci3=rbAttEstabQci3, hsdpaSpi5Weight=hsdpaSpi5Weight, macTestSwitchInfoVoIPOneWayThreshold=macTestSwitchInfoVoIPOneWayThreshold, plsfn4Prb47RIPAvg=plsfn4Prb47RIPAvg, timerSearchUeContext=timerSearchUeContext, equipContact=equipContact, holbcProcInterEnbRowStatus=holbcProcInterEnbRowStatus, alarmCauseStatefulCreateDeditheringInterval=alarmCauseStatefulCreateDeditheringInterval, cellGeranFreqExplicitArfcns27=cellGeranFreqExplicitArfcns27, e1LinkEntry=e1LinkEntry, macPhrIndex33=macPhrIndex33, cellShareNetRowStatus=cellShareNetRowStatus, eueMeasCellRsrqFilterCoeff=eueMeasCellRsrqFilterCoeff, hsupaQosMaxReTxThreshold=hsupaQosMaxReTxThreshold, phyULMeanNLPRB95=phyULMeanNLPRB95, a6MaxReportCell=a6MaxReportCell, macVipNumDataDl=macVipNumDataDl, hoFailPrepIncInterFreqIntraEnbTpc=hoFailPrepIncInterFreqIntraEnbTpc, apX2apRelP4=apX2apRelP4, cacArpTag=cacArpTag, cellPrbRatioUl=cellPrbRatioUl, cellAdjGeranCellIndex=cellAdjGeranCellIndex, macschefailtimescclr=macschefailtimescclr, netAntenna=netAntenna, sessiontimeerabQci5=sessiontimeerabQci5, erabEstabAddFailNbrMultipleErabId=erabEstabAddFailNbrMultipleErabId, rrcRbcCaseRelP5=rrcRbcCaseRelP5, invIocPosition=invIocPosition, erabRelActNbrQci2=erabRelActNbrQci2, netRRUOfp2AccessLinePosition=netRRUOfp2AccessLinePosition, topoSetRRUTdsCalPoutTxNom=topoSetRRUTdsCalPoutTxNom, userType=userType, raeBmIndicatBearingStep=raeBmIndicatBearingStep, reservedCellParaTable=reservedCellParaTable, boardVoltShelfNo=boardVoltShelfNo, saalConnTxPollPdus=saalConnTxPollPdus, handOverProcTimeInterEnbTable=handOverProcTimeInterEnbTable, plsfn2Prb38RIPAvg=plsfn2Prb38RIPAvg, cellInterFreqRxLevMin=cellInterFreqRxLevMin, plsfn2Prb29RIPAvg=plsfn2Prb29RIPAvg, timeSlotTypeNeighCell16=timeSlotTypeNeighCell16, anrNotificationNode=anrNotificationNode, cellReselComSNonIntraSearchR9Flag=cellReselComSNonIntraSearchR9Flag, nbrschetimesdlMcs8=nbrschetimesdlMcs8, boardHardwareTypeMatchStatus=boardHardwareTypeMatchStatus, pdcpDlAirSduSendTotalNumberQci4=pdcpDlAirSduSendTotalNumberQci4, b2MeasQuantityUtraTdd=b2MeasQuantityUtraTdd, rrcConnMaxeNB=rrcConnMaxeNB, x2hoCancelProcInterEnbRowStatus=x2hoCancelProcInterEnbRowStatus, plThroughputCapacityULTable=plThroughputCapacityULTable, macCellCompThrpUl=macCellCompThrpUl, hsupaCongestCtrlNode=hsupaCongestCtrlNode, a1RptThresholdRsrp=a1RptThresholdRsrp)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", macBbuSourceRackNo=macBbuSourceRackNo, netLocalCellCtrlEntry=netLocalCellCtrlEntry, hoFailPrepIncIntraFreqS1Others=hoFailPrepIncIntraFreqS1Others, raeWeightingFactorsPhase6=raeWeightingFactorsPhase6, plsfn1Prb71RIPAvg=plsfn1Prb71RIPAvg, mrMreFileSucc=mrMreFileSucc, interRatLbParaRowStatus=interRatLbParaRowStatus, srbRowStatus=srbRowStatus, plsfn4Prb78RIPAvg=plsfn4Prb78RIPAvg, mroA3HysBaseLowTh=mroA3HysBaseLowTh, swPackCustomerPlanUpgradeState=swPackCustomerPlanUpgradeState, rrcTFCACapUserMaxNbrFddPCell=rrcTFCACapUserMaxNbrFddPCell, plsfn0Prb63RIPAvg=plsfn0Prb63RIPAvg, macStopLogByType=macStopLogByType, invAntArrayLocalInfo=invAntArrayLocalInfo, hoFailPrepIncInterFreqS1PerEncodeFail=hoFailPrepIncInterFreqS1PerEncodeFail, rrcConnNumberTable=rrcConnNumberTable, macPhrIndex60=macPhrIndex60, hcAdjRsrqTh=hcAdjRsrqTh, a4RptThresholdRsrp=a4RptThresholdRsrp, plsfn9Prb53RIPAvg=plsfn9Prb53RIPAvg, plRssiAvgC15=plRssiAvgC15, raeBmIndicatTiltStep=raeBmIndicatTiltStep, equivalentPRBUsageLcId=equivalentPRBUsageLcId, macDownlinkEff2TableOToN=macDownlinkEff2TableOToN, plsfn8Prb25RIPAvg=plsfn8Prb25RIPAvg, cellAntWeightAmplitude13=cellAntWeightAmplitude13, transactionResultNotificationNode=transactionResultNotificationNode, pdcpPreset29=pdcpPreset29, cellCompanyVideoReserver17VideoNum=cellCompanyVideoReserver17VideoNum, macSwitchInfoDlEdgeUserMcsTh=macSwitchInfoDlEdgeUserMcsTh, pagingCongCellPaging=pagingCongCellPaging, antWeightAmplitude2=antWeightAmplitude2, nbrschetimesdlMcs28=nbrschetimesdlMcs28, lbcUsernodebswitch=lbcUsernodebswitch, invRhubVersionNumber=invRhubVersionNumber, drbUEActiveDlQci5=drbUEActiveDlQci5, equipNEType=equipNEType, phyULMeanNLPRB41=phyULMeanNLPRB41, gpsInfoSignalValue=gpsInfoSignalValue, contextAttInitalSetupNbr=contextAttInitalSetupNbr, plsfn8Prb01RIPAvg=plsfn8Prb01RIPAvg, raeInstallationDate=raeInstallationDate, nbrscheprbulMcs14=nbrscheprbulMcs14, plsfn8PrbG15RIPMax=plsfn8PrbG15RIPMax, reservedENBL2Para3=reservedENBL2Para3, measVolteReconfMeasNum=measVolteReconfMeasNum, traceTaskPlmnMcc=traceTaskPlmnMcc, cellAntWeightPhase5=cellAntWeightPhase5, antennaWeightTable=antennaWeightTable, plsfn9Prb13RIPAvg=plsfn9Prb13RIPAvg, gpsReceiverSoftWareVer=gpsReceiverSoftWareVer, pathTable=pathTable, pdcpIPThroughputUlQci1=pdcpIPThroughputUlQci1, taEntry=taEntry, fcAveSnrUlpc=fcAveSnrUlpc, cellInterRatCDMA2000HRPDFlag=cellInterRatCDMA2000HRPDFlag, initCalibrationAnt2RxStatus=initCalibrationAnt2RxStatus, mdtLoggedMDTExecuteTime=mdtLoggedMDTExecuteTime, hlGlobalTestSwitchEcidTag=hlGlobalTestSwitchEcidTag, macTestSwitchInfoUlLimitSrbMcsSwitch=macTestSwitchInfoUlLimitSrbMcsSwitch, procCoreSlotNo=procCoreSlotNo, saalConnAsxIntState=saalConnAsxIntState, icicHiiSetPriA1=icicHiiSetPriA1, drbPdcpSduTotalDelayDlQci7=drbPdcpSduTotalDelayDlQci7, fcDTXOffsetTxa=fcDTXOffsetTxa, hoSuccOutFddTddS1=hoSuccOutFddTddS1, ofpPortRackNo=ofpPortRackNo, tbNbrInitUlQpsk=tbNbrInitUlQpsk, lmcMlbHighLoadThDl=lmcMlbHighLoadThDl, plsfn3Prb16RIPAvg=plsfn3Prb16RIPAvg, cellAdjCell40MLayeredFrameWorkCfg=cellAdjCell40MLayeredFrameWorkCfg, cellInterRatGeranSfMedium=cellInterRatGeranSfMedium, erabNbrMaxEstab=erabNbrMaxEstab, erabNbrLcId=erabNbrLcId, pmTaskReportManagerIndex=pmTaskReportManagerIndex, contextAttReleNBNbrReConfigFail=contextAttReleNBNbrReConfigFail, nbrscheprbdlMcs23=nbrscheprbdlMcs23, macVipNumDataUl=macVipNumDataUl, clkCommUsableState=clkCommUsableState, cdlFtpServerLoginName=cdlFtpServerLoginName, mroA4ThBaseHighTh=mroA4ThBaseHighTh, s1FlexDefMmeExistStatus=s1FlexDefMmeExistStatus, emSmokeRowStatus=emSmokeRowStatus, transactionExcutiveMode=transactionExcutiveMode, cellReselectIntraFreqEntry=cellReselectIntraFreqEntry, sjm1ThresholdAcd=sjm1ThresholdAcd, topoRHUBFiberFaultReason=topoRHUBFiberFaultReason, emHumidityTable=emHumidityTable, cellCdmaBandClassInfoLcId=cellCdmaBandClassInfoLcId, swPackRunningVersion=swPackRunningVersion, plsfn5Prb70RIPAvg=plsfn5Prb70RIPAvg, macUpAlgorithmUlCqiModifyStepDelta=macUpAlgorithmUlCqiModifyStepDelta, pdcpPreset20=pdcpPreset20, massiveMIMOLcId=massiveMIMOLcId, reservedCellL2Para5=reservedCellL2Para5, macVideoSendBitLenSucDl=macVideoSendBitLenSucDl, macschecceusedsfn1=macschecceusedsfn1, erabRelEnbNbrTransfer=erabRelEnbNbrTransfer, plsfn4Prb53RIPAvg=plsfn4Prb53RIPAvg, netSetRRUPortTxRxStatus=netSetRRUPortTxRxStatus, plsfn6Prb99RIPAvg=plsfn6Prb99RIPAvg, plsfn6Prb64RIPAvg=plsfn6Prb64RIPAvg, rrcCpmMeasCaseRelP7=rrcCpmMeasCaseRelP7, rruTypePortSupportFreqBand=rruTypePortSupportFreqBand, omLinkSetupStatus=omLinkSetupStatus, topoRRUCarrier7ULPowerValue=topoRRUCarrier7ULPowerValue, raeWeightFactorInfo=raeWeightFactorInfo, boardVoltageEntry=boardVoltageEntry, hoInterEnbX2LBCOutSucc=hoInterEnbX2LBCOutSucc, erabRelEnbNbrUELostTa=erabRelEnbNbrUELostTa, hlTestSwitchMrCfgPriSwitch=hlTestSwitchMrCfgPriSwitch, cpuUsageStatProcRackNo=cpuUsageStatProcRackNo, coolingFanIndex=coolingFanIndex, rlcPreset11=rlcPreset11, dlPowerAlgorithmControl=dlPowerAlgorithmControl, apX2apRelP3=apX2apRelP3, nodebBlockStateNotificationObjects=nodebBlockStateNotificationObjects, antennaBaseInfo=antennaBaseInfo, macTestSwitchInfoPdschScrambleProp=macTestSwitchInfoPdschScrambleProp, plTransPowerTable=plTransPowerTable, caRlcBoAllocAlgN=caRlcBoAllocAlgN, pdcpUlAirSduSendTotalNumberQci9=pdcpUlAirSduSendTotalNumberQci9, boardSwapSourceRackNo=boardSwapSourceRackNo, plsfn4Prb51RIPAvg=plsfn4Prb51RIPAvg, e1LinkRxUserCells=e1LinkRxUserCells, macNbrRbUlMassiveMimoSM4=macNbrRbUlMassiveMimoSM4, hoFailPrepIncInterFreqS1PerDecodeFail=hoFailPrepIncInterFreqS1PerDecodeFail, cellAvailabilityTable=cellAvailabilityTable, phyCfgPucchSrStubSwitch=phyCfgPucchSrStubSwitch, baseBandCarrierTxPath7CalFactorI=baseBandCarrierTxPath7CalFactorI, initCalibrationEntry=initCalibrationEntry, atuNormalUserDlFirstPrbLimit=atuNormalUserDlFirstPrbLimit, sscUuSwitch=sscUuSwitch, packStoreOptimizeControl=packStoreOptimizeControl, s1FaultResetNBSwitch=s1FaultResetNBSwitch, sessiontimeerabQci9=sessiontimeerabQci9, mrUeMrCfgRatio=mrUeMrCfgRatio, hlTestSwitchLbLogRecordType=hlTestSwitchLbLogRecordType, rruPrbDlQci7Num=rruPrbDlQci7Num, vipSafeguardLcId=vipSafeguardLcId, sessiontimeerabQci3=sessiontimeerabQci3, timerS1RLOCoverall=timerS1RLOCoverall, rrcCellUeIndexRel=rrcCellUeIndexRel, macTestSwitchInfoMbsfnSchTm9Flag=macTestSwitchInfoMbsfnSchTm9Flag, omLinkPeerIpAddrType=omLinkPeerIpAddrType, initERABEstabProcEntry=initERABEstabProcEntry, fcModulationChangePeriod=fcModulationChangePeriod, equipmentCommon=equipmentCommon, pdcpProfile0x0104Flag=pdcpProfile0x0104Flag, hlGlobalTestSwitchSrsCfgSwitch=hlGlobalTestSwitchSrsCfgSwitch, swPackCustomerPlanTypeIndex=swPackCustomerPlanTypeIndex, raeUseingWeightTable=raeUseingWeightTable, hoAttOutExecInterEnbS1IntraFreqQci2=hoAttOutExecInterEnbS1IntraFreqQci2, contextExistNbrEntry=contextExistNbrEntry, ipoaChVCI=ipoaChVCI, cqiPucch2Index6=cqiPucch2Index6, srbEntry=srbEntry, plsfn3Prb73RIPAvg=plsfn3Prb73RIPAvg, nbapHsdpaCarrierPriority=nbapHsdpaCarrierPriority, ethernetOAMMode=ethernetOAMMode, macDownlinkSubCqiOffset=macDownlinkSubCqiOffset, plsfn0Prb23RIPAvg=plsfn0Prb23RIPAvg, hoSuccOutIntraFreqInterCellIntraEnb=hoSuccOutIntraFreqInterCellIntraEnb, csirstm9PmiRiReportFlag=csirstm9PmiRiReportFlag, drbNbrScheTimesSfn8=drbNbrScheTimesSfn8, sdPeakAverageDiffThres=sdPeakAverageDiffThres, e1LinkRxFillerCells=e1LinkRxFillerCells, initCalibrationTable=initCalibrationTable, tdsNodeBRachAbnormalThreshold=tdsNodeBRachAbnormalThreshold, netRHUBAccessSlotNo=netRHUBAccessSlotNo, pubAlgorithmParaTable=pubAlgorithmParaTable, plsfn5Prb89RIPAvg=plsfn5Prb89RIPAvg, macTestSwitchInfoCchCfiNum=macTestSwitchInfoCchCfiNum, localCellConfigTable=localCellConfigTable, cellAdjEutraCellFreq=cellAdjEutraCellFreq, hsdpaSpi10Weight=hsdpaSpi10Weight, pucchRrANCS=pucchRrANCS, pciCheckTrigger=pciCheckTrigger, dlCompPrbConflictThres=dlCompPrbConflictThres, volteHOAttOutInterEnbX2IntraFreq=volteHOAttOutInterEnbX2IntraFreq, raeFileUploadPath=raeFileUploadPath, carrierTsRowStatus=carrierTsRowStatus, rrcCpmMeasCaseRelP10=rrcCpmMeasCaseRelP10, plsfn6Prb42RIPAvg=plsfn6Prb42RIPAvg, sfn9avgripTable=sfn9avgripTable, pmTaskRowStatus=pmTaskRowStatus, hlTestSwitchPeriodMeasForRptStrongestCellCfg=hlTestSwitchPeriodMeasForRptStrongestCellCfg, plsfn4Prb29RIPAvg=plsfn4Prb29RIPAvg, plsfn3Prb57RIPAvg=plsfn3Prb57RIPAvg, plUsrLogDlDataSmallPeriod=plUsrLogDlDataSmallPeriod, plReceivePowerUserIndex14=plReceivePowerUserIndex14, netSetRRUPortRETAntSupport=netSetRRUPortRETAntSupport, netSetRRUPortCellPortionId=netSetRRUPortCellPortionId, equipStartupNotiInetAddress=equipStartupNotiInetAddress, plsfn3Prb24RIPAvg=plsfn3Prb24RIPAvg, macDownlinkMuMiMoMcsBackoff1=macDownlinkMuMiMoMcsBackoff1, plADIUlPwrMsg3PowerCtrlSwitch=plADIUlPwrMsg3PowerCtrlSwitch, contextSuccModNbr=contextSuccModNbr, volteHOAttOutExecInterEnbX2IntraFreq=volteHOAttOutExecInterEnbX2IntraFreq, measVolteDelInterFreqMeasNum=measVolteDelInterFreqMeasNum, hsdpaSpsSchedActivePktTh=hsdpaSpsSchedActivePktTh, apS1apRelP0=apS1apRelP0, baseBandCarrierGpIscp=baseBandCarrierGpIscp, alcapTotalPaths=alcapTotalPaths, baseBandwidthRackNo=baseBandwidthRackNo, hsdpaCongestCtrlConFrameNum=hsdpaCongestCtrlConFrameNum, cellPschPower=cellPschPower, erabReleNBLcId=erabReleNBLcId, equipmentInfo=equipmentInfo, erabEstabInitAttNbrQci6=erabEstabInitAttNbrQci6, cellReselIntraFreqPmax=cellReselIntraFreqPmax, rrcPreset29=rrcPreset29, cellAntWeightPhase18=cellAntWeightPhase18, timeSlotTypeNeighCell27=timeSlotTypeNeighCell27, saalConnTxBgnPdus=saalConnTxBgnPdus, swPackPlanDownloadDirectory=swPackPlanDownloadDirectory, macschecceusedratiosfn4=macschecceusedratiosfn4, scheTimesAcoordingMCSRowStatus=scheTimesAcoordingMCSRowStatus, erabRelEnbNbrUserInactivity=erabRelEnbNbrUserInactivity, macDownlinkEffTm38=macDownlinkEffTm38, erabEstabAddAttNbrQci3=erabEstabAddAttNbrQci3, cellGeranFreqExplicitArfcns22=cellGeranFreqExplicitArfcns22, macsche4cce=macsche4cce, ulCompNonCoBandPrbEnd=ulCompNonCoBandPrbEnd, handOverProcIntraEnbRowStatus=handOverProcIntraEnbRowStatus, dlCAPwrTargetSinr1Cce2=dlCAPwrTargetSinr1Cce2, handOverInterWithERABTable=handOverInterWithERABTable, plRiaLogRptPeriod=plRiaLogRptPeriod, raPrachFreqOffset=raPrachFreqOffset, twampRowStatus=twampRowStatus, invRackVendorUnitTypeNumber=invRackVendorUnitTypeNumber, contextAttModCsfb=contextAttModCsfb, hoAttIncInterFreqS1=hoAttIncInterFreqS1, plsfn7PrbG1RIPMax=plsfn7PrbG1RIPMax, pdcpUpPktLossRateUlQci9Enb=pdcpUpPktLossRateUlQci9Enb, peripheralPackRunningDownloadTime=peripheralPackRunningDownloadTime, pmOriginCounterGrpInfo=pmOriginCounterGrpInfo, fileUpEndTime=fileUpEndTime, smallPacketUlSmallPacketConfluxThreshold=smallPacketUlSmallPacketConfluxThreshold, macTestSwitchInfoDlHarqSwitch=macTestSwitchInfoDlHarqSwitch, ulPwrDeltaFPucchFormat1b=ulPwrDeltaFPucchFormat1b, addERABEstabProcRowStatus=addERABEstabProcRowStatus, circuitPackVendorUnitFamilyType=circuitPackVendorUnitFamilyType, drbPdcpSduBitLenDlQci7=drbPdcpSduBitLenDlQci7, caPrbThrforUlBsrReAlloc=caPrbThrforUlBsrReAlloc, cellPrbStatus=cellPrbStatus, rrcCAConfigSampNbr=rrcCAConfigSampNbr, b2ThresholdRsrq=b2ThresholdRsrq, rrcAttConnEstabEmergency=rrcAttConnEstabEmergency, hsupaSpsSchedEntry=hsupaSpsSchedEntry, plsfn6Prb27RIPAvg=plsfn6Prb27RIPAvg, drbDataforwardFlag=drbDataforwardFlag, cqiNumberStatisticEntry=cqiNumberStatisticEntry)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", atuGoldUeIMSI3=atuGoldUeIMSI3, arpStatusDstMac=arpStatusDstMac, e1LinkImaFeLcd=e1LinkImaFeLcd, cellGeranFreqExplicitArfcns20=cellGeranFreqExplicitArfcns20, e1LinkLoopbackState=e1LinkLoopbackState, lcConfigRowStatus=lcConfigRowStatus, atuSrRestrictFlag=atuSrRestrictFlag, drbPdcpSduBitLenDlQci4=drbPdcpSduBitLenDlQci4, cellGeranFreqArfcnSpacing=cellGeranFreqArfcnSpacing, macSwitchTestInfoTaPdcchOrderTimerLen=macSwitchTestInfoTaPdcchOrderTimerLen, phyULMeanNLPRB80=phyULMeanNLPRB80, drbDlBucketSizeDuration=drbDlBucketSizeDuration, scheTimesAcoordingSFNLcId=scheTimesAcoordingSFNLcId, tbSRBSuccInitUl64QAM=tbSRBSuccInitUl64QAM, lcAcUeCountTimerLen=lcAcUeCountTimerLen, hoAttOutPrepIntraFreqS1=hoAttOutPrepIntraFreqS1, macNbrTbDlMassiveMimoSM8=macNbrTbDlMassiveMimoSM8, netRETAntRCUEntry=netRETAntRCUEntry, ofPortSlotNo=ofPortSlotNo, raeTable=raeTable, macNbrTbUlMassiveMimoSM8=macNbrTbUlMassiveMimoSM8, volteHOAttOutInterEnbX2IntraFreqN=volteHOAttOutInterEnbX2IntraFreqN, mlbObjects=mlbObjects, cellUlIotSubSfn=cellUlIotSubSfn, localCarrierApeSwitch=localCarrierApeSwitch, plsfn6Prb58RIPAvg=plsfn6Prb58RIPAvg, fileTransState=fileTransState, atuGoldUserMRStopInd=atuGoldUserMRStopInd, tdsSysGpsShiftSwitch=tdsSysGpsShiftSwitch, tdsSuperNodeB=tdsSuperNodeB, rruOptTransM50um10MLen=rruOptTransM50um10MLen, phyCfgRxxFactor=phyCfgRxxFactor, rrcSuccConnReconfigTmChange=rrcSuccConnReconfigTmChange, rruDlDcheTimes=rruDlDcheTimes, hoFailIncInterFreqInterCellIntraEnbPrb=hoFailIncInterFreqInterCellIntraEnbPrb, rrcCellUeTimeOutRel=rrcCellUeTimeOutRel, pucchCellPucch1bcsNum=pucchCellPucch1bcsNum, rrcConnNumberOfeNB=rrcConnNumberOfeNB, nodebBlockStateNotiNEType=nodebBlockStateNotiNEType, hoOutFailToWrongCellType1=hoOutFailToWrongCellType1, phyULMeanNLPRB54=phyULMeanNLPRB54, adjeNBMmeGroupId6=adjeNBMmeGroupId6, ulPwrPowerCtrlDci3Switch=ulPwrPowerCtrlDci3Switch, plADIIoTLowThreshoffset=plADIIoTLowThreshoffset, mroRsrpTh=mroRsrpTh, plsfn1Prb97RIPAvg=plsfn1Prb97RIPAvg, netIROptPlanEntry=netIROptPlanEntry, plsfn8Prb71RIPAvg=plsfn8Prb71RIPAvg, sntpServerInetAddrType=sntpServerInetAddrType, alarmCtrlRRUVSWRRptSwitch=alarmCtrlRRUVSWRRptSwitch, hcPenaltyAlgorithm=hcPenaltyAlgorithm, contextFailInitalSetupNbrMultipleErabId=contextFailInitalSetupNbrMultipleErabId, erabActiveMeanNbrDLQci5=erabActiveMeanNbrDLQci5, cellPrbRatioDl=cellPrbRatioDl, erabRelMmeNbrProtocol=erabRelMmeNbrProtocol, cellSoftLicenseLcId=cellSoftLicenseLcId, managerInetAddrType=managerInetAddrType, hsdpaSpsSchedResrcBlkTsCfgIndex=hsdpaSpsSchedResrcBlkTsCfgIndex, pdcpSduSendTotalDateLenQci4=pdcpSduSendTotalDateLenQci4, localCarrierFpToDdFachs=localCarrierFpToDdFachs, peripheralPackRunningDetailVersion=peripheralPackRunningDetailVersion, boardProceduralStatus=boardProceduralStatus, e1LinkRxOpMode=e1LinkRxOpMode, plsfn4Prb44RIPAvg=plsfn4Prb44RIPAvg, pdcpUlAirSduSendTotalNumberQci8=pdcpUlAirSduSendTotalNumberQci8, rrcConnReEstabFailTpcAllocFail=rrcConnReEstabFailTpcAllocFail, hoSuccOutIntraFreqService=hoSuccOutIntraFreqService, macNbrTbDlTm7=macNbrTbDlTm7, pdcpSduDlDropRatioEntry=pdcpSduDlDropRatioEntry, cmdAuthorizationIndex=cmdAuthorizationIndex, macTestPmiWeightMean=macTestPmiWeightMean, plRiaLogServerPassward=plRiaLogServerPassward, lmcMlbAdjustProtectTh=lmcMlbAdjustProtectTh, plsfn2Prb84RIPAvg=plsfn2Prb84RIPAvg, phyCfgIotNotSmartAlarmPartHighRate=phyCfgIotNotSmartAlarmPartHighRate, drbThpTimeDlQci6=drbThpTimeDlQci6, lbc40FcUeListWithPrbUsageStrategyPriority=lbc40FcUeListWithPrbUsageStrategyPriority, netRRURootAlarmType1=netRRURootAlarmType1, phyULMaxNLPRB58=phyULMaxNLPRB58, airCondCoolingStopTemperature=airCondCoolingStopTemperature, localCarrierFpToDdRachs=localCarrierFpToDdRachs, plUsrLogPucchCatchDataCQIorRI=plUsrLogPucchCatchDataCQIorRI, traceTaskCollectEntityInetAddr=traceTaskCollectEntityInetAddr, plsfn1Prb19RIPAvg=plsfn1Prb19RIPAvg, atuUeUlPowerAdd=atuUeUlPowerAdd, ofpPortOperationStatus=ofpPortOperationStatus, cpuLoadContrlInfo=cpuLoadContrlInfo, eventA2Table=eventA2Table, macDownlinkEff2TableNToO=macDownlinkEff2TableNToO, invAntArraySerialNumber=invAntArraySerialNumber, nbrschetimesdlMcs25=nbrschetimesdlMcs25, ofpPortTable=ofpPortTable, macTestSwitchInfoTable=macTestSwitchInfoTable, fcAveRxpUlpc=fcAveRxpUlpc, sscStartTime5=sscStartTime5, erabRelProcEntry=erabRelProcEntry, rruPdschPrbMeanTotDl=rruPdschPrbMeanTotDl, emEquipmentLocation=emEquipmentLocation, plsfn9Prb50RIPAvg=plsfn9Prb50RIPAvg, ueContextProcRowStatus=ueContextProcRowStatus, emEquipmentSoftwareVersion=emEquipmentSoftwareVersion, plsfn4Prb04RIPAvg=plsfn4Prb04RIPAvg, phyULMeanNLPRB16=phyULMeanNLPRB16, invRruNo=invRruNo, hoFailPrepIncInterFreqS1MaxUeNum=hoFailPrepIncInterFreqS1MaxUeNum, macUpAlgorithmRecvPowerMaxPerPrb=macUpAlgorithmRecvPowerMaxPerPrb, drbMaxUeActiveUl=drbMaxUeActiveUl, topoRRUCarrier4ULPowerValue=topoRRUCarrier4ULPowerValue, cellInterRatLcId=cellInterRatLcId, efdAlarmSeverity=efdAlarmSeverity, heatExOuterFanState=heatExOuterFanState, softLicenseDlPrbNum=softLicenseDlPrbNum, plsfn7Prb18RIPAvg=plsfn7Prb18RIPAvg, peripheralPackPlanUpgradeResult1=peripheralPackPlanUpgradeResult1, chacPrbTag=chacPrbTag, ipPathEntry=ipPathEntry, pdcpDlAirSduDropTotalNumberQci9=pdcpDlAirSduDropTotalNumberQci9, topoRRUCarrier1ULPowerValue=topoRRUCarrier1ULPowerValue, sfn5avgripEntry=sfn5avgripEntry, rrcAttConnReconfigRabDelete=rrcAttConnReconfigRabDelete, plsfn2Prb80RIPAvg=plsfn2Prb80RIPAvg, boardContainMainCpu=boardContainMainCpu, macUpMuMiMoMcsBackOff2=macUpMuMiMoMcsBackOff2, eNBEnergyConservEndTimeHour=eNBEnergyConservEndTimeHour, plsfn1Prb98RIPAvg=plsfn1Prb98RIPAvg, hsdpaCongestCtrlRestoreTimerTh=hsdpaCongestCtrlRestoreTimerTh, plIotLogFtpServerPassword=plIotLogFtpServerPassword, plReceivePowerIndex21=plReceivePowerIndex21, cellAdjDelAdjCellLocalId=cellAdjDelAdjCellLocalId, erabNbrHoIncQci4=erabNbrHoIncQci4, cellGeranFreqThreshxLow=cellGeranFreqThreshxLow, topoSetRRUCalAIqTxNom=topoSetRRUCalAIqTxNom, rruPrbPucchUsedNum=rruPrbPucchUsedNum, maintenceStateNotiNEType=maintenceStateNotiNEType, plsfn8PrbG12RIPMax=plsfn8PrbG12RIPMax, hsdpaCommSchedEntry=hsdpaCommSchedEntry, macPdschPrbAssnDlEdgeUser=macPdschPrbAssnDlEdgeUser, iuant=iuant, s1InNbrOctetsUserPlane=s1InNbrOctetsUserPlane, macCaActiveTtiPCellUl=macCaActiveTtiPCellUl, sndRlcTPollRetransmit=sndRlcTPollRetransmit, accessUserName=accessUserName, omTestAlarmRptStats=omTestAlarmRptStats, rruPrbUlMumimoUsedNum=rruPrbUlMumimoUsedNum, rruPrbUlQci7Num=rruPrbUlQci7Num, rbAttEstabQci8=rbAttEstabQci8, erabEstabInitAttNbrQci1=erabEstabInitAttNbrQci1, pdcpPreset21=pdcpPreset21, cellGeranFreqVariableBitMapOfArfcns4=cellGeranFreqVariableBitMapOfArfcns4, mrPHRReportMod=mrPHRReportMod, irathoFailPrepIncUtranCacFailure=irathoFailPrepIncUtranCacFailure, resChkHlGlobalTestResAuditSwitch=resChkHlGlobalTestResAuditSwitch, srsCycshift6=srsCycshift6, pdcpSduDropTotalDateLenQci4=pdcpSduDropTotalDateLenQci4, rhubOptTransS9umKmLen=rhubOptTransS9umKmLen, macNbrSpsTbUlQci1=macNbrSpsTbUlQci1, plsfn1Prb61RIPAvg=plsfn1Prb61RIPAvg, macDownlink256QamSwitch=macDownlink256QamSwitch, plsfn4Prb82RIPAvg=plsfn4Prb82RIPAvg, peripheralPackVersion=peripheralPackVersion, pdcpUpPktLossRateDlEnb=pdcpUpPktLossRateDlEnb, cellAdjGeranCellTable=cellAdjGeranCellTable, macUpMuMiMoMcsBackOff13=macUpMuMiMoMcsBackOff13, cellCompanyVideoReserver11VideoNum=cellCompanyVideoReserver11VideoNum, initCalibrationRowStatus=initCalibrationRowStatus, plsfn2Prb06RIPAvg=plsfn2Prb06RIPAvg, topoRRUTxConstSwitch=topoRRUTxConstSwitch, dlCAPwrCce2CqiThreshHold=dlCAPwrCce2CqiThreshHold, ulPowerControl=ulPowerControl, carrierTs2RxPower=carrierTs2RxPower, macGlobalTestSscSCAExternOptimizationSwitch=macGlobalTestSscSCAExternOptimizationSwitch, srsDci0AntannePortAp=srsDci0AntannePortAp, cellAccessRestrictEntry=cellAccessRestrictEntry, macUpMuMiMoAlgBaseParaEntry=macUpMuMiMoAlgBaseParaEntry, mirrorSwitch=mirrorSwitch, rrcPreset25=rrcPreset25, ulPwrPucchPowerSwitch=ulPwrPucchPowerSwitch, mdtTaskType=mdtTaskType, hoInterEnbX2LBCInSucc=hoInterEnbX2LBCInSucc, pdcpThpCaActiveDl2CCTF=pdcpThpCaActiveDl2CCTF, saalStatisticInfo=saalStatisticInfo, macschecfi2ratio=macschecfi2ratio, macSwitchTestInfoRlcMaxTransmitTimes=macSwitchTestInfoRlcMaxTransmitTimes, cellmaxripperprbLcId=cellmaxripperprbLcId, ulCompRowStatus=ulCompRowStatus, phyULMeanNLPRB62=phyULMeanNLPRB62, iubIPPathDelTrigger=iubIPPathDelTrigger, lcAcBarTimeForSignal3=lcAcBarTimeForSignal3, topoSetRRUCalPoutTxNom=topoSetRRUCalPoutTxNom, ethLogicBandwidth=ethLogicBandwidth, cellInterFreqThreshXQFlag=cellInterFreqThreshXQFlag, carrierRuLocalCellId=carrierRuLocalCellId, apX2apRelP0=apX2apRelP0, plsfn8Prb69RIPAvg=plsfn8Prb69RIPAvg, anrNotiAdjCellPlmnMnc=anrNotiAdjCellPlmnMnc, pucchSrPucchNumPerPRB=pucchSrPucchNumPerPRB, sfn3avgripTable=sfn3avgripTable, heatExIndex=heatExIndex, snmpInformBufferNumber=snmpInformBufferNumber, rruJRUsrGBR=rruJRUsrGBR, cellSpeCalCfgLcId=cellSpeCalCfgLcId, drbThpTimeDlQci9=drbThpTimeDlQci9, plsfn6Prb13RIPAvg=plsfn6Prb13RIPAvg, macPrbUsedNumDLHighSpeedUser=macPrbUsedNumDLHighSpeedUser, apX2apRelP6=apX2apRelP6, raeFileSize=raeFileSize, cellAdjCdma2000FreqRowStatus=cellAdjCdma2000FreqRowStatus, peripheralPackPlanRowStatus=peripheralPackPlanRowStatus, plIotLogServerInetAddr=plIotLogServerInetAddr, carrierTs1RxPower=carrierTs1RxPower, integrityAlgorithmPriority=integrityAlgorithmPriority, rrcConnReEstabFailMaxUeNum=rrcConnReEstabFailMaxUeNum, hoFailPrepIncIntraFreqS1Prb=hoFailPrepIncIntraFreqS1Prb, erabNbrMaxEstabQci5=erabNbrMaxEstabQci5, plsfn5Prb28RIPAvg=plsfn5Prb28RIPAvg, cellMsg3PhichPower=cellMsg3PhichPower, rruTypeBandWidth=rruTypeBandWidth, erabRelEnbNbrQci1Other=erabRelEnbNbrQci1Other, erabActiveMaxNbrULQci5=erabActiveMaxNbrULQci5, atuGoldUeIMSI31=atuGoldUeIMSI31, mrMreFileReq=mrMreFileReq, macNbrErrTbUlMassiveMimoSM2=macNbrErrTbUlMassiveMimoSM2, nbrscheprbulMcs16=nbrscheprbulMcs16, sctpTable=sctpTable, phyULMaxNLPRB52=phyULMaxNLPRB52, drbPdcpSduBitLenUlQci2=drbPdcpSduBitLenUlQci2, macSRBTbDLRank3=macSRBTbDLRank3, sfn8maxripTable=sfn8maxripTable, interRatBlindSrvccSwitch=interRatBlindSrvccSwitch, rrcAdmisssionConnMax=rrcAdmisssionConnMax, ulPwrDeltaFPucchFormat2b=ulPwrDeltaFPucchFormat2b, pdcpSduDiscTotalDataNumQci8=pdcpSduDiscTotalDataNumQci8, plsfn3Prb93RIPAvg=plsfn3Prb93RIPAvg, raeRowStatus=raeRowStatus, macOctUlMassiveMimoSM2=macOctUlMassiveMimoSM2, drbUEActiveDlQci4=drbUEActiveDlQci4, stasticperiod=stasticperiod, hsdpaCongestCtrlDecreasePara=hsdpaCongestCtrlDecreasePara, transactionResultObjects=transactionResultObjects, drbUEActiveUlQci7=drbUEActiveUlQci7, reservedENBOmPara4=reservedENBOmPara4, rrcCellCrntiRel=rrcCellCrntiRel, almActUploadProcNo=almActUploadProcNo, plRipLogReportPeriod=plRipLogReportPeriod, configProcessNotifications=configProcessNotifications, lbcAdjCellUlHardwardTh4=lbcAdjCellUlHardwardTh4, hoSuccPrepOutInterFreqIntraEnb=hoSuccPrepOutInterFreqIntraEnb, caUserLimitNum=caUserLimitNum, fcDiffDb=fcDiffDb, macUpMuMiMoMcsBackOff6=macUpMuMiMoMcsBackOff6, phyCfgPucchExTendCpFmt1ActiveThred6Ant=phyCfgPucchExTendCpFmt1ActiveThred6Ant, linkCommonMtuValue=linkCommonMtuValue, erabActiveMeanNbrULQci1=erabActiveMeanNbrULQci1, lcConfigLcId=lcConfigLcId)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", plsfn8Prb32RIPAvg=plsfn8Prb32RIPAvg, drbPdcpSduDelayDlQci4=drbPdcpSduDelayDlQci4, caScellActualPrbActiveThrUl=caScellActualPrbActiveThrUl, phyCfgRxChanDelayCfg=phyCfgRxChanDelayCfg, cellNetImsEmergencyTag=cellNetImsEmergencyTag, cellAdjCdma2000CellRowStatus=cellAdjCdma2000CellRowStatus, netRRUNo=netRRUNo, invRackSerialNumber=invRackSerialNumber, hoFailPrepIncIntraFreqS1HandoverRestrictList=hoFailPrepIncIntraFreqS1HandoverRestrictList, mrMROPLRFileReq=mrMROPLRFileReq, mroPeriod=mroPeriod, topoRRUAccessMasterFiberLength=topoRRUAccessMasterFiberLength, cacMaxQci1NumTag=cacMaxQci1NumTag, rrcSuccConnEstabHighPriorityAccess=rrcSuccConnEstabHighPriorityAccess, networkElementMME=networkElementMME, compPerformanceLcId=compPerformanceLcId, irathoFailPrepIncGprsPerFailure=irathoFailPrepIncGprsPerFailure, cellCfgRowStatus=cellCfgRowStatus, srbPdcpSduBitLenDl=srbPdcpSduBitLenDl, macPreset40=macPreset40, macTestSwitchVolteAnsweredPeriod=macTestSwitchVolteAnsweredPeriod, ftpServerManangerIndex=ftpServerManangerIndex, cellSoftLicenseTable=cellSoftLicenseTable, equipInitCfgStopTrigger=equipInitCfgStopTrigger, reservedParaInfo=reservedParaInfo, plsfn4Prb57RIPAvg=plsfn4Prb57RIPAvg, environmentMonitor=environmentMonitor, phyULMeanNLPRB28=phyULMeanNLPRB28, saalConnPolicingAction=saalConnPolicingAction, processorTable=processorTable, s1FaultResetNBTime=s1FaultResetNBTime, eventA5Entry=eventA5Entry, hsdpaHarqRv64Qam4=hsdpaHarqRv64Qam4, cellGeranFreqVariableBitMapOfArfcns7=cellGeranFreqVariableBitMapOfArfcns7, plRiaCharactSeqCheckNumUpThresh=plRiaCharactSeqCheckNumUpThresh, reservedCellL2Para8=reservedCellL2Para8, pcapFilterRule=pcapFilterRule, phyULMaxNLPRB09=phyULMaxNLPRB09, lcConfigRefClockAvail=lcConfigRefClockAvail, emTheftIndex=emTheftIndex, netS1IfIndex=netS1IfIndex, reverseOperationDesIPAddress=reverseOperationDesIPAddress, localCarrierNbrAckMaceOcts=localCarrierNbrAckMaceOcts, encryptAlgorithmTable=encryptAlgorithmTable, hsdpaTsRandomNode=hsdpaTsRandomNode, plsfn8Prb98RIPAvg=plsfn8Prb98RIPAvg, cellAvailabilityRowStatus=cellAvailabilityRowStatus, macUpAlgorithmPlThrMid=macUpAlgorithmPlThrMid, e1LinkLof=e1LinkLof, reservedCellL3Para1=reservedCellL3Para1, pdcpSduDlDiscRatioLcId=pdcpSduDlDiscRatioLcId, saalConnTxMdPdus=saalConnTxMdPdus, b2MeasQuantityUtraFdd=b2MeasQuantityUtraFdd, ueImsMatchConfigVolteCapa=ueImsMatchConfigVolteCapa, volteHOAttOutExecInterEnbS1IntraFreq=volteHOAttOutExecInterEnbS1IntraFreq, cqiM=cqiM, x2InterfaceTrafficStat=x2InterfaceTrafficStat, macTestSwitchInfoUlNonAdaptiveReTxSwitch=macTestSwitchInfoUlNonAdaptiveReTxSwitch, hsdpaTfrcRowStatus=hsdpaTfrcRowStatus, srbNbrScheTimesSfn3=srbNbrScheTimesSfn3, ccHichFmAckUser3=ccHichFmAckUser3, phyCfgPucchNormalCpFmt1ActiveThred5Ant=phyCfgPucchNormalCpFmt1ActiveThred5Ant, macPreset25=macPreset25, macTestSwitchUlResConfSwitch=macTestSwitchUlResConfSwitch, cellAntWeightAmplitude1=cellAntWeightAmplitude1, cacAlgorithmTag=cacAlgorithmTag, macSwitchTestInfoDlBoSwitch=macSwitchTestInfoDlBoSwitch, macPhrIndex2=macPhrIndex2, cacType=cacType, timerWatiProcAp=timerWatiProcAp, hsupaAlgorithmEntry=hsupaAlgorithmEntry, hoFailPrepIncInterFreqX2MaxUeNum=hoFailPrepIncInterFreqX2MaxUeNum, cellInterFreqNeighCellCfg=cellInterFreqNeighCellCfg, coolingCommon=coolingCommon, pdcpUpPktLossRateUlEnb=pdcpUpPktLossRateUlEnb, alarmCauseNo=alarmCauseNo, anteTransAntennaSel=anteTransAntennaSel, capacityAvailableUl=capacityAvailableUl, optionalFunction=optionalFunction, phyULMaxNLPRB72=phyULMaxNLPRB72, sjm1Table=sjm1Table, macPrbUtilizationSIEntry=macPrbUtilizationSIEntry, srvccFailPrepOutUtranNoResponse=srvccFailPrepOutUtranNoResponse, tdsNodeBIubSmoothCtrlSwitch=tdsNodeBIubSmoothCtrlSwitch, plsfn3Prb11RIPAvg=plsfn3Prb11RIPAvg, srvccSuccOutUtran=srvccSuccOutUtran, raeGroupsHorizonBand=raeGroupsHorizonBand, cellDisguiseMaintenceState=cellDisguiseMaintenceState, plsfn2Prb85RIPAvg=plsfn2Prb85RIPAvg, energySaving=energySaving, hoFailIncInterFreqInterCellIntraEnbSecFail=hoFailIncInterFreqInterCellIntraEnbSecFail, plsfn7Prb85RIPAvg=plsfn7Prb85RIPAvg, macNbrTbUl=macNbrTbUl, eventGeneralEventTrap=eventGeneralEventTrap, drbMode=drbMode, rrcConnReEstabAttRlFail=rrcConnReEstabAttRlFail, cellAntWeightPhase0=cellAntWeightPhase0, clock=clock, handOverInterRATEntry=handOverInterRATEntry, icicEdgeUeUlPrbSchedPri3=icicEdgeUeUlPrbSchedPri3, sscEndTime3=sscEndTime3, timerRrcRecfgCmplt=timerRrcRecfgCmplt, hlTestSwitchAdjCellPowerReducedNumThr=hlTestSwitchAdjCellPowerReducedNumThr, topoRHUBRemoteResetNextRHUBTimer=topoRHUBRemoteResetNextRHUBTimer, hsupaQosLcId=hsupaQosLcId, macTestSwitchCsiRsPriority=macTestSwitchCsiRsPriority, mdtFileDirectory=mdtFileDirectory, macTestSwitchInfoTm9CBSelfAdaptSwitch=macTestSwitchInfoTm9CBSelfAdaptSwitch, sntpLocalTimeZone=sntpLocalTimeZone, srvccAttOutExecUtran=srvccAttOutExecUtran, hoFailOutIntraFreqS1NoRsp=hoFailOutIntraFreqS1NoRsp, rrcCAndRCheckOfCellEntry=rrcCAndRCheckOfCellEntry, erabEstabInitFailNbrQci1RadioResNotAvailable=erabEstabInitFailNbrQci1RadioResNotAvailable, calAcEnable=calAcEnable, netRRUAccessSlotNo=netRRUAccessSlotNo, hlGlobalTestSwitchUeNumPeriodLpmProcessing=hlGlobalTestSwitchUeNumPeriodLpmProcessing, hsupaCongestCtrlRowStatus=hsupaCongestCtrlRowStatus, sjm1AveragePeriodMatrixISCP=sjm1AveragePeriodMatrixISCP, drbPdcpSduTotalNumberDlQci4=drbPdcpSduTotalNumberDlQci4, plsfn6Prb14RIPAvg=plsfn6Prb14RIPAvg, rbEstabProcRowStatus=rbEstabProcRowStatus, macTestSwitchInfoDlTfrcRandomSwitch=macTestSwitchInfoDlTfrcRandomSwitch, softwareFileTable=softwareFileTable, dlPATTable=dlPATTable, syslogServerControlEntry=syslogServerControlEntry, fcScchInitPwrRecursionFactor2=fcScchInitPwrRecursionFactor2, cqiPucch2Index1=cqiPucch2Index1, swPackRunningDownloadDirectory=swPackRunningDownloadDirectory, ccHichFmNackUser0=ccHichFmNackUser0, plsfn7Prb72RIPAvg=plsfn7Prb72RIPAvg, pdcpIPThroughputDlQci4=pdcpIPThroughputDlQci4, raeParamSubIndexNo=raeParamSubIndexNo, macNbrSpsTbDlQci1=macNbrSpsTbDlQci1, rruPathOpenState=rruPathOpenState, hsdpaSFCTotalIubMultiple=hsdpaSFCTotalIubMultiple, pdcpThroughputTimeRowStatus=pdcpThroughputTimeRowStatus, interRatCsfbSwitch=interRatCsfbSwitch, plsfn1Prb14RIPAvg=plsfn1Prb14RIPAvg, macSwitchInfoDlHoppingFlag=macSwitchInfoDlHoppingFlag, hsdpaSimpleFlowCtrlEntry=hsdpaSimpleFlowCtrlEntry, activeAlarmRepeatTimes=activeAlarmRepeatTimes, plsfn5Prb90RIPAvg=plsfn5Prb90RIPAvg, timerIcicOi=timerIcicOi, baseBandCarrierMaxDlPower=baseBandCarrierMaxDlPower, erabRelEnbNbrQci1HoFail=erabRelEnbNbrQci1HoFail, macUpAlgBaseParaEntry=macUpAlgBaseParaEntry, topoRRUULPowerRRUPathNo=topoRRUULPowerRRUPathNo, erabEstabAddAttNbrQci8=erabEstabAddAttNbrQci8, plReceivePowerIndex16=plReceivePowerIndex16, mroSwitch=mroSwitch, hoFailPrepOutInterFreqS1Fail=hoFailPrepOutInterFreqS1Fail, ulPwrAlpha=ulPwrAlpha, netRRURootAlarmState3=netRRURootAlarmState3, plsfn9Prb65RIPAvg=plsfn9Prb65RIPAvg, invRhubSerialNumber=invRhubSerialNumber, emThunderboltAlarmSwitchReportState=emThunderboltAlarmSwitchReportState, rrcConnReEstabFailSpsFail=rrcConnReEstabFailSpsFail, timerHcSrcHandover=timerHcSrcHandover, syslogConsoleFacility=syslogConsoleFacility, e1LinkRxIcpViolations=e1LinkRxIcpViolations, irathoSuccPrepIncUtran=irathoSuccPrepIncUtran, saalConnNb2RncPcr=saalConnNb2RncPcr, anrSonMeas2GSwitch=anrSonMeas2GSwitch, netBoardTable=netBoardTable, macDownlinkCqiFixM=macDownlinkCqiFixM, swPackRunningDetailVersion=swPackRunningDetailVersion, ofPortRackNo=ofPortRackNo, hoSuccOutInterFreqX2=hoSuccOutInterFreqX2, hsdpaCommSchedTable=hsdpaCommSchedTable, drxQciOnDurationTimerB=drxQciOnDurationTimerB, videoDlOverMAXPRBUsed=videoDlOverMAXPRBUsed, hsupaTfrcTpcModifySwitch=hsupaTfrcTpcModifySwitch, rrcFailConnReconfigRlFailure=rrcFailConnReconfigRlFailure, iubSCTPStatOutLossRateThreshold=iubSCTPStatOutLossRateThreshold, phyCfgContinIotAlarmRelateSwitch=phyCfgContinIotAlarmRelateSwitch, cellGeranFreqNumberOfFollowingArfcns=cellGeranFreqNumberOfFollowingArfcns, macSwitchInfoCclrSwitch=macSwitchInfoCclrSwitch, phyULMeanNLPRB79=phyULMeanNLPRB79, s1OverLoadMme=s1OverLoadMme, plUsrLogDlReportUeId=plUsrLogDlReportUeId, erabActiveNumberTable=erabActiveNumberTable, macPhrIndex56=macPhrIndex56, netRRUEntry=netRRUEntry, netPlanControlLcId=netPlanControlLcId, localCarrierFachs=localCarrierFachs, smallPacketStasticPeriod=smallPacketStasticPeriod, macschecfi1ratio=macschecfi1ratio, cellUlAnteIotEntry=cellUlAnteIotEntry, tatimerDedicated=tatimerDedicated, phyULMeanNLPRB90=phyULMeanNLPRB90, douAdjcHOProToGsmEntry=douAdjcHOProToGsmEntry, plRiaPrbThreshOffset=plRiaPrbThreshOffset, baseBandwidthIndexOnBoard=baseBandwidthIndexOnBoard, lmcRowStatus=lmcRowStatus, plsfn9Prb73RIPAvg=plsfn9Prb73RIPAvg, erabRelMmeNbrDetach=erabRelMmeNbrDetach, cellCdlVoLTESwitch=cellCdlVoLTESwitch, bfdPeerIPAddressType=bfdPeerIPAddressType, plsfn1Prb90RIPAvg=plsfn1Prb90RIPAvg, plsfn0Prb78RIPAvg=plsfn0Prb78RIPAvg, a6TimetoTrig=a6TimetoTrig, irathoFailPrepOutGprsOtherFailure=irathoFailPrepOutGprsOtherFailure, macPhrIndex27=macPhrIndex27, macTestSwitchInfoDlMaxScheUeNumbpoi=macTestSwitchInfoDlMaxScheUeNumbpoi, plsfn1Prb66RIPAvg=plsfn1Prb66RIPAvg, cellPathShutdownState=cellPathShutdownState, topoRRUSupportTdCarrierNum=topoRRUSupportTdCarrierNum, localCarrierFirstRxNACKNum=localCarrierFirstRxNACKNum, phyULMeanNLPRB96=phyULMeanNLPRB96, rrcCpmMeasCaseRelP2=rrcCpmMeasCaseRelP2, phyULMeanNLPRB45=phyULMeanNLPRB45, cellSchedulingTable=cellSchedulingTable, nbapMBMSCarrierPriority=nbapMBMSCarrierPriority, hlTestSwitchDrxUeNumTh=hlTestSwitchDrxUeNumTh, protocolTimerInfo=protocolTimerInfo, hoOutAttInterFreqRadio=hoOutAttInterFreqRadio, erabRelEnbNbrUELostM1=erabRelEnbNbrUELostM1, selftTestSwitch=selftTestSwitch, hsdpaAlgorithmRowStatus=hsdpaAlgorithmRowStatus, sntpDisconnects=sntpDisconnects, lcAcUeThForSignal1=lcAcUeThForSignal1, hlTestSwitchSrsUpptsOneSymbol=hlTestSwitchSrsUpptsOneSymbol, extendDrbPDB=extendDrbPDB, plsfn5Prb37RIPAvg=plsfn5Prb37RIPAvg, macVipNumVedio=macVipNumVedio, macDownAlgorithmVolteMaxSchMcs=macDownAlgorithmVolteMaxSchMcs, cellFriendName=cellFriendName, topoRHUBULMaxTimeDelayCompensation=topoRHUBULMaxTimeDelayCompensation, ipAddrRackNo=ipAddrRackNo, plRssiAvgC11=plRssiAvgC11, videoUlBoSwitch=videoUlBoSwitch, dlCAPwrDeltaPowerMargin=dlCAPwrDeltaPowerMargin, macSRBTbDLRank8=macSRBTbDLRank8, ofpPortModuleBias=ofpPortModuleBias, atuUldataTendcellFreq=atuUldataTendcellFreq, macTestSwitchInfoUpQueEstimateMaxPrb=macTestSwitchInfoUpQueEstimateMaxPrb, phyULMeanNLPRB58=phyULMeanNLPRB58, phyCfgPucchDataSrStubSwitch=phyCfgPucchDataSrStubSwitch, hlTestSwitchcellAdjCellReducePowerSwitch=hlTestSwitchcellAdjCellReducePowerSwitch, spsOptmzRlcSegLimit=spsOptmzRlcSegLimit, plsfn2Prb72RIPAvg=plsfn2Prb72RIPAvg, pdcpBbuSourceOperationalState=pdcpBbuSourceOperationalState, timerUeProtect=timerUeProtect, plUsrLogDlLogLevel=plUsrLogDlLogLevel, spsOptmzSrvccBlerTag=spsOptmzSrvccBlerTag, eqptMacOctSent=eqptMacOctSent, reservedCellL3Para7=reservedCellL3Para7, antArrayType=antArrayType, cellCompanyVideoNumRowStatus=cellCompanyVideoNumRowStatus, cmdAuthorizationCMDType=cmdAuthorizationCMDType, cellAvailDur=cellAvailDur, netBoardType=netBoardType, invShelfVendorName=invShelfVendorName, hsdpaSFCExtPDUNum=hsdpaSFCExtPDUNum)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", erabEstabAddAttNbrQci9=erabEstabAddAttNbrQci9, plsfn4Prb84RIPAvg=plsfn4Prb84RIPAvg, lbcAdjCellDlPrbUsageTh4=lbcAdjCellDlPrbUsageTh4, plsfn2Prb13RIPAvg=plsfn2Prb13RIPAvg, plsfn3Prb84RIPAvg=plsfn3Prb84RIPAvg, dlPATSpeeffthred2TM7=dlPATSpeeffthred2TM7, curCfgFileSavePeriodSwitch=curCfgFileSavePeriodSwitch, cellUlAnteIotTable=cellUlAnteIotTable, erabActiveMeanNbrDLQci6=erabActiveMeanNbrDLQci6, contextAttReleNBNbrHoFail=contextAttReleNBNbrHoFail, plsfn8Prb62RIPAvg=plsfn8Prb62RIPAvg, netLcIrCompressMode=netLcIrCompressMode, ueAdaptiveIndex=ueAdaptiveIndex, hsupaSchedAlgorithm=hsupaSchedAlgorithm, plsfn1Prb86RIPAvg=plsfn1Prb86RIPAvg, sscEndMinute2=sscEndMinute2, erabEstabInitFailNbrQci2Other=erabEstabInitFailNbrQci2Other, cellNetPlmnMcc=cellNetPlmnMcc, mlbNotiNEType=mlbNotiNEType, macMumimoPairUserDlRank2=macMumimoPairUserDlRank2, cellUlNoUserAnteRSSIValue=cellUlNoUserAnteRSSIValue, cellBoardLogRackNo=cellBoardLogRackNo, pdcpVideoPreset5=pdcpVideoPreset5, ulPwrPucchDci3or3aMinPeriod=ulPwrPucchDci3or3aMinPeriod, nbrschetimesulMcs4=nbrschetimesulMcs4, videoDlMAXPRBUsed=videoDlMAXPRBUsed, localCellEntry=localCellEntry, erabRelActNbrQci7=erabRelActNbrQci7, mroNotiAdjCellPhyId=mroNotiAdjCellPhyId, ipThpUlLcId=ipThpUlLcId, plUsrLogUlDataSmallPeriod=plUsrLogUlDataSmallPeriod, plADIRaPreambleInitRcvTargetPow=plADIRaPreambleInitRcvTargetPow, arpStatusTable=arpStatusTable, erabThpTimeUlQci3=erabThpTimeUlQci3, rrcCpmMeasCaseRelP0=rrcCpmMeasCaseRelP0, saalConnRnc2NbMaxCTD=saalConnRnc2NbMaxCTD, pucchSimUlPucchAndPusch=pucchSimUlPucchAndPusch, rruFullRbTtiTotUl=rruFullRbTtiTotUl, apHoInteractWithEraModIntraNB=apHoInteractWithEraModIntraNB, plsfn2Prb22RIPAvg=plsfn2Prb22RIPAvg, phichDuration=phichDuration, plsfn7Prb70RIPAvg=plsfn7Prb70RIPAvg, saalConnTxBgRejPdus=saalConnTxBgRejPdus, fcUlDTXRxpDelta=fcUlDTXRxpDelta, cellCdma2000ParaCdma1XrttCsfbRegRegPeriod=cellCdma2000ParaCdma1XrttCsfbRegRegPeriod, swPackPlanScheduleActivateTime=swPackPlanScheduleActivateTime, cellPowerOffset=cellPowerOffset, boardSwapSourceShelfNo=boardSwapSourceShelfNo, plsfn3Prb68RIPAvg=plsfn3Prb68RIPAvg, reservedENBL3Para2=reservedENBL3Para2, rrcConnReleaseCsfb=rrcConnReleaseCsfb, swPackPlanSubPackNumber=swPackPlanSubPackNumber, volteHOAttOutInterEnbS1InterFreq=volteHOAttOutInterEnbS1InterFreq, hsupaTfrcTfrcMode=hsupaTfrcTfrcMode, adjeNBCell=adjeNBCell, netRRUFiberLength=netRRUFiberLength, transactionResultNotiErrCode=transactionResultNotiErrCode, sscTmValidNum=sscTmValidNum, boardSoftwareFileName=boardSoftwareFileName, apb=apb, remoteClkModuleResetTrigger=remoteClkModuleResetTrigger, dlPATSpeeffthred1TM7=dlPATSpeeffthred1TM7, hoAbnormalIntraCellRowStatus=hoAbnormalIntraCellRowStatus, pathRowStatus=pathRowStatus, localCellConfigEntry=localCellConfigEntry, macUpAlgorithmVoltePuschTargetSinrShift=macUpAlgorithmVoltePuschTargetSinrShift, fcNotiAdjEnbGlobalId=fcNotiAdjEnbGlobalId, cellPdcchPower=cellPdcchPower, srvccAttOutGeranCoverage=srvccAttOutGeranCoverage, cellBoardLoglcId=cellBoardLoglcId, pdcpParaCfgRowStatus=pdcpParaCfgRowStatus, periodCalibrationPathNo=periodCalibrationPathNo, cpuUsageStatProcSlotNo=cpuUsageStatProcSlotNo, pdcpRatioSIEntry=pdcpRatioSIEntry, s1SigProcEntry=s1SigProcEntry, emTemperature=emTemperature, antennaArrayTypeTable=antennaArrayTypeTable, cellmaxripperprbTable=cellmaxripperprbTable, atuGoldUeIMSI7=atuGoldUeIMSI7, smallPacketDlSmallPacketConfluxThreshold=smallPacketDlSmallPacketConfluxThreshold, timeSlotTypeNeighCell23=timeSlotTypeNeighCell23, sysStartIsNoRNCMode=sysStartIsNoRNCMode, macPreset15=macPreset15, plsfn8Prb14RIPAvg=plsfn8Prb14RIPAvg, rruTransPowerTable=rruTransPowerTable, s1FailSetupNbrAbstractSyntaxError=s1FailSetupNbrAbstractSyntaxError, rrcFailConnEstabSrsAllocFail=rrcFailConnEstabSrsAllocFail, atuUlImsiOrIpAtuUeNum=atuUlImsiOrIpAtuUeNum, saalConnRxRsAkPdus=saalConnRxRsAkPdus, rlcPreset32=rlcPreset32, board=board, scheTimesAcoordingSFNRowStatus=scheTimesAcoordingSFNRowStatus, netRRUTable=netRRUTable, s1InterfaceIPStatEthPhyPortId=s1InterfaceIPStatEthPhyPortId, macSRBTbDl=macSRBTbDl, hoFailOutOther=hoFailOutOther, plsfn5Prb47RIPAvg=plsfn5Prb47RIPAvg, topoRRUPADownAverageCurrentValue=topoRRUPADownAverageCurrentValue, topoRHUBAccessUlTimeDelay=topoRHUBAccessUlTimeDelay, pdcpVideoReserver4VideoActive=pdcpVideoReserver4VideoActive, taPerformanceRowStatus=taPerformanceRowStatus, rrcTFCACapUserNbrTddPCell=rrcTFCACapUserNbrTddPCell, plsfn0Prb14RIPAvg=plsfn0Prb14RIPAvg, amrUlVoipPacketNb0=amrUlVoipPacketNb0, InetAddress=InetAddress, transactionDataFileName=transactionDataFileName, a1RptAmount=a1RptAmount, localCarrierFpFromDdFachs=localCarrierFpFromDdFachs, contextAttRelMMENbrUserInactivity=contextAttRelMMENbrUserInactivity, hcTagBasedSpeed=hcTagBasedSpeed, plRipLogStatisticPeriod=plRipLogStatisticPeriod, plsfn9Prb00RIPAvg=plsfn9Prb00RIPAvg, topoRHUBOfp4AccessOfpPortNo=topoRHUBOfp4AccessOfpPortNo, hsdpaCQIACKToNACKRatio=hsdpaCQIACKToNACKRatio, macSwitchInfoCaUeNumLimit=macSwitchInfoCaUeNumLimit, boardTempUpperThreshold=boardTempUpperThreshold, mdtTaskEntry=mdtTaskEntry, erabModQoSFailNbrControlProcessingOverload=erabModQoSFailNbrControlProcessingOverload, mimoPerformanceLcId=mimoPerformanceLcId, ioc=ioc, cellAvailabilityEntry=cellAvailabilityEntry, s1FailSetupNbrHardwareFailure=s1FailSetupNbrHardwareFailure, drbPdcpSduBitLenDlQci9=drbPdcpSduBitLenDlQci9, plsfn4Prb83RIPAvg=plsfn4Prb83RIPAvg, sctpResetTrigger=sctpResetTrigger, qolEchoMinDelay=qolEchoMinDelay, s1FlexSwitch=s1FlexSwitch, erabRelSuccNbrQci4=erabRelSuccNbrQci4, cellShedSib6Flag=cellShedSib6Flag, atuUeIMSI9=atuUeIMSI9, retAntRCUNo=retAntRCUNo, phyULMaxNLPRB79=phyULMaxNLPRB79, netS1IfMcc=netS1IfMcc, raeGroupsFreq=raeGroupsFreq, ccHichFmNackUser1=ccHichFmNackUser1, plsfn8Prb84RIPAvg=plsfn8Prb84RIPAvg, hoHoPreAttSV=hoHoPreAttSV, srbNbrScheTimesSfn7=srbNbrScheTimesSfn7, amrDlVoipPacketWb5=amrDlVoipPacketWb5, hoFailPrepOutInterFreqX2Fail=hoFailPrepOutInterFreqX2Fail, hoFailIncInterFreqInterCellIntraEnbTpc=hoFailIncInterFreqInterCellIntraEnbTpc, phyNbrCqi0=phyNbrCqi0, macUpAlgorithmPlThrMax=macUpAlgorithmPlThrMax, cellProcedureStatus=cellProcedureStatus, macCASCellDeactiveAtt=macCASCellDeactiveAtt, cellAntPortNum=cellAntPortNum, amrUlVoipPacketNb8=amrUlVoipPacketNb8, spsOptmzPacketLoseCopyNum=spsOptmzPacketLoseCopyNum, fcScchRecursionAverageOffsetTxa=fcScchRecursionAverageOffsetTxa, sscStartTime3=sscStartTime3, hoOutAttInterFreqService=hoOutAttInterFreqService, managerStatelessAlarmReportSwitch=managerStatelessAlarmReportSwitch, hoFailIncInterFreqInterCellIntraEnbLoChID=hoFailIncInterFreqInterCellIntraEnbLoChID, plADIUlPwrPucchPowerSwitch=plADIUlPwrPucchPowerSwitch, plsfn8PrbG4RIPMax=plsfn8PrbG4RIPMax, cellCdmaBandClassInfoBandClass=cellCdmaBandClassInfoBandClass, imaGrpE1LinkOhm=imaGrpE1LinkOhm, multiBandEntry=multiBandEntry, erabRelAttNbrQci6=erabRelAttNbrQci6, peripheralPackPlanUpgradeResult6=peripheralPackPlanUpgradeResult6, mroWrongHoTh=mroWrongHoTh, hsupaQosGamaMin=hsupaQosGamaMin, plsfn2Prb95RIPAvg=plsfn2Prb95RIPAvg, hoSuccPrepIncIntraFreqS1=hoSuccPrepIncIntraFreqS1, topoRRURunningStatus=topoRRURunningStatus, srRowStatus=srRowStatus, a5RptThreshold2Rsrp=a5RptThreshold2Rsrp, plsfn9Prb79RIPAvg=plsfn9Prb79RIPAvg, euePeriodRptMaxReportCell=euePeriodRptMaxReportCell, raMaxMsg3Tx=raMaxMsg3Tx, plRssiAvgC5=plRssiAvgC5, macSwitchTestInfoPdcpFreq=macSwitchTestInfoPdcpFreq, phyULMaxNLPRB21=phyULMaxNLPRB21, plsfn8Prb43RIPAvg=plsfn8Prb43RIPAvg, invIocLocalInfo=invIocLocalInfo, hsdpaTsRandomSwitch=hsdpaTsRandomSwitch, macNbrRbDlTm9RANK4BF=macNbrRbDlTm9RANK4BF, plsfn4Prb35RIPAvg=plsfn4Prb35RIPAvg, pdcpSduDlDiscRatioRowStatus=pdcpSduDlDiscRatioRowStatus, invShelfDateOfLastService=invShelfDateOfLastService, phyULMeanNLPRB01=phyULMeanNLPRB01, phyULMeanNLPRB15=phyULMeanNLPRB15, sfn0avgripLcId=sfn0avgripLcId, rhubEtherEntry=rhubEtherEntry, pdcpVideoReserver14VideoActive=pdcpVideoReserver14VideoActive, caMacScellActSwitch=caMacScellActSwitch, contextAttReleNBNbrReEstabFail=contextAttReleNBNbrReEstabFail, macPhrIndex34=macPhrIndex34, pdcpDiscardTimerExCfgQci9=pdcpDiscardTimerExCfgQci9, airCondOverVoltageAlarmState=airCondOverVoltageAlarmState, pdschRowStatus=pdschRowStatus, intraRATInterCellHOTable=intraRATInterCellHOTable, erabNbrMeanEstabQci1=erabNbrMeanEstabQci1, sdCfgEntry=sdCfgEntry, phyULMeanNLPRB24=phyULMeanNLPRB24, plsfn6Prb89RIPAvg=plsfn6Prb89RIPAvg, erabEstabInitSuccNbrQci9=erabEstabInitSuccNbrQci9, remoteLmtRoutePhyPortId=remoteLmtRoutePhyPortId, caRetioThr=caRetioThr, netSetRRUPortGroupNo=netSetRRUPortGroupNo, erabNbrReqRelEnbQci6=erabNbrReqRelEnbQci6, ulPwrDeltaPreambleMsg3=ulPwrDeltaPreambleMsg3, edgeUserStatisticLcId=edgeUserStatisticLcId, massiveMIMOTable=massiveMIMOTable, loggedMdtTaEntry=loggedMdtTaEntry, mrMroueFileSucc=mrMroueFileSucc, licenseFeatureTable=licenseFeatureTable, pdcpPreset37=pdcpPreset37, plTransPowerEntry=plTransPowerEntry, softwarePackRunningEntry=softwarePackRunningEntry, hlSctSourceRowStatus=hlSctSourceRowStatus, plRipCellCfgEntry=plRipCellCfgEntry, ethPortUlByte=ethPortUlByte, remoteLmtRoutePeerIpType=remoteLmtRoutePeerIpType, lcGrpPlanCarrierNum=lcGrpPlanCarrierNum, rrcConnReEstabFailCellOverLoad=rrcConnReEstabFailCellOverLoad, swPackDownloadTime=swPackDownloadTime, radioBandCellStatus=radioBandCellStatus, volteHOSuccOutPrepInterEnbX2InterFreq=volteHOSuccOutPrepInterEnbX2InterFreq, alterationNotifiactions=alterationNotifiactions, mroObjects=mroObjects, caScellQosPrbActiveThrUl=caScellQosPrbActiveThrUl, netBoardShelfNo=netBoardShelfNo, amrUlVoipPacketWb4=amrUlVoipPacketWb4, plsfn8Prb64RIPAvg=plsfn8Prb64RIPAvg, plsfn0Prb87RIPAvg=plsfn0Prb87RIPAvg, macBlerLcId=macBlerLcId, macDownlinkMuMiMoMcsBackoff4=macDownlinkMuMiMoMcsBackoff4, macSwitchTestInfoActiveRrcPeriod=macSwitchTestInfoActiveRrcPeriod, alarmCauseIsValid=alarmCauseIsValid, macSwitchInfoUeInactiveSwitch=macSwitchInfoUeInactiveSwitch, retAntGainForEachOperatingBand=retAntGainForEachOperatingBand, pdcpUpPktLossRateUlQci5Enb=pdcpUpPktLossRateUlQci5Enb, macSwitchTestInfoUlPreschePrbLimit=macSwitchTestInfoUlPreschePrbLimit, invRackDescription=invRackDescription, pdcpUpPktLossRateUlQci6Enb=pdcpUpPktLossRateUlQci6Enb, hsdpaCqiPwrCtrlPcSwitch=hsdpaCqiPwrCtrlPcSwitch, nbrschetimesdlMcs29=nbrschetimesdlMcs29, macPrbUtilizationDlAvaild=macPrbUtilizationDlAvaild, macschecceusedratiosfn3=macschecceusedratiosfn3, plReceivePowerUserIndex10=plReceivePowerUserIndex10, spsOptmzRowStatus=spsOptmzRowStatus, plsfn1Prb74RIPAvg=plsfn1Prb74RIPAvg, pathCheckEnableSwitch=pathCheckEnableSwitch, phyULMaxNLPRB56=phyULMaxNLPRB56, sctpPeerType=sctpPeerType, macSwitchTestInfoRowStatus=macSwitchTestInfoRowStatus, mroPingPangTimeTh=mroPingPangTimeTh, pagingRowStatus=pagingRowStatus, ccBlerStatisticWindowSize=ccBlerStatisticWindowSize, rrcCpmCaseRelP0=rrcCpmCaseRelP0, phyULMaxNLPRB02=phyULMaxNLPRB02, rrcHcCaseRelP0=rrcHcCaseRelP0, plsfn2Prb34RIPAvg=plsfn2Prb34RIPAvg)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", hsdpaEFACHSchedTable=hsdpaEFACHSchedTable, anrNotiAdjCellRsrp=anrNotiAdjCellRsrp, sscTaskIndex=sscTaskIndex, macUpAlgorithmSrsWideBandSinrFactor=macUpAlgorithmSrsWideBandSinrFactor, phyULMeanNLPRB35=phyULMeanNLPRB35, plsfn2Prb87RIPAvg=plsfn2Prb87RIPAvg, a2RowStatus=a2RowStatus, plsfn7Prb45RIPAvg=plsfn7Prb45RIPAvg, macDownlinkMuMiMoMcsBackoff17=macDownlinkMuMiMoMcsBackoff17, macsche1cceratio=macsche1cceratio, rrcHcCaseRelP7=rrcHcCaseRelP7, eNB=eNB, phyCfgTable=phyCfgTable, plsfn9Prb34RIPAvg=plsfn9Prb34RIPAvg, macCaActiveBurstDataThPDl2CCTF=macCaActiveBurstDataThPDl2CCTF, atuDataHoBasedVolteRecFlag=atuDataHoBasedVolteRecFlag, pdcpPreset19=pdcpPreset19, fcPccpchPowerOffset=fcPccpchPowerOffset, hoSuccIncIntraFreqInterCellIntraEnb=hoSuccIncIntraFreqInterCellIntraEnb, hoSucOutIntraFreqS1=hoSucOutIntraFreqS1, atuGoldUserCfiFixSwitch=atuGoldUserCfiFixSwitch, hsupaQosCRFactor=hsupaQosCRFactor, pdcpSduDiscTotalDataNumQci5=pdcpSduDiscTotalDataNumQci5, timerApDelaySendHoNotify=timerApDelaySendHoNotify, chacRejectdepriType=chacRejectdepriType, erabEstabInitFailNbrQci2RadioInterfaceFailure=erabEstabInitFailNbrQci2RadioInterfaceFailure, userRemoteLoginSwitch=userRemoteLoginSwitch, cellOperationalState=cellOperationalState, coolingFanRowStatus=coolingFanRowStatus, eueTimerConstantsTable=eueTimerConstantsTable, plsfn8Prb21RIPAvg=plsfn8Prb21RIPAvg, ipThroughputCapacityTable=ipThroughputCapacityTable, chacHighLoadAcBarFactorRate=chacHighLoadAcBarFactorRate, hoAttOutExecInterFreqX2=hoAttOutExecInterFreqX2, ipPathType=ipPathType, macPhrIndex23=macPhrIndex23, macPreset36=macPreset36, ulPwrDeltaFPUCCHFormat1bCSR10=ulPwrDeltaFPUCCHFormat1bCSR10, configProcResult=configProcResult, pdcpVideoParamRowStatus=pdcpVideoParamRowStatus, erabModQoSAttNbrQci8=erabModQoSAttNbrQci8, plsfn7Prb56RIPAvg=plsfn7Prb56RIPAvg, raeWeightingFactorsAmplitude5=raeWeightingFactorsAmplitude5, eventGeneralEventOccurTime=eventGeneralEventOccurTime, baseBandCarrierFrameNo=baseBandCarrierFrameNo, erabModQoSAttNbrQci9=erabModQoSAttNbrQci9, rruCarrierState=rruCarrierState, caRlcBoAllocSwitch=caRlcBoAllocSwitch, pagingEnbDeftCycle=pagingEnbDeftCycle, sjm1IscpRptTypeSwitchNotSmartAnt=sjm1IscpRptTypeSwitchNotSmartAnt, s1ResetByMMEProtocol=s1ResetByMMEProtocol, transactionNextSetTimer=transactionNextSetTimer, topoRRUStateMachine=topoRRUStateMachine, hsdpaCongestCtrlTable=hsdpaCongestCtrlTable, rruFreqSelPrbPuschUsedNum=rruFreqSelPrbPuschUsedNum, netPlanPowerControlCfgSwitch=netPlanPowerControlCfgSwitch, omLinkSlotNo=omLinkSlotNo, hsdpaTfrcAlgorithmEntry=hsdpaTfrcAlgorithmEntry, hsdpaCqiPwrCtrlEntry=hsdpaCqiPwrCtrlEntry, radioBandEntry=radioBandEntry, cellCdma2000ParaCdma1XrttCsfbRegPowerUpRegInd=cellCdma2000ParaCdma1XrttCsfbRegPowerUpRegInd, timerWaitOmRsp=timerWaitOmRsp, srbNbrScheTimesSfn6=srbNbrScheTimesSfn6, plsfn9Prb63RIPAvg=plsfn9Prb63RIPAvg, sdRowStatus=sdRowStatus, cc=cc, pdcpVideoReserver6VideoActive=pdcpVideoReserver6VideoActive, cellAdjCellCdma2000Bandclass=cellAdjCellCdma2000Bandclass, lcId=lcId, macSwitchInfoHighSpeedUeInactivePeriod=macSwitchInfoHighSpeedUeInactivePeriod, mdtImmediateMdtPositionMethod=mdtImmediateMdtPositionMethod, cellUnavailDurEnergySaving=cellUnavailDurEnergySaving, mrQCI1PLRULCorrection=mrQCI1PLRULCorrection, drxQciQci=drxQciQci, plsfn9Prb71RIPAvg=plsfn9Prb71RIPAvg, alarmCauseStatefulDelayTime=alarmCauseStatefulDelayTime, plsfn2Prb82RIPAvg=plsfn2Prb82RIPAvg, nbrschetimesdlMcs22=nbrschetimesdlMcs22, multiBandAddtionlSpecEmis1=multiBandAddtionlSpecEmis1, measGapPattern=measGapPattern, airCondOverTemperatureAlarmState=airCondOverTemperatureAlarmState, macschecceusedsfn6=macschecceusedsfn6, nbrscheprbdlMcs12=nbrscheprbdlMcs12, mroTooEarlyHoTh=mroTooEarlyHoTh, pdcpVideoMatchLetv=pdcpVideoMatchLetv, antUseingWeightAmplitude5=antUseingWeightAmplitude5, amrDlVoipPacketWb9=amrDlVoipPacketWb9, pdcpProfile0x0003Flag=pdcpProfile0x0003Flag, cellRruLcNo=cellRruLcNo, plReceivePowerUserIndex15=plReceivePowerUserIndex15, baseBandwidthLoadState=baseBandwidthLoadState, macPhrIndex29=macPhrIndex29, cellGeranFreqExplicitArfcns4=cellGeranFreqExplicitArfcns4, hoFailOutIntraCellNoRsp=hoFailOutIntraCellNoRsp, rrcAttConnEstabMoData=rrcAttConnEstabMoData, apS1apRelP5=apS1apRelP5, plsfn5Prb27RIPAvg=plsfn5Prb27RIPAvg, topoPortBandCapRRUPortNo=topoPortBandCapRRUPortNo, timeSlotTypeNeighCell11=timeSlotTypeNeighCell11, outDoorCabinetPowerSupplyType=outDoorCabinetPowerSupplyType, macCASCellActiveSucc=macCASCellActiveSucc, raeBmIndicatBearingRangeH=raeBmIndicatBearingRangeH, plReceivePowerUserIndex6=plReceivePowerUserIndex6, macTestSwitchInfoUlMaxScheUeNumbpoi=macTestSwitchInfoUlMaxScheUeNumbpoi, hlSctSourceEngagedState=hlSctSourceEngagedState, phyULMeanNLPRB71=phyULMeanNLPRB71, reverseOperationSrcIPAddress=reverseOperationSrcIPAddress, phyULMeanNLPRB48=phyULMeanNLPRB48, managerRowStatus=managerRowStatus, topoRRUBandScope=topoRRUBandScope, macNbrErrTbDlMassiveMimoSM15=macNbrErrTbDlMassiveMimoSM15, fcSichOlpcSwitch=fcSichOlpcSwitch, topoSetRRUPortAntArrayPathNo=topoSetRRUPortAntArrayPathNo, iubIPPathSetupStatus=iubIPPathSetupStatus, srbNbrScheTimesSfn1=srbNbrScheTimesSfn1, hcTimeAntiShake=hcTimeAntiShake, ethernetOAMTable=ethernetOAMTable, nbrscheprbulMcs12=nbrscheprbulMcs12, erabExistNbrRowStatus=erabExistNbrRowStatus, ofpPortLinkStatus=ofpPortLinkStatus, cellInterFreqQualMinFlag=cellInterFreqQualMinFlag, netLocalCellPowerCtrlEntry=netLocalCellPowerCtrlEntry, configProcNotiNEVer=configProcNotiNEVer, raZeroCorrelatZoneCfg=raZeroCorrelatZoneCfg, rrcFailConnReconfigSPS=rrcFailConnReconfigSPS, retAntRCUAlarmClearTrigger=retAntRCUAlarmClearTrigger, phyULMeanNLPRB75=phyULMeanNLPRB75, erabEstabInitFailNbrTransResNotAvailable=erabEstabInitFailNbrTransResNotAvailable, peripheralPackDownloadTime=peripheralPackDownloadTime, contextAttInitalSetupCsfb=contextAttInitalSetupCsfb, adjeNBMmeGroupId3=adjeNBMmeGroupId3, ulCompTable=ulCompTable, rruCalcPathNo=rruCalcPathNo, dlPATEntry=dlPATEntry, lbcRedirectionMultiBandInfo=lbcRedirectionMultiBandInfo, irathoAttPrepOutUtran=irathoAttPrepOutUtran, topoRHUBSoftwareVersion=topoRHUBSoftwareVersion, macPhrIndex18=macPhrIndex18, cellAdjEutraCellEnbGlobalId=cellAdjEutraCellEnbGlobalId, macUpMuMiMoMcsBackOff15=macUpMuMiMoMcsBackOff15, plsfn9Prb69RIPAvg=plsfn9Prb69RIPAvg, atuGoldUserIoTup=atuGoldUserIoTup, ofpPortBitErrorRate=ofpPortBitErrorRate, ipoaChLinkType=ipoaChLinkType, mmeCfgPlmnMnc=mmeCfgPlmnMnc, macPreset1=macPreset1, plsfn3Prb36RIPAvg=plsfn3Prb36RIPAvg, macTestSwitchInfoScrambleMimo=macTestSwitchInfoScrambleMimo, macPrbUtilizationUlMin=macPrbUtilizationUlMin, srbRlcDefaultCfgFlag=srbRlcDefaultCfgFlag, lmcIntreVoiceLbTag=lmcIntreVoiceLbTag, handoverInERABNbrLcId=handoverInERABNbrLcId, hsdpaCongestCtrlCongestTh=hsdpaCongestCtrlCongestTh, remoteClkOpticalModuleManufacturer=remoteClkOpticalModuleManufacturer, erabActiveMaxNbrDL=erabActiveMaxNbrDL, carrierTs4ISCPInfo=carrierTs4ISCPInfo, cellSiPageMcs=cellSiPageMcs, macTestSwitchInfoHoPdcchPowerIncrease=macTestSwitchInfoHoPdcchPowerIncrease, traceTaskTable=traceTaskTable, dlCompCqiThres=dlCompCqiThres, hlTestSwitchmroSwitchTLS=hlTestSwitchmroSwitchTLS, traceLiscence=traceLiscence, plsfn0Prb72RIPAvg=plsfn0Prb72RIPAvg, sctpStreamIdTx=sctpStreamIdTx, pathDelTrigger=pathDelTrigger, hsupaSpsSchedDeltaQPSK=hsupaSpsSchedDeltaQPSK, bsrLcId=bsrLcId, e1LinkSlotId=e1LinkSlotId, plsfn2Prb09RIPAvg=plsfn2Prb09RIPAvg, plsfn1Prb55RIPAvg=plsfn1Prb55RIPAvg, cellavgripRowStatus=cellavgripRowStatus, topoRRULogFileType=topoRRULogFileType, a5TimetoTrig=a5TimetoTrig, carrierRuRowStatus=carrierRuRowStatus, raeWeightingFactorsAmplitude1=raeWeightingFactorsAmplitude1, topoRRUProgramDownloadTrigger=topoRRUProgramDownloadTrigger, plsfn8Prb47RIPAvg=plsfn8Prb47RIPAvg, retAntRCUResetTrigger=retAntRCUResetTrigger, plsfn8Prb59RIPAvg=plsfn8Prb59RIPAvg, plsfn4Prb97RIPAvg=plsfn4Prb97RIPAvg, pdcpRatioOfRUETable=pdcpRatioOfRUETable, extendDrbMinbr=extendDrbMinbr, hoNcHoPreSuccS=hoNcHoPreSuccS, sctpAssoPMDataEntry=sctpAssoPMDataEntry, erabEstabInitAttNbrQci8=erabEstabInitAttNbrQci8, tbSRBUlErr=tbSRBUlErr, puschRrSeqGroupHopFlag=puschRrSeqGroupHopFlag, cellNetParaTable=cellNetParaTable, erabActiveMeanNbrULQci2=erabActiveMeanNbrULQci2, tdsNodeBBRUStatisticType=tdsNodeBBRUStatisticType, cellInterFreqPmax=cellInterFreqPmax, fileAutoUpInterval=fileAutoUpInterval, x2hoCancelProcInterEnbTable=x2hoCancelProcInterEnbTable, plReceivePowerUserIndex0=plReceivePowerUserIndex0, plsfn6Prb03RIPAvg=plsfn6Prb03RIPAvg, almActUploadRowStatus=almActUploadRowStatus, plsfn3Prb59RIPAvg=plsfn3Prb59RIPAvg, topoPortBandCapNo=topoPortBandCapNo, hoFailPrepIncIntraFreqX2Prb=hoFailPrepIncIntraFreqX2Prb, opFuncDrxDelayTimerForConnect=opFuncDrxDelayTimerForConnect, fileAutoUploadInfo=fileAutoUploadInfo, cellCdmaBandClassInfoTable=cellCdmaBandClassInfoTable, rrcConnReleaseRedirectionTo4GLoadBalance=rrcConnReleaseRedirectionTo4GLoadBalance, videoUlPrescheTimeLimit=videoUlPrescheTimeLimit, ruePdcpSduBitLenUlQci252=ruePdcpSduBitLenUlQci252, erabRelAttNbrQci7=erabRelAttNbrQci7, hlGlobalTestMaxCellProc=hlGlobalTestMaxCellProc, traceManagementTrcSwitch=traceManagementTrcSwitch, mroRollBackTrigger=mroRollBackTrigger, boardAlarmStatics=boardAlarmStatics, cellReselIntraFreqIntraSearchP=cellReselIntraFreqIntraSearchP, ipThroughputCapacityEntry=ipThroughputCapacityEntry, tdsNetLocalCellTable=tdsNetLocalCellTable, cellGeranFreqVariableBitMapOfArfcns2=cellGeranFreqVariableBitMapOfArfcns2, rrcConnMeaneNB=rrcConnMeaneNB, mmeCfgGroupId=mmeCfgGroupId, plsfn3Prb37RIPAvg=plsfn3Prb37RIPAvg, rrcConnReEstabProcRowStatus=rrcConnReEstabProcRowStatus, saalConnRxUstatPdus=saalConnRxUstatPdus, hsdpaCQIInstantThreshold=hsdpaCQIInstantThreshold, nbapMutualCarrierNode=nbapMutualCarrierNode, raeGroupsVerticalBand=raeGroupsVerticalBand, initERABEstabProcTable=initERABEstabProcTable, tdsNodeBSysUsedBRUNumSamplePeriod=tdsNodeBSysUsedBRUNumSamplePeriod, e1LinkImaFeRxState=e1LinkImaFeRxState, tbNbrInitUl=tbNbrInitUl, hsupaPFTcSlideWindowSize=hsupaPFTcSlideWindowSize, opFuncRueJudgeFlag=opFuncRueJudgeFlag, nbrscheprbdlMcs11=nbrscheprbdlMcs11, macNbrRbDlTm9RANK1BF=macNbrRbDlTm9RANK1BF, erabModQoSFailNbrS1InterSystemHoTrig=erabModQoSFailNbrS1InterSystemHoTrig, measGapTable=measGapTable, retAntSerialNumber=retAntSerialNumber, plsfn7Prb42RIPAvg=plsfn7Prb42RIPAvg, fileTransNotiNEType=fileTransNotiNEType, mrDim2MrsBitMap=mrDim2MrsBitMap, macNbrRbDlTm2=macNbrRbDlTm2, plsfn9Prb17RIPAvg=plsfn9Prb17RIPAvg, plsfn2Prb50RIPAvg=plsfn2Prb50RIPAvg, tbNbrInitDl64QAM=tbNbrInitDl64QAM, netLcFreqBand=netLcFreqBand, plsfn4Prb95RIPAvg=plsfn4Prb95RIPAvg, heatExchangerTable=heatExchangerTable, phyULMaxNLPRB39=phyULMaxNLPRB39, rruPreambleDTotal=rruPreambleDTotal, plsfn9Prb05RIPAvg=plsfn9Prb05RIPAvg, cellGeranFreqVariableBitMapOfArfcns1=cellGeranFreqVariableBitMapOfArfcns1, plsfn4Prb40RIPAvg=plsfn4Prb40RIPAvg, procSoftCoreStatus=procSoftCoreStatus, rhubOptTransS9um100MLen=rhubOptTransS9um100MLen, macNbrRbDlMassiveMimoSM2=macNbrRbDlMassiveMimoSM2, phyULMaxNLPRB23=phyULMaxNLPRB23, cellCdma2000ParaCdma1XrttCsfbRegSid=cellCdma2000ParaCdma1XrttCsfbRegSid, plsfn0Prb11RIPAvg=plsfn0Prb11RIPAvg)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", hsdpaCqiPwrCtrlDownThresholdQpsk=hsdpaCqiPwrCtrlDownThresholdQpsk, hsdpaSFCGbrMultiple=hsdpaSFCGbrMultiple, plsfn9Prb84RIPAvg=plsfn9Prb84RIPAvg, topoSetRRUPortSubtoAntGrpID2=topoSetRRUPortSubtoAntGrpID2, tdPl=tdPl, raPrachCfgIndex=raPrachCfgIndex, ipAddrTable=ipAddrTable, topoRRUBandWidth=topoRRUBandWidth, raeSerialNumber=raeSerialNumber, macOctDlMassiveMimoSM10=macOctDlMassiveMimoSM10, procType=procType, sctpEntry=sctpEntry, phyULMaxNLPRB29=phyULMaxNLPRB29, cellAdjCellPlmnMnc=cellAdjCellPlmnMnc, puschbetaOffsetRIIndex=puschbetaOffsetRIIndex, tbSRBSuccInitDl16QAM=tbSRBSuccInitDl16QAM, resChkHlGlobalTestInstanceOccupyTimeThr=resChkHlGlobalTestInstanceOccupyTimeThr, lcAcProbFactorForMoc2=lcAcProbFactorForMoc2, tdsLcDownTimeSlotClosedNum=tdsLcDownTimeSlotClosedNum, hoFailPrepOutInterFreqS1NoRsp=hoFailPrepOutInterFreqS1NoRsp, drbUEActiveDl=drbUEActiveDl, plsfn7Prb74RIPAvg=plsfn7Prb74RIPAvg, resourceCheck=resourceCheck, b1MeasFilterCoeffUtra=b1MeasFilterCoeffUtra, erabNormRelEnbNbrQci5=erabNormRelEnbNbrQci5, plRssiAvgC24=plRssiAvgC24, videoMinBR=videoMinBR, efdAlarmSourceObject=efdAlarmSourceObject, invShelfShelfNo=invShelfShelfNo, macSwitchTestInfoVipCntLmt=macSwitchTestInfoVipCntLmt, s1hoCancelProcInterEnbLcId=s1hoCancelProcInterEnbLcId, topoSetRRUPortMaxTxPower=topoSetRRUPortMaxTxPower, syslogServerRowStatus=syslogServerRowStatus, ueImsMatchConfigSrvccCapa=ueImsMatchConfigSrvccCapa, packRRUUpgradeCtrlSwitch=packRRUUpgradeCtrlSwitch, plsfn8Prb23RIPAvg=plsfn8Prb23RIPAvg, rrcLpmCaseRelP5=rrcLpmCaseRelP5, atuGoldUeIMSI2=atuGoldUeIMSI2, cellCdma2000ParaSystemTimeInfoFlag=cellCdma2000ParaSystemTimeInfoFlag, hlTestSwitchTable=hlTestSwitchTable, b1MeasQuantityGeran=b1MeasQuantityGeran, cellLccStatus=cellLccStatus, activeUETable=activeUETable, rrcSuccConnReconfigMeasCfg=rrcSuccConnReconfigMeasCfg, hsupaTfrcTpcThreshold=hsupaTfrcTpcThreshold, phyULMeanNLPRB52=phyULMeanNLPRB52, hoOutPrepFailCauseTCellNoResponse=hoOutPrepFailCauseTCellNoResponse, pdcpProfile0x0101Flag=pdcpProfile0x0101Flag, dlrbStatisticLcId=dlrbStatisticLcId, activeRRCEntry=activeRRCEntry, hlTestSRVCCDelayTimer=hlTestSRVCCDelayTimer, plsfn1Prb46RIPAvg=plsfn1Prb46RIPAvg, pdcpSduDropTotalDateLenQci2=pdcpSduDropTotalDateLenQci2, hsdpaHarqRv16Qam7New=hsdpaHarqRv16Qam7New, hoSuccOutRlcIntraCell=hoSuccOutRlcIntraCell, ethPortStatus=ethPortStatus, topoRHUBAutTMSwitch=topoRHUBAutTMSwitch, dataPlanStatisticTable=dataPlanStatisticTable, netRRURootAlarmType2=netRRURootAlarmType2, localCarrierNbrMacePdu=localCarrierNbrMacePdu, plsfn3Prb30RIPAvg=plsfn3Prb30RIPAvg, rrcLpmCaseRelP4=rrcLpmCaseRelP4, sessiontimeerabQci8=sessiontimeerabQci8, hoAttOutPrepInterFreqS1=hoAttOutPrepInterFreqS1, apbMaxJointCmrNum=apbMaxJointCmrNum, rtRelatPeerIpType=rtRelatPeerIpType, macschecceusedratiosfn9=macschecceusedratiosfn9, plsfn3Prb87RIPAvg=plsfn3Prb87RIPAvg, cellAcBarForVoiceFlag=cellAcBarForVoiceFlag, cellGeranFreqExplicitArfcns16=cellGeranFreqExplicitArfcns16, plsfn0Prb37RIPAvg=plsfn0Prb37RIPAvg, carrierRuTs2Info=carrierRuTs2Info, mdtFtpServerPassword=mdtFtpServerPassword, hoFailPrepIncInterFreqIntraEnbHORestrictList=hoFailPrepIncInterFreqIntraEnbHORestrictList, drbPdcpSduBitLenDlQci6=drbPdcpSduBitLenDlQci6, macUpAlgorithmVolteFixCce8Tag=macUpAlgorithmVolteFixCce8Tag, rrcPreset1=rrcPreset1, phyULMeanNLPRB32=phyULMeanNLPRB32, s1Flex=s1Flex, plsfn3Prb01RIPAvg=plsfn3Prb01RIPAvg, macNbrTbDlTm6=macNbrTbDlTm6, dlCAPwrDelta2Sdm2SfbcInTm3=dlCAPwrDelta2Sdm2SfbcInTm3, fileTransNotiIndicator=fileTransNotiIndicator, hoHoPreSuccLB=hoHoPreSuccLB, adjeNBMmeGroupId5=adjeNBMmeGroupId5, macNbrTbDlMassiveMimoSM5=macNbrTbDlMassiveMimoSM5, cellUtraFreqQoffset=cellUtraFreqQoffset, rrcFailConnReconfigDrbID=rrcFailConnReconfigDrbID, ueStaticsInformation=ueStaticsInformation, nbrschetimesdlMcs14=nbrschetimesdlMcs14, alarmBoxRowStatus=alarmBoxRowStatus, peripheralPackEntry=peripheralPackEntry, hoAttOutFddTddS1=hoAttOutFddTddS1, topoRHUBUpLinkSlaveOfpPortNo=topoRHUBUpLinkSlaveOfpPortNo, e1LinkId=e1LinkId, atuGoldUeIMSI12=atuGoldUeIMSI12, macschecceallsfn4=macschecceallsfn4, radioBandRRUPathNo=radioBandRRUPathNo, hlTestSwitchDlStartPrbNoForEdgeUe=hlTestSwitchDlStartPrbNoForEdgeUe, extendDrbPdcpCfgId=extendDrbPdcpCfgId, lbc40FcLcId=lbc40FcLcId, macPhrIndex15=macPhrIndex15, contextAttRelMMENbrRadioNetworkLayerOther=contextAttRelMMENbrRadioNetworkLayerOther, rueRRCConnReEstabAtt=rueRRCConnReEstabAtt, plPreambeRevNumLcId=plPreambeRevNumLcId, dryContactRowStatus=dryContactRowStatus, topoRRUTemperatureUpperLimit=topoRRUTemperatureUpperLimit, mrFileSize=mrFileSize, raeSoftwareVersion=raeSoftwareVersion, handOverProcIntraEnbTable=handOverProcIntraEnbTable, cellCdlPagingSwitch=cellCdlPagingSwitch, fcMaxSnrUlss=fcMaxSnrUlss, plsfn7Prb95RIPAvg=plsfn7Prb95RIPAvg, macPreset31=macPreset31, drbBurstDataThpULQci5=drbBurstDataThpULQci5, baseBandCarrierTxPath2CalFactorQ=baseBandCarrierTxPath2CalFactorQ, hoFailPrepIncInterFreqS1Prb=hoFailPrepIncInterFreqS1Prb, cellLcId=cellLcId, cellAntWeightPhase14=cellAntWeightPhase14, topoRRUFiberFaultReason=topoRRUFiberFaultReason, plUsrLogPucchCatchDataServiceType=plUsrLogPucchCatchDataServiceType, hsupaCellSelectSchedNum=hsupaCellSelectSchedNum, plsfn3Prb35RIPAvg=plsfn3Prb35RIPAvg, fcDoNothingULSC=fcDoNothingULSC, plsfn6Prb39RIPAvg=plsfn6Prb39RIPAvg, macDownlinklamdathreshold=macDownlinklamdathreshold, a6CfgId=a6CfgId, plsfn1Prb56RIPAvg=plsfn1Prb56RIPAvg, tdsLcCellBlockStatus=tdsLcCellBlockStatus, plsfn0Prb84RIPAvg=plsfn0Prb84RIPAvg, tdsLcAntArrayMode=tdsLcAntArrayMode, sscTaskCollectEntityPort=sscTaskCollectEntityPort, macUpAlgorithmCqiModifyVaddMin=macUpAlgorithmCqiModifyVaddMin, pdcpPreset9=pdcpPreset9, a2MeasPurpose=a2MeasPurpose, hsdpaHarqRvQpsk6=hsdpaHarqRvQpsk6, dlCompCqiOffset=dlCompCqiOffset, plsfn0Prb04RIPAvg=plsfn0Prb04RIPAvg, mdtTaskPlmnMcc=mdtTaskPlmnMcc, outDoorCabinetLocalInfo=outDoorCabinetLocalInfo, hsupaPFRowStatus=hsupaPFRowStatus, hoCancelIntraFreqIntraEnbS1HandOverSucc=hoCancelIntraFreqIntraEnbS1HandOverSucc, plUsrLogCfgTable=plUsrLogCfgTable, swPackPlanUpgradeState=swPackPlanUpgradeState, netS1IfRowStatus=netS1IfRowStatus, alterationNotiNEID=alterationNotiNEID, contextAttReleNBNbrUnspecified=contextAttReleNBNbrUnspecified, a5RptThreshold2Rsrq=a5RptThreshold2Rsrq, fc=fc, cellAdjDelEnbGlobalId=cellAdjDelEnbGlobalId, nbrscheprbulMcs27=nbrscheprbulMcs27, plsfn7PrbG3RIPMax=plsfn7PrbG3RIPMax, cellSpeCalCfgDwptsRetxFlag=cellSpeCalCfgDwptsRetxFlag, omLinkLocalIPAddressType=omLinkLocalIPAddressType, logFileConfigurationMaxBytes=logFileConfigurationMaxBytes, caPerformanceLcId=caPerformanceLcId, sfn7avgripTable=sfn7avgripTable, b2MeasAlgoType=b2MeasAlgoType, drbPdcpSduDelayDlQci5=drbPdcpSduDelayDlQci5, atuGoldUeIMSI18=atuGoldUeIMSI18, boardStatVoltage=boardStatVoltage, taPerformanceTable=taPerformanceTable, plsfn0Prb67RIPAvg=plsfn0Prb67RIPAvg, netRRULocation=netRRULocation, rhubOpticalTransceiverEntry=rhubOpticalTransceiverEntry, atuVIPTransferFlag=atuVIPTransferFlag, hoIntraEnbLBCOutSucc=hoIntraEnbLBCOutSucc, plsfn2Prb04RIPAvg=plsfn2Prb04RIPAvg, macPhrIndex36=macPhrIndex36, dlCAPwrPowerBoostCqi2=dlCAPwrPowerBoostCqi2, hoFailPrepIncIntraFreqS1SPS=hoFailPrepIncIntraFreqS1SPS, plsfn9Prb61RIPAvg=plsfn9Prb61RIPAvg, macDownlinkMuMiMoResPreestamateFactor=macDownlinkMuMiMoResPreestamateFactor, userPwdlifeCycle=userPwdlifeCycle, reservedCellL3Para2=reservedCellL3Para2, raeMaximumSupportedElectricalTilt=raeMaximumSupportedElectricalTilt, airConditionerTable=airConditionerTable, hsdpaCommSchedDpchPreemptPolicy=hsdpaCommSchedDpchPreemptPolicy, swFileName=swFileName, hoSuccOutInterFreqRadio=hoSuccOutInterFreqRadio, dlrbStatisticRowStatus=dlrbStatisticRowStatus, phyTA10=phyTA10, emTemperatureUpperLimit=emTemperatureUpperLimit, erabRelMmeNbrQci1Other=erabRelMmeNbrQci1Other, macNbrErrTbDlMassiveMimoSM12=macNbrErrTbDlMassiveMimoSM12, plsfn5Prb76RIPAvg=plsfn5Prb76RIPAvg, phyCfgUncertainCQIUeIndex=phyCfgUncertainCQIUeIndex, bsrTable=bsrTable, spsRowStatus=spsRowStatus, topoRRUCarrier14ULPowerValue=topoRRUCarrier14ULPowerValue, raePortInfoSubIndexNo=raePortInfoSubIndexNo, rruPrbUlQci8Num=rruPrbUlQci8Num, multiBand=multiBand, cellGeranFreqExplicitArfcns17=cellGeranFreqExplicitArfcns17, rrcConnReleaseRedirectionToCdma2000HrpdMea=rrcConnReleaseRedirectionToCdma2000HrpdMea, caUserLimitSwitch=caUserLimitSwitch, tbNbrSuccInitUl64QAM=tbNbrSuccInitUl64QAM, rrcConnNumberLcId=rrcConnNumberLcId, plsfn3Prb94RIPAvg=plsfn3Prb94RIPAvg, amrDlVoipPacketNb6=amrDlVoipPacketNb6, cellCdlServiceSwitch=cellCdlServiceSwitch, erabExistNbrEntry=erabExistNbrEntry, drxQciInactivityTimerB=drxQciInactivityTimerB, antUseingWeightAmplitude2=antUseingWeightAmplitude2, netRRUAntCombinGrpNo=netRRUAntCombinGrpNo, cellInterFreqOffsetFreq=cellInterFreqOffsetFreq, pdcpPreset1=pdcpPreset1, eNBEightPathShutdownType=eNBEightPathShutdownType, saalMaxNmbBufs=saalMaxNmbBufs, volteHOSuccOutIntraEnbIntraFreq=volteHOSuccOutIntraEnbIntraFreq, plsfn9Prb59RIPAvg=plsfn9Prb59RIPAvg, peripheralPackPlanDownloadIndicator=peripheralPackPlanDownloadIndicator, a5RptQuantity=a5RptQuantity, erabHoFailQci1=erabHoFailQci1, drbPdcpSduBitLenDlQci3=drbPdcpSduBitLenDlQci3, hsdpaHarqRv64Qam8=hsdpaHarqRv64Qam8, sdForgettingFactorP=sdForgettingFactorP, a1RptQuantity=a1RptQuantity, plsfn4Prb42RIPAvg=plsfn4Prb42RIPAvg, cellCompanyVideoReserver18VideoNum=cellCompanyVideoReserver18VideoNum, erabEstabInitFailNbrQci1Other=erabEstabInitFailNbrQci1Other, topoPortBandCapRowStatus=topoPortBandCapRowStatus, pdcpSduDlDiscRatioTable=pdcpSduDlDiscRatioTable, reverseOperationTable=reverseOperationTable, contextAttRelMMENbrSucHO=contextAttRelMMENbrSucHO, macTestSwitchInfoSchePrbControlSwitch=macTestSwitchInfoSchePrbControlSwitch, macDownlinkDecEff12Tm3=macDownlinkDecEff12Tm3, plsfn1Prb09RIPAvg=plsfn1Prb09RIPAvg, macSwitchInfoDlFsSwitch=macSwitchInfoDlFsSwitch, e1LinkImaNeLif=e1LinkImaNeLif, cellAdjUtraFddCellIndex=cellAdjUtraFddCellIndex, activeAlarmRequestID=activeAlarmRequestID, macPreset12=macPreset12, a1RptThresholdRsrq=a1RptThresholdRsrq, raeGeneralEntry=raeGeneralEntry, puschbetaOffsetACKIndex=puschbetaOffsetACKIndex, lcAcProbFactorForSignal1=lcAcProbFactorForSignal1, erabEstabInitFailNbrInvalidQosCombination=erabEstabInitFailNbrInvalidQosCombination, contextExistNbrRowStatus=contextExistNbrRowStatus, macNbrErrTbDlMassiveMimoSM9=macNbrErrTbDlMassiveMimoSM9, anrNotification=anrNotification, lbc40Fc=lbc40Fc, macUpAlgorithmMidPointUePrbNum=macUpAlgorithmMidPointUePrbNum, loggedMdtPlmnMnc=loggedMdtPlmnMnc, localCarrierSyncUlConflicts=localCarrierSyncUlConflicts, plsfn7PrbG19RIPMax=plsfn7PrbG19RIPMax, ueContextProcTable=ueContextProcTable, s1FlexDefMmePlmnMcc=s1FlexDefMmePlmnMcc, tdsLcLocalCellGrpId=tdsLcLocalCellGrpId, phyULMaxNLPRB63=phyULMaxNLPRB63, topoRRUAccessSlaveDlTimeDelay=topoRRUAccessSlaveDlTimeDelay, plsfn0Prb39RIPAvg=plsfn0Prb39RIPAvg, macTestSwitchInfoMacBfWbFlag=macTestSwitchInfoMacBfWbFlag, plsfn9Prb93RIPAvg=plsfn9Prb93RIPAvg)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", dlCAPwrCceUsageTh1Low=dlCAPwrCceUsageTh1Low, rruCalcPathRowStatus=rruCalcPathRowStatus, dryContactAlarmNo=dryContactAlarmNo, ethRackNo=ethRackNo, phyULMaxNLPRB76=phyULMaxNLPRB76, macTestSwitchInfolimitUlMcs=macTestSwitchInfolimitUlMcs, cellSpeCalCfgRowStatus=cellSpeCalCfgRowStatus, mroNotiType=mroNotiType, atuUlBoTforUL=atuUlBoTforUL, iubImaGrpSlotId=iubImaGrpSlotId, rlcPreset38=rlcPreset38, mrStartTime1=mrStartTime1, lbcPrbMeasurementReport=lbcPrbMeasurementReport, plsfn9Prb31RIPAvg=plsfn9Prb31RIPAvg, daughterBoardRackNo=daughterBoardRackNo, swPackPlanOpEndingIndicator=swPackPlanOpEndingIndicator, timerInterRatGeranHc=timerInterRatGeranHc, plsfn8Prb58RIPAvg=plsfn8Prb58RIPAvg, erabEstabAddFailNbrX2HandoverTriggered=erabEstabAddFailNbrX2HandoverTriggered, pdcpDlPacketDelayTable=pdcpDlPacketDelayTable, a5RptThreshold1Rsrq=a5RptThreshold1Rsrq, plsfn4Prb56RIPAvg=plsfn4Prb56RIPAvg, erabRelProcByHORowStatus=erabRelProcByHORowStatus, a3RowStatus=a3RowStatus, opFuncRowStatus=opFuncRowStatus, invRackType=invRackType, netEquipInfo=netEquipInfo, netRRURootAlarmState6=netRRURootAlarmState6, hsupaTfrcCtrlChSdmaDegree=hsupaTfrcCtrlChSdmaDegree, MncMccType=MncMccType, plsfn7PrbG11RIPMax=plsfn7PrbG11RIPMax, erabNbrEstabSampNum=erabNbrEstabSampNum, erabNormRelEnbNbrQci8=erabNormRelEnbNbrQci8, hcFailMaxNumForInterRat=hcFailMaxNumForInterRat, macCellCompUeNumQci1=macCellCompUeNumQci1, macTestSwitchInfoInitDLCQIModifFlag=macTestSwitchInfoInitDLCQIModifFlag, macDownlinkEffTableSwitchFlag=macDownlinkEffTableSwitchFlag, plsfn0Prb45RIPAvg=plsfn0Prb45RIPAvg, cellSpeCalCfgDwptsTruncateLength=cellSpeCalCfgDwptsTruncateLength, plsfn8Prb68RIPAvg=plsfn8Prb68RIPAvg, spsCfgEntry=spsCfgEntry, s1InterfaceIPStatEthSlotNo=s1InterfaceIPStatEthSlotNo, drbPdcpSduTotalDelayDlQci3=drbPdcpSduTotalDelayDlQci3, lbc40FcFastHoDeltaTh=lbc40FcFastHoDeltaTh, userHandoverUserName=userHandoverUserName, maintenceStateNotificationObjects=maintenceStateNotificationObjects, netEthPortSlotNo=netEthPortSlotNo, traceTask=traceTask, debugUploadRowStatus=debugUploadRowStatus, swPackVersion=swPackVersion, macSwitchTestInfoPdcpDynamicPktLenSwitch=macSwitchTestInfoPdcpDynamicPktLenSwitch, cellShedSib10Period=cellShedSib10Period, atuByIpLcId=atuByIpLcId, atuUeIMSI7=atuUeIMSI7, a2MaxReportCell=a2MaxReportCell, lbc=lbc, spsOptmzSrvccBlerThr=spsOptmzSrvccBlerThr, raeWeightingFactorsAntennaArrayNo=raeWeightingFactorsAntennaArrayNo, plsfn9Prb70RIPAvg=plsfn9Prb70RIPAvg, hsdpaSFCRowStatus=hsdpaSFCRowStatus, airCondCompressorOverVoltageAlarmState=airCondCompressorOverVoltageAlarmState, cellUlAnteIot=cellUlAnteIot, configfilePlanEntry=configfilePlanEntry, plsfn5Prb87RIPAvg=plsfn5Prb87RIPAvg, fcPdschOffsetDelta=fcPdschOffsetDelta, macCaActiveThrpTimeDL2CC=macCaActiveThrpTimeDL2CC, macSwitchTestInfoRiaSwitchTLS=macSwitchTestInfoRiaSwitchTLS, eueMeasCellCfgLcId=eueMeasCellCfgLcId, macPreset11=macPreset11, tbSRBSuccInitUlQpsk=tbSRBSuccInitUlQpsk, phyCfgBFGranuleSinglePort=phyCfgBFGranuleSinglePort, hoSuccIncIntraFreqX2=hoSuccIncIntraFreqX2, lccNeighborCellQOff=lccNeighborCellQOff, plsfn0Prb27RIPAvg=plsfn0Prb27RIPAvg, boardSBootUpdateTrigger=boardSBootUpdateTrigger, topoRRURemoteResetNextRruTrigger=topoRRURemoteResetNextRruTrigger, a1MeasPurpose=a1MeasPurpose, syslogServerManagerIndex=syslogServerManagerIndex, topoRRUAccessUlTimeDelay=topoRRUAccessUlTimeDelay, erabEstabSuccNbrQci252=erabEstabSuccNbrQci252, retAntennaRCUTable=retAntennaRCUTable, swPackRelyVesion=swPackRelyVesion, ueContextProcEntry=ueContextProcEntry, macTestPmiFindError=macTestPmiFindError, rlcPreset30=rlcPreset30, mrEndTime1=mrEndTime1, nbrscheprbulMcs21=nbrscheprbulMcs21, macSRBTbDLRank5=macSRBTbDLRank5, gpsLatitude=gpsLatitude, erabReleNBRowStatus=erabReleNBRowStatus, encryptAlgorithmIndex=encryptAlgorithmIndex, smallPacketAlgTable=smallPacketAlgTable, drbPdcpSduBitLenUlQci4=drbPdcpSduBitLenUlQci4, pmExpressionRowStatus=pmExpressionRowStatus, erabNbrMaxEstabQci6=erabNbrMaxEstabQci6, macSwitchTestInfoTAReviseThre=macSwitchTestInfoTAReviseThre, phyCfgRipPMReportDeltaSwitch=phyCfgRipPMReportDeltaSwitch, cellReselectCommonEntry=cellReselectCommonEntry, boardStorageDevUsedSize=boardStorageDevUsedSize, sjm1CoFreqAlgorithmSwitchNotSmartAnt=sjm1CoFreqAlgorithmSwitchNotSmartAnt, lmcMlbBackoffMonitorTime=lmcMlbBackoffMonitorTime, userName=userName, hsdpaHarqRv16Qam6New=hsdpaHarqRv16Qam6New, a3LcId=a3LcId, videoActiveTable=videoActiveTable, cellAdjCellCdmaFreq=cellAdjCellCdmaFreq, networkElementLayoutPlan=networkElementLayoutPlan, cellAdjEutraCellEntry=cellAdjEutraCellEntry, cellAdjUtraFddCellRacFlag=cellAdjUtraFddCellRacFlag, ftpServerRowStatus=ftpServerRowStatus, macCaActiveMacThruPCellDl=macCaActiveMacThruPCellDl, plsfn7Prb25RIPAvg=plsfn7Prb25RIPAvg, hsdpaHarqRv16Qam6=hsdpaHarqRv16Qam6, extendDrbPriority=extendDrbPriority, plsfn7Prb11RIPAvg=plsfn7Prb11RIPAvg, rrcCASCellReleaseSucc=rrcCASCellReleaseSucc, contextFailInitalSetupNbrUeS1apIdPairError=contextFailInitalSetupNbrUeS1apIdPairError, rrcCpmMeasCaseRelP9=rrcCpmMeasCaseRelP9, omLinkTable=omLinkTable, nodebBlockStatLcId=nodebBlockStatLcId, hsdpaMaxCIRowStatus=hsdpaMaxCIRowStatus, hsdpaCqiPwrCtrlRowStatus=hsdpaCqiPwrCtrlRowStatus, netS1InterfaceEntry=netS1InterfaceEntry, plsfn7Prb09RIPAvg=plsfn7Prb09RIPAvg, peripheralPackDirectory=peripheralPackDirectory, cellInterRatCdmaHRPDSfHigh=cellInterRatCdmaHRPDSfHigh, plsfn4Prb90RIPAvg=plsfn4Prb90RIPAvg, drbPdcpSduBitLenUlQci9=drbPdcpSduBitLenUlQci9, plsfn1Prb24RIPAvg=plsfn1Prb24RIPAvg, atuGoldUeIMSI37=atuGoldUeIMSI37, topoRRUAccessBoardType=topoRRUAccessBoardType, daughterBoardVendorName=daughterBoardVendorName, invIocRowStatus=invIocRowStatus, macSwitchTestInfoUlPreschePrbNumMin=macSwitchTestInfoUlPreschePrbNumMin, plsfn7Prb00RIPAvg=plsfn7Prb00RIPAvg, tdsLcAppScene=tdsLcAppScene, a2MdtRptThresholdRsrq=a2MdtRptThresholdRsrq, lccProcessMethod1=lccProcessMethod1, macTestSwitchQci2ScwSwitch=macTestSwitchQci2ScwSwitch, erabRelEnbNbrQci1UELost=erabRelEnbNbrQci1UELost, plsfn5Prb29RIPAvg=plsfn5Prb29RIPAvg, plsfn9Prb54RIPAvg=plsfn9Prb54RIPAvg, mrEndDate=mrEndDate, plsfn6Prb50RIPAvg=plsfn6Prb50RIPAvg, configfilePlanScheduleActivateTime=configfilePlanScheduleActivateTime, plsfn2Prb30RIPAvg=plsfn2Prb30RIPAvg, calibrationNode=calibrationNode, hoFailPrepIncInterFreqIntraEnbCellOverLoad=hoFailPrepIncInterFreqIntraEnbCellOverLoad, topoRRUPACurrentEntry=topoRRUPACurrentEntry, topoRRUMaxTxPower=topoRRUMaxTxPower, erabNbrHoIncQci5=erabNbrHoIncQci5, boardTable=boardTable, phyULMeanNLPRB33=phyULMeanNLPRB33, plsfn9Prb57RIPAvg=plsfn9Prb57RIPAvg, rrcFailConnEstabParameterError=rrcFailConnEstabParameterError, daughterBoardInventoryUnitType=daughterBoardInventoryUnitType, macPhrIndex31=macPhrIndex31, boardTemperature=boardTemperature, phyULMeanNLPRB22=phyULMeanNLPRB22, maintenceStateNotifications=maintenceStateNotifications, geranDtmFlag=geranDtmFlag, ruePdcpSduBitLenUlQci253=ruePdcpSduBitLenUlQci253, cellGeranFreqRowStatus=cellGeranFreqRowStatus, plsfn1Prb60RIPAvg=plsfn1Prb60RIPAvg, hoFailOutInterFreqInterCellIntraEnbPerEncFail=hoFailOutInterFreqInterCellIntraEnbPerEncFail, erabInitEstabTimeLcId=erabInitEstabTimeLcId, plReceivePowerIndex0=plReceivePowerIndex0, cellGeranFreqVariableBitMapOfArfcns13=cellGeranFreqVariableBitMapOfArfcns13, cellSpecialSubSfnPatterns=cellSpecialSubSfnPatterns, carrierTs3ISCPInfo=carrierTs3ISCPInfo, srNbrScheTimesTotol=srNbrScheTimesTotol, twampLinkIPAddressType=twampLinkIPAddressType, equipConnectUeNum=equipConnectUeNum, cellReselIntraFreqQrxLevMin=cellReselIntraFreqQrxLevMin, atuVipUserAppointFreqTag=atuVipUserAppointFreqTag, atuByIpEntry=atuByIpEntry, hsdpaSFCUuAvgRateWin=hsdpaSFCUuAvgRateWin, trafficCategoryServiceType=trafficCategoryServiceType, srsSubFrmCfgChoice=srsSubFrmCfgChoice, iubIPPathEnableMacQos=iubIPPathEnableMacQos, sntpPortId=sntpPortId, cellAcBarList5ForOrigiCalls=cellAcBarList5ForOrigiCalls, cellIotObjects=cellIotObjects, lbcRedirectionMultiBandInfoFlag=lbcRedirectionMultiBandInfoFlag, plsfn6Prb61RIPAvg=plsfn6Prb61RIPAvg, ccHichFmNackUser3=ccHichFmNackUser3, cellAntWeightAmplitude8=cellAntWeightAmplitude8, phyULMaxNLPRB19=phyULMaxNLPRB19, spsOptmzDlnkPrsstActvThr=spsOptmzDlnkPrsstActvThr, macUpAlgorithmNearPointUePrbNum=macUpAlgorithmNearPointUePrbNum, pagingEntry=pagingEntry, boardVoltage=boardVoltage, cellAntWeightPhase17=cellAntWeightPhase17, pubAlgorithmParaHSpucchSwitch=pubAlgorithmParaHSpucchSwitch, rhubOptTransRowStatus=rhubOptTransRowStatus, interRatPsMeasCtrlSwitch=interRatPsMeasCtrlSwitch, plsfn8Prb39RIPAvg=plsfn8Prb39RIPAvg, cellRruCellLcId=cellRruCellLcId, swPackDirectory=swPackDirectory, plsfn3Prb22RIPAvg=plsfn3Prb22RIPAvg, softwarePackCustRunningTable=softwarePackCustRunningTable, sdTable=sdTable, hsDirectionalHoSuccOut=hsDirectionalHoSuccOut, baseBandwidthSlotNo=baseBandwidthSlotNo, topoRRUNextResetTimer=topoRRUNextResetTimer, pdcpUpPktLossRateDlQci3Enb=pdcpUpPktLossRateDlQci3Enb, taLcId=taLcId, integrityAlgorithmTable=integrityAlgorithmTable, pdcpVideoKeyWords=pdcpVideoKeyWords, hsdpaSpi9Weight=hsdpaSpi9Weight, sscX2Switch=sscX2Switch, macOctDlMassiveMimoSM7=macOctDlMassiveMimoSM7, plsfn6Prb46RIPAvg=plsfn6Prb46RIPAvg, cellAdjDelCellCdmaPhyCellId=cellAdjDelCellCdmaPhyCellId, lmcMlbMrDeltaRsrp=lmcMlbMrDeltaRsrp, netIROfpTransPlanSpeed=netIROfpTransPlanSpeed, mmeCfgConnectUENum=mmeCfgConnectUENum, bfdTable=bfdTable, raeSupportFunctions=raeSupportFunctions, hlSctSourceLcId=hlSctSourceLcId, macDownlinkDlAntSelectThresCqiHigh=macDownlinkDlAntSelectThresCqiHigh, puschRrCycShift=puschRrCycShift, hlTestSwitchPdschPa=hlTestSwitchPdschPa, rlcPreset10=rlcPreset10, cellAvailCapRowStatus=cellAvailCapRowStatus, cellCfgFrameType=cellCfgFrameType, rruTypePortAntMaxPower=rruTypePortAntMaxPower, iubSCTPStatOutLossCheckLongPeriod=iubSCTPStatOutLossCheckLongPeriod, pdcpBbuSourceRackNo=pdcpBbuSourceRackNo, cellPrbDlPrbInfo=cellPrbDlPrbInfo, erabRelActNbrQci9=erabRelActNbrQci9, erabEstabInitSuccNbrQci8=erabEstabInitSuccNbrQci8, contextFailInitalSetupNbrAbstractSyntaxError=contextFailInitalSetupNbrAbstractSyntaxError, traceTaskManagerIndex=traceTaskManagerIndex, pdcpVideoParamLcId=pdcpVideoParamLcId, iubOFPortIsOMLink=iubOFPortIsOMLink, cellCompanyVideoReserver3VideoNum=cellCompanyVideoReserver3VideoNum, nodebBlockStateNotify=nodebBlockStateNotify, macSwitchInfoTrafficeInactiveTimer=macSwitchInfoTrafficeInactiveTimer, smallPacketDlPacketNumberThreshold=smallPacketDlPacketNumberThreshold, raeGeneralVer=raeGeneralVer, erabActiveNumberLcId=erabActiveNumberLcId, macUpAlgorithmFarPointUePrbNum=macUpAlgorithmFarPointUePrbNum, ccEntry=ccEntry, pwdPolicy=pwdPolicy, nodeBHW=nodeBHW, hsdpaCqiPwrCtrlWinStep=hsdpaCqiPwrCtrlWinStep, schePrbAcoordingMCSTable=schePrbAcoordingMCSTable, hlTestSwitchVolteCarrierFreq=hlTestSwitchVolteCarrierFreq, trafficCategoryEntry=trafficCategoryEntry, rrcConnReconfigProcTable=rrcConnReconfigProcTable, retAntRCUProductNumber=retAntRCUProductNumber, rrcHcCaseRelP5=rrcHcCaseRelP5, plsfn3Prb62RIPAvg=plsfn3Prb62RIPAvg)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", amrDlVoipPacketNb5=amrDlVoipPacketNb5, e1LinkRxTrlId=e1LinkRxTrlId, traceUeSrvInetAddrType=traceUeSrvInetAddrType, saalConnRnc2NbClr=saalConnRnc2NbClr, tdsNetLocalCellCtrlEntry=tdsNetLocalCellCtrlEntry, sdUpptsShortAverFactor=sdUpptsShortAverFactor, caRlcNonOverloadThr=caRlcNonOverloadThr, tdsNetLcAppScene=tdsNetLcAppScene, icicDlPamax=icicDlPamax, rrcFailConnReconfigOthers=rrcFailConnReconfigOthers, cellCompanyVideoReserver2VideoNum=cellCompanyVideoReserver2VideoNum, phyCfgMmseSwitch=phyCfgMmseSwitch, plUsrLogPucchCatchDataUeindex=plUsrLogPucchCatchDataUeindex, macNbrRbDlPBCH=macNbrRbDlPBCH, macSwitchTestInfoTCPActiveAckSwitch=macSwitchTestInfoTCPActiveAckSwitch, plsfn3Prb21RIPAvg=plsfn3Prb21RIPAvg, hsupaQosGamaBufferA=hsupaQosGamaBufferA, nbrschetimesdlMcs7=nbrschetimesdlMcs7, hoAbnormalIntraCellTable=hoAbnormalIntraCellTable, sdCountThreshold=sdCountThreshold, sscStartMinute2=sscStartMinute2, circuitPackTable=circuitPackTable, peripheralPackRunningZipType=peripheralPackRunningZipType, mroA3OffsetThBaseLowTh=mroA3OffsetThBaseLowTh, hsdpaHarqRvQpsk8=hsdpaHarqRvQpsk8, plsfn2Prb25RIPAvg=plsfn2Prb25RIPAvg, macDownlinkRi1Times=macDownlinkRi1Times, mroA2ThBaseLowTh=mroA2ThBaseLowTh, a4MaxReportCell=a4MaxReportCell, srvccAttOutDelay=srvccAttOutDelay, anr2GAdjrelationNum=anr2GAdjrelationNum, ofpPortModuleLossStatus=ofpPortModuleLossStatus, cellUlAnteIotLcId=cellUlAnteIotLcId, gfiEnbIPAddress=gfiEnbIPAddress, ueAccNumLcId=ueAccNumLcId, volteHOSuccOutInterEnbX2IntraFreq=volteHOSuccOutInterEnbX2IntraFreq, macTestSwitchInfoSchePrbStart=macTestSwitchInfoSchePrbStart, imaGroupTable=imaGroupTable, adjCellECGITable=adjCellECGITable, initCalibrationAnt8RxStatus=initCalibrationAnt8RxStatus, hoInterEnbX2LBCOutAtt=hoInterEnbX2LBCOutAtt, atuByIpTable=atuByIpTable, macSpsPrbUl=macSpsPrbUl, plReceivePowerUserIndex4=plReceivePowerUserIndex4, macTestSwitchInfoMeasSwitch=macTestSwitchInfoMeasSwitch, macPhrIndex59=macPhrIndex59, sscStartMinute4=sscStartMinute4, a5MaxReportCell=a5MaxReportCell, nbrschetimesdlMcs4=nbrschetimesdlMcs4, erabNbrReqRelEnbByHOQCI2=erabNbrReqRelEnbByHOQCI2, macMaxSchUeDl=macMaxSchUeDl, inventoryEquipment=inventoryEquipment, perfOfMacForTestRowStatus=perfOfMacForTestRowStatus, hsdpaHarqRvQpsk7=hsdpaHarqRvQpsk7, spsOptmzUpAlgPersistPrbLimitNum=spsOptmzUpAlgPersistPrbLimitNum, ospPeakCpuUsageRatio=ospPeakCpuUsageRatio, plsfn5Prb13RIPAvg=plsfn5Prb13RIPAvg, pdcpVideoKuaiShouVideoActive=pdcpVideoKuaiShouVideoActive, saalConnRxBufferInUseGauge=saalConnRxBufferInUseGauge, pdcpVideoReserver9VideoActive=pdcpVideoReserver9VideoActive, pdcpSduDropTotalDateLenQci3=pdcpSduDropTotalDateLenQci3, plADIMacTestSwitchInfolimitDlMcs=plADIMacTestSwitchInfolimitDlMcs, globalAlgorithm=globalAlgorithm, retAntRCUUserData=retAntRCUUserData, drbPdcpSduDelayDlQci3=drbPdcpSduDelayDlQci3, trafficCategoryIndex=trafficCategoryIndex, phyULMaxNLPRB97=phyULMaxNLPRB97, rrcConnReEstabFailOthers=rrcConnReEstabFailOthers, emHumidityLocation=emHumidityLocation, mimoPerformanceTable=mimoPerformanceTable, pdcpRatioSILcId=pdcpRatioSILcId, cellAdjCdma2000FreqArfcn=cellAdjCdma2000FreqArfcn, macSRBTbDLRank7=macSRBTbDLRank7, plsfn9Prb88RIPAvg=plsfn9Prb88RIPAvg, nbrschetimesdlMcs27=nbrschetimesdlMcs27, pdcpVideoReserver1VideoActive=pdcpVideoReserver1VideoActive, hsdpaCellSelectEntry=hsdpaCellSelectEntry, vlanConfigNtHpIpAddress=vlanConfigNtHpIpAddress, plsfn5Prb69RIPAvg=plsfn5Prb69RIPAvg, macDownlinkMuMiMoMcsBackoff23=macDownlinkMuMiMoMcsBackoff23, mrMrsPeriod=mrMrsPeriod, sjm1SyncDlRxPowerTh=sjm1SyncDlRxPowerTh, raLcId=raLcId, eventA6Entry=eventA6Entry, drbPdcpSduTotalNumberDlQci7=drbPdcpSduTotalNumberDlQci7, calcellCalRepeatPeriod=calcellCalRepeatPeriod, softLicenseEntry=softLicenseEntry, schedulingRequestTable=schedulingRequestTable, mroRowStatus=mroRowStatus, pdcpDlAirSduSendTotalNumberQci8=pdcpDlAirSduSendTotalNumberQci8, plsfn5Prb11RIPAvg=plsfn5Prb11RIPAvg, rlcPreset40=rlcPreset40, plsfn5Prb20RIPAvg=plsfn5Prb20RIPAvg, macDownlinkEffTm9Pre=macDownlinkEffTm9Pre, hoOutPrepFailCauseHOPrepFailureMsg=hoOutPrepFailCauseHOPrepFailureMsg, emHumidityLowerLimit=emHumidityLowerLimit, pdcpIPThroughputUlQci2=pdcpIPThroughputUlQci2, erabNbrReqRelEnbByHOQCI4=erabNbrReqRelEnbByHOQCI4, nbrschetimesulMcs15=nbrschetimesulMcs15, pmTaskCollectInterval=pmTaskCollectInterval, erabEstabInitFailNbrQci1RadioInterfaceFailure=erabEstabInitFailNbrQci1RadioInterfaceFailure, srsBandWidthEdge=srsBandWidthEdge, contextAttRelMMENbrCongestion=contextAttRelMMENbrCongestion, netLocalCellComponentEntry=netLocalCellComponentEntry, anteTable=anteTable, erabRelEnbNbrRadioInterfaceFailure=erabRelEnbNbrRadioInterfaceFailure, icicMacSemiStaticConfM2=icicMacSemiStaticConfM2, opFuncTable=opFuncTable, reservedCmdString=reservedCmdString, trafficCategory=trafficCategory, plsfn1Prb47RIPAvg=plsfn1Prb47RIPAvg, macDownlinkMuMiMoMcsBackoff26=macDownlinkMuMiMoMcsBackoff26, phrRowStatus=phrRowStatus, macTestSwitchInfoInitULMaxPrbNumFlag=macTestSwitchInfoInitULMaxPrbNumFlag, plsfn7Prb06RIPAvg=plsfn7Prb06RIPAvg, atuByIpAddr8=atuByIpAddr8, sscLicense=sscLicense, baseBandwidthEngagedState=baseBandwidthEngagedState, hlTestSwitchSrsSubfrmCfg=hlTestSwitchSrsSubfrmCfg, alarmNotificationNode=alarmNotificationNode, ethernetOAMLoopbackCounts=ethernetOAMLoopbackCounts, ipPathTable=ipPathTable, mrQCI1PLRDLCorrection=mrQCI1PLRDLCorrection, ethernetOAMPhyPortId=ethernetOAMPhyPortId, erabEstabAddSuccNbrQci9=erabEstabAddSuccNbrQci9, ofpPortModuleM625um10MLen=ofpPortModuleM625um10MLen, atuGoldUeIMSI28=atuGoldUeIMSI28, fcPdschPCStep=fcPdschPCStep, fcUlpcForgettingFactorforMean=fcUlpcForgettingFactorforMean, mrQCI5PLRULCorrection=mrQCI5PLRULCorrection, rruJRUsrNonGBR=rruJRUsrNonGBR, invIocIndex=invIocIndex, cellGeranFreqVariableBitMapOfArfcns5=cellGeranFreqVariableBitMapOfArfcns5, erabEstabInitAttNbrQci7=erabEstabInitAttNbrQci7, cellCompanyVideoKuaishouVideoNum=cellCompanyVideoKuaishouVideoNum, raeGeneralInfo=raeGeneralInfo, lcAcSwitch=lcAcSwitch, macSwitchInfoUeInactivePeriodOffset=macSwitchInfoUeInactivePeriodOffset, lcAcBarTimeForMoc3=lcAcBarTimeForMoc3, fileDeleteFileTrigger=fileDeleteFileTrigger, topoRHUBGsmCellOutputPwr=topoRHUBGsmCellOutputPwr, plsfn9Prb04RIPAvg=plsfn9Prb04RIPAvg, raeBeamBandHorizonBandNums=raeBeamBandHorizonBandNums, plsfn2Prb27RIPAvg=plsfn2Prb27RIPAvg, hsupaTfrcAlgorithmNode=hsupaTfrcAlgorithmNode, plsfn0Prb08RIPAvg=plsfn0Prb08RIPAvg, pdcpDlAirSduSendTotalNumberQci3=pdcpDlAirSduSendTotalNumberQci3, hoFailPrepOutIntraFreqX2NoRsp=hoFailPrepOutIntraFreqX2NoRsp, a3TrigQuantity=a3TrigQuantity, netRHUBRowStatus=netRHUBRowStatus, macschecceusedratiosfn5=macschecceusedratiosfn5, holbcProcInterEnbLcId=holbcProcInterEnbLcId, phyULMeanNLPRB57=phyULMeanNLPRB57, atuHarqMaxDlTx=atuHarqMaxDlTx, sfn1avgripRowStatus=sfn1avgripRowStatus, lcMinDlPower=lcMinDlPower, pdcpVideoReserver18VideoActive=pdcpVideoReserver18VideoActive, tdsConfigurationPerformance=tdsConfigurationPerformance, hoSuccPrepOutIntraFreqS1=hoSuccPrepOutIntraFreqS1, eNBEnergyConservStartTimeHour=eNBEnergyConservStartTimeHour, iubSCTPStatOutLossRateLongThreshold=iubSCTPStatOutLossRateLongThreshold, cacUlGbrPrbTh=cacUlGbrPrbTh, cellAdjCellIndividualOffset=cellAdjCellIndividualOffset, phyULMaxNLPRB65=phyULMaxNLPRB65, procCoreRackNo=procCoreRackNo, tdsLcConfigTrigger=tdsLcConfigTrigger, pathNb2RncPcr=pathNb2RncPcr, rrcSuccConnEstabEmergency=rrcSuccConnEstabEmergency, hoFailPrepOutIntraFreqS1Fail=hoFailPrepOutIntraFreqS1Fail, erabNbrMeanEstabQci8=erabNbrMeanEstabQci8, mroA5Th2BaseLowTh=mroA5Th2BaseLowTh, erabInterWithHandOverRowStatus=erabInterWithHandOverRowStatus, drbEntry=drbEntry, rrcSuccConnReconfigRabDelete=rrcSuccConnReconfigRabDelete, fcEntry=fcEntry, rruPathTdsRxStatus=rruPathTdsRxStatus, cacPrbThFlag=cacPrbThFlag, sfn9avgripEntry=sfn9avgripEntry, macPhrIndex0=macPhrIndex0, pdcpUpPktLossRateDlQci6Enb=pdcpUpPktLossRateDlQci6Enb, hoAbnormalIntraCellEntry=hoAbnormalIntraCellEntry, alarmBoxMStatus=alarmBoxMStatus, retAntMinimumSupportedElectricalTilt=retAntMinimumSupportedElectricalTilt, rrcConnReleaseRedirectionTo2GLoadBalance=rrcConnReleaseRedirectionTo2GLoadBalance, adjCellECGIEntry=adjCellECGIEntry, rrcPreset10=rrcPreset10, plsfn0Prb62RIPAvg=plsfn0Prb62RIPAvg, softLicenseUlBucketT=softLicenseUlBucketT, configFileSaveName=configFileSaveName, s1FailSetupNbrTransferSyntaxError=s1FailSetupNbrTransferSyntaxError, nbrscheprbulMcs8=nbrscheprbulMcs8, topoRRUAntCombinGrpNo=topoRRUAntCombinGrpNo, plsfn4Prb85RIPAvg=plsfn4Prb85RIPAvg, erabRelActNbrQci8=erabRelActNbrQci8, plRssiAvgC8=plRssiAvgC8, macDownlinkMuMiMoMcsBackoff19=macDownlinkMuMiMoMcsBackoff19, caBoProportionAdjustStep=caBoProportionAdjustStep, macBbuSourceRowStatus=macBbuSourceRowStatus, erabActiveMaxNbrDLQci4=erabActiveMaxNbrDLQci4, phyRruMaxTxPower=phyRruMaxTxPower, plsfn0Prb38RIPAvg=plsfn0Prb38RIPAvg, csirsZeropowerConfig=csirsZeropowerConfig, emEquipmentModel=emEquipmentModel, pdcpPreset6=pdcpPreset6, srLargePeriodicityTh=srLargePeriodicityTh, invRhubEntry=invRhubEntry, boardResetTrigger=boardResetTrigger, cellPcfichPower=cellPcfichPower, macPresetPerformanceTable=macPresetPerformanceTable, sfn8avgripEntry=sfn8avgripEntry, contextAttRelMMENbrTransport=contextAttRelMMENbrTransport, hlTestSwitcErabTimeDelayRatio=hlTestSwitcErabTimeDelayRatio, macDownlinkDlAntSelectThresCqiLow=macDownlinkDlAntSelectThresCqiLow, phyCfgSpeedDetectLowTimes=phyCfgSpeedDetectLowTimes, chacPrbThTimeToTrig=chacPrbThTimeToTrig, videoDlBucketSizeDuration=videoDlBucketSizeDuration, plsfn9Prb95RIPAvg=plsfn9Prb95RIPAvg, dlCompEntry=dlCompEntry, hoSuccOutPrepInterEnbX2IntraFreqQci2=hoSuccOutPrepInterEnbX2IntraFreqQci2, drxQciOnDurationTimer=drxQciOnDurationTimer, macNbrTbDlMassiveMimoSM9=macNbrTbDlMassiveMimoSM9, transactionResultNotifications=transactionResultNotifications, dlCAPwrDelta1Bf2Sfbc=dlCAPwrDelta1Bf2Sfbc, extendDrbDlLoPriority=extendDrbDlLoPriority, cellSelectLcId=cellSelectLcId, plReceivePowerUserIndex16=plReceivePowerUserIndex16, b2MeasPurpose=b2MeasPurpose, phyCfgPucchDataSrStubPeriod=phyCfgPucchDataSrStubPeriod, a1TrigQuantity=a1TrigQuantity, cellAcProbFactorForSignal=cellAcProbFactorForSignal, cellAdjGeranCellRacFlag=cellAdjGeranCellRacFlag, rrcFailConnReconfigTerminalNoRsp=rrcFailConnReconfigTerminalNoRsp, hsupaSpsSchedTimer16QAM=hsupaSpsSchedTimer16QAM, plsfn1Prb28RIPAvg=plsfn1Prb28RIPAvg, plRiaCharactSeqCheckPerNum=plRiaCharactSeqCheckPerNum, hsupaQosQueWeightXBitmap=hsupaQosQueWeightXBitmap, plsfn2Prb56RIPAvg=plsfn2Prb56RIPAvg, plsfn5Prb32RIPAvg=plsfn5Prb32RIPAvg, activeAlarmReportType=activeAlarmReportType, plPreamblePwrHighNum=plPreamblePwrHighNum, eueMeasCellsfHigh=eueMeasCellsfHigh, carrierTs1ISCPInfo=carrierTs1ISCPInfo, lcGrpCarrierNum=lcGrpCarrierNum, plsfn0Prb51RIPAvg=plsfn0Prb51RIPAvg, pdcpVideoRBMaxNum=pdcpVideoRBMaxNum, dlCAPwrCceUsageTh2Low=dlCAPwrCceUsageTh2Low, topoRRULocalOscillationFreq2=topoRRULocalOscillationFreq2, cacPositionAoAStartTreshhold=cacPositionAoAStartTreshhold, reservedENBL1Para4=reservedENBL1Para4, phyULMeanNLPRB83=phyULMeanNLPRB83, cellAdjUtraTddCellRncId=cellAdjUtraTddCellRncId, nbrschetimesdlMcs19=nbrschetimesdlMcs19, logFileConfigurationEntry=logFileConfigurationEntry, saalConnNb2RncCdvt=saalConnNb2RncCdvt)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", erabNbrReqRelEnbByHOQCI3=erabNbrReqRelEnbByHOQCI3, spsOptmzAmrcRlcSegThr1=spsOptmzAmrcRlcSegThr1, loggedMdtCellIndex=loggedMdtCellIndex, anteCodeBookSubsetRestrictHigh=anteCodeBookSubsetRestrictHigh, atuByIpAddr2=atuByIpAddr2, rrcCAConfigNbrPCellDl2CCTF=rrcCAConfigNbrPCellDl2CCTF, alarmCauseStatefulClearDeditheringInterval=alarmCauseStatefulClearDeditheringInterval, extendDrbSecondaryMode=extendDrbSecondaryMode, netRHUBNo=netRHUBNo, drbMinbr=drbMinbr, baseBandwidthOperationalState=baseBandwidthOperationalState, hsupaCongestCtrlDeCongTh=hsupaCongestCtrlDeCongTh, drbNbrScheTimesSfn5=drbNbrScheTimesSfn5, macPresetPerformanceEntry=macPresetPerformanceEntry, plsfn4Prb59RIPAvg=plsfn4Prb59RIPAvg, plsfn4Prb16RIPAvg=plsfn4Prb16RIPAvg, eNBCarrierShutdownHighThreshold=eNBCarrierShutdownHighThreshold, x2OutNbrOctets=x2OutNbrOctets, raeWeightingFactorsPhase5=raeWeightingFactorsPhase5, amrUlVoipPacketWb6=amrUlVoipPacketWb6, mrEndTime2=mrEndTime2, vlanConfigRowStatus=vlanConfigRowStatus, cellReselIntraFreqIntraSearchFlag=cellReselIntraFreqIntraSearchFlag, cellAntWeightAmplitude3=cellAntWeightAmplitude3, eventSynchronizationNEID=eventSynchronizationNEID, topoRRUBandCapCarrierEnd=topoRRUBandCapCarrierEnd, ppHcPunishStep=ppHcPunishStep, phyCfgBFAngleNum=phyCfgBFAngleNum, saalTmrNoResponseVal=saalTmrNoResponseVal, euePeriodRptType=euePeriodRptType, hoFailPrepIncInterFreqS1ParameterError=hoFailPrepIncInterFreqS1ParameterError, macNbrTbDlMassiveMimoSM12=macNbrTbDlMassiveMimoSM12, cellMaxTransPwr=cellMaxTransPwr, contextFailInitalSetupNbrRadioInterfaceFail=contextFailInitalSetupNbrRadioInterfaceFail, atuGoldUeIMSI10=atuGoldUeIMSI10, plsfn6Prb96RIPAvg=plsfn6Prb96RIPAvg, ulPwrP0uePucch=ulPwrP0uePucch, erabEstabAddFailNbrControlProcessingOverload=erabEstabAddFailNbrControlProcessingOverload, b2Threshold2RscpUtra=b2Threshold2RscpUtra, macPhrIndex61=macPhrIndex61, hsdpaSpi3Weight=hsdpaSpi3Weight, plRiaCharactSeqID=plRiaCharactSeqID, macNbrErrTbUlMassiveMimoSM5=macNbrErrTbUlMassiveMimoSM5, plsfn9Prb89RIPAvg=plsfn9Prb89RIPAvg, pdcpThrpTimeDLQci3=pdcpThrpTimeDLQci3, rrcAttConnReconfigRabSetup=rrcAttConnReconfigRabSetup, interRatSrvccTag=interRatSrvccTag, hsupaPFTable=hsupaPFTable, macOctUlMassiveMimoSM8=macOctUlMassiveMimoSM8, invRruDateOfLastService=invRruDateOfLastService, peripheralFileTable=peripheralFileTable, plReportUeId=plReportUeId, routeRelationEntry=routeRelationEntry, contextFailInitalSetupNbrCPOverload=contextFailInitalSetupNbrCPOverload, erabRelEnbNbrUELostRlc=erabRelEnbNbrUELostRlc, pathVci=pathVci, fcDTXPowerGap=fcDTXPowerGap, phyULMaxNLPRB66=phyULMaxNLPRB66, fcCarrierSlotNoUserIscpMaxThresholdOffset=fcCarrierSlotNoUserIscpMaxThresholdOffset, phyULMeanNLPRB02=phyULMeanNLPRB02, pdcpPreset2=pdcpPreset2, caScellActiveAlgoPeriod=caScellActiveAlgoPeriod, hlTestSwitchUeLostTag=hlTestSwitchUeLostTag, pathPortId=pathPortId, hoCancelInterFreqInterEnbS1HandOverFail=hoCancelInterFreqInterEnbS1HandOverFail, lcAntArrayMode=lcAntArrayMode, erabNbrMeanEstabQci9=erabNbrMeanEstabQci9, eNBIotAlarmPRBnum=eNBIotAlarmPRBnum, apX2apRelP2=apX2apRelP2, erabActiveMaxNbrULQci4=erabActiveMaxNbrULQci4, cqiTm8PmiRiReport=cqiTm8PmiRiReport, boardEntry=boardEntry, rrcFailConnReconfigTpc=rrcFailConnReconfigTpc, remoteClkOpticalModuleCurrent=remoteClkOpticalModuleCurrent, hoSuccIncIntraCell=hoSuccIncIntraCell, managerIndex=managerIndex, atuGoldVoiceTendcellFreq=atuGoldVoiceTendcellFreq, cellAntWeightAmplitude19=cellAntWeightAmplitude19, plThroughputCapacityULRowStatus=plThroughputCapacityULRowStatus, ueAccNumTable=ueAccNumTable, baseBandwidthTable=baseBandwidthTable, rhubOptTransrhubNo=rhubOptTransrhubNo, netEthPortRowStatus=netEthPortRowStatus, topoRHUBAccessShelfNo=topoRHUBAccessShelfNo, mibAuthorizationRowStatus=mibAuthorizationRowStatus, localCarrierStatusCheckTrigger=localCarrierStatusCheckTrigger, fcHichAckNackOffset=fcHichAckNackOffset, macDownlinkEffTm93=macDownlinkEffTm93, resChkHlGlobalTestSwitchCheckPeriod=resChkHlGlobalTestSwitchCheckPeriod, cacEntry=cacEntry, hoFailPrepIncInterFreqIntraEnbDrbID=hoFailPrepIncInterFreqIntraEnbDrbID, cellUtraFreqQRxLevMin=cellUtraFreqQRxLevMin, plsfn8PrbG13RIPMax=plsfn8PrbG13RIPMax, hoAdjCellDiscvNum=hoAdjCellDiscvNum, rrcReduceIotUPNum=rrcReduceIotUPNum, macPhrIndex37=macPhrIndex37, netLcAntCombinationFlag=netLcAntCombinationFlag, hoSuccIncFddTddS1=hoSuccIncFddTddS1, interRatPsHandleNetwork=interRatPsHandleNetwork, ccDeltaDownThreshold=ccDeltaDownThreshold, multiBandEnhanceSwitch=multiBandEnhanceSwitch, phyNbrCqi9=phyNbrCqi9, csirsPc=csirsPc, cellPchPower=cellPchPower, drbPdcpSduTotalNumberDlQci1=drbPdcpSduTotalNumberDlQci1, hoFailPrepIncIntraFreqS1CellBlock=hoFailPrepIncIntraFreqS1CellBlock, plsfn6Prb02RIPAvg=plsfn6Prb02RIPAvg, topoSetRRUPortSubtoAntGrpID4=topoSetRRUPortSubtoAntGrpID4, cellCompStatisticEntry=cellCompStatisticEntry, lbcAdjCellUlHardwardTh3=lbcAdjCellUlHardwardTh3, cellCounterCheckErrorThresh=cellCounterCheckErrorThresh, phyULMaxNLPRB04=phyULMaxNLPRB04, hoFailPrepIncInterFreqS1Srs=hoFailPrepIncInterFreqS1Srs, resChkHlGlobalTestUeTimeOut=resChkHlGlobalTestUeTimeOut, e1LinkTable=e1LinkTable, plsfn0Prb94RIPAvg=plsfn0Prb94RIPAvg, cellRelation=cellRelation, plsfn7Prb53RIPAvg=plsfn7Prb53RIPAvg, irathoAvgTimeOutExecGeran=irathoAvgTimeOutExecGeran, mdtDataAnonymization=mdtDataAnonymization, a4MeasAlgoType=a4MeasAlgoType, drbBurstDataThpULQci2=drbBurstDataThpULQci2, spsOptmzDlSpsUserNum=spsOptmzDlSpsUserNum, tbNbrUlErr=tbNbrUlErr, nbrschetimesulMcs16=nbrschetimesulMcs16, eNBTimerInfo=eNBTimerInfo, cellSharingNetParaEntry=cellSharingNetParaEntry, softwarePackCustomerPlanTable=softwarePackCustomerPlanTable, s1hoCancelProcInterEnbEntry=s1hoCancelProcInterEnbEntry, sysS1CreateMode=sysS1CreateMode, erabEstabAttNbrQci253=erabEstabAttNbrQci253, e1CRCErrorAlarmClearThreshold=e1CRCErrorAlarmClearThreshold, hoFailPrepIncInterFreqX2Others=hoFailPrepIncInterFreqX2Others, phyULMeanNLPRB94=phyULMeanNLPRB94, performanceManagement=performanceManagement, pucchCellSpsAckPucchNum=pucchCellSpsAckPucchNum, erabNbrMeanEstabQci3=erabNbrMeanEstabQci3, cellAdjUtraFddCellRowStatus=cellAdjUtraFddCellRowStatus, hsdpaHarqRv64Qam1=hsdpaHarqRv64Qam1, macSwitchInfoCclrPercent=macSwitchInfoCclrPercent, plsfn7Prb94RIPAvg=plsfn7Prb94RIPAvg, erabRelMmeNbrUELost=erabRelMmeNbrUELost, radioBandRRUNo=radioBandRRUNo, fcPresyncSubFrame=fcPresyncSubFrame, rruCompCsDlNonGBR=rruCompCsDlNonGBR, sysUpShiftSwitch=sysUpShiftSwitch, cellReselIntraFreqLcId=cellReselIntraFreqLcId, sntpLastSynchronizedTime=sntpLastSynchronizedTime, macTestSwitchVolteAnsweredLimitMcsSwitch=macTestSwitchVolteAnsweredLimitMcsSwitch, plsfn5Prb24RIPAvg=plsfn5Prb24RIPAvg, macUpAlgorithmRecvPowerMaxPerPrbNei=macUpAlgorithmRecvPowerMaxPerPrbNei, plsfn3Prb82RIPAvg=plsfn3Prb82RIPAvg, pmExpValueRowStatus=pmExpValueRowStatus, macHarqRetxRatioTable=macHarqRetxRatioTable, ruePdcpSduBitLenUlQci251=ruePdcpSduBitLenUlQci251, icicMacStaticConfM1=icicMacStaticConfM1, packNBUpgradeCtrlSwitch=packNBUpgradeCtrlSwitch, tdsLcCellExpectedCarrierNum=tdsLcCellExpectedCarrierNum, phyCfgCrsStepupPeriod=phyCfgCrsStepupPeriod, erabRelEnbNbrReEstabFail=erabRelEnbNbrReEstabFail, rrcConnReEstabProcEntry=rrcConnReEstabProcEntry, plADIDetectRatio=plADIDetectRatio, topoSetRRUPortTDCarrierStart=topoSetRRUPortTDCarrierStart, hcLowSpeedUeShiftType=hcLowSpeedUeShiftType, ipoaChRnc2NbPcr=ipoaChRnc2NbPcr, erabInitEstabTimeEntry=erabInitEstabTimeEntry, phyCfgIotNotSmartAlarmPartLowRate=phyCfgIotNotSmartAlarmPartLowRate, boardFpgaFrameType=boardFpgaFrameType, nbrschetimesdlMcs17=nbrschetimesdlMcs17, measVolteDelInterRatMeasNum=measVolteDelInterRatMeasNum, raePortInfoTable=raePortInfoTable, antWeightFrequencyBand=antWeightFrequencyBand, massiveMIMOEntry=massiveMIMOEntry, fcNotiCellId=fcNotiCellId, cellLccDlLoadValue=cellLccDlLoadValue, pdcpPresetPerformanceRowStatus=pdcpPresetPerformanceRowStatus, macUpAlgorithmUlQCI1FirstBler=macUpAlgorithmUlQCI1FirstBler, periodCalibrationEntry=periodCalibrationEntry, cellGeranFreqExplicitArfcns18=cellGeranFreqExplicitArfcns18, erabRelMmeNbrRedirectionTowards1xRTT=erabRelMmeNbrRedirectionTowards1xRTT, ethPortUlRate=ethPortUlRate, phyTA7=phyTA7, cellSharingNetParaTable=cellSharingNetParaTable, raeWeightingFactorsAmplitude0=raeWeightingFactorsAmplitude0, cellPdcchCo8CceOtherFormatPower=cellPdcchCo8CceOtherFormatPower, sctpStreamEntry=sctpStreamEntry, plReceivePowerIndex2=plReceivePowerIndex2, airConditioner=airConditioner, raEntry=raEntry, ipPathSetupStatus=ipPathSetupStatus, hsupaCongestCtrlWinLength=hsupaCongestCtrlWinLength, srLcId=srLcId, phyULMeanNLPRB97=phyULMeanNLPRB97, fileTransIDInfo=fileTransIDInfo, mbmssfnFlag=mbmssfnFlag, ueAdaptiveRowStatus=ueAdaptiveRowStatus, cellAcBarList3ForOrigiCalls=cellAcBarList3ForOrigiCalls, sjm1WinPwrAcdThFactor=sjm1WinPwrAcdThFactor, phyULMeanNLPRB59=phyULMeanNLPRB59, cellBlockTime=cellBlockTime, hsdpaAlgorithmLcId=hsdpaAlgorithmLcId, srVolteMaxPeriodicity=srVolteMaxPeriodicity, drxQciLcId=drxQciLcId, reservedENBL3Para4=reservedENBL3Para4, macGlobalTestSwitchInfo=macGlobalTestSwitchInfo, erabEstabAddSuccNbrQci8=erabEstabAddSuccNbrQci8, topoRRUMainOfpNo=topoRRUMainOfpNo, ulPwrDeltaFPUCCHFormat3R10=ulPwrDeltaFPUCCHFormat3R10, plsfn3Prb25RIPAvg=plsfn3Prb25RIPAvg, reservedENBL2Para4=reservedENBL2Para4, interRatCsfbHandlePattern=interRatCsfbHandlePattern, macBbuSourceLcId=macBbuSourceLcId, emTemperatureLocation=emTemperatureLocation, imaGrpRxTrlPhyLink=imaGrpRxTrlPhyLink, drbPdcpCfgId=drbPdcpCfgId, macDlMassiveMimoPair02=macDlMassiveMimoPair02, hoFailPrepIncIntraFreqX2Pucch=hoFailPrepIncIntraFreqX2Pucch, puschEnable64QAM=puschEnable64QAM, commTrapManangement=commTrapManangement, peripheralPackPlanUpgradeResult8=peripheralPackPlanUpgradeResult8, activeAlarmCauseNo=activeAlarmCauseNo, mroNotiNEID=mroNotiNEID, rrcEffectiveConnMean=rrcEffectiveConnMean, mrServerInetAddr=mrServerInetAddr, ulPwrAccumulationEnabled=ulPwrAccumulationEnabled, InetAddressType=InetAddressType, macTestSwitchSrbDlScheNumSub1=macTestSwitchSrbDlScheNumSub1, phyULMaxNLPRB96=phyULMaxNLPRB96, topoSetRRUPortNo=topoSetRRUPortNo, mroTooLateHoNumTh=mroTooLateHoNumTh, netBoardRowStatus=netBoardRowStatus, cpuMidLoadTh=cpuMidLoadTh, nbrscheprbdlMcs28=nbrscheprbdlMcs28, calcellCalRepeatLength=calcellCalRepeatLength, raeBeamBandEntry=raeBeamBandEntry, plsfn9Prb49RIPAvg=plsfn9Prb49RIPAvg, ppHcPunishFreeTimer=ppHcPunishFreeTimer, radioBandBaseBandPortNo=radioBandBaseBandPortNo, amrUlVoipPacketNb3=amrUlVoipPacketNb3, macUpAlgorithmRandomPrbStartScale=macUpAlgorithmRandomPrbStartScale, macUpMuMiMoMcsBackOff27=macUpMuMiMoMcsBackOff27, plsfn2Prb23RIPAvg=plsfn2Prb23RIPAvg, phyULMaxNLPRB73=phyULMaxNLPRB73, cellCompanyVideoReserver5VideoNum=cellCompanyVideoReserver5VideoNum, rrcRecofigInteractWithHoErabFail=rrcRecofigInteractWithHoErabFail, cellInterFreqTable=cellInterFreqTable, hlSctSourceTable=hlSctSourceTable, mroNotiAdjCellId=mroNotiAdjCellId, lmcVoiceNumRestoreTh=lmcVoiceNumRestoreTh, macDlMassiveMimoPair01=macDlMassiveMimoPair01, macUpAlgorithmUlPfScaleMcs=macUpAlgorithmUlPfScaleMcs, hsupaPFLcId=hsupaPFLcId, activeAlarmReportSourceObject=activeAlarmReportSourceObject, coolingFan=coolingFan)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", hoSuccIncInterFreqS1=hoSuccIncInterFreqS1, anrMeasPeriodSwitch=anrMeasPeriodSwitch, timeSlotTypeNeighCell1=timeSlotTypeNeighCell1, plsfn9Prb32RIPAvg=plsfn9Prb32RIPAvg, cellPdcchCo4CceFormat1cPower=cellPdcchCo4CceFormat1cPower, hoHoPreAttQci1=hoHoPreAttQci1, swPackPlanFwActiveIndicator=swPackPlanFwActiveIndicator, hsdpaSpsSchedEntry=hsdpaSpsSchedEntry, omLinkDSCP=omLinkDSCP, efdStartTime=efdStartTime, gfiTimeStamp=gfiTimeStamp, plsfn1Prb52RIPAvg=plsfn1Prb52RIPAvg, rrcFailConnReconfigAmbr=rrcFailConnReconfigAmbr, plsfn9Prb01RIPAvg=plsfn9Prb01RIPAvg, pdcpThrpTimeULQci9=pdcpThrpTimeULQci9, netS1IfMnc=netS1IfMnc, caMcsDeActiveThrUl=caMcsDeActiveThrUl, adjCellECGIUENum=adjCellECGIUENum, interRatPsHandlePattern=interRatPsHandlePattern, phyULMeanNLPRB43=phyULMeanNLPRB43, mrRsrpDropThreshold=mrRsrpDropThreshold, plsfn3Prb61RIPAvg=plsfn3Prb61RIPAvg, rlcPreset17=rlcPreset17, rruTypeRowStatus=rruTypeRowStatus, timeSlotTypeNeighCell20=timeSlotTypeNeighCell20, plsfn5Prb82RIPAvg=plsfn5Prb82RIPAvg, remoteLmtRouteIndex=remoteLmtRouteIndex, phyULMaxNLPRB32=phyULMaxNLPRB32, imaGrpRxTrlLid=imaGrpRxTrlLid, eueTimerT310=eueTimerT310, cellIotNotifications=cellIotNotifications, eueTimerT311=eueTimerT311, cellAntWeightPhase1=cellAntWeightPhase1, plsfn3Prb46RIPAvg=plsfn3Prb46RIPAvg, phyCfgSrsSnrBfThre=phyCfgSrsSnrBfThre, lmcPrbUlCongestionTh=lmcPrbUlCongestionTh, peripheralPackTypeIndex=peripheralPackTypeIndex, tdsNetLcAntArrayMode=tdsNetLcAntArrayMode, icicCenterUeDlPrbSchedPri2=icicCenterUeDlPrbSchedPri2, hoFailPrepIncIntraFreqS1SecurityFailure=hoFailPrepIncIntraFreqS1SecurityFailure, topoRRUBandCapRRUNo=topoRRUBandCapRRUNo, cellGeranFreqExplicitArfcns6=cellGeranFreqExplicitArfcns6, cellGeranFreqVariableBitMapOfArfcns8=cellGeranFreqVariableBitMapOfArfcns8, hsdpaSFCWaitDataThreshold=hsdpaSFCWaitDataThreshold, boardVoltRackNo=boardVoltRackNo, hsupaTfrcOlpcSwitch=hsupaTfrcOlpcSwitch, tbSRBDlErr=tbSRBDlErr, adjeNBMmeGroupId12=adjeNBMmeGroupId12, e1LinkRxImaId=e1LinkRxImaId, cellReselComScalFactorHiMoblity=cellReselComScalFactorHiMoblity, irathoFailPrepOutUtranSyntaxError=irathoFailPrepOutUtranSyntaxError, boardStorageDevSlotNo=boardStorageDevSlotNo, cellAdjCellX2Flag=cellAdjCellX2Flag, rrcCAConfigMaxNbrSCellDl2CC=rrcCAConfigMaxNbrSCellDl2CC, plsfn4Prb38RIPAvg=plsfn4Prb38RIPAvg, pmExpObjectExpressionIndex=pmExpObjectExpressionIndex, plsfn3Prb55RIPAvg=plsfn3Prb55RIPAvg, plsfn8Prb10RIPAvg=plsfn8Prb10RIPAvg, hsupaQosPFA=hsupaQosPFA, plsfn8Prb18RIPAvg=plsfn8Prb18RIPAvg, macSwitchTestInfoUlPrescheTbSizeLimit=macSwitchTestInfoUlPrescheTbSizeLimit, erabNbrHoIncQci1=erabNbrHoIncQci1, macDownlinkTm9MuSuMimoSwitch=macDownlinkTm9MuSuMimoSwitch, geranAdjCellMeasTable=geranAdjCellMeasTable, chacUlPrbTh=chacUlPrbTh, sscEndTime4=sscEndTime4, hlGlobalTestSwitcheNBUeContrlLowThresh=hlGlobalTestSwitcheNBUeContrlLowThresh, spsOptmzModifyTimer=spsOptmzModifyTimer, rrcConnReEstabInterEnbScfailMrReCfg=rrcConnReEstabInterEnbScfailMrReCfg, plsfn0Prb28RIPAvg=plsfn0Prb28RIPAvg, plRipCellSchedSilentPeriod=plRipCellSchedSilentPeriod, cellSelectPmaxFlag=cellSelectPmaxFlag, syslogConsoleSeverity=syslogConsoleSeverity, rhubOptTransRxPower=rhubOptTransRxPower, equipmentSysInfo=equipmentSysInfo, harqMaxDlTx=harqMaxDlTx, pdcpSduDiscTotalDataNumQci2=pdcpSduDiscTotalDataNumQci2, macDownlinkMuMiMoMcsBackoff21=macDownlinkMuMiMoMcsBackoff21, hoPenaltyGeran=hoPenaltyGeran, plsfn7Prb69RIPAvg=plsfn7Prb69RIPAvg, plsfn2Prb58RIPAvg=plsfn2Prb58RIPAvg, smallPacketAlgRowStatus=smallPacketAlgRowStatus, plThroughputDL=plThroughputDL, phyCfgIotScSmartAlarmThresholdL=phyCfgIotScSmartAlarmThresholdL, plRssiAvgC16=plRssiAvgC16, plsfn7Prb27RIPAvg=plsfn7Prb27RIPAvg, nbrscheprbulMcs4=nbrscheprbulMcs4, plsfn3Prb23RIPAvg=plsfn3Prb23RIPAvg, eventSynchronizationTrap=eventSynchronizationTrap, sfn9avgripRowStatus=sfn9avgripRowStatus, sjm1IscpPathThreshold=sjm1IscpPathThreshold, plsfn4Prb74RIPAvg=plsfn4Prb74RIPAvg, cellCdma2000ParaPreRegZoneId1=cellCdma2000ParaPreRegZoneId1, netLocalCellGrpTable=netLocalCellGrpTable, fcCombinationThreshold=fcCombinationThreshold, plsfn8Prb52RIPAvg=plsfn8Prb52RIPAvg, fcPhaseRotateSwitch=fcPhaseRotateSwitch, packActiveControl=packActiveControl, lbcRowStatus=lbcRowStatus, plsfn8Prb65RIPAvg=plsfn8Prb65RIPAvg, raeBeamBandVerticalBandNums=raeBeamBandVerticalBandNums, plsfn3Prb06RIPAvg=plsfn3Prb06RIPAvg, macPhrIndex17=macPhrIndex17, phyULMaxNLPRB10=phyULMaxNLPRB10, pubAlgorithmParaRowStatus=pubAlgorithmParaRowStatus, cpuOverloadControlTag=cpuOverloadControlTag, drbBurstDataThpDLSum=drbBurstDataThpDLSum, phyULMaxNLPRB80=phyULMaxNLPRB80, mdtTaskRowStatus=mdtTaskRowStatus, equipLatitude=equipLatitude, csirsZeropowersubsfnConfig=csirsZeropowersubsfnConfig, fcSichErrorDetectProbability=fcSichErrorDetectProbability, dlCAPwrCceUsageTh2High=dlCAPwrCceUsageTh2High, macTestSwitchQci1ScwSwitch=macTestSwitchQci1ScwSwitch, extendDrbPbr=extendDrbPbr, maintenceStateNode=maintenceStateNode, plRipCellRowStatus=plRipCellRowStatus, lccProcessMethod2=lccProcessMethod2, macDownlinkRowStatus=macDownlinkRowStatus, hsdpaCommSchedRowStatus=hsdpaCommSchedRowStatus, hsdpaCQIResidualBLER=hsdpaCQIResidualBLER, erabHoFailQci2=erabHoFailQci2, contextAttReleNBNbrRedirectionto1xRTT=contextAttReleNBNbrRedirectionto1xRTT, macNbrErrTbDlMassiveMimoSM8=macNbrErrTbDlMassiveMimoSM8, ipPathMaxTxBandwidth=ipPathMaxTxBandwidth, phyULMaxNLPRB36=phyULMaxNLPRB36, hoFailPrepIncInterFreqX2Tpc=hoFailPrepIncInterFreqX2Tpc, cqiNumberStatisticRowStatus=cqiNumberStatisticRowStatus, retAntMode=retAntMode, mlbNotiType=mlbNotiType, encryptAlgorithmEntry=encryptAlgorithmEntry, macDownlinkEffTm73=macDownlinkEffTm73, tdExitStatus=tdExitStatus, cellAdjCellRncIdUtra=cellAdjCellRncIdUtra, activeAlarmAffectNetworkMode=activeAlarmAffectNetworkMode, cellAcBarList1ForVideo=cellAcBarList1ForVideo, rrcSuccConnReconfigRabSetup=rrcSuccConnReconfigRabSetup, configProcNotiNEType=configProcNotiNEType, inventoryManagement=inventoryManagement, plsfn8Prb61RIPAvg=plsfn8Prb61RIPAvg, volteHOAttOutExecInterEnbS1InterFreq=volteHOAttOutExecInterEnbS1InterFreq, macOctUlMassiveMimoSM1=macOctUlMassiveMimoSM1, rrcCpmMeasCaseRelP8=rrcCpmMeasCaseRelP8, plsfn7Prb29RIPAvg=plsfn7Prb29RIPAvg, carrierRuLocalCarrierIndex=carrierRuLocalCarrierIndex, carrierTimeSlotTable=carrierTimeSlotTable, plsfn1Prb53RIPAvg=plsfn1Prb53RIPAvg, recvRlcRowStatus=recvRlcRowStatus, macDownlinkQci6NewPfScale=macDownlinkQci6NewPfScale, geranAdjCellMeasRowStatus=geranAdjCellMeasRowStatus, plsfn2Prb39RIPAvg=plsfn2Prb39RIPAvg, hsdpaSFCBLThresholdLow=hsdpaSFCBLThresholdLow, alterationStatics=alterationStatics, erabInterWithHandOverTable=erabInterWithHandOverTable, timeSlotTypeNeighCell14=timeSlotTypeNeighCell14, a1MeasAlgoType=a1MeasAlgoType, peripheralPackRunningVersion=peripheralPackRunningVersion, hoFailIncInterFreqInterCellIntraEnbSrcNoRsp=hoFailIncInterFreqInterCellIntraEnbSrcNoRsp, carrierRuTable=carrierRuTable, cellPrbInfoEntry=cellPrbInfoEntry, hoFailPrepIncIntraFreqS1LoChID=hoFailPrepIncIntraFreqS1LoChID, topoRRUCPUCheckInterval=topoRRUCPUCheckInterval, cpuOverLoadTh=cpuOverLoadTh, anrMeasRscpTh=anrMeasRscpTh, lcRowStatus=lcRowStatus, topoRRUBandCapLTECarrierNum=topoRRUBandCapLTECarrierNum, tdsSysIscpabnormalthreshold=tdsSysIscpabnormalthreshold, phyULMeanNLPRB08=phyULMeanNLPRB08, erabRelFailNbrUeS1apIdPairError=erabRelFailNbrUeS1apIdPairError, pdcpUpPktLossRateUlQci3Enb=pdcpUpPktLossRateUlQci3Enb, plsfn2Prb92RIPAvg=plsfn2Prb92RIPAvg, cqiTm9format1to1Submode=cqiTm9format1to1Submode, pmExpObjectEntry=pmExpObjectEntry, phyCfgIotSmartAlarmPartHighRate=phyCfgIotSmartAlarmPartHighRate, plsfn3Prb05RIPAvg=plsfn3Prb05RIPAvg, netAntArrayIsRet=netAntArrayIsRet, eNBPathShutdownHighThreshold=eNBPathShutdownHighThreshold, timerIcicHii=timerIcicHii, hoAttIncFddTddX2=hoAttIncFddTddX2, pathConns=pathConns, invRruRealUnitType=invRruRealUnitType, iubOFPortRowStatus=iubOFPortRowStatus, boardTempShelfNo=boardTempShelfNo, invPortRowStatus=invPortRowStatus, invRruDateOfManufacture=invRruDateOfManufacture, drxQciRetransmissionTimerB=drxQciRetransmissionTimerB, topoRRUCPUOccupation=topoRRUCPUOccupation, phyULMeanNLPRB20=phyULMeanNLPRB20, apS1apRelP10=apS1apRelP10, pdcpUpPktLossRateDlQci5Enb=pdcpUpPktLossRateDlQci5Enb, mrQCI5PLRDLThreshold=mrQCI5PLRDLThreshold, macschecceallUl=macschecceallUl, anteInfoDediFlag=anteInfoDediFlag, plsfn4Prb64RIPAvg=plsfn4Prb64RIPAvg, pdcpIPThroughputUlQci8=pdcpIPThroughputUlQci8, pucchEntry=pucchEntry, phyULMaxNLPRB08=phyULMaxNLPRB08, netAntArrayTypeIndex=netAntArrayTypeIndex, mdtSelectUserPercent=mdtSelectUserPercent, transCutOver=transCutOver, macTestSwitchInfoSpsFirstTBSizeSwitch=macTestSwitchInfoSpsFirstTBSizeSwitch, eueTimerT304ForCco=eueTimerT304ForCco, hsdpaCQIMaxRTBSadd=hsdpaCQIMaxRTBSadd, macUpMuMiMoMcsBackOff3=macUpMuMiMoMcsBackOff3, ethernetOAMUnitPerSec=ethernetOAMUnitPerSec, caScellActiveThroughputThrforUl=caScellActiveThroughputThrforUl, nbrschetimesulMcs26=nbrschetimesulMcs26, hsdpaCqiPwrCtrlTable=hsdpaCqiPwrCtrlTable, gsmCellRackNo=gsmCellRackNo, atuSrUserUlPrbLimit=atuSrUserUlPrbLimit, pdcpDlPacketDelayRowStatus=pdcpDlPacketDelayRowStatus, holbcProcInterEnbEntry=holbcProcInterEnbEntry, plsfn9Prb06RIPAvg=plsfn9Prb06RIPAvg, plADICfgEntry=plADICfgEntry, pdcpSduReceivedNbrTable=pdcpSduReceivedNbrTable, cacMaxActiveUeNumPerCell=cacMaxActiveUeNumPerCell, plsfn4Prb75RIPAvg=plsfn4Prb75RIPAvg, ethSlotNo=ethSlotNo, drbPdcpSduBitLenUlQci3=drbPdcpSduBitLenUlQci3, coMPUeNumberEntry=coMPUeNumberEntry, topoRRUOfp2AccessOfpPortNo=topoRRUOfp2AccessOfpPortNo, sntpProtocolVersion=sntpProtocolVersion, caPerformanceTable=caPerformanceTable, pdcpDlAirSduSendTotalNumberQci6=pdcpDlAirSduSendTotalNumberQci6, lcc=lcc, rruCalcPathAIqTxNom=rruCalcPathAIqTxNom, macNbrTbDlQci1=macNbrTbDlQci1, hsdpaSpsSchedNode=hsdpaSpsSchedNode, hsdpaCongestCtrlDetTimerTh=hsdpaCongestCtrlDetTimerTh, macNbrTbDLRank8=macNbrTbDLRank8, hlSctSourceSlotNo=hlSctSourceSlotNo, drbPdcpSduTotalDelayDlQci2=drbPdcpSduTotalDelayDlQci2, userEntry=userEntry, radioBandBaseBandAntNo=radioBandBaseBandAntNo, peripheralPackRunningEntry=peripheralPackRunningEntry, topoRRUBandCapabilityEntry=topoRRUBandCapabilityEntry, cellPhichPower=cellPhichPower, macschecceallsfn8=macschecceallsfn8, erabRelMmeNbrQci1Detech=erabRelMmeNbrQci1Detech, soundingRSTable=soundingRSTable, anteLcId=anteLcId, tbSRBInitUlQpsk=tbSRBInitUlQpsk, phyULMaxNLPRB92=phyULMaxNLPRB92, macPreset39=macPreset39, plsfn3Prb20RIPAvg=plsfn3Prb20RIPAvg, rrcCAndRCheckOfEnb=rrcCAndRCheckOfEnb, macSwitchTestInfoPdcpPktNum=macSwitchTestInfoPdcpPktNum, hoAttOutInterFreq=hoAttOutInterFreq, pdcpUlSduAirDropRatioRowStatus=pdcpUlSduAirDropRatioRowStatus, spsOptmzDlnkPrsstDsThr=spsOptmzDlnkPrsstDsThr, timeSlotTypeNeighCell15=timeSlotTypeNeighCell15, macNbrErrTbDlMassiveMimoSM1=macNbrErrTbDlMassiveMimoSM1, cellInterRatCdma1xRTTSfHigh=cellInterRatCdma1xRTTSfHigh, netLcSdcFuncSwitch=netLcSdcFuncSwitch)
mibBuilder.exportSymbols("DTM-TD-LTE-ENODEB-ENBMIB", cellGeranFreqQRxLevMin=cellGeranFreqQRxLevMin, cacMaxQci1BearNumPerCell=cacMaxQci1BearNumPerCell, plsfn5Prb39RIPAvg=plsfn5Prb39RIPAvg, fileUpState=fileUpState, traceTaskObjectID=traceTaskObjectID, remoteClkModuleManufacturer=remoteClkModuleManufacturer, macDownlinkEff1TableOToN=macDownlinkEff1TableOToN, macUpAlgorithmPmiSwitch=macUpAlgorithmPmiSwitch, carrierRuTs5Info=carrierRuTs5Info, cellCACellLocalId=cellCACellLocalId, securityManagement=securityManagement, pucchRrDeltaShift=pucchRrDeltaShift, icicEdgeUeDlPrbSchedTag=icicEdgeUeDlPrbSchedTag, pdcpUpPktDiscardRateDlQci3Enb=pdcpUpPktDiscardRateDlQci3Enb, cellUtraFreqRowStatus=cellUtraFreqRowStatus, cellEARFCN=cellEARFCN, erabThpTimeUlQci2=erabThpTimeUlQci2, plsfn8Prb16RIPAvg=plsfn8Prb16RIPAvg, baseBandCarrierTxPath2CalFactorI=baseBandCarrierTxPath2CalFactorI, equipSysFunctionId=equipSysFunctionId, contextAttReleNBNbrUELostM1=contextAttReleNBNbrUELostM1, plsfn4Prb96RIPAvg=plsfn4Prb96RIPAvg, hsdpaQosEntry=hsdpaQosEntry, hoAttIncIntraFreqIntraEnb=hoAttIncIntraFreqIntraEnb, atuQRxlevMinCfgSwitch=atuQRxlevMinCfgSwitch, brdIrFrameSelfAdaptSwitch=brdIrFrameSelfAdaptSwitch, eueTimerT320=eueTimerT320, logFileConfigurationMaxNumber=logFileConfigurationMaxNumber, plsfn7Prb07RIPAvg=plsfn7Prb07RIPAvg, phyCfgSRSSamplePerPrb=phyCfgSRSSamplePerPrb, cellQoffset=cellQoffset, cellAntWeightPhase8=cellAntWeightPhase8, macsche2cceratio=macsche2cceratio, localCarrierTTINum=localCarrierTTINum, rbAttEstabQci6=rbAttEstabQci6, userHandoverInfo=userHandoverInfo, fcOlscOnSwitchAttrib=fcOlscOnSwitchAttrib, macTestSwitchInfoUlVoipRetxFlag=macTestSwitchInfoUlVoipRetxFlag, sessiontimeerabQci4=sessiontimeerabQci4, macSwitchTestInfoDlBoSize=macSwitchTestInfoDlBoSize, plsfn1Prb17RIPAvg=plsfn1Prb17RIPAvg, hoOutAttInterFreqLoadBalance=hoOutAttInterFreqLoadBalance, invIocSerialNumber=invIocSerialNumber, phyTA6=phyTA6, ethPortDataStatEthShelfNo=ethPortDataStatEthShelfNo, topoSetRRUCalPinRxNom=topoSetRRUCalPinRxNom, interRatHcTable=interRatHcTable, cellSelectQQualMinOffset=cellSelectQQualMinOffset, netRRURootAlarmState8=netRRURootAlarmState8, phyTA5=phyTA5, sctpDataType=sctpDataType, procStatCPUOccupation=procStatCPUOccupation, srsCycshift0=srsCycshift0, nbrscheprbulMcs1=nbrscheprbulMcs1, sdCfgRowStatus=sdCfgRowStatus, phyULMaxNLPRB69=phyULMaxNLPRB69, cellActiveUeAcStatus=cellActiveUeAcStatus, equipMultiChannelBBUCarrierNum=equipMultiChannelBBUCarrierNum, macTestSwitchInfoUlAmcSwitch=macTestSwitchInfoUlAmcSwitch, cqiCfgTable=cqiCfgTable, macSwitchInfoRowStatus=macSwitchInfoRowStatus, hoFailPrepIncIntraFreqIntraEnbSPS=hoFailPrepIncIntraFreqIntraEnbSPS, macDownlinkQci2InitBler=macDownlinkQci2InitBler, closeDownTimeSlotEndTime=closeDownTimeSlotEndTime, cqiNumberStatisticLcId=cqiNumberStatisticLcId, drbThpTimeDlSum=drbThpTimeDlSum, boardTempLowerThreshold=boardTempLowerThreshold, lmcDlCongestionTh=lmcDlCongestionTh, plsfn4Prb43RIPAvg=plsfn4Prb43RIPAvg, sdZeroSettingNum=sdZeroSettingNum, b2CfgId=b2CfgId, saalAverageRate=saalAverageRate, macTestSwitchInfoUpDownSubFramLimitDownUeNum=macTestSwitchInfoUpDownSubFramLimitDownUeNum, edgeUserStatisticRowStatus=edgeUserStatisticRowStatus, plADILcId=plADILcId, rruLendToPCellPrbTotUlTF=rruLendToPCellPrbTotUlTF, topoRRUCarrier13ULPowerValue=topoRRUCarrier13ULPowerValue, plsfn9Prb25RIPAvg=plsfn9Prb25RIPAvg, plsfn6Prb68RIPAvg=plsfn6Prb68RIPAvg, configFileName=configFileName, softwareFileEntry=softwareFileEntry, closeBaseBandCarSlotNo=closeBaseBandCarSlotNo, plsfn3Prb03RIPAvg=plsfn3Prb03RIPAvg, raRspWindowSize=raRspWindowSize, pathNb2RncCcr=pathNb2RncCcr, linkCommonOperationStatus=linkCommonOperationStatus, ethPortActuralBitRate=ethPortActuralBitRate, cellGeranFreqVariableBitMapOfArfcns14=cellGeranFreqVariableBitMapOfArfcns14, cellAcBarTimeForVideo=cellAcBarTimeForVideo, iubIPPathVlanId=iubIPPathVlanId, rruFddiRecClkMonSwitch=rruFddiRecClkMonSwitch, pdcpBbuSocIndex=pdcpBbuSocIndex, raeGeneralFormatCode=raeGeneralFormatCode, largeCapacityProtect=largeCapacityProtect, macUpAlgorithmQci7NewPfScale=macUpAlgorithmQci7NewPfScale, ccDeltaUpThreshold=ccDeltaUpThreshold, phyCfgIotChanNormalRate=phyCfgIotChanNormalRate, cellOffsetFreq=cellOffsetFreq, plRssiAvgC18=plRssiAvgC18, topoRRUOperationMode=topoRRUOperationMode, hlTestSwitchCommonUserMRDelSwitch=hlTestSwitchCommonUserMRDelSwitch, s1OutNbrOctetsUserPlane=s1OutNbrOctetsUserPlane, rrcConnReEstabFailPucchAllocFail=rrcConnReEstabFailPucchAllocFail, macUpAlgorithmRowStatus=macUpAlgorithmRowStatus, backupVersionTrigger=backupVersionTrigger, mbmsTable=mbmsTable, topoRRUSlaveRecvAntCalPortNo=topoRRUSlaveRecvAntCalPortNo, macDownlinkAlgorithmLcId=macDownlinkAlgorithmLcId, snmpAlarmPDUType=snmpAlarmPDUType, tdsSysBruReportMode=tdsSysBruReportMode, lmcMlbAlgorithmTag=lmcMlbAlgorithmTag, sctpAssoPMDataRowStatus=sctpAssoPMDataRowStatus, nbrscheprbdlMcs7=nbrscheprbdlMcs7, eueTimerT302=eueTimerT302, srvccFailOutGeranCovMme=srvccFailOutGeranCovMme, plsfn2Prb12RIPAvg=plsfn2Prb12RIPAvg, cellSpeCalCfgDwptsTransFlag=cellSpeCalCfgDwptsTransFlag, plsfn7Prb44RIPAvg=plsfn7Prb44RIPAvg, macNbrTbUlMassiveMimoSM2=macNbrTbUlMassiveMimoSM2, cellCompanyVideoYoukuVideoNum=cellCompanyVideoYoukuVideoNum, efdIndex=efdIndex, apCAndRCheckOfCellLcId=apCAndRCheckOfCellLcId, chacActiveUeSuperHighLoadTh=chacActiveUeSuperHighLoadTh, dlCAPwrUePdcchPowerCtrlSwitch=dlCAPwrUePdcchPowerCtrlSwitch, sfn4avgripTable=sfn4avgripTable, ofpPortModuleStandStatus=ofpPortModuleStandStatus, macschetimestotal=macschetimestotal, netLocalCell=netLocalCell, macTestSwitchInfoVoIPOneWayDelay=macTestSwitchInfoVoIPOneWayDelay, macPhrIndex30=macPhrIndex30, e1LinkRxStuffCells=e1LinkRxStuffCells, topoRRUPACurrentTable=topoRRUPACurrentTable, erabEstabInitSuccNbrQci1=erabEstabInitSuccNbrQci1, peripheralPackRowStatus=peripheralPackRowStatus, cellGeranFreqCellReselectionPriority=cellGeranFreqCellReselectionPriority, fcNotiAdjCellPlmnMnc=fcNotiAdjCellPlmnMnc, traceCellTrcNotiMme=traceCellTrcNotiMme, cellAcBarList5ForSigalling=cellAcBarList5ForSigalling, macUpAlgorithmMCS64QAMDiff=macUpAlgorithmMCS64QAMDiff, heatExOuterFanRunTemperature=heatExOuterFanRunTemperature, hoSuccOutInterEnbX2IntraFreqQci2=hoSuccOutInterEnbX2IntraFreqQci2, plsfn7Prb64RIPAvg=plsfn7Prb64RIPAvg, pdcpDlSduAirDropRatioRowStatus=pdcpDlSduAirDropRatioRowStatus, erabAddEstabTimeMax=erabAddEstabTimeMax, plsfn0Prb82RIPAvg=plsfn0Prb82RIPAvg, boardRowStatus=boardRowStatus, cellGeranFreqExplicitArfcns26=cellGeranFreqExplicitArfcns26, phrPerformRowStatus=phrPerformRowStatus, cacMaxActiveUeNumTag=cacMaxActiveUeNumTag, cellPrbAcStatus=cellPrbAcStatus, plsfn0Prb22RIPAvg=plsfn0Prb22RIPAvg, plrssiIndexEntry=plrssiIndexEntry, sndRlcSnFieldLength=sndRlcSnFieldLength, phyULMeanNLPRB07=phyULMeanNLPRB07, rruTypePortSupportFBandTdsCarrierNum=rruTypePortSupportFBandTdsCarrierNum, plsfn7Prb76RIPAvg=plsfn7Prb76RIPAvg, macUpAlgorithmIoTupOffset=macUpAlgorithmIoTupOffset, pdcpBbuSourceRowStatus=pdcpBbuSourceRowStatus, plsfn9Prb90RIPAvg=plsfn9Prb90RIPAvg, transactionResultNotification=transactionResultNotification, sigSctpDataChunkDropDl=sigSctpDataChunkDropDl, fileDeleteConfigFileName=fileDeleteConfigFileName, erabNbrMaxEstabQci7=erabNbrMaxEstabQci7, plsfn2Prb20RIPAvg=plsfn2Prb20RIPAvg, e1LinkRxFilteredCells=e1LinkRxFilteredCells, ulCompFuncTestSwitch=ulCompFuncTestSwitch, cellAdjUtraFddCellPlmnMnc=cellAdjUtraFddCellPlmnMnc, a3Hysteresis=a3Hysteresis, drxQciRetransmissionTimer=drxQciRetransmissionTimer, tdsLcAntennaCalibrationEnable=tdsLcAntennaCalibrationEnable, douAdjcHandOverProcedureTable=douAdjcHandOverProcedureTable, rlcPreset6=rlcPreset6, netAntennaArrayTable=netAntennaArrayTable, sctpPeerIpAddressType=sctpPeerIpAddressType, plsfn7PrbG10RIPMax=plsfn7PrbG10RIPMax, cellSpeCalCfgDwptsMcsLimit=cellSpeCalCfgDwptsMcsLimit)
